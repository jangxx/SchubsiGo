(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports = require('./lib/axios');
},{"./lib/axios":3}],2:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var buildURL = require('./../helpers/buildURL');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (process.env.NODE_ENV !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = require('./../helpers/cookies');

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

}).call(this,require('_process'))

},{"../core/createError":9,"./../core/settle":12,"./../helpers/btoa":16,"./../helpers/buildURL":17,"./../helpers/cookies":19,"./../helpers/isURLSameOrigin":21,"./../helpers/parseHeaders":23,"./../utils":25,"_process":27}],3:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./cancel/Cancel":4,"./cancel/CancelToken":5,"./cancel/isCancel":6,"./core/Axios":7,"./defaults":14,"./helpers/bind":15,"./helpers/spread":24,"./utils":25}],4:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

},{}],5:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

},{"./Cancel":4}],6:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

},{}],7:[function(require,module,exports){
'use strict';

var defaults = require('./../defaults');
var utils = require('./../utils');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

},{"./../defaults":14,"./../utils":25,"./InterceptorManager":8,"./dispatchRequest":10}],8:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":25}],9:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":11}],10:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
var combineURLs = require('./../helpers/combineURLs');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

},{"../cancel/isCancel":6,"../defaults":14,"./../helpers/combineURLs":18,"./../helpers/isAbsoluteURL":20,"./../utils":25,"./transformData":13}],11:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};

},{}],12:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

},{"./createError":9}],13:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

},{"./../utils":25}],14:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this,require('_process'))

},{"./adapters/http":2,"./adapters/xhr":2,"./helpers/normalizeHeaderName":22,"./utils":25,"_process":27}],15:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

},{}],16:[function(require,module,exports){
'use strict';

// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;

},{}],17:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

},{"./../utils":25}],18:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

},{}],19:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);

},{"./../utils":25}],20:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],21:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);

},{"./../utils":25}],22:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

},{"../utils":25}],23:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

},{"./../utils":25}],24:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

},{}],25:[function(require,module,exports){
'use strict';

var bind = require('./helpers/bind');
var isBuffer = require('is-buffer');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};

},{"./helpers/bind":15,"is-buffer":26}],26:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],27:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],28:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":27,"timers":28}],29:[function(require,module,exports){
(function (global,setImmediate){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.10';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    warn &&
    modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.',
      range
    );
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead.",
        el.rawAttrsMap['v-model']
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.',
      el.rawAttrsMap['v-model']
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(
        binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
        'because the latter already expands to a value binding internally',
        el.rawAttrsMap[binding]
      );
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecesarry `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.',
        el.rawAttrsMap['class']
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.',
          el.rawAttrsMap['style']
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being pased as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (!stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag."),
            { start: stack[i].start, end: stack[i].end }
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(
          "Component template should contain exactly one root element. " +
          "If you are using v-if on multiple elements, " +
          "use v-else-if to chain them instead.",
          { start: element.start }
        );
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated
          }, {});
        }
        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(
              "Invalid dynamic argument expression: attribute names cannot contain " +
              "spaces, quotes, <, >, / or =.",
              {
                start: attr.start + attr.name.indexOf("["),
                end: attr.start + attr.name.length
              }
            );
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.',
          { start: element.start }
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end$1;
      }
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.',
              { start: start }
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored."),
              { start: start }
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    {
      if (el.tag === 'template') {
        warn$2(
          "<template> cannot be keyed. Place the key on real elements instead.",
          getRawBindingAttr(el, 'key')
        );
      }
      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2(
            "Do not use v-for index as key on <transition-group> children, " +
            "this is the same as not using keys.",
            getRawBindingAttr(el, 'key'),
            true /* tip */
          );
        }
      }
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(
        ("Invalid v-for expression: " + exp),
        el.rawAttrsMap['v-for']
      );
    }
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if.",
      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored.",
          children[i]
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (slotScope) {
      warn$2(
        "the \"scope\" attribute for scoped slots have been deprecated and " +
        "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
        "can also be used on plain elements in addition to <template> to " +
        "denote scoped slots.",
        el.rawAttrsMap['scope'],
        true
      );
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (el.attrsMap['v-for']) {
      warn$2(
        "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
        "(v-for takes higher priority). Use a wrapper <template> for the " +
        "scoped slot to make it clearer.",
        el.rawAttrsMap['slot-scope'],
        true
      );
    }
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(
              "<template v-slot> can only appear at the root level inside " +
              "the receiving the component",
              el
            );
          }
        }
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        {
          if (!maybeComponent(el)) {
            warn$2(
              "v-slot can only be used on components or <template>.",
              slotBinding$1
            );
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.scopedSlots) {
            warn$2(
              "To avoid scope ambiguity, the default slot should also use " +
              "<template> syntax when there are other named slots.",
              slotBinding$1
            );
          }
        }
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else {
      warn$2(
        "v-slot shorthand syntax requires a slot name.",
        binding
      );
    }
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead.",
        getRawBindingAttr(el, 'key')
      );
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          value.trim().length === 0
        ) {
          warn$2(
            ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
          );
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.',
            list[i]
          );
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + "($event)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ")($event)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(
        "v-once can only be used inside v-for that is keyed. ",
        el.rawAttrsMap['v-once']
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      el.rawAttrsMap['v-for'],
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(
      'Inline-template components must have exactly one child element.',
      { start: el.start }
    );
  }
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1(
              "Error compiling template:\n\n" + (e.msg) + "\n\n" +
              generateCodeFrame(template, e.start, e.end),
              vm
            );
          });
        } else {
          warn$$1(
            "Error compiling template:\n\n" + template + "\n\n" +
            compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
            vm
          );
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
        } else {
          compiled.tips.forEach(function (msg) { return tip(msg, vm); });
        }
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = { msg: msg };
            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }
              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }
            (tip ? tips : errors).push(data);
          };
        }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (!template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile end');
        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"timers":28}],30:[function(require,module,exports){
(function (process){
if (process.env.NODE_ENV === 'production') {
  module.exports = require('./vue.common.prod.js')
} else {
  module.exports = require('./vue.common.dev.js')
}

}).call(this,require('_process'))

},{"./vue.common.dev.js":29,"./vue.common.prod.js":31,"_process":27}],31:[function(require,module,exports){
(function (global,setImmediate){
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
"use strict";var e=Object.freeze({});function t(e){return null==e}function n(e){return null!=e}function r(e){return!0===e}function i(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function o(e){return null!==e&&"object"==typeof e}var a=Object.prototype.toString;function s(e){return"[object Object]"===a.call(e)}function c(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function u(e){return n(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function l(e){return null==e?"":Array.isArray(e)||s(e)&&e.toString===a?JSON.stringify(e,null,2):String(e)}function f(e){var t=parseFloat(e);return isNaN(t)?e:t}function p(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var d=p("slot,component",!0),v=p("key,ref,slot,slot-scope,is");function h(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var m=Object.prototype.hasOwnProperty;function y(e,t){return m.call(e,t)}function g(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var _=/-(\w)/g,b=g(function(e){return e.replace(_,function(e,t){return t?t.toUpperCase():""})}),$=g(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),w=/\B([A-Z])/g,C=g(function(e){return e.replace(w,"-$1").toLowerCase()});var x=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function k(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function A(e,t){for(var n in t)e[n]=t[n];return e}function O(e){for(var t={},n=0;n<e.length;n++)e[n]&&A(t,e[n]);return t}function S(e,t,n){}var T=function(e,t,n){return!1},E=function(e){return e};function N(e,t){if(e===t)return!0;var n=o(e),r=o(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var i=Array.isArray(e),a=Array.isArray(t);if(i&&a)return e.length===t.length&&e.every(function(e,n){return N(e,t[n])});if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||a)return!1;var s=Object.keys(e),c=Object.keys(t);return s.length===c.length&&s.every(function(n){return N(e[n],t[n])})}catch(e){return!1}}function j(e,t){for(var n=0;n<e.length;n++)if(N(e[n],t))return n;return-1}function D(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var L="data-server-rendered",M=["component","directive","filter"],I=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:T,isReservedAttr:T,isUnknownElement:T,getTagNamespace:S,parsePlatformTagName:E,mustUseProp:T,async:!0,_lifecycleHooks:I},P=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function R(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var H=new RegExp("[^"+P.source+".$_\\d]");var B,U="__proto__"in{},z="undefined"!=typeof window,V="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=V&&WXEnvironment.platform.toLowerCase(),J=z&&window.navigator.userAgent.toLowerCase(),q=J&&/msie|trident/.test(J),W=J&&J.indexOf("msie 9.0")>0,Z=J&&J.indexOf("edge/")>0,G=(J&&J.indexOf("android"),J&&/iphone|ipad|ipod|ios/.test(J)||"ios"===K),X=(J&&/chrome\/\d+/.test(J),J&&/phantomjs/.test(J),J&&J.match(/firefox\/(\d+)/)),Y={}.watch,Q=!1;if(z)try{var ee={};Object.defineProperty(ee,"passive",{get:function(){Q=!0}}),window.addEventListener("test-passive",null,ee)}catch(e){}var te=function(){return void 0===B&&(B=!z&&!V&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),B},ne=z&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function re(e){return"function"==typeof e&&/native code/.test(e.toString())}var ie,oe="undefined"!=typeof Symbol&&re(Symbol)&&"undefined"!=typeof Reflect&&re(Reflect.ownKeys);ie="undefined"!=typeof Set&&re(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ae=S,se=0,ce=function(){this.id=se++,this.subs=[]};ce.prototype.addSub=function(e){this.subs.push(e)},ce.prototype.removeSub=function(e){h(this.subs,e)},ce.prototype.depend=function(){ce.target&&ce.target.addDep(this)},ce.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},ce.target=null;var ue=[];function le(e){ue.push(e),ce.target=e}function fe(){ue.pop(),ce.target=ue[ue.length-1]}var pe=function(e,t,n,r,i,o,a,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},de={child:{configurable:!0}};de.child.get=function(){return this.componentInstance},Object.defineProperties(pe.prototype,de);var ve=function(e){void 0===e&&(e="");var t=new pe;return t.text=e,t.isComment=!0,t};function he(e){return new pe(void 0,void 0,void 0,String(e))}function me(e){var t=new pe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var ye=Array.prototype,ge=Object.create(ye);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=ye[e];R(ge,e,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=t.apply(this,n),a=this.__ob__;switch(e){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o})});var _e=Object.getOwnPropertyNames(ge),be=!0;function $e(e){be=e}var we=function(e){var t;this.value=e,this.dep=new ce,this.vmCount=0,R(e,"__ob__",this),Array.isArray(e)?(U?(t=ge,e.__proto__=t):function(e,t,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];R(e,o,t[o])}}(e,ge,_e),this.observeArray(e)):this.walk(e)};function Ce(e,t){var n;if(o(e)&&!(e instanceof pe))return y(e,"__ob__")&&e.__ob__ instanceof we?n=e.__ob__:be&&!te()&&(Array.isArray(e)||s(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new we(e)),t&&n&&n.vmCount++,n}function xe(e,t,n,r,i){var o=new ce,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=e[t]);var u=!i&&Ce(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return ce.target&&(o.depend(),u&&(u.dep.depend(),Array.isArray(t)&&function e(t){for(var n=void 0,r=0,i=t.length;r<i;r++)(n=t[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&e(n)}(t))),t},set:function(t){var r=s?s.call(e):n;t===r||t!=t&&r!=r||s&&!c||(c?c.call(e,t):n=t,u=!i&&Ce(t),o.notify())}})}}function ke(e,t,n){if(Array.isArray(e)&&c(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?n:r?(xe(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function Ae(e,t){if(Array.isArray(e)&&c(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||y(e,t)&&(delete e[t],n&&n.dep.notify())}}we.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)xe(e,t[n])},we.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Ce(e[t])};var Oe=F.optionMergeStrategies;function Se(e,t){if(!t)return e;for(var n,r,i,o=oe?Reflect.ownKeys(t):Object.keys(t),a=0;a<o.length;a++)"__ob__"!==(n=o[a])&&(r=e[n],i=t[n],y(e,n)?r!==i&&s(r)&&s(i)&&Se(r,i):ke(e,n,i));return e}function Te(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,i="function"==typeof e?e.call(n,n):e;return r?Se(r,i):i}:t?e?function(){return Se("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function Ee(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Ne(e,t,n,r){var i=Object.create(e||null);return t?A(i,t):i}Oe.data=function(e,t,n){return n?Te(e,t,n):t&&"function"!=typeof t?e:Te(e,t)},I.forEach(function(e){Oe[e]=Ee}),M.forEach(function(e){Oe[e+"s"]=Ne}),Oe.watch=function(e,t,n,r){if(e===Y&&(e=void 0),t===Y&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var i={};for(var o in A(i,e),t){var a=i[o],s=t[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},Oe.props=Oe.methods=Oe.inject=Oe.computed=function(e,t,n,r){if(!e)return t;var i=Object.create(null);return A(i,e),t&&A(i,t),i},Oe.provide=Te;var je=function(e,t){return void 0===t?e:t};function De(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,i,o={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])&&(o[b(i)]={type:null});else if(s(n))for(var a in n)i=n[a],o[b(a)]=s(i)?i:{type:i};e.props=o}}(t),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(s(n))for(var o in n){var a=n[o];r[o]=s(a)?A({from:o},a):{from:a}}}}(t),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=De(e,t.extends,n)),t.mixins))for(var r=0,i=t.mixins.length;r<i;r++)e=De(e,t.mixins[r],n);var o,a={};for(o in e)c(o);for(o in t)y(e,o)||c(o);function c(r){var i=Oe[r]||je;a[r]=i(e[r],t[r],n,r)}return a}function Le(e,t,n,r){if("string"==typeof n){var i=e[t];if(y(i,n))return i[n];var o=b(n);if(y(i,o))return i[o];var a=$(o);return y(i,a)?i[a]:i[n]||i[o]||i[a]}}function Me(e,t,n,r){var i=t[e],o=!y(n,e),a=n[e],s=Pe(Boolean,i.type);if(s>-1)if(o&&!y(i,"default"))a=!1;else if(""===a||a===C(e)){var c=Pe(String,i.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(e,t,n){if(!y(t,"default"))return;var r=t.default;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof r&&"Function"!==Ie(t.type)?r.call(e):r}(r,i,e);var u=be;$e(!0),Ce(a),$e(u)}return a}function Ie(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Fe(e,t){return Ie(e)===Ie(t)}function Pe(e,t){if(!Array.isArray(t))return Fe(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(Fe(t[n],e))return n;return-1}function Re(e,t,n){le();try{if(t)for(var r=t;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,e,t,n))return}catch(e){Be(e,r,"errorCaptured hook")}}Be(e,t,n)}finally{fe()}}function He(e,t,n,r,i){var o;try{(o=n?e.apply(t,n):e.call(t))&&!o._isVue&&u(o)&&!o._handled&&(o.catch(function(e){return Re(e,r,i+" (Promise/async)")}),o._handled=!0)}catch(e){Re(e,r,i)}return o}function Be(e,t,n){if(F.errorHandler)try{return F.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Ue(t,null,"config.errorHandler")}Ue(e,t,n)}function Ue(e,t,n){if(!z&&!V||"undefined"==typeof console)throw e;console.error(e)}var ze,Ve=!1,Ke=[],Je=!1;function qe(){Je=!1;var e=Ke.slice(0);Ke.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&re(Promise)){var We=Promise.resolve();ze=function(){We.then(qe),G&&setTimeout(S)},Ve=!0}else if(q||"undefined"==typeof MutationObserver||!re(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ze="undefined"!=typeof setImmediate&&re(setImmediate)?function(){setImmediate(qe)}:function(){setTimeout(qe,0)};else{var Ze=1,Ge=new MutationObserver(qe),Xe=document.createTextNode(String(Ze));Ge.observe(Xe,{characterData:!0}),ze=function(){Ze=(Ze+1)%2,Xe.data=String(Ze)},Ve=!0}function Ye(e,t){var n;if(Ke.push(function(){if(e)try{e.call(t)}catch(e){Re(e,t,"nextTick")}else n&&n(t)}),Je||(Je=!0,ze()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}var Qe=new ie;function et(e){!function e(t,n){var r,i;var a=Array.isArray(t);if(!a&&!o(t)||Object.isFrozen(t)||t instanceof pe)return;if(t.__ob__){var s=t.__ob__.dep.id;if(n.has(s))return;n.add(s)}if(a)for(r=t.length;r--;)e(t[r],n);else for(i=Object.keys(t),r=i.length;r--;)e(t[i[r]],n)}(e,Qe),Qe.clear()}var tt=g(function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}});function nt(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return He(r,null,arguments,t,"v-on handler");for(var i=r.slice(),o=0;o<i.length;o++)He(i[o],null,e,t,"v-on handler")}return n.fns=e,n}function rt(e,n,i,o,a,s){var c,u,l,f;for(c in e)u=e[c],l=n[c],f=tt(c),t(u)||(t(l)?(t(u.fns)&&(u=e[c]=nt(u,s)),r(f.once)&&(u=e[c]=a(f.name,u,f.capture)),i(f.name,u,f.capture,f.passive,f.params)):u!==l&&(l.fns=u,e[c]=l));for(c in n)t(e[c])&&o((f=tt(c)).name,n[c],f.capture)}function it(e,i,o){var a;e instanceof pe&&(e=e.data.hook||(e.data.hook={}));var s=e[i];function c(){o.apply(this,arguments),h(a.fns,c)}t(s)?a=nt([c]):n(s.fns)&&r(s.merged)?(a=s).fns.push(c):a=nt([s,c]),a.merged=!0,e[i]=a}function ot(e,t,r,i,o){if(n(t)){if(y(t,r))return e[r]=t[r],o||delete t[r],!0;if(y(t,i))return e[r]=t[i],o||delete t[i],!0}return!1}function at(e){return i(e)?[he(e)]:Array.isArray(e)?function e(o,a){var s=[];var c,u,l,f;for(c=0;c<o.length;c++)t(u=o[c])||"boolean"==typeof u||(l=s.length-1,f=s[l],Array.isArray(u)?u.length>0&&(st((u=e(u,(a||"")+"_"+c))[0])&&st(f)&&(s[l]=he(f.text+u[0].text),u.shift()),s.push.apply(s,u)):i(u)?st(f)?s[l]=he(f.text+u):""!==u&&s.push(he(u)):st(u)&&st(f)?s[l]=he(f.text+u.text):(r(o._isVList)&&n(u.tag)&&t(u.key)&&n(a)&&(u.key="__vlist"+a+"_"+c+"__"),s.push(u)));return s}(e):void 0}function st(e){return n(e)&&n(e.text)&&!1===e.isComment}function ct(e,t){if(e){for(var n=Object.create(null),r=oe?Reflect.ownKeys(e):Object.keys(e),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){for(var a=e[o].from,s=t;s;){if(s._provided&&y(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s&&"default"in e[o]){var c=e[o].default;n[o]="function"==typeof c?c.call(t):c}}}return n}}function ut(e,t){if(!e||!e.length)return{};for(var n={},r=0,i=e.length;r<i;r++){var o=e[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==t&&o.fnContext!==t||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var u in n)n[u].every(lt)&&delete n[u];return n}function lt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function ft(t,n,r){var i,o=Object.keys(n).length>0,a=t?!!t.$stable:!o,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==e&&s===r.$key&&!o&&!r.$hasNormal)return r;for(var c in i={},t)t[c]&&"$"!==c[0]&&(i[c]=pt(n,c,t[c]))}else i={};for(var u in n)u in i||(i[u]=dt(n,u));return t&&Object.isExtensible(t)&&(t._normalized=i),R(i,"$stable",a),R(i,"$key",s),R(i,"$hasNormal",o),i}function pt(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:at(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function dt(e,t){return function(){return e[t]}}function vt(e,t){var r,i,a,s,c;if(Array.isArray(e)||"string"==typeof e)for(r=new Array(e.length),i=0,a=e.length;i<a;i++)r[i]=t(e[i],i);else if("number"==typeof e)for(r=new Array(e),i=0;i<e;i++)r[i]=t(i+1,i);else if(o(e))if(oe&&e[Symbol.iterator]){r=[];for(var u=e[Symbol.iterator](),l=u.next();!l.done;)r.push(t(l.value,r.length)),l=u.next()}else for(s=Object.keys(e),r=new Array(s.length),i=0,a=s.length;i<a;i++)c=s[i],r[i]=t(e[c],c,i);return n(r)||(r=[]),r._isVList=!0,r}function ht(e,t,n,r){var i,o=this.$scopedSlots[e];o?(n=n||{},r&&(n=A(A({},r),n)),i=o(n)||t):i=this.$slots[e]||t;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},i):i}function mt(e){return Le(this.$options,"filters",e)||E}function yt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function gt(e,t,n,r,i){var o=F.keyCodes[t]||n;return i&&r&&!F.keyCodes[t]?yt(i,r):o?yt(o,e):r?C(r)!==t:void 0}function _t(e,t,n,r,i){if(n)if(o(n)){var a;Array.isArray(n)&&(n=O(n));var s=function(o){if("class"===o||"style"===o||v(o))a=e;else{var s=e.attrs&&e.attrs.type;a=r||F.mustUseProp(t,s,o)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=b(o),u=C(o);c in a||u in a||(a[o]=n[o],i&&((e.on||(e.on={}))["update:"+o]=function(e){n[o]=e}))};for(var c in n)s(c)}else;return e}function bt(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t?r:(wt(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r)}function $t(e,t,n){return wt(e,"__once__"+t+(n?"_"+n:""),!0),e}function wt(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&Ct(e[r],t+"_"+r,n);else Ct(e,t,n)}function Ct(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function xt(e,t){if(t)if(s(t)){var n=e.on=e.on?A({},e.on):{};for(var r in t){var i=n[r],o=t[r];n[r]=i?[].concat(i,o):o}}else;return e}function kt(e,t,n,r){t=t||{$stable:!n};for(var i=0;i<e.length;i++){var o=e[i];Array.isArray(o)?kt(o,t,n):o&&(o.proxy&&(o.fn.proxy=!0),t[o.key]=o.fn)}return r&&(t.$key=r),t}function At(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r&&(e[t[n]]=t[n+1])}return e}function Ot(e,t){return"string"==typeof e?t+e:e}function St(e){e._o=$t,e._n=f,e._s=l,e._l=vt,e._t=ht,e._q=N,e._i=j,e._m=bt,e._f=mt,e._k=gt,e._b=_t,e._v=he,e._e=ve,e._u=kt,e._g=xt,e._d=At,e._p=Ot}function Tt(t,n,i,o,a){var s,c=this,u=a.options;y(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var l=r(u._compiled),f=!l;this.data=t,this.props=n,this.children=i,this.parent=o,this.listeners=t.on||e,this.injections=ct(u.inject,o),this.slots=function(){return c.$slots||ft(t.scopedSlots,c.$slots=ut(i,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ft(t.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=ft(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(e,t,n,r){var i=Pt(s,e,t,n,r,f);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(e,t,n,r){return Pt(s,e,t,n,r,f)}}function Et(e,t,n,r,i){var o=me(e);return o.fnContext=n,o.fnOptions=r,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function Nt(e,t){for(var n in t)e[b(n)]=t[n]}St(Tt.prototype);var jt={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var r=e;jt.prepatch(r,r)}else{(e.componentInstance=function(e,t){var r={_isComponent:!0,_parentVnode:e,parent:t},i=e.data.inlineTemplate;n(i)&&(r.render=i.render,r.staticRenderFns=i.staticRenderFns);return new e.componentOptions.Ctor(r)}(e,Wt)).$mount(t?e.elm:void 0,t)}},prepatch:function(t,n){var r=n.componentOptions;!function(t,n,r,i,o){var a=i.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==e&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(o||t.$options._renderChildren||c);t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i);if(t.$options._renderChildren=o,t.$attrs=i.data.attrs||e,t.$listeners=r||e,n&&t.$options.props){$e(!1);for(var l=t._props,f=t.$options._propKeys||[],p=0;p<f.length;p++){var d=f[p],v=t.$options.props;l[d]=Me(d,v,n,t)}$e(!0),t.$options.propsData=n}r=r||e;var h=t.$options._parentListeners;t.$options._parentListeners=r,qt(t,r,h),u&&(t.$slots=ut(o,i.context),t.$forceUpdate())}(n.componentInstance=t.componentInstance,r.propsData,r.listeners,n,r.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,Yt(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,en.push(t)):Xt(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,Gt(t)))return;if(!t._inactive){t._inactive=!0;for(var r=0;r<t.$children.length;r++)e(t.$children[r]);Yt(t,"deactivated")}}(t,!0):t.$destroy())}},Dt=Object.keys(jt);function Lt(i,a,s,c,l){if(!t(i)){var f=s.$options._base;if(o(i)&&(i=f.extend(i)),"function"==typeof i){var p;if(t(i.cid)&&void 0===(i=function(e,i){if(r(e.error)&&n(e.errorComp))return e.errorComp;if(n(e.resolved))return e.resolved;var a=Ht;a&&n(e.owners)&&-1===e.owners.indexOf(a)&&e.owners.push(a);if(r(e.loading)&&n(e.loadingComp))return e.loadingComp;if(a&&!n(e.owners)){var s=e.owners=[a],c=!0,l=null,f=null;a.$on("hook:destroyed",function(){return h(s,a)});var p=function(e){for(var t=0,n=s.length;t<n;t++)s[t].$forceUpdate();e&&(s.length=0,null!==l&&(clearTimeout(l),l=null),null!==f&&(clearTimeout(f),f=null))},d=D(function(t){e.resolved=Bt(t,i),c?s.length=0:p(!0)}),v=D(function(t){n(e.errorComp)&&(e.error=!0,p(!0))}),m=e(d,v);return o(m)&&(u(m)?t(e.resolved)&&m.then(d,v):u(m.component)&&(m.component.then(d,v),n(m.error)&&(e.errorComp=Bt(m.error,i)),n(m.loading)&&(e.loadingComp=Bt(m.loading,i),0===m.delay?e.loading=!0:l=setTimeout(function(){l=null,t(e.resolved)&&t(e.error)&&(e.loading=!0,p(!1))},m.delay||200)),n(m.timeout)&&(f=setTimeout(function(){f=null,t(e.resolved)&&v(null)},m.timeout)))),c=!1,e.loading?e.loadingComp:e.resolved}}(p=i,f)))return function(e,t,n,r,i){var o=ve();return o.asyncFactory=e,o.asyncMeta={data:t,context:n,children:r,tag:i},o}(p,a,s,c,l);a=a||{},$n(i),n(a.model)&&function(e,t){var r=e.model&&e.model.prop||"value",i=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[r]=t.model.value;var o=t.on||(t.on={}),a=o[i],s=t.model.callback;n(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(o[i]=[s].concat(a)):o[i]=s}(i.options,a);var d=function(e,r,i){var o=r.options.props;if(!t(o)){var a={},s=e.attrs,c=e.props;if(n(s)||n(c))for(var u in o){var l=C(u);ot(a,c,u,l,!0)||ot(a,s,u,l,!1)}return a}}(a,i);if(r(i.options.functional))return function(t,r,i,o,a){var s=t.options,c={},u=s.props;if(n(u))for(var l in u)c[l]=Me(l,u,r||e);else n(i.attrs)&&Nt(c,i.attrs),n(i.props)&&Nt(c,i.props);var f=new Tt(i,c,a,o,t),p=s.render.call(null,f._c,f);if(p instanceof pe)return Et(p,i,f.parent,s);if(Array.isArray(p)){for(var d=at(p)||[],v=new Array(d.length),h=0;h<d.length;h++)v[h]=Et(d[h],i,f.parent,s);return v}}(i,d,a,s,c);var v=a.on;if(a.on=a.nativeOn,r(i.options.abstract)){var m=a.slot;a={},m&&(a.slot=m)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Dt.length;n++){var r=Dt[n],i=t[r],o=jt[r];i===o||i&&i._merged||(t[r]=i?Mt(o,i):o)}}(a);var y=i.options.name||l;return new pe("vue-component-"+i.cid+(y?"-"+y:""),a,void 0,void 0,void 0,s,{Ctor:i,propsData:d,listeners:v,tag:l,children:c},p)}}}function Mt(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}var It=1,Ft=2;function Pt(e,a,s,c,u,l){return(Array.isArray(s)||i(s))&&(u=c,c=s,s=void 0),r(l)&&(u=Ft),function(e,i,a,s,c){if(n(a)&&n(a.__ob__))return ve();n(a)&&n(a.is)&&(i=a.is);if(!i)return ve();Array.isArray(s)&&"function"==typeof s[0]&&((a=a||{}).scopedSlots={default:s[0]},s.length=0);c===Ft?s=at(s):c===It&&(s=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(s));var u,l;if("string"==typeof i){var f;l=e.$vnode&&e.$vnode.ns||F.getTagNamespace(i),u=F.isReservedTag(i)?new pe(F.parsePlatformTagName(i),a,s,void 0,void 0,e):a&&a.pre||!n(f=Le(e.$options,"components",i))?new pe(i,a,s,void 0,void 0,e):Lt(f,a,e,s,i)}else u=Lt(i,a,e,s);return Array.isArray(u)?u:n(u)?(n(l)&&function e(i,o,a){i.ns=o;"foreignObject"===i.tag&&(o=void 0,a=!0);if(n(i.children))for(var s=0,c=i.children.length;s<c;s++){var u=i.children[s];n(u.tag)&&(t(u.ns)||r(a)&&"svg"!==u.tag)&&e(u,o,a)}}(u,l),n(a)&&function(e){o(e.style)&&et(e.style);o(e.class)&&et(e.class)}(a),u):ve()}(e,a,s,c,u)}var Rt,Ht=null;function Bt(e,t){return(e.__esModule||oe&&"Module"===e[Symbol.toStringTag])&&(e=e.default),o(e)?t.extend(e):e}function Ut(e){return e.isComment&&e.asyncFactory}function zt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var r=e[t];if(n(r)&&(n(r.componentOptions)||Ut(r)))return r}}function Vt(e,t){Rt.$on(e,t)}function Kt(e,t){Rt.$off(e,t)}function Jt(e,t){var n=Rt;return function r(){null!==t.apply(null,arguments)&&n.$off(e,r)}}function qt(e,t,n){Rt=e,rt(t,n||{},Vt,Kt,Jt,e),Rt=void 0}var Wt=null;function Zt(e){var t=Wt;return Wt=e,function(){Wt=t}}function Gt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Xt(e,t){if(t){if(e._directInactive=!1,Gt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Xt(e.$children[n]);Yt(e,"activated")}}function Yt(e,t){le();var n=e.$options[t],r=t+" hook";if(n)for(var i=0,o=n.length;i<o;i++)He(n[i],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),fe()}var Qt=[],en=[],tn={},nn=!1,rn=!1,on=0;var an=0,sn=Date.now;if(z&&!q){var cn=window.performance;cn&&"function"==typeof cn.now&&sn()>document.createEvent("Event").timeStamp&&(sn=function(){return cn.now()})}function un(){var e,t;for(an=sn(),rn=!0,Qt.sort(function(e,t){return e.id-t.id}),on=0;on<Qt.length;on++)(e=Qt[on]).before&&e.before(),t=e.id,tn[t]=null,e.run();var n=en.slice(),r=Qt.slice();on=Qt.length=en.length=0,tn={},nn=rn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Xt(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Yt(r,"updated")}}(r),ne&&F.devtools&&ne.emit("flush")}var ln=0,fn=function(e,t,n,r,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++ln,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ie,this.newDepIds=new ie,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!H.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=S)),this.value=this.lazy?void 0:this.get()};fn.prototype.get=function(){var e;le(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Re(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&et(e),fe(),this.cleanupDeps()}return e},fn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},fn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},fn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==tn[t]){if(tn[t]=!0,rn){for(var n=Qt.length-1;n>on&&Qt[n].id>e.id;)n--;Qt.splice(n+1,0,e)}else Qt.push(e);nn||(nn=!0,Ye(un))}}(this)},fn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||o(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){Re(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},fn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},fn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},fn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||h(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var pn={enumerable:!0,configurable:!0,get:S,set:S};function dn(e,t,n){pn.get=function(){return this[t][n]},pn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,pn)}function vn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},i=e.$options._propKeys=[];e.$parent&&$e(!1);var o=function(o){i.push(o);var a=Me(o,t,n,e);xe(r,o,a),o in e||dn(e,"_props",o)};for(var a in t)o(a);$e(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?S:x(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;s(t=e._data="function"==typeof t?function(e,t){le();try{return e.call(t,t)}catch(e){return Re(e,t,"data()"),{}}finally{fe()}}(t,e):t||{})||(t={});var n=Object.keys(t),r=e.$options.props,i=(e.$options.methods,n.length);for(;i--;){var o=n[i];r&&y(r,o)||(a=void 0,36!==(a=(o+"").charCodeAt(0))&&95!==a&&dn(e,"_data",o))}var a;Ce(t,!0)}(e):Ce(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=te();for(var i in t){var o=t[i],a="function"==typeof o?o:o.get;r||(n[i]=new fn(e,a||S,S,hn)),i in e||mn(e,i,o)}}(e,t.computed),t.watch&&t.watch!==Y&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)_n(e,n,r[i]);else _n(e,n,r)}}(e,t.watch)}var hn={lazy:!0};function mn(e,t,n){var r=!te();"function"==typeof n?(pn.get=r?yn(t):gn(n),pn.set=S):(pn.get=n.get?r&&!1!==n.cache?yn(t):gn(n.get):S,pn.set=n.set||S),Object.defineProperty(e,t,pn)}function yn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ce.target&&t.depend(),t.value}}function gn(e){return function(){return e.call(this,this)}}function _n(e,t,n,r){return s(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var bn=0;function $n(e){var t=e.options;if(e.super){var n=$n(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var i in n)n[i]!==r[i]&&(t||(t={}),t[i]=n[i]);return t}(e);r&&A(e.extendOptions,r),(t=e.options=De(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function wn(e){this._init(e)}function Cn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,i=e._Ctor||(e._Ctor={});if(i[r])return i[r];var o=e.name||n.options.name,a=function(e){this._init(e)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=t++,a.options=De(n.options,e),a.super=n,a.options.props&&function(e){var t=e.options.props;for(var n in t)dn(e.prototype,"_props",n)}(a),a.options.computed&&function(e){var t=e.options.computed;for(var n in t)mn(e.prototype,n,t[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,M.forEach(function(e){a[e]=n[e]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=A({},a.options),i[r]=a,a}}function xn(e){return e&&(e.Ctor.options.name||e.tag)}function kn(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:(n=e,"[object RegExp]"===a.call(n)&&e.test(t));var n}function An(e,t){var n=e.cache,r=e.keys,i=e._vnode;for(var o in n){var a=n[o];if(a){var s=xn(a.componentOptions);s&&!t(s)&&On(n,o,r,i)}}}function On(e,t,n,r){var i=e[t];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),e[t]=null,h(n,t)}!function(t){t.prototype._init=function(t){var n=this;n._uid=bn++,n._isVue=!0,t&&t._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(n,t):n.$options=De($n(n.constructor),t||{},n),n._renderProxy=n,n._self=n,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&qt(e,t)}(n),function(t){t._vnode=null,t._staticTrees=null;var n=t.$options,r=t.$vnode=n._parentVnode,i=r&&r.context;t.$slots=ut(n._renderChildren,i),t.$scopedSlots=e,t._c=function(e,n,r,i){return Pt(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return Pt(t,e,n,r,i,!0)};var o=r&&r.data;xe(t,"$attrs",o&&o.attrs||e,null,!0),xe(t,"$listeners",n._parentListeners||e,null,!0)}(n),Yt(n,"beforeCreate"),function(e){var t=ct(e.$options.inject,e);t&&($e(!1),Object.keys(t).forEach(function(n){xe(e,n,t[n])}),$e(!0))}(n),vn(n),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(n),Yt(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(wn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=ke,e.prototype.$delete=Ae,e.prototype.$watch=function(e,t,n){if(s(t))return _n(this,e,t,n);(n=n||{}).user=!0;var r=new fn(this,e,t,n);if(n.immediate)try{t.call(this,r.value)}catch(e){Re(e,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(wn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var i=0,o=e.length;i<o;i++)r.$on(e[i],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,i=e.length;r<i;r++)n.$off(e[r],t);return n}var o,a=n._events[e];if(!a)return n;if(!t)return n._events[e]=null,n;for(var s=a.length;s--;)if((o=a[s])===t||o.fn===t){a.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this._events[e];if(t){t=t.length>1?k(t):t;for(var n=k(arguments,1),r='event handler for "'+e+'"',i=0,o=t.length;i<o;i++)He(t[i],this,n,this,r)}return this}}(wn),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,i=n._vnode,o=Zt(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),o(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Yt(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||h(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Yt(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(wn),function(e){St(e.prototype),e.prototype.$nextTick=function(e){return Ye(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,i=n._parentVnode;i&&(t.$scopedSlots=ft(i.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=i;try{Ht=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){Re(n,t,"render"),e=t._vnode}finally{Ht=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof pe||(e=ve()),e.parent=i,e}}(wn);var Sn=[String,RegExp,Array],Tn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Sn,exclude:Sn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)On(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){An(e,function(e){return kn(t,e)})}),this.$watch("exclude",function(t){An(e,function(e){return!kn(t,e)})})},render:function(){var e=this.$slots.default,t=zt(e),n=t&&t.componentOptions;if(n){var r=xn(n),i=this.include,o=this.exclude;if(i&&(!r||!kn(i,r))||o&&r&&kn(o,r))return t;var a=this.cache,s=this.keys,c=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;a[c]?(t.componentInstance=a[c].componentInstance,h(s,c),s.push(c)):(a[c]=t,s.push(c),this.max&&s.length>parseInt(this.max)&&On(a,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return F}};Object.defineProperty(e,"config",t),e.util={warn:ae,extend:A,mergeOptions:De,defineReactive:xe},e.set=ke,e.delete=Ae,e.nextTick=Ye,e.observable=function(e){return Ce(e),e},e.options=Object.create(null),M.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,A(e.options.components,Tn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=k(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=De(this.options,e),this}}(e),Cn(e),function(e){M.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&s(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}(e)}(wn),Object.defineProperty(wn.prototype,"$isServer",{get:te}),Object.defineProperty(wn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(wn,"FunctionalRenderContext",{value:Tt}),wn.version="2.6.10";var En=p("style,class"),Nn=p("input,textarea,option,select,progress"),jn=function(e,t,n){return"value"===n&&Nn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Dn=p("contenteditable,draggable,spellcheck"),Ln=p("events,caret,typing,plaintext-only"),Mn=function(e,t){return Hn(t)||"false"===t?"false":"contenteditable"===e&&Ln(t)?t:"true"},In=p("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Fn="http://www.w3.org/1999/xlink",Pn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Rn=function(e){return Pn(e)?e.slice(6,e.length):""},Hn=function(e){return null==e||!1===e};function Bn(e){for(var t=e.data,r=e,i=e;n(i.componentInstance);)(i=i.componentInstance._vnode)&&i.data&&(t=Un(i.data,t));for(;n(r=r.parent);)r&&r.data&&(t=Un(t,r.data));return function(e,t){if(n(e)||n(t))return zn(e,Vn(t));return""}(t.staticClass,t.class)}function Un(e,t){return{staticClass:zn(e.staticClass,t.staticClass),class:n(e.class)?[e.class,t.class]:t.class}}function zn(e,t){return e?t?e+" "+t:e:t||""}function Vn(e){return Array.isArray(e)?function(e){for(var t,r="",i=0,o=e.length;i<o;i++)n(t=Vn(e[i]))&&""!==t&&(r&&(r+=" "),r+=t);return r}(e):o(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Kn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Jn=p("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),qn=p("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Wn=function(e){return Jn(e)||qn(e)};function Zn(e){return qn(e)?"svg":"math"===e?"math":void 0}var Gn=Object.create(null);var Xn=p("text,number,password,search,email,tel,url");function Yn(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}var Qn=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(e,t){return document.createElementNS(Kn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),er={create:function(e,t){tr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(tr(e,!0),tr(t))},destroy:function(e){tr(e,!0)}};function tr(e,t){var r=e.data.ref;if(n(r)){var i=e.context,o=e.componentInstance||e.elm,a=i.$refs;t?Array.isArray(a[r])?h(a[r],o):a[r]===o&&(a[r]=void 0):e.data.refInFor?Array.isArray(a[r])?a[r].indexOf(o)<0&&a[r].push(o):a[r]=[o]:a[r]=o}}var nr=new pe("",{},[]),rr=["create","activate","update","remove","destroy"];function ir(e,i){return e.key===i.key&&(e.tag===i.tag&&e.isComment===i.isComment&&n(e.data)===n(i.data)&&function(e,t){if("input"!==e.tag)return!0;var r,i=n(r=e.data)&&n(r=r.attrs)&&r.type,o=n(r=t.data)&&n(r=r.attrs)&&r.type;return i===o||Xn(i)&&Xn(o)}(e,i)||r(e.isAsyncPlaceholder)&&e.asyncFactory===i.asyncFactory&&t(i.asyncFactory.error))}function or(e,t,r){var i,o,a={};for(i=t;i<=r;++i)n(o=e[i].key)&&(a[o]=i);return a}var ar={create:sr,update:sr,destroy:function(e){sr(e,nr)}};function sr(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,i,o=e===nr,a=t===nr,s=ur(e.data.directives,e.context),c=ur(t.data.directives,t.context),u=[],l=[];for(n in c)r=s[n],i=c[n],r?(i.oldValue=r.value,i.oldArg=r.arg,fr(i,"update",t,e),i.def&&i.def.componentUpdated&&l.push(i)):(fr(i,"bind",t,e),i.def&&i.def.inserted&&u.push(i));if(u.length){var f=function(){for(var n=0;n<u.length;n++)fr(u[n],"inserted",t,e)};o?it(t,"insert",f):f()}l.length&&it(t,"postpatch",function(){for(var n=0;n<l.length;n++)fr(l[n],"componentUpdated",t,e)});if(!o)for(n in s)c[n]||fr(s[n],"unbind",e,e,a)}(e,t)}var cr=Object.create(null);function ur(e,t){var n,r,i=Object.create(null);if(!e)return i;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=cr),i[lr(r)]=r,r.def=Le(t.$options,"directives",r.name);return i}function lr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function fr(e,t,n,r,i){var o=e.def&&e.def[t];if(o)try{o(n.elm,e,n,r,i)}catch(r){Re(r,n.context,"directive "+e.name+" "+t+" hook")}}var pr=[er,ar];function dr(e,r){var i=r.componentOptions;if(!(n(i)&&!1===i.Ctor.options.inheritAttrs||t(e.data.attrs)&&t(r.data.attrs))){var o,a,s=r.elm,c=e.data.attrs||{},u=r.data.attrs||{};for(o in n(u.__ob__)&&(u=r.data.attrs=A({},u)),u)a=u[o],c[o]!==a&&vr(s,o,a);for(o in(q||Z)&&u.value!==c.value&&vr(s,"value",u.value),c)t(u[o])&&(Pn(o)?s.removeAttributeNS(Fn,Rn(o)):Dn(o)||s.removeAttribute(o))}}function vr(e,t,n){e.tagName.indexOf("-")>-1?hr(e,t,n):In(t)?Hn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):Dn(t)?e.setAttribute(t,Mn(t,n)):Pn(t)?Hn(n)?e.removeAttributeNS(Fn,Rn(t)):e.setAttributeNS(Fn,t,n):hr(e,t,n)}function hr(e,t,n){if(Hn(n))e.removeAttribute(t);else{if(q&&!W&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var mr={create:dr,update:dr};function yr(e,r){var i=r.elm,o=r.data,a=e.data;if(!(t(o.staticClass)&&t(o.class)&&(t(a)||t(a.staticClass)&&t(a.class)))){var s=Bn(r),c=i._transitionClasses;n(c)&&(s=zn(s,Vn(c))),s!==i._prevClass&&(i.setAttribute("class",s),i._prevClass=s)}}var gr,_r,br,$r,wr,Cr,xr={create:yr,update:yr},kr=/[\w).+\-_$\]]/;function Ar(e){var t,n,r,i,o,a=!1,s=!1,c=!1,u=!1,l=0,f=0,p=0,d=0;for(r=0;r<e.length;r++)if(n=t,t=e.charCodeAt(r),a)39===t&&92!==n&&(a=!1);else if(s)34===t&&92!==n&&(s=!1);else if(c)96===t&&92!==n&&(c=!1);else if(u)47===t&&92!==n&&(u=!1);else if(124!==t||124===e.charCodeAt(r+1)||124===e.charCodeAt(r-1)||l||f||p){switch(t){case 34:s=!0;break;case 39:a=!0;break;case 96:c=!0;break;case 40:p++;break;case 41:p--;break;case 91:f++;break;case 93:f--;break;case 123:l++;break;case 125:l--}if(47===t){for(var v=r-1,h=void 0;v>=0&&" "===(h=e.charAt(v));v--);h&&kr.test(h)||(u=!0)}}else void 0===i?(d=r+1,i=e.slice(0,r).trim()):m();function m(){(o||(o=[])).push(e.slice(d,r).trim()),d=r+1}if(void 0===i?i=e.slice(0,r).trim():0!==d&&m(),o)for(r=0;r<o.length;r++)i=Or(i,o[r]);return i}function Or(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),i=t.slice(n+1);return'_f("'+r+'")('+e+(")"!==i?","+i:i)}function Sr(e,t){console.error("[Vue compiler]: "+e)}function Tr(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function Er(e,t,n,r,i){(e.props||(e.props=[])).push(Rr({name:t,value:n,dynamic:i},r)),e.plain=!1}function Nr(e,t,n,r,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(Rr({name:t,value:n,dynamic:i},r)),e.plain=!1}function jr(e,t,n,r){e.attrsMap[t]=n,e.attrsList.push(Rr({name:t,value:n},r))}function Dr(e,t,n,r,i,o,a,s){(e.directives||(e.directives=[])).push(Rr({name:t,rawName:n,value:r,arg:i,isDynamicArg:o,modifiers:a},s)),e.plain=!1}function Lr(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function Mr(t,n,r,i,o,a,s,c){var u;(i=i||e).right?c?n="("+n+")==='click'?'contextmenu':("+n+")":"click"===n&&(n="contextmenu",delete i.right):i.middle&&(c?n="("+n+")==='click'?'mouseup':("+n+")":"click"===n&&(n="mouseup")),i.capture&&(delete i.capture,n=Lr("!",n,c)),i.once&&(delete i.once,n=Lr("~",n,c)),i.passive&&(delete i.passive,n=Lr("&",n,c)),i.native?(delete i.native,u=t.nativeEvents||(t.nativeEvents={})):u=t.events||(t.events={});var l=Rr({value:r.trim(),dynamic:c},s);i!==e&&(l.modifiers=i);var f=u[n];Array.isArray(f)?o?f.unshift(l):f.push(l):u[n]=f?o?[l,f]:[f,l]:l,t.plain=!1}function Ir(e,t,n){var r=Fr(e,":"+t)||Fr(e,"v-bind:"+t);if(null!=r)return Ar(r);if(!1!==n){var i=Fr(e,t);if(null!=i)return JSON.stringify(i)}}function Fr(e,t,n){var r;if(null!=(r=e.attrsMap[t]))for(var i=e.attrsList,o=0,a=i.length;o<a;o++)if(i[o].name===t){i.splice(o,1);break}return n&&delete e.attrsMap[t],r}function Pr(e,t){for(var n=e.attrsList,r=0,i=n.length;r<i;r++){var o=n[r];if(t.test(o.name))return n.splice(r,1),o}}function Rr(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function Hr(e,t,n){var r=n||{},i=r.number,o="$$v";r.trim&&(o="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(o="_n("+o+")");var a=Br(t,o);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+a+"}"}}function Br(e,t){var n=function(e){if(e=e.trim(),gr=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<gr-1)return($r=e.lastIndexOf("."))>-1?{exp:e.slice(0,$r),key:'"'+e.slice($r+1)+'"'}:{exp:e,key:null};_r=e,$r=wr=Cr=0;for(;!zr();)Vr(br=Ur())?Jr(br):91===br&&Kr(br);return{exp:e.slice(0,wr),key:e.slice(wr+1,Cr)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Ur(){return _r.charCodeAt(++$r)}function zr(){return $r>=gr}function Vr(e){return 34===e||39===e}function Kr(e){var t=1;for(wr=$r;!zr();)if(Vr(e=Ur()))Jr(e);else if(91===e&&t++,93===e&&t--,0===t){Cr=$r;break}}function Jr(e){for(var t=e;!zr()&&(e=Ur())!==t;);}var qr,Wr="__r",Zr="__c";function Gr(e,t,n){var r=qr;return function i(){null!==t.apply(null,arguments)&&Qr(e,i,n,r)}}var Xr=Ve&&!(X&&Number(X[1])<=53);function Yr(e,t,n,r){if(Xr){var i=an,o=t;t=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}qr.addEventListener(e,t,Q?{capture:n,passive:r}:n)}function Qr(e,t,n,r){(r||qr).removeEventListener(e,t._wrapper||t,n)}function ei(e,r){if(!t(e.data.on)||!t(r.data.on)){var i=r.data.on||{},o=e.data.on||{};qr=r.elm,function(e){if(n(e[Wr])){var t=q?"change":"input";e[t]=[].concat(e[Wr],e[t]||[]),delete e[Wr]}n(e[Zr])&&(e.change=[].concat(e[Zr],e.change||[]),delete e[Zr])}(i),rt(i,o,Yr,Qr,Gr,r.context),qr=void 0}}var ti,ni={create:ei,update:ei};function ri(e,r){if(!t(e.data.domProps)||!t(r.data.domProps)){var i,o,a=r.elm,s=e.data.domProps||{},c=r.data.domProps||{};for(i in n(c.__ob__)&&(c=r.data.domProps=A({},c)),s)i in c||(a[i]="");for(i in c){if(o=c[i],"textContent"===i||"innerHTML"===i){if(r.children&&(r.children.length=0),o===s[i])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===i&&"PROGRESS"!==a.tagName){a._value=o;var u=t(o)?"":String(o);ii(a,u)&&(a.value=u)}else if("innerHTML"===i&&qn(a.tagName)&&t(a.innerHTML)){(ti=ti||document.createElement("div")).innerHTML="<svg>"+o+"</svg>";for(var l=ti.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(o!==s[i])try{a[i]=o}catch(e){}}}}function ii(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var r=e.value,i=e._vModifiers;if(n(i)){if(i.number)return f(r)!==f(t);if(i.trim)return r.trim()!==t.trim()}return r!==t}(e,t))}var oi={create:ri,update:ri},ai=g(function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t});function si(e){var t=ci(e.style);return e.staticStyle?A(e.staticStyle,t):t}function ci(e){return Array.isArray(e)?O(e):"string"==typeof e?ai(e):e}var ui,li=/^--/,fi=/\s*!important$/,pi=function(e,t,n){if(li.test(t))e.style.setProperty(t,n);else if(fi.test(n))e.style.setProperty(C(t),n.replace(fi,""),"important");else{var r=vi(t);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)e.style[r]=n[i];else e.style[r]=n}},di=["Webkit","Moz","ms"],vi=g(function(e){if(ui=ui||document.createElement("div").style,"filter"!==(e=b(e))&&e in ui)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<di.length;n++){var r=di[n]+t;if(r in ui)return r}});function hi(e,r){var i=r.data,o=e.data;if(!(t(i.staticStyle)&&t(i.style)&&t(o.staticStyle)&&t(o.style))){var a,s,c=r.elm,u=o.staticStyle,l=o.normalizedStyle||o.style||{},f=u||l,p=ci(r.data.style)||{};r.data.normalizedStyle=n(p.__ob__)?A({},p):p;var d=function(e,t){var n,r={};if(t)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=si(i.data))&&A(r,n);(n=si(e.data))&&A(r,n);for(var o=e;o=o.parent;)o.data&&(n=si(o.data))&&A(r,n);return r}(r,!0);for(s in f)t(d[s])&&pi(c,s,"");for(s in d)(a=d[s])!==f[s]&&pi(c,s,null==a?"":a)}}var mi={create:hi,update:hi},yi=/\s+/;function gi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(yi).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function _i(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(yi).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function bi(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&A(t,$i(e.name||"v")),A(t,e),t}return"string"==typeof e?$i(e):void 0}}var $i=g(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),wi=z&&!W,Ci="transition",xi="animation",ki="transition",Ai="transitionend",Oi="animation",Si="animationend";wi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ki="WebkitTransition",Ai="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Oi="WebkitAnimation",Si="webkitAnimationEnd"));var Ti=z?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Ei(e){Ti(function(){Ti(e)})}function Ni(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),gi(e,t))}function ji(e,t){e._transitionClasses&&h(e._transitionClasses,t),_i(e,t)}function Di(e,t,n){var r=Mi(e,t),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===Ci?Ai:Si,c=0,u=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++c>=a&&u()};setTimeout(function(){c<a&&u()},o+1),e.addEventListener(s,l)}var Li=/\b(transform|all)(,|$)/;function Mi(e,t){var n,r=window.getComputedStyle(e),i=(r[ki+"Delay"]||"").split(", "),o=(r[ki+"Duration"]||"").split(", "),a=Ii(i,o),s=(r[Oi+"Delay"]||"").split(", "),c=(r[Oi+"Duration"]||"").split(", "),u=Ii(s,c),l=0,f=0;return t===Ci?a>0&&(n=Ci,l=a,f=o.length):t===xi?u>0&&(n=xi,l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?Ci:xi:null)?n===Ci?o.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===Ci&&Li.test(r[ki+"Property"])}}function Ii(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return Fi(t)+Fi(e[n])}))}function Fi(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Pi(e,r){var i=e.elm;n(i._leaveCb)&&(i._leaveCb.cancelled=!0,i._leaveCb());var a=bi(e.data.transition);if(!t(a)&&!n(i._enterCb)&&1===i.nodeType){for(var s=a.css,c=a.type,u=a.enterClass,l=a.enterToClass,p=a.enterActiveClass,d=a.appearClass,v=a.appearToClass,h=a.appearActiveClass,m=a.beforeEnter,y=a.enter,g=a.afterEnter,_=a.enterCancelled,b=a.beforeAppear,$=a.appear,w=a.afterAppear,C=a.appearCancelled,x=a.duration,k=Wt,A=Wt.$vnode;A&&A.parent;)k=A.context,A=A.parent;var O=!k._isMounted||!e.isRootInsert;if(!O||$||""===$){var S=O&&d?d:u,T=O&&h?h:p,E=O&&v?v:l,N=O&&b||m,j=O&&"function"==typeof $?$:y,L=O&&w||g,M=O&&C||_,I=f(o(x)?x.enter:x),F=!1!==s&&!W,P=Bi(j),R=i._enterCb=D(function(){F&&(ji(i,E),ji(i,T)),R.cancelled?(F&&ji(i,S),M&&M(i)):L&&L(i),i._enterCb=null});e.data.show||it(e,"insert",function(){var t=i.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),j&&j(i,R)}),N&&N(i),F&&(Ni(i,S),Ni(i,T),Ei(function(){ji(i,S),R.cancelled||(Ni(i,E),P||(Hi(I)?setTimeout(R,I):Di(i,c,R)))})),e.data.show&&(r&&r(),j&&j(i,R)),F||P||R()}}}function Ri(e,r){var i=e.elm;n(i._enterCb)&&(i._enterCb.cancelled=!0,i._enterCb());var a=bi(e.data.transition);if(t(a)||1!==i.nodeType)return r();if(!n(i._leaveCb)){var s=a.css,c=a.type,u=a.leaveClass,l=a.leaveToClass,p=a.leaveActiveClass,d=a.beforeLeave,v=a.leave,h=a.afterLeave,m=a.leaveCancelled,y=a.delayLeave,g=a.duration,_=!1!==s&&!W,b=Bi(v),$=f(o(g)?g.leave:g),w=i._leaveCb=D(function(){i.parentNode&&i.parentNode._pending&&(i.parentNode._pending[e.key]=null),_&&(ji(i,l),ji(i,p)),w.cancelled?(_&&ji(i,u),m&&m(i)):(r(),h&&h(i)),i._leaveCb=null});y?y(C):C()}function C(){w.cancelled||(!e.data.show&&i.parentNode&&((i.parentNode._pending||(i.parentNode._pending={}))[e.key]=e),d&&d(i),_&&(Ni(i,u),Ni(i,p),Ei(function(){ji(i,u),w.cancelled||(Ni(i,l),b||(Hi($)?setTimeout(w,$):Di(i,c,w)))})),v&&v(i,w),_||b||w())}}function Hi(e){return"number"==typeof e&&!isNaN(e)}function Bi(e){if(t(e))return!1;var r=e.fns;return n(r)?Bi(Array.isArray(r)?r[0]:r):(e._length||e.length)>1}function Ui(e,t){!0!==t.data.show&&Pi(t)}var zi=function(e){var o,a,s={},c=e.modules,u=e.nodeOps;for(o=0;o<rr.length;++o)for(s[rr[o]]=[],a=0;a<c.length;++a)n(c[a][rr[o]])&&s[rr[o]].push(c[a][rr[o]]);function l(e){var t=u.parentNode(e);n(t)&&u.removeChild(t,e)}function f(e,t,i,o,a,c,l){if(n(e.elm)&&n(c)&&(e=c[l]=me(e)),e.isRootInsert=!a,!function(e,t,i,o){var a=e.data;if(n(a)){var c=n(e.componentInstance)&&a.keepAlive;if(n(a=a.hook)&&n(a=a.init)&&a(e,!1),n(e.componentInstance))return d(e,t),v(i,e.elm,o),r(c)&&function(e,t,r,i){for(var o,a=e;a.componentInstance;)if(a=a.componentInstance._vnode,n(o=a.data)&&n(o=o.transition)){for(o=0;o<s.activate.length;++o)s.activate[o](nr,a);t.push(a);break}v(r,e.elm,i)}(e,t,i,o),!0}}(e,t,i,o)){var f=e.data,p=e.children,m=e.tag;n(m)?(e.elm=e.ns?u.createElementNS(e.ns,m):u.createElement(m,e),g(e),h(e,p,t),n(f)&&y(e,t),v(i,e.elm,o)):r(e.isComment)?(e.elm=u.createComment(e.text),v(i,e.elm,o)):(e.elm=u.createTextNode(e.text),v(i,e.elm,o))}}function d(e,t){n(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,m(e)?(y(e,t),g(e)):(tr(e),t.push(e))}function v(e,t,r){n(e)&&(n(r)?u.parentNode(r)===e&&u.insertBefore(e,t,r):u.appendChild(e,t))}function h(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)f(t[r],n,e.elm,null,!0,t,r);else i(e.text)&&u.appendChild(e.elm,u.createTextNode(String(e.text)))}function m(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return n(e.tag)}function y(e,t){for(var r=0;r<s.create.length;++r)s.create[r](nr,e);n(o=e.data.hook)&&(n(o.create)&&o.create(nr,e),n(o.insert)&&t.push(e))}function g(e){var t;if(n(t=e.fnScopeId))u.setStyleScope(e.elm,t);else for(var r=e;r;)n(t=r.context)&&n(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t),r=r.parent;n(t=Wt)&&t!==e.context&&t!==e.fnContext&&n(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t)}function _(e,t,n,r,i,o){for(;r<=i;++r)f(n[r],o,e,t,!1,n,r)}function b(e){var t,r,i=e.data;if(n(i))for(n(t=i.hook)&&n(t=t.destroy)&&t(e),t=0;t<s.destroy.length;++t)s.destroy[t](e);if(n(t=e.children))for(r=0;r<e.children.length;++r)b(e.children[r])}function $(e,t,r,i){for(;r<=i;++r){var o=t[r];n(o)&&(n(o.tag)?(w(o),b(o)):l(o.elm))}}function w(e,t){if(n(t)||n(e.data)){var r,i=s.remove.length+1;for(n(t)?t.listeners+=i:t=function(e,t){function n(){0==--n.listeners&&l(e)}return n.listeners=t,n}(e.elm,i),n(r=e.componentInstance)&&n(r=r._vnode)&&n(r.data)&&w(r,t),r=0;r<s.remove.length;++r)s.remove[r](e,t);n(r=e.data.hook)&&n(r=r.remove)?r(e,t):t()}else l(e.elm)}function C(e,t,r,i){for(var o=r;o<i;o++){var a=t[o];if(n(a)&&ir(e,a))return o}}function x(e,i,o,a,c,l){if(e!==i){n(i.elm)&&n(a)&&(i=a[c]=me(i));var p=i.elm=e.elm;if(r(e.isAsyncPlaceholder))n(i.asyncFactory.resolved)?O(e.elm,i,o):i.isAsyncPlaceholder=!0;else if(r(i.isStatic)&&r(e.isStatic)&&i.key===e.key&&(r(i.isCloned)||r(i.isOnce)))i.componentInstance=e.componentInstance;else{var d,v=i.data;n(v)&&n(d=v.hook)&&n(d=d.prepatch)&&d(e,i);var h=e.children,y=i.children;if(n(v)&&m(i)){for(d=0;d<s.update.length;++d)s.update[d](e,i);n(d=v.hook)&&n(d=d.update)&&d(e,i)}t(i.text)?n(h)&&n(y)?h!==y&&function(e,r,i,o,a){for(var s,c,l,p=0,d=0,v=r.length-1,h=r[0],m=r[v],y=i.length-1,g=i[0],b=i[y],w=!a;p<=v&&d<=y;)t(h)?h=r[++p]:t(m)?m=r[--v]:ir(h,g)?(x(h,g,o,i,d),h=r[++p],g=i[++d]):ir(m,b)?(x(m,b,o,i,y),m=r[--v],b=i[--y]):ir(h,b)?(x(h,b,o,i,y),w&&u.insertBefore(e,h.elm,u.nextSibling(m.elm)),h=r[++p],b=i[--y]):ir(m,g)?(x(m,g,o,i,d),w&&u.insertBefore(e,m.elm,h.elm),m=r[--v],g=i[++d]):(t(s)&&(s=or(r,p,v)),t(c=n(g.key)?s[g.key]:C(g,r,p,v))?f(g,o,e,h.elm,!1,i,d):ir(l=r[c],g)?(x(l,g,o,i,d),r[c]=void 0,w&&u.insertBefore(e,l.elm,h.elm)):f(g,o,e,h.elm,!1,i,d),g=i[++d]);p>v?_(e,t(i[y+1])?null:i[y+1].elm,i,d,y,o):d>y&&$(0,r,p,v)}(p,h,y,o,l):n(y)?(n(e.text)&&u.setTextContent(p,""),_(p,null,y,0,y.length-1,o)):n(h)?$(0,h,0,h.length-1):n(e.text)&&u.setTextContent(p,""):e.text!==i.text&&u.setTextContent(p,i.text),n(v)&&n(d=v.hook)&&n(d=d.postpatch)&&d(e,i)}}}function k(e,t,i){if(r(i)&&n(e.parent))e.parent.data.pendingInsert=t;else for(var o=0;o<t.length;++o)t[o].data.hook.insert(t[o])}var A=p("attrs,class,staticClass,staticStyle,key");function O(e,t,i,o){var a,s=t.tag,c=t.data,u=t.children;if(o=o||c&&c.pre,t.elm=e,r(t.isComment)&&n(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(n(c)&&(n(a=c.hook)&&n(a=a.init)&&a(t,!0),n(a=t.componentInstance)))return d(t,i),!0;if(n(s)){if(n(u))if(e.hasChildNodes())if(n(a=c)&&n(a=a.domProps)&&n(a=a.innerHTML)){if(a!==e.innerHTML)return!1}else{for(var l=!0,f=e.firstChild,p=0;p<u.length;p++){if(!f||!O(f,u[p],i,o)){l=!1;break}f=f.nextSibling}if(!l||f)return!1}else h(t,u,i);if(n(c)){var v=!1;for(var m in c)if(!A(m)){v=!0,y(t,i);break}!v&&c.class&&et(c.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,i,o,a){if(!t(i)){var c,l=!1,p=[];if(t(e))l=!0,f(i,p);else{var d=n(e.nodeType);if(!d&&ir(e,i))x(e,i,p,null,null,a);else{if(d){if(1===e.nodeType&&e.hasAttribute(L)&&(e.removeAttribute(L),o=!0),r(o)&&O(e,i,p))return k(i,p,!0),e;c=e,e=new pe(u.tagName(c).toLowerCase(),{},[],void 0,c)}var v=e.elm,h=u.parentNode(v);if(f(i,p,v._leaveCb?null:h,u.nextSibling(v)),n(i.parent))for(var y=i.parent,g=m(i);y;){for(var _=0;_<s.destroy.length;++_)s.destroy[_](y);if(y.elm=i.elm,g){for(var w=0;w<s.create.length;++w)s.create[w](nr,y);var C=y.data.hook.insert;if(C.merged)for(var A=1;A<C.fns.length;A++)C.fns[A]()}else tr(y);y=y.parent}n(h)?$(0,[e],0,0):n(e.tag)&&b(e)}}return k(i,p,l),i.elm}n(e)&&b(e)}}({nodeOps:Qn,modules:[mr,xr,ni,oi,mi,z?{create:Ui,activate:Ui,remove:function(e,t){!0!==e.data.show?Ri(e,t):t()}}:{}].concat(pr)});W&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&Xi(e,"input")});var Vi={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?it(n,"postpatch",function(){Vi.componentUpdated(e,t,n)}):Ki(e,t,n.context),e._vOptions=[].map.call(e.options,Wi)):("textarea"===n.tag||Xn(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Zi),e.addEventListener("compositionend",Gi),e.addEventListener("change",Gi),W&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Ki(e,t,n.context);var r=e._vOptions,i=e._vOptions=[].map.call(e.options,Wi);if(i.some(function(e,t){return!N(e,r[t])}))(e.multiple?t.value.some(function(e){return qi(e,i)}):t.value!==t.oldValue&&qi(t.value,i))&&Xi(e,"change")}}};function Ki(e,t,n){Ji(e,t,n),(q||Z)&&setTimeout(function(){Ji(e,t,n)},0)}function Ji(e,t,n){var r=t.value,i=e.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,c=e.options.length;s<c;s++)if(a=e.options[s],i)o=j(r,Wi(a))>-1,a.selected!==o&&(a.selected=o);else if(N(Wi(a),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function qi(e,t){return t.every(function(t){return!N(t,e)})}function Wi(e){return"_value"in e?e._value:e.value}function Zi(e){e.target.composing=!0}function Gi(e){e.target.composing&&(e.target.composing=!1,Xi(e.target,"input"))}function Xi(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Yi(e){return!e.componentInstance||e.data&&e.data.transition?e:Yi(e.componentInstance._vnode)}var Qi={model:Vi,show:{bind:function(e,t,n){var r=t.value,i=(n=Yi(n)).data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&i?(n.data.show=!0,Pi(n,function(){e.style.display=o})):e.style.display=r?o:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=Yi(n)).data&&n.data.transition?(n.data.show=!0,r?Pi(n,function(){e.style.display=e.__vOriginalDisplay}):Ri(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,i){i||(e.style.display=e.__vOriginalDisplay)}}},eo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function to(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?to(zt(t.children)):e}function no(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var o in i)t[b(o)]=i[o];return t}function ro(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var io=function(e){return e.tag||Ut(e)},oo=function(e){return"show"===e.name},ao={name:"transition",props:eo,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(io)).length){var r=this.mode,o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var a=to(o);if(!a)return o;if(this._leaving)return ro(e,o);var s="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?s+"comment":s+a.tag:i(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key;var c=(a.data||(a.data={})).transition=no(this),u=this._vnode,l=to(u);if(a.data.directives&&a.data.directives.some(oo)&&(a.data.show=!0),l&&l.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(a,l)&&!Ut(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=A({},c);if("out-in"===r)return this._leaving=!0,it(f,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),ro(e,o);if("in-out"===r){if(Ut(a))return u;var p,d=function(){p()};it(c,"afterEnter",d),it(c,"enterCancelled",d),it(f,"delayLeave",function(e){p=e})}}return o}}},so=A({tag:String,moveClass:String},eo);function co(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function uo(e){e.data.newPos=e.elm.getBoundingClientRect()}function lo(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete so.mode;var fo={Transition:ao,TransitionGroup:{props:so,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var i=Zt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=no(this),s=0;s<i.length;s++){var c=i[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(o.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a)}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):l.push(p)}this.kept=e(t,null,u),this.removed=l}return e(t,null,o)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(co),e.forEach(uo),e.forEach(lo),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;Ni(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Ai,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Ai,e),n._moveCb=null,ji(n,t))})}}))},methods:{hasMove:function(e,t){if(!wi)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){_i(n,e)}),gi(n,t),n.style.display="none",this.$el.appendChild(n);var r=Mi(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};wn.config.mustUseProp=jn,wn.config.isReservedTag=Wn,wn.config.isReservedAttr=En,wn.config.getTagNamespace=Zn,wn.config.isUnknownElement=function(e){if(!z)return!0;if(Wn(e))return!1;if(e=e.toLowerCase(),null!=Gn[e])return Gn[e];var t=document.createElement(e);return e.indexOf("-")>-1?Gn[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Gn[e]=/HTMLUnknownElement/.test(t.toString())},A(wn.options.directives,Qi),A(wn.options.components,fo),wn.prototype.__patch__=z?zi:S,wn.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=ve),Yt(e,"beforeMount"),r=function(){e._update(e._render(),n)},new fn(e,r,S,{before:function(){e._isMounted&&!e._isDestroyed&&Yt(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,Yt(e,"mounted")),e}(this,e=e&&z?Yn(e):void 0,t)},z&&setTimeout(function(){F.devtools&&ne&&ne.emit("init",wn)},0);var po=/\{\{((?:.|\r?\n)+?)\}\}/g,vo=/[-.*+?^${}()|[\]\/\\]/g,ho=g(function(e){var t=e[0].replace(vo,"\\$&"),n=e[1].replace(vo,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")});var mo={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=Fr(e,"class");n&&(e.staticClass=JSON.stringify(n));var r=Ir(e,"class",!1);r&&(e.classBinding=r)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}};var yo,go={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=Fr(e,"style");n&&(e.staticStyle=JSON.stringify(ai(n)));var r=Ir(e,"style",!1);r&&(e.styleBinding=r)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},_o=function(e){return(yo=yo||document.createElement("div")).innerHTML=e,yo.textContent},bo=p("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),$o=p("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),wo=p("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Co=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,xo=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ko="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+P.source+"]*",Ao="((?:"+ko+"\\:)?"+ko+")",Oo=new RegExp("^<"+Ao),So=/^\s*(\/?)>/,To=new RegExp("^<\\/"+Ao+"[^>]*>"),Eo=/^<!DOCTYPE [^>]+>/i,No=/^<!\--/,jo=/^<!\[/,Do=p("script,style,textarea",!0),Lo={},Mo={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},Io=/&(?:lt|gt|quot|amp|#39);/g,Fo=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Po=p("pre,textarea",!0),Ro=function(e,t){return e&&Po(e)&&"\n"===t[0]};function Ho(e,t){var n=t?Fo:Io;return e.replace(n,function(e){return Mo[e]})}var Bo,Uo,zo,Vo,Ko,Jo,qo,Wo,Zo=/^@|^v-on:/,Go=/^v-|^@|^:/,Xo=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Yo=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Qo=/^\(|\)$/g,ea=/^\[.*\]$/,ta=/:(.*)$/,na=/^:|^\.|^v-bind:/,ra=/\.[^.\]]+(?=[^\]]*$)/g,ia=/^v-slot(:|$)|^#/,oa=/[\r\n]/,aa=/\s+/g,sa=g(_o),ca="_empty_";function ua(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:ma(t),rawAttrsMap:{},parent:n,children:[]}}function la(e,t){Bo=t.warn||Sr,Jo=t.isPreTag||T,qo=t.mustUseProp||T,Wo=t.getTagNamespace||T;t.isReservedTag;zo=Tr(t.modules,"transformNode"),Vo=Tr(t.modules,"preTransformNode"),Ko=Tr(t.modules,"postTransformNode"),Uo=t.delimiters;var n,r,i=[],o=!1!==t.preserveWhitespace,a=t.whitespace,s=!1,c=!1;function u(e){if(l(e),s||e.processed||(e=fa(e,t)),i.length||e===n||n.if&&(e.elseif||e.else)&&da(n,{exp:e.elseif,block:e}),r&&!e.forbidden)if(e.elseif||e.else)a=e,(u=function(e){var t=e.length;for(;t--;){if(1===e[t].type)return e[t];e.pop()}}(r.children))&&u.if&&da(u,{exp:a.elseif,block:a});else{if(e.slotScope){var o=e.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[o]=e}r.children.push(e),e.parent=r}var a,u;e.children=e.children.filter(function(e){return!e.slotScope}),l(e),e.pre&&(s=!1),Jo(e.tag)&&(c=!1);for(var f=0;f<Ko.length;f++)Ko[f](e,t)}function l(e){if(!c)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,r,i=[],o=t.expectHTML,a=t.isUnaryTag||T,s=t.canBeLeftOpenTag||T,c=0;e;){if(n=e,r&&Do(r)){var u=0,l=r.toLowerCase(),f=Lo[l]||(Lo[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),p=e.replace(f,function(e,n,r){return u=r.length,Do(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Ro(l,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""});c+=e.length-p.length,e=p,A(l,c-u,c)}else{var d=e.indexOf("<");if(0===d){if(No.test(e)){var v=e.indexOf("--\x3e");if(v>=0){t.shouldKeepComment&&t.comment(e.substring(4,v),c,c+v+3),C(v+3);continue}}if(jo.test(e)){var h=e.indexOf("]>");if(h>=0){C(h+2);continue}}var m=e.match(Eo);if(m){C(m[0].length);continue}var y=e.match(To);if(y){var g=c;C(y[0].length),A(y[1],g,c);continue}var _=x();if(_){k(_),Ro(_.tagName,e)&&C(1);continue}}var b=void 0,$=void 0,w=void 0;if(d>=0){for($=e.slice(d);!(To.test($)||Oo.test($)||No.test($)||jo.test($)||(w=$.indexOf("<",1))<0);)d+=w,$=e.slice(d);b=e.substring(0,d)}d<0&&(b=e),b&&C(b.length),t.chars&&b&&t.chars(b,c-b.length,c)}if(e===n){t.chars&&t.chars(e);break}}function C(t){c+=t,e=e.substring(t)}function x(){var t=e.match(Oo);if(t){var n,r,i={tagName:t[1],attrs:[],start:c};for(C(t[0].length);!(n=e.match(So))&&(r=e.match(xo)||e.match(Co));)r.start=c,C(r[0].length),r.end=c,i.attrs.push(r);if(n)return i.unarySlash=n[1],C(n[0].length),i.end=c,i}}function k(e){var n=e.tagName,c=e.unarySlash;o&&("p"===r&&wo(n)&&A(r),s(n)&&r===n&&A(n));for(var u=a(n)||!!c,l=e.attrs.length,f=new Array(l),p=0;p<l;p++){var d=e.attrs[p],v=d[3]||d[4]||d[5]||"",h="a"===n&&"href"===d[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;f[p]={name:d[1],value:Ho(v,h)}}u||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:f,start:e.start,end:e.end}),r=n),t.start&&t.start(n,f,u,e.start,e.end)}function A(e,n,o){var a,s;if(null==n&&(n=c),null==o&&(o=c),e)for(s=e.toLowerCase(),a=i.length-1;a>=0&&i[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var u=i.length-1;u>=a;u--)t.end&&t.end(i[u].tag,n,o);i.length=a,r=a&&i[a-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,o):"p"===s&&(t.start&&t.start(e,[],!1,n,o),t.end&&t.end(e,n,o))}A()}(e,{warn:Bo,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,o,a,l,f){var p=r&&r.ns||Wo(e);q&&"svg"===p&&(o=function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];ya.test(r.name)||(r.name=r.name.replace(ga,""),t.push(r))}return t}(o));var d,v=ua(e,o,r);p&&(v.ns=p),"style"!==(d=v).tag&&("script"!==d.tag||d.attrsMap.type&&"text/javascript"!==d.attrsMap.type)||te()||(v.forbidden=!0);for(var h=0;h<Vo.length;h++)v=Vo[h](v,t)||v;s||(!function(e){null!=Fr(e,"v-pre")&&(e.pre=!0)}(v),v.pre&&(s=!0)),Jo(v.tag)&&(c=!0),s?function(e){var t=e.attrsList,n=t.length;if(n)for(var r=e.attrs=new Array(n),i=0;i<n;i++)r[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(r[i].start=t[i].start,r[i].end=t[i].end);else e.pre||(e.plain=!0)}(v):v.processed||(pa(v),function(e){var t=Fr(e,"v-if");if(t)e.if=t,da(e,{exp:t,block:e});else{null!=Fr(e,"v-else")&&(e.else=!0);var n=Fr(e,"v-else-if");n&&(e.elseif=n)}}(v),function(e){null!=Fr(e,"v-once")&&(e.once=!0)}(v)),n||(n=v),a?u(v):(r=v,i.push(v))},end:function(e,t,n){var o=i[i.length-1];i.length-=1,r=i[i.length-1],u(o)},chars:function(e,t,n){if(r&&(!q||"textarea"!==r.tag||r.attrsMap.placeholder!==e)){var i,u,l,f=r.children;if(e=c||e.trim()?"script"===(i=r).tag||"style"===i.tag?e:sa(e):f.length?a?"condense"===a&&oa.test(e)?"":" ":o?" ":"":"")c||"condense"!==a||(e=e.replace(aa," ")),!s&&" "!==e&&(u=function(e,t){var n=t?ho(t):po;if(n.test(e)){for(var r,i,o,a=[],s=[],c=n.lastIndex=0;r=n.exec(e);){(i=r.index)>c&&(s.push(o=e.slice(c,i)),a.push(JSON.stringify(o)));var u=Ar(r[1].trim());a.push("_s("+u+")"),s.push({"@binding":u}),c=i+r[0].length}return c<e.length&&(s.push(o=e.slice(c)),a.push(JSON.stringify(o))),{expression:a.join("+"),tokens:s}}}(e,Uo))?l={type:2,expression:u.expression,tokens:u.tokens,text:e}:" "===e&&f.length&&" "===f[f.length-1].text||(l={type:3,text:e}),l&&f.push(l)}},comment:function(e,t,n){if(r){var i={type:3,text:e,isComment:!0};r.children.push(i)}}}),n}function fa(e,t){var n,r;(r=Ir(n=e,"key"))&&(n.key=r),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=Ir(e,"ref");t&&(e.ref=t,e.refInFor=function(e){var t=e;for(;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=Fr(e,"scope"),e.slotScope=t||Fr(e,"slot-scope")):(t=Fr(e,"slot-scope"))&&(e.slotScope=t);var n=Ir(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Nr(e,"slot",n,function(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}(e,"slot")));if("template"===e.tag){var r=Pr(e,ia);if(r){var i=va(r),o=i.name,a=i.dynamic;e.slotTarget=o,e.slotTargetDynamic=a,e.slotScope=r.value||ca}}else{var s=Pr(e,ia);if(s){var c=e.scopedSlots||(e.scopedSlots={}),u=va(s),l=u.name,f=u.dynamic,p=c[l]=ua("template",[],e);p.slotTarget=l,p.slotTargetDynamic=f,p.children=e.children.filter(function(e){if(!e.slotScope)return e.parent=p,!0}),p.slotScope=s.value||ca,e.children=[],e.plain=!1}}}(e),function(e){"slot"===e.tag&&(e.slotName=Ir(e,"name"))}(e),function(e){var t;(t=Ir(e,"is"))&&(e.component=t);null!=Fr(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var i=0;i<zo.length;i++)e=zo[i](e,t)||e;return function(e){var t,n,r,i,o,a,s,c,u=e.attrsList;for(t=0,n=u.length;t<n;t++)if(r=i=u[t].name,o=u[t].value,Go.test(r))if(e.hasBindings=!0,(a=ha(r.replace(Go,"")))&&(r=r.replace(ra,"")),na.test(r))r=r.replace(na,""),o=Ar(o),(c=ea.test(r))&&(r=r.slice(1,-1)),a&&(a.prop&&!c&&"innerHtml"===(r=b(r))&&(r="innerHTML"),a.camel&&!c&&(r=b(r)),a.sync&&(s=Br(o,"$event"),c?Mr(e,'"update:"+('+r+")",s,null,!1,0,u[t],!0):(Mr(e,"update:"+b(r),s,null,!1,0,u[t]),C(r)!==b(r)&&Mr(e,"update:"+C(r),s,null,!1,0,u[t])))),a&&a.prop||!e.component&&qo(e.tag,e.attrsMap.type,r)?Er(e,r,o,u[t],c):Nr(e,r,o,u[t],c);else if(Zo.test(r))r=r.replace(Zo,""),(c=ea.test(r))&&(r=r.slice(1,-1)),Mr(e,r,o,a,!1,0,u[t],c);else{var l=(r=r.replace(Go,"")).match(ta),f=l&&l[1];c=!1,f&&(r=r.slice(0,-(f.length+1)),ea.test(f)&&(f=f.slice(1,-1),c=!0)),Dr(e,r,i,o,f,c,a,u[t])}else Nr(e,r,JSON.stringify(o),u[t]),!e.component&&"muted"===r&&qo(e.tag,e.attrsMap.type,r)&&Er(e,r,"true",u[t])}(e),e}function pa(e){var t;if(t=Fr(e,"v-for")){var n=function(e){var t=e.match(Xo);if(!t)return;var n={};n.for=t[2].trim();var r=t[1].trim().replace(Qo,""),i=r.match(Yo);i?(n.alias=r.replace(Yo,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r;return n}(t);n&&A(e,n)}}function da(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function va(e){var t=e.name.replace(ia,"");return t||"#"!==e.name[0]&&(t="default"),ea.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function ha(e){var t=e.match(ra);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function ma(e){for(var t={},n=0,r=e.length;n<r;n++)t[e[n].name]=e[n].value;return t}var ya=/^xmlns:NS\d+/,ga=/^NS\d+:/;function _a(e){return ua(e.tag,e.attrsList.slice(),e.parent)}var ba=[mo,go,{preTransformNode:function(e,t){if("input"===e.tag){var n,r=e.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Ir(e,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=Fr(e,"v-if",!0),o=i?"&&("+i+")":"",a=null!=Fr(e,"v-else",!0),s=Fr(e,"v-else-if",!0),c=_a(e);pa(c),jr(c,"type","checkbox"),fa(c,t),c.processed=!0,c.if="("+n+")==='checkbox'"+o,da(c,{exp:c.if,block:c});var u=_a(e);Fr(u,"v-for",!0),jr(u,"type","radio"),fa(u,t),da(c,{exp:"("+n+")==='radio'"+o,block:u});var l=_a(e);return Fr(l,"v-for",!0),jr(l,":type",n),fa(l,t),da(c,{exp:i,block:l}),a?c.else=!0:s&&(c.elseif=s),c}}}}];var $a,wa,Ca={expectHTML:!0,modules:ba,directives:{model:function(e,t,n){var r=t.value,i=t.modifiers,o=e.tag,a=e.attrsMap.type;if(e.component)return Hr(e,r,i),!1;if("select"===o)!function(e,t,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+Br(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Mr(e,"change",r,null,!0)}(e,r,i);else if("input"===o&&"checkbox"===a)!function(e,t,n){var r=n&&n.number,i=Ir(e,"value")||"null",o=Ir(e,"true-value")||"true",a=Ir(e,"false-value")||"false";Er(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===o?":("+t+")":":_q("+t+","+o+")")),Mr(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Br(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Br(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Br(t,"$$c")+"}",null,!0)}(e,r,i);else if("input"===o&&"radio"===a)!function(e,t,n){var r=n&&n.number,i=Ir(e,"value")||"null";Er(e,"checked","_q("+t+","+(i=r?"_n("+i+")":i)+")"),Mr(e,"change",Br(t,i),null,!0)}(e,r,i);else if("input"===o||"textarea"===o)!function(e,t,n){var r=e.attrsMap.type,i=n||{},o=i.lazy,a=i.number,s=i.trim,c=!o&&"range"!==r,u=o?"change":"range"===r?Wr:"input",l="$event.target.value";s&&(l="$event.target.value.trim()"),a&&(l="_n("+l+")");var f=Br(t,l);c&&(f="if($event.target.composing)return;"+f),Er(e,"value","("+t+")"),Mr(e,u,f,null,!0),(s||a)&&Mr(e,"blur","$forceUpdate()")}(e,r,i);else if(!F.isReservedTag(o))return Hr(e,r,i),!1;return!0},text:function(e,t){t.value&&Er(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&Er(e,"innerHTML","_s("+t.value+")",t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:bo,mustUseProp:jn,canBeLeftOpenTag:$o,isReservedTag:Wn,getTagNamespace:Zn,staticKeys:function(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}(ba)},xa=g(function(e){return p("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))});function ka(e,t){e&&($a=xa(t.staticKeys||""),wa=t.isReservedTag||T,function e(t){t.static=function(e){if(2===e.type)return!1;if(3===e.type)return!0;return!(!e.pre&&(e.hasBindings||e.if||e.for||d(e.tag)||!wa(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every($a)))}(t);if(1===t.type){if(!wa(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var n=0,r=t.children.length;n<r;n++){var i=t.children[n];e(i),i.static||(t.static=!1)}if(t.ifConditions)for(var o=1,a=t.ifConditions.length;o<a;o++){var s=t.ifConditions[o].block;e(s),s.static||(t.static=!1)}}}(e),function e(t,n){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=n),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var r=0,i=t.children.length;r<i;r++)e(t.children[r],n||!!t.for);if(t.ifConditions)for(var o=1,a=t.ifConditions.length;o<a;o++)e(t.ifConditions[o].block,n)}}(e,!1))}var Aa=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/,Oa=/\([^)]*?\);*$/,Sa=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Ta={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Ea={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Na=function(e){return"if("+e+")return null;"},ja={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Na("$event.target !== $event.currentTarget"),ctrl:Na("!$event.ctrlKey"),shift:Na("!$event.shiftKey"),alt:Na("!$event.altKey"),meta:Na("!$event.metaKey"),left:Na("'button' in $event && $event.button !== 0"),middle:Na("'button' in $event && $event.button !== 1"),right:Na("'button' in $event && $event.button !== 2")};function Da(e,t){var n=t?"nativeOn:":"on:",r="",i="";for(var o in e){var a=La(e[o]);e[o]&&e[o].dynamic?i+=o+","+a+",":r+='"'+o+'":'+a+","}return r="{"+r.slice(0,-1)+"}",i?n+"_d("+r+",["+i.slice(0,-1)+"])":n+r}function La(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map(function(e){return La(e)}).join(",")+"]";var t=Sa.test(e.value),n=Aa.test(e.value),r=Sa.test(e.value.replace(Oa,""));if(e.modifiers){var i="",o="",a=[];for(var s in e.modifiers)if(ja[s])o+=ja[s],Ta[s]&&a.push(s);else if("exact"===s){var c=e.modifiers;o+=Na(["ctrl","shift","alt","meta"].filter(function(e){return!c[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else a.push(s);return a.length&&(i+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(Ma).join("&&")+")return null;"}(a)),o&&(i+=o),"function($event){"+i+(t?"return "+e.value+"($event)":n?"return ("+e.value+")($event)":r?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(r?"return "+e.value:e.value)+"}"}function Ma(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Ta[e],r=Ea[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var Ia={on:function(e,t){e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:S},Fa=function(e){this.options=e,this.warn=e.warn||Sr,this.transforms=Tr(e.modules,"transformCode"),this.dataGenFns=Tr(e.modules,"genData"),this.directives=A(A({},Ia),e.directives);var t=e.isReservedTag||T;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Pa(e,t){var n=new Fa(t);return{render:"with(this){return "+(e?Ra(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Ra(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return Ha(e,t);if(e.once&&!e.onceProcessed)return Ba(e,t);if(e.for&&!e.forProcessed)return za(e,t);if(e.if&&!e.ifProcessed)return Ua(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',r=qa(e,t),i="_t("+n+(r?","+r:""),o=e.attrs||e.dynamicAttrs?Ga((e.attrs||[]).concat(e.dynamicAttrs||[]).map(function(e){return{name:b(e.name),value:e.value,dynamic:e.dynamic}})):null,a=e.attrsMap["v-bind"];!o&&!a||r||(i+=",null");o&&(i+=","+o);a&&(i+=(o?"":",null")+","+a);return i+")"}(e,t);var n;if(e.component)n=function(e,t,n){var r=t.inlineTemplate?null:qa(t,n,!0);return"_c("+e+","+Va(t,n)+(r?","+r:"")+")"}(e.component,e,t);else{var r;(!e.plain||e.pre&&t.maybeComponent(e))&&(r=Va(e,t));var i=e.inlineTemplate?null:qa(e,t,!0);n="_c('"+e.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var o=0;o<t.transforms.length;o++)n=t.transforms[o](e,n);return n}return qa(e,t)||"void 0"}function Ha(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+Ra(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Ba(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Ua(e,t);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+Ra(e,t)+","+t.onceId+++","+n+")":Ra(e,t)}return Ha(e,t)}function Ua(e,t,n,r){return e.ifProcessed=!0,function e(t,n,r,i){if(!t.length)return i||"_e()";var o=t.shift();return o.exp?"("+o.exp+")?"+a(o.block)+":"+e(t,n,r,i):""+a(o.block);function a(e){return r?r(e,n):e.once?Ba(e,n):Ra(e,n)}}(e.ifConditions.slice(),t,n,r)}function za(e,t,n,r){var i=e.for,o=e.alias,a=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,(r||"_l")+"(("+i+"),function("+o+a+s+"){return "+(n||Ra)(e,t)+"})"}function Va(e,t){var n="{",r=function(e,t){var n=e.directives;if(!n)return;var r,i,o,a,s="directives:[",c=!1;for(r=0,i=n.length;r<i;r++){o=n[r],a=!0;var u=t.directives[o.name];u&&(a=!!u(e,o,t.warn)),a&&(c=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?",arg:"+(o.isDynamicArg?o.arg:'"'+o.arg+'"'):"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}if(c)return s.slice(0,-1)+"]"}(e,t);r&&(n+=r+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var i=0;i<t.dataGenFns.length;i++)n+=t.dataGenFns[i](e);if(e.attrs&&(n+="attrs:"+Ga(e.attrs)+","),e.props&&(n+="domProps:"+Ga(e.props)+","),e.events&&(n+=Da(e.events,!1)+","),e.nativeEvents&&(n+=Da(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t,n){var r=e.for||Object.keys(t).some(function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||Ka(n)}),i=!!e.if;if(!r)for(var o=e.parent;o;){if(o.slotScope&&o.slotScope!==ca||o.for){r=!0;break}o.if&&(i=!0),o=o.parent}var a=Object.keys(t).map(function(e){return Ja(t[e],n)}).join(",");return"scopedSlots:_u(["+a+"]"+(r?",null,true":"")+(!r&&i?",null,false,"+function(e){var t=5381,n=e.length;for(;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(a):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var o=function(e,t){var n=e.children[0];if(n&&1===n.type){var r=Pa(n,t.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}(e,t);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+Ga(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function Ka(e){return 1===e.type&&("slot"===e.tag||e.children.some(Ka))}function Ja(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return Ua(e,t,Ja,"null");if(e.for&&!e.forProcessed)return za(e,t,Ja);var r=e.slotScope===ca?"":String(e.slotScope),i="function("+r+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(qa(e,t)||"undefined")+":undefined":qa(e,t)||"undefined":Ra(e,t))+"}",o=r?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+i+o+"}"}function qa(e,t,n,r,i){var o=e.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag){var s=n?t.maybeComponent(a)?",1":",0":"";return""+(r||Ra)(a,t)+s}var c=n?function(e,t){for(var n=0,r=0;r<e.length;r++){var i=e[r];if(1===i.type){if(Wa(i)||i.ifConditions&&i.ifConditions.some(function(e){return Wa(e.block)})){n=2;break}(t(i)||i.ifConditions&&i.ifConditions.some(function(e){return t(e.block)}))&&(n=1)}}return n}(o,t.maybeComponent):0,u=i||Za;return"["+o.map(function(e){return u(e,t)}).join(",")+"]"+(c?","+c:"")}}function Wa(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Za(e,t){return 1===e.type?Ra(e,t):3===e.type&&e.isComment?(r=e,"_e("+JSON.stringify(r.text)+")"):"_v("+(2===(n=e).type?n.expression:Xa(JSON.stringify(n.text)))+")";var n,r}function Ga(e){for(var t="",n="",r=0;r<e.length;r++){var i=e[r],o=Xa(i.value);i.dynamic?n+=i.name+","+o+",":t+='"'+i.name+'":'+o+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function Xa(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b");function Ya(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),S}}function Qa(e){var t=Object.create(null);return function(n,r,i){(r=A({},r)).warn;delete r.warn;var o=r.delimiters?String(r.delimiters)+n:n;if(t[o])return t[o];var a=e(n,r),s={},c=[];return s.render=Ya(a.render,c),s.staticRenderFns=a.staticRenderFns.map(function(e){return Ya(e,c)}),t[o]=s}}var es,ts,ns=(es=function(e,t){var n=la(e.trim(),t);!1!==t.optimize&&ka(n,t);var r=Pa(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(e){function t(t,n){var r=Object.create(e),i=[],o=[];if(n)for(var a in n.modules&&(r.modules=(e.modules||[]).concat(n.modules)),n.directives&&(r.directives=A(Object.create(e.directives||null),n.directives)),n)"modules"!==a&&"directives"!==a&&(r[a]=n[a]);r.warn=function(e,t,n){(n?o:i).push(e)};var s=es(t.trim(),r);return s.errors=i,s.tips=o,s}return{compile:t,compileToFunctions:Qa(t)}})(Ca),rs=(ns.compile,ns.compileToFunctions);function is(e){return(ts=ts||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',ts.innerHTML.indexOf("&#10;")>0}var os=!!z&&is(!1),as=!!z&&is(!0),ss=g(function(e){var t=Yn(e);return t&&t.innerHTML}),cs=wn.prototype.$mount;wn.prototype.$mount=function(e,t){if((e=e&&Yn(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(r=ss(r));else{if(!r.nodeType)return this;r=r.innerHTML}else e&&(r=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(r){var i=rs(r,{outputSourceRange:!1,shouldDecodeNewlines:os,shouldDecodeNewlinesForHref:as,delimiters:n.delimiters,comments:n.comments},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a}}return cs.call(this,e,t)},wn.compile=rs,module.exports=wn;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"timers":28}],32:[function(require,module,exports){
"use strict";

var Vue = require("vue/dist/vue.common");
var axios = require("axios");

var app = new Vue({
    data: {
        userinfo: {
            username: "",
            devicename: ""
        },
        logged_in: false,
        registered: false
    },
    methods: {
        logout: function logout() {
            if (!confirm("Are you sure you want to log out? Don't forget to remove the device name from your account if you're planning on using it again, later.")) return;

            axios.post("/api/logout").then(function (resp) {
                window.location = "/"; //redirect to index, so the server can make a descision of where to go next
            }).catch(function (err) {
                console.log(err);
            });
        }
    },
    created: function created() {
        var _this = this;

        axios.get("/api/userinfo").then(function (resp) {
            _this.userinfo.username = resp.data.username;
            _this.userinfo.devicename = resp.data.devicename;
            _this.logged_in = resp.data.loggedin;
            _this.registered = resp.data.registered;
        });
    }
});

window.addEventListener("DOMContentLoaded", function () {
    app.$mount("main");
});

},{"axios":1,"vue/dist/vue.common":30}]},{},[32])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIm5vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUuY29tbW9uLmRldi5qcyIsIm5vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUuY29tbW9uLmpzIiwibm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5jb21tb24ucHJvZC5qcyIsInNyYy9qcy9kb25lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDcExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNoR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDbHFYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNMQSxJQUFNLE1BQU0sUUFBUSxxQkFBUixDQUFaO0FBQ0EsSUFBTSxRQUFRLFFBQVEsT0FBUixDQUFkOztBQUVBLElBQUksTUFBTSxJQUFJLEdBQUosQ0FBUTtBQUNkLFVBQU07QUFDRixrQkFBVTtBQUNOLHNCQUFVLEVBREo7QUFFTix3QkFBWTtBQUZOLFNBRFI7QUFLRixtQkFBVyxLQUxUO0FBTUYsb0JBQVk7QUFOVixLQURRO0FBU2QsYUFBUztBQUNMLGdCQUFRLGtCQUFXO0FBQ2YsZ0JBQUksQ0FBQyxRQUFRLHlJQUFSLENBQUwsRUFBeUo7O0FBRXpKLGtCQUFNLElBQU4sQ0FBVyxhQUFYLEVBQTBCLElBQTFCLENBQStCLGdCQUFRO0FBQ25DLHVCQUFPLFFBQVAsR0FBa0IsR0FBbEIsQ0FEbUMsQ0FDWjtBQUMxQixhQUZELEVBRUcsS0FGSCxDQUVTLGVBQU87QUFDWix3QkFBUSxHQUFSLENBQVksR0FBWjtBQUNILGFBSkQ7QUFLSDtBQVRJLEtBVEs7QUFvQmQsYUFBUyxtQkFBVztBQUFBOztBQUNoQixjQUFNLEdBQU4sQ0FBVSxlQUFWLEVBQTJCLElBQTNCLENBQWdDLGdCQUFRO0FBQ3BDLGtCQUFLLFFBQUwsQ0FBYyxRQUFkLEdBQXlCLEtBQUssSUFBTCxDQUFVLFFBQW5DO0FBQ0Esa0JBQUssUUFBTCxDQUFjLFVBQWQsR0FBMkIsS0FBSyxJQUFMLENBQVUsVUFBckM7QUFDQSxrQkFBSyxTQUFMLEdBQWlCLEtBQUssSUFBTCxDQUFVLFFBQTNCO0FBQ0Esa0JBQUssVUFBTCxHQUFrQixLQUFLLElBQUwsQ0FBVSxVQUE1QjtBQUNILFNBTEQ7QUFNSDtBQTNCYSxDQUFSLENBQVY7O0FBOEJBLE9BQU8sZ0JBQVAsQ0FBd0Isa0JBQXhCLEVBQTRDLFlBQVc7QUFDbkQsUUFBSSxNQUFKLENBQVcsTUFBWDtBQUNILENBRkQiLCJmaWxlIjoiZG9uZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgbmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzL2Jyb3dzZXIuanMnKS5uZXh0VGljaztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpbW1lZGlhdGVJZHMgPSB7fTtcbnZhciBuZXh0SW1tZWRpYXRlSWQgPSAwO1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkgeyB0aW1lb3V0LmNsb3NlKCk7IH07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gVGhhdCdzIG5vdCBob3cgbm9kZS5qcyBpbXBsZW1lbnRzIGl0IGJ1dCB0aGUgZXhwb3NlZCBhcGkgaXMgdGhlIHNhbWUuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHNldEltbWVkaWF0ZSA6IGZ1bmN0aW9uKGZuKSB7XG4gIHZhciBpZCA9IG5leHRJbW1lZGlhdGVJZCsrO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZmFsc2UgOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgaW1tZWRpYXRlSWRzW2lkXSA9IHRydWU7XG5cbiAgbmV4dFRpY2soZnVuY3Rpb24gb25OZXh0VGljaygpIHtcbiAgICBpZiAoaW1tZWRpYXRlSWRzW2lkXSkge1xuICAgICAgLy8gZm4uY2FsbCgpIGlzIGZhc3RlciBzbyB3ZSBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiB1c2UtY2FzZVxuICAgICAgLy8gQHNlZSBodHRwOi8vanNwZXJmLmNvbS9jYWxsLWFwcGx5LXNlZ3VcbiAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm4uY2FsbChudWxsKTtcbiAgICAgIH1cbiAgICAgIC8vIFByZXZlbnQgaWRzIGZyb20gbGVha2luZ1xuICAgICAgZXhwb3J0cy5jbGVhckltbWVkaWF0ZShpZCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaWQ7XG59O1xuXG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gdHlwZW9mIGNsZWFySW1tZWRpYXRlID09PSBcImZ1bmN0aW9uXCIgPyBjbGVhckltbWVkaWF0ZSA6IGZ1bmN0aW9uKGlkKSB7XG4gIGRlbGV0ZSBpbW1lZGlhdGVJZHNbaWRdO1xufTsiLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjEwXG4gKiAoYykgMjAxNC0yMDE5IEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gKFxuICAgIGlzRGVmKHZhbCkgJiZcbiAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nXG4gIClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgKGlzUGxhaW5PYmplY3QodmFsKSAmJiB2YWwudG9TdHJpbmcgPT09IF90b1N0cmluZylcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZVxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gcG9seWZpbGxCaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4gID8gbmF0aXZlQmluZFxuICA6IHBvbHlmaWxsQmluZDtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXG4gKiB3aXRoIC4uLnJlc3QgKGh0dHBzOi8vZmxvdy5vcmcvYmxvZy8yMDE3LzA1LzA3L1N0cmljdC1GdW5jdGlvbi1DYWxsLUFyaXR5LykuXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0cmluZyBjb250YWluaW5nIHN0YXRpYyBrZXlzIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyAobW9kdWxlcykge1xuICByZXR1cm4gbW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGtleXMsIG0pIHtcbiAgICByZXR1cm4ga2V5cy5jb25jYXQobS5zdGF0aWNLZXlzIHx8IFtdKVxuICB9LCBbXSkuam9pbignLCcpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJyxcbiAgJ3NlcnZlclByZWZldGNoJ1xuXTtcblxuLyogICovXG5cblxuXG52YXIgY29uZmlnID0gKHtcbiAgLyoqXG4gICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XG4gICAqL1xuICBwcm9kdWN0aW9uVGlwOiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxue1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmICghY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgdGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbn1cblxuLyogICovXG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgdGV4dCxcbiAgZWxtLFxuICBjb250ZXh0LFxuICBjb21wb25lbnRPcHRpb25zLFxuICBhc3luY0ZhY3Rvcnlcbikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLmVsbSA9IGVsbTtcbiAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBWTm9kZShcbiAgICB2bm9kZS50YWcsXG4gICAgdm5vZGUuZGF0YSxcbiAgICAvLyAjNzk3NVxuICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgIC8vIGEgY2hpbGQuXG4gICAgdm5vZGUuY2hpbGRyZW4gJiYgdm5vZGUuY2hpbGRyZW4uc2xpY2UoKSxcbiAgICB2bm9kZS50ZXh0LFxuICAgIHZub2RlLmVsbSxcbiAgICB2bm9kZS5jb250ZXh0LFxuICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICk7XG4gIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcbiAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcbiAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcbiAgcmV0dXJuIGNsb25lZFxufVxuXG4vKlxuICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbnZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG52YXIgbWV0aG9kc1RvUGF0Y2ggPSBbXG4gICdwdXNoJyxcbiAgJ3BvcCcsXG4gICdzaGlmdCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZScsXG4gICdzb3J0JyxcbiAgJ3JldmVyc2UnXG5dO1xuXG4vKipcbiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICovXG5tZXRob2RzVG9QYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgZGVmKGFycmF5TWV0aG9kcywgbWV0aG9kLCBmdW5jdGlvbiBtdXRhdG9yICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgdmFyIGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgeyBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyB9XG4gICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pO1xufSk7XG5cbi8qICAqL1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuLyoqXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcbiAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAqL1xudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xuXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAqIG9iamVjdC4gT25jZSBhdHRhY2hlZCwgdGhlIG9ic2VydmVyIGNvbnZlcnRzIHRoZSB0YXJnZXRcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAqL1xudmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5kZXAgPSBuZXcgRGVwKCk7XG4gIHRoaXMudm1Db3VudCA9IDA7XG4gIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV2FsayB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gKiB0aGUgcHJvdG90eXBlIGNoYWluIHVzaW5nIF9fcHJvdG9fX1xuICovXG5mdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICogaGlkZGVuIHByb3BlcnRpZXMuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjb3B5QXVnbWVudCAodGFyZ2V0LCBzcmMsIGtleXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGRlZih0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICB9IGVsc2UgaWYgKFxuICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkgJiZcbiAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICF2YWx1ZS5faXNWdWVcbiAgKSB7XG4gICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICB9XG4gIGlmIChhc1Jvb3REYXRhICYmIG9iKSB7XG4gICAgb2Iudm1Db3VudCsrO1xuICB9XG4gIHJldHVybiBvYlxufVxuXG4vKipcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICBvYmosXG4gIGtleSxcbiAgdmFsLFxuICBjdXN0b21TZXR0ZXIsXG4gIHNoYWxsb3dcbikge1xuICB2YXIgZGVwID0gbmV3IERlcCgpO1xuXG4gIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldClcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG57XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAod2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAge1xuICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGlzVXNpbmdNaWNyb1Rhc2sgPSBmYWxzZTtcblxudmFyIGNhbGxiYWNrcyA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkge1xuICBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbi8vIEluIDIuNSB3ZSB1c2VkIChtYWNybykgdGFza3MgKGluIGNvbWJpbmF0aW9uIHdpdGggbWljcm90YXNrcykuXG4vLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludFxuLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBBbHNvLCB1c2luZyAobWFjcm8pIHRhc2tzIGluIGV2ZW50IGhhbmRsZXIgd291bGQgY2F1c2Ugc29tZSB3ZWlyZCBiZWhhdmlvcnNcbi8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLlxuLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuLy8gQSBtYWpvciBkcmF3YmFjayBvZiB0aGlzIHRyYWRlb2ZmIGlzIHRoYXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zXG4vLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbi8vIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZSBldmVudCAoIzY1NjYpLlxudmFyIHRpbWVyRnVuYztcblxuLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4vLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcbiAgICAvLyBJbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICghaXNJRSAmJiB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICBpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKSB8fFxuICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgTXV0YXRpb25PYnNlcnZlci50b1N0cmluZygpID09PSAnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJ1xuKSkge1xuICAvLyBVc2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAvLyBlLmcuIFBoYW50b21KUywgaU9TNywgQW5kcm9pZCA0LjRcbiAgLy8gKCM2NDY2IE11dGF0aW9uT2JzZXJ2ZXIgaXMgdW5yZWxpYWJsZSBpbiBJRTExKVxuICB2YXIgY291bnRlciA9IDE7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoQ2FsbGJhY2tzKTtcbiAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwge1xuICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgfSk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudGVyID0gKGNvdW50ZXIgKyAxKSAlIDI7XG4gICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTtcbiAgfTtcbiAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XG59IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxuICAvLyBUZWNoaW5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG57XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbntcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJiAhKGtleSBpbiB0YXJnZXQuJGRhdGEpKTtcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgbm9kZXMgPSBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAoa2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVpY2FsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1ZXMgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAoaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IGV4cE9yRm4udG9TdHJpbmcoKTtcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGh5cGhlbmF0ZWRLZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIi5cIiksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAoc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gcGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO1xuICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztcblxuICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICBvcHRzLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgaWYgKEN0b3Iuc3VwZXIpIHtcbiAgICB2YXIgc3VwZXJPcHRpb25zID0gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yLnN1cGVyKTtcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7XG4gICAgICAvLyB1cGRhdGUgYmFzZSBleHRlbmQgb3B0aW9uc1xuICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xuICAgICAgICBleHRlbmQoQ3Rvci5leHRlbmRPcHRpb25zLCBtb2RpZmllZE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3RvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgbW9kaWZpZWQ7XG4gIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIC8vIDIuNiBleHBsaWNpdCBvYnNlcnZhYmxlIEFQSVxuICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYnNlcnZlKG9iaik7XG4gICAgcmV0dXJuIG9ialxuICB9O1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7XG4gIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFxufSk7XG5cblZ1ZS52ZXJzaW9uID0gJzIuNi4xMCc7XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbnZhciBjb252ZXJ0RW51bWVyYXRlZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnXG4gICAgPyAnZmFsc2UnXG4gICAgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlXG4gICAgOiBrZXkgPT09ICdjb250ZW50ZWRpdGFibGUnICYmIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogJ3RydWUnXG59O1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUHJlVGFnID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnID09PSAncHJlJzsgfTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmJCQxKSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHBhcmVudEVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICB7XG4gICAgICBjaGVja0R1cGxpY2F0ZUtleXMobmV3Q2gpO1xuICAgIH1cblxuICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICBpZiAoaXNVbmRlZihvbGRTdGFydFZub2RlKSkge1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07IC8vIFZub2RlIGhhcyBiZWVuIG1vdmVkIGxlZnRcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkRW5kVm5vZGUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiRHVwbGljYXRlIGtleXMgZGV0ZWN0ZWQ6ICdcIiArIGtleSArIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZElkeEluT2xkIChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgeyByZXR1cm4gaSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hWbm9kZSAoXG4gICAgb2xkVm5vZGUsXG4gICAgdm5vZGUsXG4gICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgIG93bmVyQXJyYXksXG4gICAgaW5kZXgsXG4gICAgcmVtb3ZlT25seVxuICApIHtcbiAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbSA9IG9sZFZub2RlLmVsbTtcblxuICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cbiAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxuICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICB2bm9kZS5rZXkgPT09IG9sZFZub2RlLmtleSAmJlxuICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgKSB7XG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgY2ggPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgaWYgKGlzRGVmKG9sZENoKSAmJiBpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbnZhciB2YWxpZERpdmlzaW9uQ2hhclJFID0gL1tcXHcpLitcXC1fJFxcXV0vO1xuXG5mdW5jdGlvbiBwYXJzZUZpbHRlcnMgKGV4cCkge1xuICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgdmFyIGluRG91YmxlID0gZmFsc2U7XG4gIHZhciBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7XG4gIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gIHZhciBjdXJseSA9IDA7XG4gIHZhciBzcXVhcmUgPSAwO1xuICB2YXIgcGFyZW4gPSAwO1xuICB2YXIgbGFzdEZpbHRlckluZGV4ID0gMDtcbiAgdmFyIGMsIHByZXYsIGksIGV4cHJlc3Npb24sIGZpbHRlcnM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgIHByZXYgPSBjO1xuICAgIGMgPSBleHAuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5Eb3VibGUpIHtcbiAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1QykgeyBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmXG4gICAgICBleHAuY2hhckNvZGVBdChpIC0gMSkgIT09IDB4N0MgJiZcbiAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICkge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hGaWx0ZXIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMHgyMjogaW5Eb3VibGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vIFwiXG4gICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgY2FzZSAweDYwOiBpblRlbXBsYXRlU3RyaW5nID0gdHJ1ZTsgYnJlYWsgLy8gYFxuICAgICAgICBjYXNlIDB4Mjg6IHBhcmVuKys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyAoXG4gICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgY2FzZSAweDVCOiBzcXVhcmUrKzsgYnJlYWsgICAgICAgICAgICAgICAgLy8gW1xuICAgICAgICBjYXNlIDB4NUQ6IHNxdWFyZS0tOyBicmVhayAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgY2FzZSAweDdEOiBjdXJseS0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICB2YXIgaiA9IGkgLSAxO1xuICAgICAgICB2YXIgcCA9ICh2b2lkIDApO1xuICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBwID0gZXhwLmNoYXJBdChqKTtcbiAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXAgfHwgIXZhbGlkRGl2aXNpb25DaGFyUkUudGVzdChwKSkge1xuICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICB9IGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xuICAgIHB1c2hGaWx0ZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkge1xuICAgIChmaWx0ZXJzIHx8IChmaWx0ZXJzID0gW10pKS5wdXNoKGV4cC5zbGljZShsYXN0RmlsdGVySW5kZXgsIGkpLnRyaW0oKSk7XG4gICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gIH1cblxuICBpZiAoZmlsdGVycykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHByZXNzaW9uID0gd3JhcEZpbHRlcihleHByZXNzaW9uLCBmaWx0ZXJzW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICB2YXIgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7XG4gIGlmIChpIDwgMCkge1xuICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIGZpbHRlciArIFwiXFxcIikoXCIgKyBleHAgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICB2YXIgYXJncyA9IGZpbHRlci5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIG5hbWUgKyBcIlxcXCIpKFwiICsgZXhwICsgKGFyZ3MgIT09ICcpJyA/ICcsJyArIGFyZ3MgOiBhcmdzKSlcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5mdW5jdGlvbiBiYXNlV2FybiAobXNnLCByYW5nZSkge1xuICBjb25zb2xlLmVycm9yKChcIltWdWUgY29tcGlsZXJdOiBcIiArIG1zZykpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uIChcbiAgbW9kdWxlcyxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIG1vZHVsZXNcbiAgICA/IG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtW2tleV07IH0pLmZpbHRlcihmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfSlcbiAgICA6IFtdXG59XG5cbmZ1bmN0aW9uIGFkZFByb3AgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgKGVsLnByb3BzIHx8IChlbC5wcm9wcyA9IFtdKSkucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICB2YXIgYXR0cnMgPSBkeW5hbWljXG4gICAgPyAoZWwuZHluYW1pY0F0dHJzIHx8IChlbC5keW5hbWljQXR0cnMgPSBbXSkpXG4gICAgOiAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKTtcbiAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuLy8gYWRkIGEgcmF3IGF0dHIgKHVzZSB0aGlzIGluIHByZVRyYW5zZm9ybXMpXG5mdW5jdGlvbiBhZGRSYXdBdHRyIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlKSB7XG4gIGVsLmF0dHJzTWFwW25hbWVdID0gdmFsdWU7XG4gIGVsLmF0dHJzTGlzdC5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9LCByYW5nZSkpO1xufVxuXG5mdW5jdGlvbiBhZGREaXJlY3RpdmUgKFxuICBlbCxcbiAgbmFtZSxcbiAgcmF3TmFtZSxcbiAgdmFsdWUsXG4gIGFyZyxcbiAgaXNEeW5hbWljQXJnLFxuICBtb2RpZmllcnMsXG4gIHJhbmdlXG4pIHtcbiAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJhd05hbWU6IHJhd05hbWUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGFyZzogYXJnLFxuICAgIGlzRHluYW1pY0FyZzogaXNEeW5hbWljQXJnLFxuICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllck1hcmtlciAoc3ltYm9sLCBuYW1lLCBkeW5hbWljKSB7XG4gIHJldHVybiBkeW5hbWljXG4gICAgPyAoXCJfcChcIiArIG5hbWUgKyBcIixcXFwiXCIgKyBzeW1ib2wgKyBcIlxcXCIpXCIpXG4gICAgOiBzeW1ib2wgKyBuYW1lIC8vIG1hcmsgdGhlIGV2ZW50IGFzIGNhcHR1cmVkXG59XG5cbmZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICBlbCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIG1vZGlmaWVycyxcbiAgaW1wb3J0YW50LFxuICB3YXJuLFxuICByYW5nZSxcbiAgZHluYW1pY1xuKSB7XG4gIG1vZGlmaWVycyA9IG1vZGlmaWVycyB8fCBlbXB0eU9iamVjdDtcbiAgLy8gd2FybiBwcmV2ZW50IGFuZCBwYXNzaXZlIG1vZGlmaWVyXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgd2FybiAmJlxuICAgIG1vZGlmaWVycy5wcmV2ZW50ICYmIG1vZGlmaWVycy5wYXNzaXZlXG4gICkge1xuICAgIHdhcm4oXG4gICAgICAncGFzc2l2ZSBhbmQgcHJldmVudCBjYW5cXCd0IGJlIHVzZWQgdG9nZXRoZXIuICcgK1xuICAgICAgJ1Bhc3NpdmUgaGFuZGxlciBjYW5cXCd0IHByZXZlbnQgZGVmYXVsdCBldmVudC4nLFxuICAgICAgcmFuZ2VcbiAgICApO1xuICB9XG5cbiAgLy8gbm9ybWFsaXplIGNsaWNrLnJpZ2h0IGFuZCBjbGljay5taWRkbGUgc2luY2UgdGhleSBkb24ndCBhY3R1YWxseSBmaXJlXG4gIC8vIHRoaXMgaXMgdGVjaG5pY2FsbHkgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGF0IGxlYXN0IGZvciBub3cgYnJvd3NlcnMgYXJlXG4gIC8vIHRoZSBvbmx5IHRhcmdldCBlbnZzIHRoYXQgaGF2ZSByaWdodC9taWRkbGUgY2xpY2tzLlxuICBpZiAobW9kaWZpZXJzLnJpZ2h0KSB7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIik9PT0nY2xpY2snPydjb250ZXh0bWVudSc6KFwiICsgbmFtZSArIFwiKVwiO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsaWNrJykge1xuICAgICAgbmFtZSA9ICdjb250ZXh0bWVudSc7XG4gICAgICBkZWxldGUgbW9kaWZpZXJzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChtb2RpZmllcnMubWlkZGxlKSB7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIik9PT0nY2xpY2snPydtb3VzZXVwJzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ21vdXNldXAnO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXJcbiAgaWYgKG1vZGlmaWVycy5jYXB0dXJlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJyEnLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLm9uY2UpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm9uY2U7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignficsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAobW9kaWZpZXJzLnBhc3NpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLnBhc3NpdmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignJicsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG5cbiAgdmFyIGV2ZW50cztcbiAgaWYgKG1vZGlmaWVycy5uYXRpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTtcbiAgICBldmVudHMgPSBlbC5uYXRpdmVFdmVudHMgfHwgKGVsLm5hdGl2ZUV2ZW50cyA9IHt9KTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHMgPSBlbC5ldmVudHMgfHwgKGVsLmV2ZW50cyA9IHt9KTtcbiAgfVxuXG4gIHZhciBuZXdIYW5kbGVyID0gcmFuZ2VTZXRJdGVtKHsgdmFsdWU6IHZhbHVlLnRyaW0oKSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSk7XG4gIGlmIChtb2RpZmllcnMgIT09IGVtcHR5T2JqZWN0KSB7XG4gICAgbmV3SGFuZGxlci5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG4gIH1cblxuICB2YXIgaGFuZGxlcnMgPSBldmVudHNbbmFtZV07XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVycykpIHtcbiAgICBpbXBvcnRhbnQgPyBoYW5kbGVycy51bnNoaWZ0KG5ld0hhbmRsZXIpIDogaGFuZGxlcnMucHVzaChuZXdIYW5kbGVyKTtcbiAgfSBlbHNlIGlmIChoYW5kbGVycykge1xuICAgIGV2ZW50c1tuYW1lXSA9IGltcG9ydGFudCA/IFtuZXdIYW5kbGVyLCBoYW5kbGVyc10gOiBbaGFuZGxlcnMsIG5ld0hhbmRsZXJdO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50c1tuYW1lXSA9IG5ld0hhbmRsZXI7XG4gIH1cblxuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRSYXdCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgcmV0dXJuIGVsLnJhd0F0dHJzTWFwWyc6JyArIG5hbWVdIHx8XG4gICAgZWwucmF3QXR0cnNNYXBbJ3YtYmluZDonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFtuYW1lXVxufVxuXG5mdW5jdGlvbiBnZXRCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICBnZXRTdGF0aWNcbikge1xuICB2YXIgZHluYW1pY1ZhbHVlID1cbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnOicgKyBuYW1lKSB8fFxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWJpbmQ6JyArIG5hbWUpO1xuICBpZiAoZHluYW1pY1ZhbHVlICE9IG51bGwpIHtcbiAgICByZXR1cm4gcGFyc2VGaWx0ZXJzKGR5bmFtaWNWYWx1ZSlcbiAgfSBlbHNlIGlmIChnZXRTdGF0aWMgIT09IGZhbHNlKSB7XG4gICAgdmFyIHN0YXRpY1ZhbHVlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgbmFtZSk7XG4gICAgaWYgKHN0YXRpY1ZhbHVlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGF0aWNWYWx1ZSlcbiAgICB9XG4gIH1cbn1cblxuLy8gbm90ZTogdGhpcyBvbmx5IHJlbW92ZXMgdGhlIGF0dHIgZnJvbSB0aGUgQXJyYXkgKGF0dHJzTGlzdCkgc28gdGhhdCBpdFxuLy8gZG9lc24ndCBnZXQgcHJvY2Vzc2VkIGJ5IHByb2Nlc3NBdHRycy5cbi8vIEJ5IGRlZmF1bHQgaXQgZG9lcyBOT1QgcmVtb3ZlIGl0IGZyb20gdGhlIG1hcCAoYXR0cnNNYXApIGJlY2F1c2UgdGhlIG1hcCBpc1xuLy8gbmVlZGVkIGR1cmluZyBjb2RlZ2VuLlxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICByZW1vdmVGcm9tTWFwXG4pIHtcbiAgdmFyIHZhbDtcbiAgaWYgKCh2YWwgPSBlbC5hdHRyc01hcFtuYW1lXSkgIT0gbnVsbCkge1xuICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChsaXN0W2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChyZW1vdmVGcm9tTWFwKSB7XG4gICAgZGVsZXRlIGVsLmF0dHJzTWFwW25hbWVdO1xuICB9XG4gIHJldHVybiB2YWxcbn1cblxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXggKFxuICBlbCxcbiAgbmFtZVxuKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBsaXN0W2ldO1xuICAgIGlmIChuYW1lLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICByZXR1cm4gYXR0clxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZVNldEl0ZW0gKFxuICBpdGVtLFxuICByYW5nZVxuKSB7XG4gIGlmIChyYW5nZSkge1xuICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICBpdGVtLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgaXRlbS5lbmQgPSByYW5nZS5lbmQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGUgZ2VuZXJhdGlvbiBmb3IgY29tcG9uZW50IHYtbW9kZWxcbiAqL1xuZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgdHJpbSA9IHJlZi50cmltO1xuXG4gIHZhciBiYXNlVmFsdWVFeHByZXNzaW9uID0gJyQkdic7XG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9XG4gICAgICBcIih0eXBlb2YgXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIgPT09ICdzdHJpbmcnXCIgK1xuICAgICAgXCI/IFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiLnRyaW0oKVwiICtcbiAgICAgIFwiOiBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICB9XG4gIHZhciBhc3NpZ25tZW50ID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG5cbiAgZWwubW9kZWwgPSB7XG4gICAgdmFsdWU6IChcIihcIiArIHZhbHVlICsgXCIpXCIpLFxuICAgIGV4cHJlc3Npb246IEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICBjYWxsYmFjazogKFwiZnVuY3Rpb24gKFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiKSB7XCIgKyBhc3NpZ25tZW50ICsgXCJ9XCIpXG4gIH07XG59XG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlIChcbiAgdmFsdWUsXG4gIGFzc2lnbm1lbnRcbikge1xuICB2YXIgcmVzID0gcGFyc2VNb2RlbCh2YWx1ZSk7XG4gIGlmIChyZXMua2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuICh2YWx1ZSArIFwiPVwiICsgYXNzaWdubWVudClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiJHNldChcIiArIChyZXMuZXhwKSArIFwiLCBcIiArIChyZXMua2V5KSArIFwiLCBcIiArIGFzc2lnbm1lbnQgKyBcIilcIilcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGEgdi1tb2RlbCBleHByZXNzaW9uIGludG8gYSBiYXNlIHBhdGggYW5kIGEgZmluYWwga2V5IHNlZ21lbnQuXG4gKiBIYW5kbGVzIGJvdGggZG90LXBhdGggYW5kIHBvc3NpYmxlIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBQb3NzaWJsZSBjYXNlczpcbiAqXG4gKiAtIHRlc3RcbiAqIC0gdGVzdFtrZXldXG4gKiAtIHRlc3RbdGVzdDFba2V5XV1cbiAqIC0gdGVzdFtcImFcIl1ba2V5XVxuICogLSB4eHgudGVzdFthW2FdLnRlc3QxW2tleV1dXG4gKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFba2V5XV1cbiAqXG4gKi9cblxudmFyIGxlbiwgc3RyLCBjaHIsIGluZGV4JDEsIGV4cHJlc3Npb25Qb3MsIGV4cHJlc3Npb25FbmRQb3M7XG5cblxuXG5mdW5jdGlvbiBwYXJzZU1vZGVsICh2YWwpIHtcbiAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvcHVsbC83NzMwXG4gIC8vIGFsbG93IHYtbW9kZWw9XCJvYmoudmFsIFwiICh0cmFpbGluZyB3aGl0ZXNwYWNlKVxuICB2YWwgPSB2YWwudHJpbSgpO1xuICBsZW4gPSB2YWwubGVuZ3RoO1xuXG4gIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICBpbmRleCQxID0gdmFsLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgaWYgKGluZGV4JDEgPiAtMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwuc2xpY2UoMCwgaW5kZXgkMSksXG4gICAgICAgIGtleTogJ1wiJyArIHZhbC5zbGljZShpbmRleCQxICsgMSkgKyAnXCInXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLFxuICAgICAgICBrZXk6IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdHIgPSB2YWw7XG4gIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICBwYXJzZUJyYWNrZXQoY2hyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cDogdmFsLnNsaWNlKDAsIGV4cHJlc3Npb25Qb3MpLFxuICAgIGtleTogdmFsLnNsaWNlKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQgKCkge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQoKytpbmRleCQxKVxufVxuXG5mdW5jdGlvbiBlb2YgKCkge1xuICByZXR1cm4gaW5kZXgkMSA+PSBsZW5cbn1cblxuZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gIHJldHVybiBjaHIgPT09IDB4MjIgfHwgY2hyID09PSAweDI3XG59XG5cbmZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gIHZhciBpbkJyYWNrZXQgPSAxO1xuICBleHByZXNzaW9uUG9zID0gaW5kZXgkMTtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoaXNTdHJpbmdTdGFydChjaHIpKSB7XG4gICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgIGlmIChjaHIgPT09IDB4NUQpIHsgaW5CcmFja2V0LS07IH1cbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHdhcm4kMTtcblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbmZ1bmN0aW9uIG1vZGVsIChcbiAgZWwsXG4gIGRpcixcbiAgX3dhcm5cbikge1xuICB3YXJuJDEgPSBfd2FybjtcbiAgdmFyIHZhbHVlID0gZGlyLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVycztcbiAgdmFyIHRhZyA9IGVsLnRhZztcbiAgdmFyIHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIHtcbiAgICAvLyBpbnB1dHMgd2l0aCB0eXBlPVwiZmlsZVwiIGFyZSByZWFkIG9ubHkgYW5kIHNldHRpbmcgdGhlIGlucHV0J3NcbiAgICAvLyB2YWx1ZSB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiIHR5cGU9XFxcImZpbGVcXFwiPjpcXG5cIiArXG4gICAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgIGdlblNlbGVjdChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIGdlblJhZGlvTW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICBnZW5EZWZhdWx0TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKCFjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsIGRvZXNuJ3QgbmVlZCBleHRyYSBydW50aW1lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSB7XG4gICAgd2FybiQxKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGVsZW1lbnQgdHlwZS4gXCIgK1xuICAgICAgJ0lmIHlvdSBhcmUgd29ya2luZyB3aXRoIGNvbnRlbnRlZGl0YWJsZSwgaXRcXCdzIHJlY29tbWVuZGVkIHRvICcgK1xuICAgICAgJ3dyYXAgYSBsaWJyYXJ5IGRlZGljYXRlZCBmb3IgdGhhdCBwdXJwb3NlIGluc2lkZSBhIGN1c3RvbSBjb21wb25lbnQuJyxcbiAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICApO1xuICB9XG5cbiAgLy8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhciB0cnVlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0cnVlLXZhbHVlJykgfHwgJ3RydWUnO1xuICB2YXIgZmFsc2VWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2ZhbHNlLXZhbHVlJykgfHwgJ2ZhbHNlJztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgIFwiQXJyYXkuaXNBcnJheShcIiArIHZhbHVlICsgXCIpXCIgK1xuICAgIFwiP19pKFwiICsgdmFsdWUgKyBcIixcIiArIHZhbHVlQmluZGluZyArIFwiKT4tMVwiICsgKFxuICAgICAgdHJ1ZVZhbHVlQmluZGluZyA9PT0gJ3RydWUnXG4gICAgICAgID8gKFwiOihcIiArIHZhbHVlICsgXCIpXCIpXG4gICAgICAgIDogKFwiOl9xKFwiICsgdmFsdWUgKyBcIixcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIilcIilcbiAgICApXG4gICk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLFxuICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuICAgICAgICAnJCRlbD0kZXZlbnQudGFyZ2V0LCcgK1xuICAgICAgICBcIiQkYz0kJGVsLmNoZWNrZWQ/KFwiICsgdHJ1ZVZhbHVlQmluZGluZyArIFwiKTooXCIgKyBmYWxzZVZhbHVlQmluZGluZyArIFwiKTtcIiArXG4gICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG4gICAgICBcInZhciAkJHY9XCIgKyAobnVtYmVyID8gJ19uKCcgKyB2YWx1ZUJpbmRpbmcgKyAnKScgOiB2YWx1ZUJpbmRpbmcpICsgXCIsXCIgK1xuICAgICAgICAgICckJGk9X2koJCRhLCQkdik7JyArXG4gICAgICBcImlmKCQkZWwuY2hlY2tlZCl7JCRpPDAmJihcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYS5jb25jYXQoWyQkdl0pJykpICsgXCIpfVwiICtcbiAgICAgIFwiZWxzZXskJGk+LTEmJihcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpJykpICsgXCIpfVwiICtcbiAgICBcIn1lbHNle1wiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRjJykpICsgXCJ9XCIsXG4gICAgbnVsbCwgdHJ1ZVxuICApO1xufVxuXG5mdW5jdGlvbiBnZW5SYWRpb01vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICB2YWx1ZUJpbmRpbmcgPSBudW1iZXIgPyAoXCJfbihcIiArIHZhbHVlQmluZGluZyArIFwiKVwiKSA6IHZhbHVlQmluZGluZztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLCAoXCJfcShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5TZWxlY3QgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIHZhciBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgdmFyIHNlbGVjdGVkVmFsID0gXCJBcnJheS5wcm90b3R5cGUuZmlsdGVyXCIgK1xuICAgIFwiLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSlcIiArXG4gICAgXCIubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSBcXFwiX3ZhbHVlXFxcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO1wiICtcbiAgICBcInJldHVybiBcIiArIChudW1iZXIgPyAnX24odmFsKScgOiAndmFsJykgKyBcIn0pXCI7XG5cbiAgdmFyIGFzc2lnbm1lbnQgPSAnJGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdJztcbiAgdmFyIGNvZGUgPSBcInZhciAkJHNlbGVjdGVkVmFsID0gXCIgKyBzZWxlY3RlZFZhbCArIFwiO1wiO1xuICBjb2RlID0gY29kZSArIFwiIFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBhc3NpZ25tZW50KSk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBjb2RlLCBudWxsLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2VuRGVmYXVsdE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cbiAgLy8gd2FybiBpZiB2LWJpbmQ6dmFsdWUgY29uZmxpY3RzIHdpdGggdi1tb2RlbFxuICAvLyBleGNlcHQgZm9yIGlucHV0cyB3aXRoIHYtYmluZDp0eXBlXG4gIHtcbiAgICB2YXIgdmFsdWUkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSB8fCBlbC5hdHRyc01hcFsnOnZhbHVlJ107XG4gICAgdmFyIHR5cGVCaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp0eXBlJ10gfHwgZWwuYXR0cnNNYXBbJzp0eXBlJ107XG4gICAgaWYgKHZhbHVlJDEgJiYgIXR5cGVCaW5kaW5nKSB7XG4gICAgICB2YXIgYmluZGluZyA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSA/ICd2LWJpbmQ6dmFsdWUnIDogJzp2YWx1ZSc7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGJpbmRpbmcgKyBcIj1cXFwiXCIgKyB2YWx1ZSQxICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWwgb24gdGhlIHNhbWUgZWxlbWVudCBcIiArXG4gICAgICAgICdiZWNhdXNlIHRoZSBsYXR0ZXIgYWxyZWFkeSBleHBhbmRzIHRvIGEgdmFsdWUgYmluZGluZyBpbnRlcm5hbGx5JyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbYmluZGluZ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlZiA9IG1vZGlmaWVycyB8fCB7fTtcbiAgdmFyIGxhenkgPSByZWYubGF6eTtcbiAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG4gIHZhciBuZWVkQ29tcG9zaXRpb25HdWFyZCA9ICFsYXp5ICYmIHR5cGUgIT09ICdyYW5nZSc7XG4gIHZhciBldmVudCA9IGxhenlcbiAgICA/ICdjaGFuZ2UnXG4gICAgOiB0eXBlID09PSAncmFuZ2UnXG4gICAgICA/IFJBTkdFX1RPS0VOXG4gICAgICA6ICdpbnB1dCc7XG5cbiAgdmFyIHZhbHVlRXhwcmVzc2lvbiA9ICckZXZlbnQudGFyZ2V0LnZhbHVlJztcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBcIiRldmVudC50YXJnZXQudmFsdWUudHJpbSgpXCI7XG4gIH1cbiAgaWYgKG51bWJlcikge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuXG4gIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG4gIGlmIChuZWVkQ29tcG9zaXRpb25HdWFyZCkge1xuICAgIGNvZGUgPSBcImlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtcIiArIGNvZGU7XG4gIH1cblxuICBhZGRQcm9wKGVsLCAndmFsdWUnLCAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgaWYgKHRyaW0gfHwgbnVtYmVyKSB7XG4gICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc2FycnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAoaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgY2IgPSBlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUuX3BlbmRpbmdbdm5vZGUua2V5XSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgbGVhdmVDYW5jZWxsZWQgJiYgbGVhdmVDYW5jZWxsZWQoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKGVsKTtcbiAgICB9XG4gICAgZWwuX2xlYXZlQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSAoKSB7XG4gICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICAvLyByZWNvcmQgbGVhdmluZyBlbGVtZW50XG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cgJiYgZWwucGFyZW50Tm9kZSkge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxudmFyIG1vZHVsZXMgPSBwbGF0Zm9ybU1vZHVsZXMuY29uY2F0KGJhc2VNb2R1bGVzKTtcblxudmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbi8qKlxuICogTm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IGxpa2UgYXR0YWNoaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKGlzSUU5KSB7XG4gIC8vIGh0dHA6Ly93d3cubWF0dHM0MTEuY29tL3Bvc3QvaW50ZXJuZXQtZXhwbG9yZXItOS1vbmlucHV0L1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZGlyZWN0aXZlID0ge1xuICBpbnNlcnRlZDogZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gIzY5MDNcbiAgICAgIGlmIChvbGRWbm9kZS5lbG0gJiYgIW9sZFZub2RlLmVsbS5fdk9wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xuICAgICAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycy5sYXp5KSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxuICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXNJRTkpIHtcbiAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFVwZGF0ZWQ6IGZ1bmN0aW9uIGNvbXBvbmVudFVwZGF0ZWQgKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAvLyBpbiBjYXNlIHRoZSBvcHRpb25zIHJlbmRlcmVkIGJ5IHYtZm9yIGhhdmUgY2hhbmdlZCxcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgIC8vIGRldGVjdCBzdWNoIGNhc2VzIGFuZCBmaWx0ZXIgb3V0IHZhbHVlcyB0aGF0IG5vIGxvbmdlciBoYXMgYSBtYXRjaGluZ1xuICAgICAgLy8gb3B0aW9uIGluIHRoZSBET00uXG4gICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICB2YXIgY3VyT3B0aW9ucyA9IGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcbiAgICAgIGlmIChjdXJPcHRpb25zLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zW2ldKTsgfSkpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgLy8gbm8gbWF0Y2hpbmcgb3B0aW9uIGZvdW5kIGZvciBhdCBsZWFzdCBvbmUgdmFsdWVcbiAgICAgICAgdmFyIG5lZWRSZXNldCA9IGVsLm11bHRpcGxlXG4gICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgOiBiaW5kaW5nLnZhbHVlICE9PSBiaW5kaW5nLm9sZFZhbHVlICYmIGhhc05vTWF0Y2hpbmdPcHRpb24oYmluZGluZy52YWx1ZSwgY3VyT3B0aW9ucyk7XG4gICAgICAgIGlmIChuZWVkUmVzZXQpIHtcbiAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgfSwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIHZhciB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudC4gVXNlICcgK1xuICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAvLyB3YXJuIGludmFsaWQgbW9kZVxuICAgIGlmIChtb2RlICYmIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJyArIG1vZGUsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9sZWF2aW5nKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIGEga2V5IHRoYXQgaXMgdW5pcXVlIHRvIHRoZSB2bm9kZSB0eXBlIGFuZCB0byB0aGlzIHRyYW5zaXRpb25cbiAgICAvLyBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMga2V5IHdpbGwgYmUgdXNlZCB0byByZW1vdmUgcGVuZGluZyBsZWF2aW5nIG5vZGVzXG4gICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgIHZhciBpZCA9IFwiX190cmFuc2l0aW9uLVwiICsgKHRoaXMuX3VpZCkgKyBcIi1cIjtcbiAgICBjaGlsZC5rZXkgPSBjaGlsZC5rZXkgPT0gbnVsbFxuICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgPyBpZCArICdjb21tZW50J1xuICAgICAgICA6IGlkICsgY2hpbGQudGFnXG4gICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgPyAoU3RyaW5nKGNoaWxkLmtleSkuaW5kZXhPZihpZCkgPT09IDAgPyBjaGlsZC5rZXkgOiBpZCArIGNoaWxkLmtleSlcbiAgICAgICAgOiBjaGlsZC5rZXk7XG5cbiAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgIHZhciBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIHZhciBvbGRDaGlsZCA9IGdldFJlYWxDaGlsZChvbGRSYXdDaGlsZCk7XG5cbiAgICAvLyBtYXJrIHYtc2hvd1xuICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxuICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcbiAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgIG9sZENoaWxkLmRhdGEgJiZcbiAgICAgICFpc1NhbWVDaGlsZChjaGlsZCwgb2xkQ2hpbGQpICYmXG4gICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcbiAgICAgICEob2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UgJiYgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudClcbiAgICApIHtcbiAgICAgIC8vIHJlcGxhY2Ugb2xkIGNoaWxkIHRyYW5zaXRpb24gZGF0YSB3aXRoIGZyZXNoIG9uZVxuICAgICAgLy8gaW1wb3J0YW50IGZvciBkeW5hbWljIHRyYW5zaXRpb25zIVxuICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgLy8gaGFuZGxlIHRyYW5zaXRpb24gbW9kZVxuICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XG4gICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICB0aGlzLl9sZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcyQxLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxheWVkTGVhdmU7XG4gICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnYWZ0ZXJFbnRlcicsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdlbnRlckNhbmNlbGxlZCcsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzJDEuX19wYXRjaF9fKFxuICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICB0aGlzJDEua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzJDEuX3Zub2RlID0gdGhpcyQxLmtlcHQ7XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIHVwZGF0ZS5jYWxsKHRoaXMkMSwgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxudmFyIGRlZmF1bHRUYWdSRSA9IC9cXHtcXHsoKD86LnxcXHI/XFxuKSs/KVxcfVxcfS9nO1xudmFyIHJlZ2V4RXNjYXBlUkUgPSAvWy0uKis/XiR7fSgpfFtcXF1cXC9cXFxcXS9nO1xuXG52YXIgYnVpbGRSZWdleCA9IGNhY2hlZChmdW5jdGlvbiAoZGVsaW1pdGVycykge1xuICB2YXIgb3BlbiA9IGRlbGltaXRlcnNbMF0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHZhciBjbG9zZSA9IGRlbGltaXRlcnNbMV0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHJldHVybiBuZXcgUmVnRXhwKG9wZW4gKyAnKCg/Oi58XFxcXG4pKz8pJyArIGNsb3NlLCAnZycpXG59KTtcblxuXG5cbmZ1bmN0aW9uIHBhcnNlVGV4dCAoXG4gIHRleHQsXG4gIGRlbGltaXRlcnNcbikge1xuICB2YXIgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcbiAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIgcmF3VG9rZW5zID0gW107XG4gIHZhciBsYXN0SW5kZXggPSB0YWdSRS5sYXN0SW5kZXggPSAwO1xuICB2YXIgbWF0Y2gsIGluZGV4LCB0b2tlblZhbHVlO1xuICB3aGlsZSAoKG1hdGNoID0gdGFnUkUuZXhlYyh0ZXh0KSkpIHtcbiAgICBpbmRleCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIHB1c2ggdGV4dCB0b2tlblxuICAgIGlmIChpbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4LCBpbmRleCkpO1xuICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICAgIH1cbiAgICAvLyB0YWcgdG9rZW5cbiAgICB2YXIgZXhwID0gcGFyc2VGaWx0ZXJzKG1hdGNoWzFdLnRyaW0oKSk7XG4gICAgdG9rZW5zLnB1c2goKFwiX3MoXCIgKyBleHAgKyBcIilcIikpO1xuICAgIHJhd1Rva2Vucy5wdXNoKHsgJ0BiaW5kaW5nJzogZXhwIH0pO1xuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICB9XG4gIGlmIChsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCkpO1xuICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRva2VuVmFsdWUpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGV4cHJlc3Npb246IHRva2Vucy5qb2luKCcrJyksXG4gICAgdG9rZW5zOiByYXdUb2tlbnNcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNDbGFzcyA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdjbGFzcycpO1xuICBpZiAoc3RhdGljQ2xhc3MpIHtcbiAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY0NsYXNzLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiY2xhc3M9XFxcIlwiICsgc3RhdGljQ2xhc3MgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGNsYXNzPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6Y2xhc3M9XCJ2YWxcIj4uJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ2NsYXNzJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChzdGF0aWNDbGFzcykge1xuICAgIGVsLnN0YXRpY0NsYXNzID0gSlNPTi5zdHJpbmdpZnkoc3RhdGljQ2xhc3MpO1xuICB9XG4gIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKGNsYXNzQmluZGluZykge1xuICAgIGVsLmNsYXNzQmluZGluZyA9IGNsYXNzQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljQ2xhc3MpIHtcbiAgICBkYXRhICs9IFwic3RhdGljQ2xhc3M6XCIgKyAoZWwuc3RhdGljQ2xhc3MpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJjbGFzczpcIiArIChlbC5jbGFzc0JpbmRpbmcpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIGtsYXNzJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljQ2xhc3MnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSxcbiAgZ2VuRGF0YTogZ2VuRGF0YVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMSAoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNTdHlsZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzdHlsZScpO1xuICBpZiAoc3RhdGljU3R5bGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICB7XG4gICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY1N0eWxlLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwic3R5bGU9XFxcIlwiICsgc3RhdGljU3R5bGUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJyxcbiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsnc3R5bGUnXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5zdGF0aWNTdHlsZSA9IEpTT04uc3RyaW5naWZ5KHBhcnNlU3R5bGVUZXh0KHN0YXRpY1N0eWxlKSk7XG4gIH1cblxuICB2YXIgc3R5bGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzdHlsZScsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChzdHlsZUJpbmRpbmcpIHtcbiAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGF0YSQxIChlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljU3R5bGUpIHtcbiAgICBkYXRhICs9IFwic3RhdGljU3R5bGU6XCIgKyAoZWwuc3RhdGljU3R5bGUpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnN0eWxlQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJzdHlsZTooXCIgKyAoZWwuc3R5bGVCaW5kaW5nKSArIFwiKSxcIjtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG52YXIgc3R5bGUkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNTdHlsZSddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMVxufTtcblxuLyogICovXG5cbnZhciBkZWNvZGVyO1xuXG52YXIgaGUgPSB7XG4gIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlIChodG1sKSB7XG4gICAgZGVjb2RlciA9IGRlY29kZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGVjb2Rlci5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiBkZWNvZGVyLnRleHRDb250ZW50XG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgaXNVbmFyeVRhZyA9IG1ha2VNYXAoXG4gICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbiwnICtcbiAgJ2xpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJ1xuKTtcblxuLy8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuXG4vLyAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpXG52YXIgY2FuQmVMZWZ0T3BlblRhZyA9IG1ha2VNYXAoXG4gICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJ1xuKTtcblxuLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuLy8gUGhyYXNpbmcgQ29udGVudCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNwaHJhc2luZy1jb250ZW50XG52YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsYmFzZSxibG9ja3F1b3RlLGJvZHksY2FwdGlvbixjb2wsY29sZ3JvdXAsZGQsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0sJyArXG4gICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgJ29wdGdyb3VwLG9wdGlvbixwYXJhbSxycCxydCxzb3VyY2Usc3R5bGUsc3VtbWFyeSx0Ym9keSx0ZCx0Zm9vdCx0aCx0aGVhZCwnICtcbiAgJ3RpdGxlLHRyLHRyYWNrJ1xuKTtcblxuLyoqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBpdCdzIG1vc3RseSB2ZW5kb3IgY29kZS5cbiAqL1xuXG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbnZhciBhdHRyaWJ1dGUgPSAvXlxccyooW15cXHNcIic8PlxcLz1dKykoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbnZhciBkeW5hbWljQXJnQXR0cmlidXRlID0gL15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XStcXF1bXlxcc1wiJzw+XFwvPV0qKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xudmFyIG5jbmFtZSA9IFwiW2EtekEtWl9dW1xcXFwtXFxcXC4wLTlfYS16QS1aXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKlwiO1xudmFyIHFuYW1lQ2FwdHVyZSA9IFwiKCg/OlwiICsgbmNuYW1lICsgXCJcXFxcOik/XCIgKyBuY25hbWUgKyBcIilcIjtcbnZhciBzdGFydFRhZ09wZW4gPSBuZXcgUmVnRXhwKChcIl48XCIgKyBxbmFtZUNhcHR1cmUpKTtcbnZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG52YXIgZW5kVGFnID0gbmV3IFJlZ0V4cCgoXCJePFxcXFwvXCIgKyBxbmFtZUNhcHR1cmUgKyBcIltePl0qPlwiKSk7XG52YXIgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xuLy8gIzcyOTg6IGVzY2FwZSAtIHRvIGF2b2lkIGJlaW5nIHBhc2VkIGFzIEhUTUwgY29tbWVudCB3aGVuIGlubGluZWQgaW4gcGFnZVxudmFyIGNvbW1lbnQgPSAvXjwhXFwtLS87XG52YXIgY29uZGl0aW9uYWxDb21tZW50ID0gL148IVxcWy87XG5cbi8vIFNwZWNpYWwgRWxlbWVudHMgKGNhbiBjb250YWluIGFueXRoaW5nKVxudmFyIGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHJlQ2FjaGUgPSB7fTtcblxudmFyIGRlY29kaW5nTWFwID0ge1xuICAnJmx0Oyc6ICc8JyxcbiAgJyZndDsnOiAnPicsXG4gICcmcXVvdDsnOiAnXCInLFxuICAnJmFtcDsnOiAnJicsXG4gICcmIzEwOyc6ICdcXG4nLFxuICAnJiM5Oyc6ICdcXHQnLFxuICAnJiMzOTsnOiBcIidcIlxufTtcbnZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5KTsvZztcbnZhciBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2c7XG5cbi8vICM1OTkyXG52YXIgaXNJZ25vcmVOZXdsaW5lVGFnID0gbWFrZU1hcCgncHJlLHRleHRhcmVhJywgdHJ1ZSk7XG52YXIgc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lID0gZnVuY3Rpb24gKHRhZywgaHRtbCkgeyByZXR1cm4gdGFnICYmIGlzSWdub3JlTmV3bGluZVRhZyh0YWcpICYmIGh0bWxbMF0gPT09ICdcXG4nOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGVBdHRyICh2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgdmFyIHJlID0gc2hvdWxkRGVjb2RlTmV3bGluZXMgPyBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA6IGVuY29kZWRBdHRyO1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBkZWNvZGluZ01hcFttYXRjaF07IH0pXG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIGV4cGVjdEhUTUwgPSBvcHRpb25zLmV4cGVjdEhUTUw7XG4gIHZhciBpc1VuYXJ5VGFnJCQxID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICB2YXIgY2FuQmVMZWZ0T3BlblRhZyQkMSA9IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyB8fCBubztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gIHdoaWxlIChodG1sKSB7XG4gICAgbGFzdCA9IGh0bWw7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHBsYWludGV4dCBjb250ZW50IGVsZW1lbnQgbGlrZSBzY3JpcHQvc3R5bGVcbiAgICBpZiAoIWxhc3RUYWcgfHwgIWlzUGxhaW5UZXh0RWxlbWVudChsYXN0VGFnKSkge1xuICAgICAgdmFyIHRleHRFbmQgPSBodG1sLmluZGV4T2YoJzwnKTtcbiAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgIGlmIChjb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG91bGRLZWVwQ29tbWVudCkge1xuICAgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgY29tbWVudEVuZCksIGluZGV4LCBpbmRleCArIGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UoY29tbWVudEVuZCArIDMpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICBhZHZhbmNlKGRvY3R5cGVNYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbmQgdGFnOlxuICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICB2YXIgc3RhcnRUYWdNYXRjaCA9IHBhcnNlU3RhcnRUYWcoKTtcbiAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YXJ0VGFnTWF0Y2gudGFnTmFtZSwgaHRtbCkpIHtcbiAgICAgICAgICAgIGFkdmFuY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRleHQgPSAodm9pZCAwKSwgcmVzdCA9ICh2b2lkIDApLCBuZXh0ID0gKHZvaWQgMCk7XG4gICAgICBpZiAodGV4dEVuZCA+PSAwKSB7XG4gICAgICAgIHJlc3QgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIWNvbW1lbnQudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyA8IGluIHBsYWluIHRleHQsIGJlIGZvcmdpdmluZyBhbmQgdHJlYXQgaXQgYXMgdGV4dFxuICAgICAgICAgIG5leHQgPSByZXN0LmluZGV4T2YoJzwnLCAxKTtcbiAgICAgICAgICBpZiAobmV4dCA8IDApIHsgYnJlYWsgfVxuICAgICAgICAgIHRleHRFbmQgKz0gbmV4dDtcbiAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gaHRtbC5zdWJzdHJpbmcoMCwgdGV4dEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICB0ZXh0ID0gaHRtbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgYWR2YW5jZSh0ZXh0Lmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0LCBpbmRleCAtIHRleHQubGVuZ3RoLCBpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlbmRUYWdMZW5ndGggPSAwO1xuICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcmVTdGFja2VkVGFnID0gcmVDYWNoZVtzdGFja2VkVGFnXSB8fCAocmVDYWNoZVtzdGFja2VkVGFnXSA9IG5ldyBSZWdFeHAoJyhbXFxcXHNcXFxcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7XG4gICAgICB2YXIgcmVzdCQxID0gaHRtbC5yZXBsYWNlKHJlU3RhY2tlZFRhZywgZnVuY3Rpb24gKGFsbCwgdGV4dCwgZW5kVGFnKSB7XG4gICAgICAgIGVuZFRhZ0xlbmd0aCA9IGVuZFRhZy5sZW5ndGg7XG4gICAgICAgIGlmICghaXNQbGFpblRleHRFbGVtZW50KHN0YWNrZWRUYWcpICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFwtLShbXFxzXFxTXSo/KS0tPi9nLCAnJDEnKSAvLyAjNzI5OFxuICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywgJyQxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFja2VkVGFnLCB0ZXh0KSkge1xuICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzKSB7XG4gICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJydcbiAgICAgIH0pO1xuICAgICAgaW5kZXggKz0gaHRtbC5sZW5ndGggLSByZXN0JDEubGVuZ3RoO1xuICAgICAgaHRtbCA9IHJlc3QkMTtcbiAgICAgIHBhcnNlRW5kVGFnKHN0YWNrZWRUYWcsIGluZGV4IC0gZW5kVGFnTGVuZ3RoLCBpbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKGh0bWwgPT09IGxhc3QpIHtcbiAgICAgIG9wdGlvbnMuY2hhcnMgJiYgb3B0aW9ucy5jaGFycyhodG1sKTtcbiAgICAgIGlmICghc3RhY2subGVuZ3RoICYmIG9wdGlvbnMud2Fybikge1xuICAgICAgICBvcHRpb25zLndhcm4oKFwiTWFsLWZvcm1hdHRlZCB0YWcgYXQgZW5kIG9mIHRlbXBsYXRlOiBcXFwiXCIgKyBodG1sICsgXCJcXFwiXCIpLCB7IHN0YXJ0OiBpbmRleCArIGh0bWwubGVuZ3RoIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3NcbiAgcGFyc2VFbmRUYWcoKTtcblxuICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG4gICAgaW5kZXggKz0gbjtcbiAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0YXJ0VGFnICgpIHtcbiAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB7XG4gICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuICAgICAgICBhdHRyczogW10sXG4gICAgICAgIHN0YXJ0OiBpbmRleFxuICAgICAgfTtcbiAgICAgIGFkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTtcbiAgICAgIHZhciBlbmQsIGF0dHI7XG4gICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goZHluYW1pY0FyZ0F0dHJpYnV0ZSkgfHwgaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICBhdHRyLnN0YXJ0ID0gaW5kZXg7XG4gICAgICAgIGFkdmFuY2UoYXR0clswXS5sZW5ndGgpO1xuICAgICAgICBhdHRyLmVuZCA9IGluZGV4O1xuICAgICAgICBtYXRjaC5hdHRycy5wdXNoKGF0dHIpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCkge1xuICAgICAgICBtYXRjaC51bmFyeVNsYXNoID0gZW5kWzFdO1xuICAgICAgICBhZHZhbmNlKGVuZFswXS5sZW5ndGgpO1xuICAgICAgICBtYXRjaC5lbmQgPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3RhcnRUYWcgKG1hdGNoKSB7XG4gICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lO1xuICAgIHZhciB1bmFyeVNsYXNoID0gbWF0Y2gudW5hcnlTbGFzaDtcblxuICAgIGlmIChleHBlY3RIVE1MKSB7XG4gICAgICBpZiAobGFzdFRhZyA9PT0gJ3AnICYmIGlzTm9uUGhyYXNpbmdUYWcodGFnTmFtZSkpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7XG4gICAgICB9XG4gICAgICBpZiAoY2FuQmVMZWZ0T3BlblRhZyQkMSh0YWdOYW1lKSAmJiBsYXN0VGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWckJDEodGFnTmFtZSkgfHwgISF1bmFyeVNsYXNoO1xuXG4gICAgdmFyIGwgPSBtYXRjaC5hdHRycy5sZW5ndGg7XG4gICAgdmFyIGF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYXJncyA9IG1hdGNoLmF0dHJzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSB0YWdOYW1lID09PSAnYScgJiYgYXJnc1sxXSA9PT0gJ2hyZWYnXG4gICAgICAgID8gb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWZcbiAgICAgICAgOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzO1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGFyZ3NbMV0sXG4gICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcylcbiAgICAgIH07XG4gICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGFyZ3Muc3RhcnQgKyBhcmdzWzBdLm1hdGNoKC9eXFxzKi8pLmxlbmd0aDtcbiAgICAgICAgYXR0cnNbaV0uZW5kID0gYXJncy5lbmQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF1bmFyeSkge1xuICAgICAgc3RhY2sucHVzaCh7IHRhZzogdGFnTmFtZSwgbG93ZXJDYXNlZFRhZzogdGFnTmFtZS50b0xvd2VyQ2FzZSgpLCBhdHRyczogYXR0cnMsIHN0YXJ0OiBtYXRjaC5zdGFydCwgZW5kOiBtYXRjaC5lbmQgfSk7XG4gICAgICBsYXN0VGFnID0gdGFnTmFtZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBhdHRycywgdW5hcnksIG1hdGNoLnN0YXJ0LCBtYXRjaC5lbmQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRW5kVGFnICh0YWdOYW1lLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHBvcywgbG93ZXJDYXNlZFRhZ05hbWU7XG4gICAgaWYgKHN0YXJ0ID09IG51bGwpIHsgc3RhcnQgPSBpbmRleDsgfVxuICAgIGlmIChlbmQgPT0gbnVsbCkgeyBlbmQgPSBpbmRleDsgfVxuXG4gICAgLy8gRmluZCB0aGUgY2xvc2VzdCBvcGVuZWQgdGFnIG9mIHRoZSBzYW1lIHR5cGVcbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgbG93ZXJDYXNlZFRhZ05hbWUgPSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBmb3IgKHBvcyA9IHN0YWNrLmxlbmd0aCAtIDE7IHBvcyA+PSAwOyBwb3MtLSkge1xuICAgICAgICBpZiAoc3RhY2tbcG9zXS5sb3dlckNhc2VkVGFnID09PSBsb3dlckNhc2VkVGFnTmFtZSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm8gdGFnIG5hbWUgaXMgcHJvdmlkZWQsIGNsZWFuIHNob3BcbiAgICAgIHBvcyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAvLyBDbG9zZSBhbGwgdGhlIG9wZW4gZWxlbWVudHMsIHVwIHRoZSBzdGFja1xuICAgICAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gcG9zOyBpLS0pIHtcbiAgICAgICAgaWYgKGkgPiBwb3MgfHwgIXRhZ05hbWUgJiZcbiAgICAgICAgICBvcHRpb25zLndhcm5cbiAgICAgICAgKSB7XG4gICAgICAgICAgb3B0aW9ucy53YXJuKFxuICAgICAgICAgICAgKFwidGFnIDxcIiArIChzdGFja1tpXS50YWcpICsgXCI+IGhhcyBubyBtYXRjaGluZyBlbmQgdGFnLlwiKSxcbiAgICAgICAgICAgIHsgc3RhcnQ6IHN0YWNrW2ldLnN0YXJ0LCBlbmQ6IHN0YWNrW2ldLmVuZCB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5lbmQpIHtcbiAgICAgICAgICBvcHRpb25zLmVuZChzdGFja1tpXS50YWcsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgb3BlbiBlbGVtZW50cyBmcm9tIHRoZSBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoID0gcG9zO1xuICAgICAgbGFzdFRhZyA9IHBvcyAmJiBzdGFja1twb3MgLSAxXS50YWc7XG4gICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ2JyJykge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgdHJ1ZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ3AnKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCBmYWxzZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5lbmQpIHtcbiAgICAgICAgb3B0aW9ucy5lbmQodGFnTmFtZSwgc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgb25SRSA9IC9eQHxedi1vbjovO1xudmFyIGRpclJFID0gL152LXxeQHxeOi87XG52YXIgZm9yQWxpYXNSRSA9IC8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLztcbnZhciBmb3JJdGVyYXRvclJFID0gLywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvO1xudmFyIHN0cmlwUGFyZW5zUkUgPSAvXlxcKHxcXCkkL2c7XG52YXIgZHluYW1pY0FyZ1JFID0gL15cXFsuKlxcXSQvO1xuXG52YXIgYXJnUkUgPSAvOiguKikkLztcbnZhciBiaW5kUkUgPSAvXjp8XlxcLnxedi1iaW5kOi87XG52YXIgbW9kaWZpZXJSRSA9IC9cXC5bXi5cXF1dKyg/PVteXFxdXSokKS9nO1xuXG52YXIgc2xvdFJFID0gL152LXNsb3QoOnwkKXxeIy87XG5cbnZhciBsaW5lQnJlYWtSRSA9IC9bXFxyXFxuXS87XG52YXIgd2hpdGVzcGFjZVJFJDEgPSAvXFxzKy9nO1xuXG52YXIgaW52YWxpZEF0dHJpYnV0ZVJFID0gL1tcXHNcIic8PlxcLz1dLztcblxudmFyIGRlY29kZUhUTUxDYWNoZWQgPSBjYWNoZWQoaGUuZGVjb2RlKTtcblxudmFyIGVtcHR5U2xvdFNjb3BlVG9rZW4gPSBcIl9lbXB0eV9cIjtcblxuLy8gY29uZmlndXJhYmxlIHN0YXRlXG52YXIgd2FybiQyO1xudmFyIGRlbGltaXRlcnM7XG52YXIgdHJhbnNmb3JtcztcbnZhciBwcmVUcmFuc2Zvcm1zO1xudmFyIHBvc3RUcmFuc2Zvcm1zO1xudmFyIHBsYXRmb3JtSXNQcmVUYWc7XG52YXIgcGxhdGZvcm1NdXN0VXNlUHJvcDtcbnZhciBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZTtcbnZhciBtYXliZUNvbXBvbmVudDtcblxuZnVuY3Rpb24gY3JlYXRlQVNURWxlbWVudCAoXG4gIHRhZyxcbiAgYXR0cnMsXG4gIHBhcmVudFxuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMSxcbiAgICB0YWc6IHRhZyxcbiAgICBhdHRyc0xpc3Q6IGF0dHJzLFxuICAgIGF0dHJzTWFwOiBtYWtlQXR0cnNNYXAoYXR0cnMpLFxuICAgIHJhd0F0dHJzTWFwOiB7fSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBjaGlsZHJlbjogW11cbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgSFRNTCBzdHJpbmcgdG8gQVNULlxuICovXG5mdW5jdGlvbiBwYXJzZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgd2FybiQyID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuXG4gIHBsYXRmb3JtSXNQcmVUYWcgPSBvcHRpb25zLmlzUHJlVGFnIHx8IG5vO1xuICBwbGF0Zm9ybU11c3RVc2VQcm9wID0gb3B0aW9ucy5tdXN0VXNlUHJvcCB8fCBubztcbiAgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UgPSBvcHRpb25zLmdldFRhZ05hbWVzcGFjZSB8fCBubztcbiAgdmFyIGlzUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIG1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuXG4gIHRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybU5vZGUnKTtcbiAgcHJlVHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncHJlVHJhbnNmb3JtTm9kZScpO1xuICBwb3N0VHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncG9zdFRyYW5zZm9ybU5vZGUnKTtcblxuICBkZWxpbWl0ZXJzID0gb3B0aW9ucy5kZWxpbWl0ZXJzO1xuXG4gIHZhciBzdGFjayA9IFtdO1xuICB2YXIgcHJlc2VydmVXaGl0ZXNwYWNlID0gb3B0aW9ucy5wcmVzZXJ2ZVdoaXRlc3BhY2UgIT09IGZhbHNlO1xuICB2YXIgd2hpdGVzcGFjZU9wdGlvbiA9IG9wdGlvbnMud2hpdGVzcGFjZTtcbiAgdmFyIHJvb3Q7XG4gIHZhciBjdXJyZW50UGFyZW50O1xuICB2YXIgaW5WUHJlID0gZmFsc2U7XG4gIHZhciBpblByZSA9IGZhbHNlO1xuICB2YXIgd2FybmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gd2Fybk9uY2UgKG1zZywgcmFuZ2UpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHdhcm4kMihtc2csIHJhbmdlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZUVsZW1lbnQgKGVsZW1lbnQpIHtcbiAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcbiAgICBpZiAoIWluVlByZSAmJiAhZWxlbWVudC5wcm9jZXNzZWQpIHtcbiAgICAgIGVsZW1lbnQgPSBwcm9jZXNzRWxlbWVudChlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gdHJlZSBtYW5hZ2VtZW50XG4gICAgaWYgKCFzdGFjay5sZW5ndGggJiYgZWxlbWVudCAhPT0gcm9vdCkge1xuICAgICAgLy8gYWxsb3cgcm9vdCBlbGVtZW50cyB3aXRoIHYtaWYsIHYtZWxzZS1pZiBhbmQgdi1lbHNlXG4gICAgICBpZiAocm9vdC5pZiAmJiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSkge1xuICAgICAgICB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSWZDb25kaXRpb24ocm9vdCwge1xuICAgICAgICAgIGV4cDogZWxlbWVudC5lbHNlaWYsXG4gICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICBcIkNvbXBvbmVudCB0ZW1wbGF0ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIFwiICtcbiAgICAgICAgICBcIklmIHlvdSBhcmUgdXNpbmcgdi1pZiBvbiBtdWx0aXBsZSBlbGVtZW50cywgXCIgK1xuICAgICAgICAgIFwidXNlIHYtZWxzZS1pZiB0byBjaGFpbiB0aGVtIGluc3RlYWQuXCIsXG4gICAgICAgICAgeyBzdGFydDogZWxlbWVudC5zdGFydCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50UGFyZW50ICYmICFlbGVtZW50LmZvcmJpZGRlbikge1xuICAgICAgaWYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkge1xuICAgICAgICBwcm9jZXNzSWZDb25kaXRpb25zKGVsZW1lbnQsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgLy8gc2NvcGVkIHNsb3RcbiAgICAgICAgICAvLyBrZWVwIGl0IGluIHRoZSBjaGlsZHJlbiBsaXN0IHNvIHRoYXQgdi1lbHNlKC1pZikgY29uZGl0aW9ucyBjYW5cbiAgICAgICAgICAvLyBmaW5kIGl0IGFzIHRoZSBwcmV2IG5vZGUuXG4gICAgICAgICAgdmFyIG5hbWUgPSBlbGVtZW50LnNsb3RUYXJnZXQgfHwgJ1wiZGVmYXVsdFwiJ1xuICAgICAgICAgIDsoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyB8fCAoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyA9IHt9KSlbbmFtZV0gPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5wYXJlbnQgPSBjdXJyZW50UGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbmFsIGNoaWxkcmVuIGNsZWFudXBcbiAgICAvLyBmaWx0ZXIgb3V0IHNjb3BlZCBzbG90c1xuICAgIGVsZW1lbnQuY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gIShjKS5zbG90U2NvcGU7IH0pO1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGUgYWdhaW5cbiAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcblxuICAgIC8vIGNoZWNrIHByZSBzdGF0ZVxuICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXBwbHkgcG9zdC10cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgcG9zdFRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJpbUVuZGluZ1doaXRlc3BhY2UgKGVsKSB7XG4gICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2Ugbm9kZVxuICAgIGlmICghaW5QcmUpIHtcbiAgICAgIHZhciBsYXN0Tm9kZTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgKGxhc3ROb2RlID0gZWwuY2hpbGRyZW5bZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0pICYmXG4gICAgICAgIGxhc3ROb2RlLnR5cGUgPT09IDMgJiZcbiAgICAgICAgbGFzdE5vZGUudGV4dCA9PT0gJyAnXG4gICAgICApIHtcbiAgICAgICAgZWwuY2hpbGRyZW4ucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tSb290Q29uc3RyYWludHMgKGVsKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgIFwiQ2Fubm90IHVzZSA8XCIgKyAoZWwudGFnKSArIFwiPiBhcyBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgaXQgbWF5IFwiICtcbiAgICAgICAgJ2NvbnRhaW4gbXVsdGlwbGUgbm9kZXMuJyxcbiAgICAgICAgeyBzdGFydDogZWwuc3RhcnQgfVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGVsLmF0dHJzTWFwLmhhc093blByb3BlcnR5KCd2LWZvcicpKSB7XG4gICAgICB3YXJuT25jZShcbiAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAnaXQgcmVuZGVycyBtdWx0aXBsZSBlbGVtZW50cy4nLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwYXJzZUhUTUwodGVtcGxhdGUsIHtcbiAgICB3YXJuOiB3YXJuJDIsXG4gICAgZXhwZWN0SFRNTDogb3B0aW9ucy5leHBlY3RIVE1MLFxuICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZyxcbiAgICBjYW5CZUxlZnRPcGVuVGFnOiBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXM6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICBzaG91bGRLZWVwQ29tbWVudDogb3B0aW9ucy5jb21tZW50cyxcbiAgICBvdXRwdXRTb3VyY2VSYW5nZTogb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSxcbiAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5LCBzdGFydCQxLCBlbmQpIHtcbiAgICAgIC8vIGNoZWNrIG5hbWVzcGFjZS5cbiAgICAgIC8vIGluaGVyaXQgcGFyZW50IG5zIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgdmFyIG5zID0gKGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5ucykgfHwgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UodGFnKTtcblxuICAgICAgLy8gaGFuZGxlIElFIHN2ZyBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiYgbnMgPT09ICdzdmcnKSB7XG4gICAgICAgIGF0dHJzID0gZ3VhcmRJRVNWR0J1ZyhhdHRycyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gY3JlYXRlQVNURWxlbWVudCh0YWcsIGF0dHJzLCBjdXJyZW50UGFyZW50KTtcbiAgICAgIGlmIChucykge1xuICAgICAgICBlbGVtZW50Lm5zID0gbnM7XG4gICAgICB9XG5cbiAgICAgIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBlbGVtZW50LnN0YXJ0ID0gc3RhcnQkMTtcbiAgICAgICAgICBlbGVtZW50LmVuZCA9IGVuZDtcbiAgICAgICAgICBlbGVtZW50LnJhd0F0dHJzTWFwID0gZWxlbWVudC5hdHRyc0xpc3QucmVkdWNlKGZ1bmN0aW9uIChjdW11bGF0ZWQsIGF0dHIpIHtcbiAgICAgICAgICAgIGN1bXVsYXRlZFthdHRyLm5hbWVdID0gYXR0cjtcbiAgICAgICAgICAgIHJldHVybiBjdW11bGF0ZWRcbiAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgIGlmIChpbnZhbGlkQXR0cmlidXRlUkUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiSW52YWxpZCBkeW5hbWljIGFyZ3VtZW50IGV4cHJlc3Npb246IGF0dHJpYnV0ZSBuYW1lcyBjYW5ub3QgY29udGFpbiBcIiArXG4gICAgICAgICAgICAgIFwic3BhY2VzLCBxdW90ZXMsIDwsID4sIC8gb3IgPS5cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmluZGV4T2YoXCJbXCIpLFxuICAgICAgICAgICAgICAgIGVuZDogYXR0ci5zdGFydCArIGF0dHIubmFtZS5sZW5ndGhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGb3JiaWRkZW5UYWcoZWxlbWVudCkgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkpIHtcbiAgICAgICAgZWxlbWVudC5mb3JiaWRkZW4gPSB0cnVlO1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgJ1RlbXBsYXRlcyBzaG91bGQgb25seSBiZSByZXNwb25zaWJsZSBmb3IgbWFwcGluZyB0aGUgc3RhdGUgdG8gdGhlICcgK1xuICAgICAgICAgICdVSS4gQXZvaWQgcGxhY2luZyB0YWdzIHdpdGggc2lkZS1lZmZlY3RzIGluIHlvdXIgdGVtcGxhdGVzLCBzdWNoIGFzICcgK1xuICAgICAgICAgIFwiPFwiICsgdGFnICsgXCI+XCIgKyAnLCBhcyB0aGV5IHdpbGwgbm90IGJlIHBhcnNlZC4nLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBwcmUtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnQgPSBwcmVUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NQcmUoZWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICAgIGluVlByZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICBpblByZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5WUHJlKSB7XG4gICAgICAgIHByb2Nlc3NSYXdBdHRycyhlbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICAgIC8vIHN0cnVjdHVyYWwgZGlyZWN0aXZlc1xuICAgICAgICBwcm9jZXNzRm9yKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NPbmNlKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICAgIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICAgIGN1cnJlbnRQYXJlbnQgPSBlbGVtZW50O1xuICAgICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAodGFnLCBzdGFydCwgZW5kJDEpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAvLyBwb3Agc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCAtPSAxO1xuICAgICAgY3VycmVudFBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQkMTtcbiAgICAgIH1cbiAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICB9LFxuXG4gICAgY2hhcnM6IGZ1bmN0aW9uIGNoYXJzICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAge1xuICAgICAgICAgIGlmICh0ZXh0ID09PSB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICdDb21wb25lbnQgdGVtcGxhdGUgcmVxdWlyZXMgYSByb290IGVsZW1lbnQsIHJhdGhlciB0aGFuIGp1c3QgdGV4dC4nLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHRleHQgPSB0ZXh0LnRyaW0oKSkpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAoXCJ0ZXh0IFxcXCJcIiArIHRleHQgKyBcIlxcXCIgb3V0c2lkZSByb290IGVsZW1lbnQgd2lsbCBiZSBpZ25vcmVkLlwiKSxcbiAgICAgICAgICAgICAgeyBzdGFydDogc3RhcnQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvLyBJRSB0ZXh0YXJlYSBwbGFjZWhvbGRlciBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiZcbiAgICAgICAgY3VycmVudFBhcmVudC50YWcgPT09ICd0ZXh0YXJlYScgJiZcbiAgICAgICAgY3VycmVudFBhcmVudC5hdHRyc01hcC5wbGFjZWhvbGRlciA9PT0gdGV4dFxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuID0gY3VycmVudFBhcmVudC5jaGlsZHJlbjtcbiAgICAgIGlmIChpblByZSB8fCB0ZXh0LnRyaW0oKSkge1xuICAgICAgICB0ZXh0ID0gaXNUZXh0VGFnKGN1cnJlbnRQYXJlbnQpID8gdGV4dCA6IGRlY29kZUhUTUxDYWNoZWQodGV4dCk7XG4gICAgICB9IGVsc2UgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSB3aGl0ZXNwYWNlLW9ubHkgbm9kZSByaWdodCBhZnRlciBhbiBvcGVuaW5nIHRhZ1xuICAgICAgICB0ZXh0ID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHdoaXRlc3BhY2VPcHRpb24pIHtcbiAgICAgICAgaWYgKHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAvLyBpbiBjb25kZW5zZSBtb2RlLCByZW1vdmUgdGhlIHdoaXRlc3BhY2Ugbm9kZSBpZiBpdCBjb250YWluc1xuICAgICAgICAgIC8vIGxpbmUgYnJlYWssIG90aGVyd2lzZSBjb25kZW5zZSB0byBhIHNpbmdsZSBzcGFjZVxuICAgICAgICAgIHRleHQgPSBsaW5lQnJlYWtSRS50ZXN0KHRleHQpID8gJycgOiAnICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dCA9ICcgJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IHByZXNlcnZlV2hpdGVzcGFjZSA/ICcgJyA6ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgaWYgKCFpblByZSAmJiB3aGl0ZXNwYWNlT3B0aW9uID09PSAnY29uZGVuc2UnKSB7XG4gICAgICAgICAgLy8gY29uZGVuc2UgY29uc2VjdXRpdmUgd2hpdGVzcGFjZXMgaW50byBzaW5nbGUgc3BhY2VcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHdoaXRlc3BhY2VSRSQxLCAnICcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHZhciBjaGlsZDtcbiAgICAgICAgaWYgKCFpblZQcmUgJiYgdGV4dCAhPT0gJyAnICYmIChyZXMgPSBwYXJzZVRleHQodGV4dCwgZGVsaW1pdGVycykpKSB7XG4gICAgICAgICAgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAyLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogcmVzLmV4cHJlc3Npb24sXG4gICAgICAgICAgICB0b2tlbnM6IHJlcy50b2tlbnMsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0ICE9PSAnICcgfHwgIWNoaWxkcmVuLmxlbmd0aCB8fCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgICAgY2hpbGQuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIC8vIGFkZGluZyBhbnl0aW5nIGFzIGEgc2libGluZyB0byB0aGUgcm9vdCBub2RlIGlzIGZvcmJpZGRlblxuICAgICAgLy8gY29tbWVudHMgc2hvdWxkIHN0aWxsIGJlIGFsbG93ZWQsIGJ1dCBpZ25vcmVkXG4gICAgICBpZiAoY3VycmVudFBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGQgPSB7XG4gICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgIGlzQ29tbWVudDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgaWYgKGxlbikge1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGxpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGxpc3RbaV0uc3RhcnQ7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoXG4gIGVsZW1lbnQsXG4gIG9wdGlvbnNcbikge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gKFxuICAgICFlbGVtZW50LmtleSAmJlxuICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmXG4gICAgIWVsZW1lbnQuYXR0cnNMaXN0Lmxlbmd0aFxuICApO1xuXG4gIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgaWYgKGV4cCkge1xuICAgIHtcbiAgICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwiPHRlbXBsYXRlPiBjYW5ub3QgYmUga2V5ZWQuIFBsYWNlIHRoZSBrZXkgb24gcmVhbCBlbGVtZW50cyBpbnN0ZWFkLlwiLFxuICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbC5mb3IpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gZWwuaXRlcmF0b3IyIHx8IGVsLml0ZXJhdG9yMTtcbiAgICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICAgICAgaWYgKGl0ZXJhdG9yICYmIGl0ZXJhdG9yID09PSBleHAgJiYgcGFyZW50ICYmIHBhcmVudC50YWcgPT09ICd0cmFuc2l0aW9uLWdyb3VwJykge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIFwiRG8gbm90IHVzZSB2LWZvciBpbmRleCBhcyBrZXkgb24gPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuLCBcIiArXG4gICAgICAgICAgICBcInRoaXMgaXMgdGhlIHNhbWUgYXMgbm90IHVzaW5nIGtleXMuXCIsXG4gICAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpLFxuICAgICAgICAgICAgdHJ1ZSAvKiB0aXAgKi9cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsLmtleSA9IGV4cDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkge1xuICB2YXIgcmVmID0gZ2V0QmluZGluZ0F0dHIoZWwsICdyZWYnKTtcbiAgaWYgKHJlZikge1xuICAgIGVsLnJlZiA9IHJlZjtcbiAgICBlbC5yZWZJbkZvciA9IGNoZWNrSW5Gb3IoZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3IgKGVsKSB7XG4gIHZhciBleHA7XG4gIGlmICgoZXhwID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZm9yJykpKSB7XG4gICAgdmFyIHJlcyA9IHBhcnNlRm9yKGV4cCk7XG4gICAgaWYgKHJlcykge1xuICAgICAgZXh0ZW5kKGVsLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIChcIkludmFsaWQgdi1mb3IgZXhwcmVzc2lvbjogXCIgKyBleHApLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbmZ1bmN0aW9uIHBhcnNlRm9yIChleHApIHtcbiAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gIGlmICghaW5NYXRjaCkgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHJlcy5mb3IgPSBpbk1hdGNoWzJdLnRyaW0oKTtcbiAgdmFyIGFsaWFzID0gaW5NYXRjaFsxXS50cmltKCkucmVwbGFjZShzdHJpcFBhcmVuc1JFLCAnJyk7XG4gIHZhciBpdGVyYXRvck1hdGNoID0gYWxpYXMubWF0Y2goZm9ySXRlcmF0b3JSRSk7XG4gIGlmIChpdGVyYXRvck1hdGNoKSB7XG4gICAgcmVzLmFsaWFzID0gYWxpYXMucmVwbGFjZShmb3JJdGVyYXRvclJFLCAnJykudHJpbSgpO1xuICAgIHJlcy5pdGVyYXRvcjEgPSBpdGVyYXRvck1hdGNoWzFdLnRyaW0oKTtcbiAgICBpZiAoaXRlcmF0b3JNYXRjaFsyXSkge1xuICAgICAgcmVzLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcztcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZiAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJyk7XG4gIGlmIChleHApIHtcbiAgICBlbC5pZiA9IGV4cDtcbiAgICBhZGRJZkNvbmRpdGlvbihlbCwge1xuICAgICAgZXhwOiBleHAsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScpICE9IG51bGwpIHtcbiAgICAgIGVsLmVsc2UgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgZWxzZWlmID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicpO1xuICAgIGlmIChlbHNlaWYpIHtcbiAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmQ29uZGl0aW9ucyAoZWwsIHBhcmVudCkge1xuICB2YXIgcHJldiA9IGZpbmRQcmV2RWxlbWVudChwYXJlbnQuY2hpbGRyZW4pO1xuICBpZiAocHJldiAmJiBwcmV2LmlmKSB7XG4gICAgYWRkSWZDb25kaXRpb24ocHJldiwge1xuICAgICAgZXhwOiBlbC5lbHNlaWYsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB3YXJuJDIoXG4gICAgICBcInYtXCIgKyAoZWwuZWxzZWlmID8gKCdlbHNlLWlmPVwiJyArIGVsLmVsc2VpZiArICdcIicpIDogJ2Vsc2UnKSArIFwiIFwiICtcbiAgICAgIFwidXNlZCBvbiBlbGVtZW50IDxcIiArIChlbC50YWcpICsgXCI+IHdpdGhvdXQgY29ycmVzcG9uZGluZyB2LWlmLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcbiAgdmFyIGkgPSBjaGlsZHJlbi5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjaGlsZHJlbltpXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwidGV4dCBcXFwiXCIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgXCJcXFwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgXCIgK1xuICAgICAgICAgIFwid2lsbCBiZSBpZ25vcmVkLlwiLFxuICAgICAgICAgIGNoaWxkcmVuW2ldXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjaGlsZHJlbi5wb3AoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkSWZDb25kaXRpb24gKGVsLCBjb25kaXRpb24pIHtcbiAgaWYgKCFlbC5pZkNvbmRpdGlvbnMpIHtcbiAgICBlbC5pZkNvbmRpdGlvbnMgPSBbXTtcbiAgfVxuICBlbC5pZkNvbmRpdGlvbnMucHVzaChjb25kaXRpb24pO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzT25jZSAoZWwpIHtcbiAgdmFyIG9uY2UkJDEgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1vbmNlJyk7XG4gIGlmIChvbmNlJCQxICE9IG51bGwpIHtcbiAgICBlbC5vbmNlID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBoYW5kbGUgY29udGVudCBiZWluZyBwYXNzZWQgdG8gYSBjb21wb25lbnQgYXMgc2xvdCxcbi8vIGUuZy4gPHRlbXBsYXRlIHNsb3Q9XCJ4eHhcIj4sIDxkaXYgc2xvdC1zY29wZT1cInh4eFwiPlxuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RDb250ZW50IChlbCkge1xuICB2YXIgc2xvdFNjb3BlO1xuICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHNsb3RTY29wZSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcInRoZSBcXFwic2NvcGVcXFwiIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIHNsb3RzIGhhdmUgYmVlbiBkZXByZWNhdGVkIGFuZCBcIiArXG4gICAgICAgIFwicmVwbGFjZWQgYnkgXFxcInNsb3Qtc2NvcGVcXFwiIHNpbmNlIDIuNS4gVGhlIG5ldyBcXFwic2xvdC1zY29wZVxcXCIgYXR0cmlidXRlIFwiICtcbiAgICAgICAgXCJjYW4gYWxzbyBiZSB1c2VkIG9uIHBsYWluIGVsZW1lbnRzIGluIGFkZGl0aW9uIHRvIDx0ZW1wbGF0ZT4gdG8gXCIgK1xuICAgICAgICBcImRlbm90ZSBzY29wZWQgc2xvdHMuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWydzY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGUgfHwgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Nsb3Qtc2NvcGUnKTtcbiAgfSBlbHNlIGlmICgoc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Nsb3Qtc2NvcGUnKSkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoZWwuYXR0cnNNYXBbJ3YtZm9yJ10pIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPFwiICsgKGVsLnRhZykgKyBcIj4gXCIgK1xuICAgICAgICBcIih2LWZvciB0YWtlcyBoaWdoZXIgcHJpb3JpdHkpLiBVc2UgYSB3cmFwcGVyIDx0ZW1wbGF0ZT4gZm9yIHRoZSBcIiArXG4gICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2xvdC1zY29wZSddLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBlbC5zbG90U2NvcGUgPSBzbG90U2NvcGU7XG4gIH1cblxuICAvLyBzbG90PVwieHh4XCJcbiAgdmFyIHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcbiAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSAhIShlbC5hdHRyc01hcFsnOnNsb3QnXSB8fCBlbC5hdHRyc01hcFsndi1iaW5kOnNsb3QnXSk7XG4gICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMuXG4gICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICB9XG4gIH1cblxuICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgIHZhciBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoZWwuc2xvdFRhcmdldCB8fCBlbC5zbG90U2NvcGUpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLlwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnBhcmVudCAmJiAhbWF5YmVDb21wb25lbnQoZWwucGFyZW50KSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIjx0ZW1wbGF0ZSB2LXNsb3Q+IGNhbiBvbmx5IGFwcGVhciBhdCB0aGUgcm9vdCBsZXZlbCBpbnNpZGUgXCIgK1xuICAgICAgICAgICAgICBcInRoZSByZWNlaXZpbmcgdGhlIGNvbXBvbmVudFwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlZiA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nKTtcbiAgICAgICAgdmFyIG5hbWUgPSByZWYubmFtZTtcbiAgICAgICAgdmFyIGR5bmFtaWMgPSByZWYuZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFRhcmdldCA9IG5hbWU7XG4gICAgICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmcudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjsgLy8gZm9yY2UgaXQgaW50byBhIHNjb3BlZCBzbG90IGZvciBwZXJmXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHYtc2xvdCBvbiBjb21wb25lbnQsIGRlbm90ZXMgZGVmYXVsdCBzbG90XG4gICAgICB2YXIgc2xvdEJpbmRpbmckMSA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nJDEpIHtcbiAgICAgICAge1xuICAgICAgICAgIGlmICghbWF5YmVDb21wb25lbnQoZWwpKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwidi1zbG90IGNhbiBvbmx5IGJlIHVzZWQgb24gY29tcG9uZW50cyBvciA8dGVtcGxhdGU+LlwiLFxuICAgICAgICAgICAgICBzbG90QmluZGluZyQxXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2xvdFNjb3BlIHx8IGVsLnNsb3RUYXJnZXQpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgXCJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLlwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIFwiVG8gYXZvaWQgc2NvcGUgYW1iaWd1aXR5LCB0aGUgZGVmYXVsdCBzbG90IHNob3VsZCBhbHNvIHVzZSBcIiArXG4gICAgICAgICAgICAgIFwiPHRlbXBsYXRlPiBzeW50YXggd2hlbiB0aGVyZSBhcmUgb3RoZXIgbmFtZWQgc2xvdHMuXCIsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCB0aGUgY29tcG9uZW50J3MgY2hpbGRyZW4gdG8gaXRzIGRlZmF1bHQgc2xvdFxuICAgICAgICB2YXIgc2xvdHMgPSBlbC5zY29wZWRTbG90cyB8fCAoZWwuc2NvcGVkU2xvdHMgPSB7fSk7XG4gICAgICAgIHZhciByZWYkMSA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nJDEpO1xuICAgICAgICB2YXIgbmFtZSQxID0gcmVmJDEubmFtZTtcbiAgICAgICAgdmFyIGR5bmFtaWMkMSA9IHJlZiQxLmR5bmFtaWM7XG4gICAgICAgIHZhciBzbG90Q29udGFpbmVyID0gc2xvdHNbbmFtZSQxXSA9IGNyZWF0ZUFTVEVsZW1lbnQoJ3RlbXBsYXRlJywgW10sIGVsKTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90VGFyZ2V0ID0gbmFtZSQxO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYyQxO1xuICAgICAgICBzbG90Q29udGFpbmVyLmNoaWxkcmVuID0gZWwuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgaWYgKCFjLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgYy5wYXJlbnQgPSBzbG90Q29udGFpbmVyO1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nJDEudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjtcbiAgICAgICAgLy8gcmVtb3ZlIGNoaWxkcmVuIGFzIHRoZXkgYXJlIHJldHVybmVkIGZyb20gc2NvcGVkU2xvdHMgbm93XG4gICAgICAgIGVsLmNoaWxkcmVuID0gW107XG4gICAgICAgIC8vIG1hcmsgZWwgbm9uLXBsYWluIHNvIGRhdGEgZ2V0cyBnZW5lcmF0ZWRcbiAgICAgICAgZWwucGxhaW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2xvdE5hbWUgKGJpbmRpbmcpIHtcbiAgdmFyIG5hbWUgPSBiaW5kaW5nLm5hbWUucmVwbGFjZShzbG90UkUsICcnKTtcbiAgaWYgKCFuYW1lKSB7XG4gICAgaWYgKGJpbmRpbmcubmFtZVswXSAhPT0gJyMnKSB7XG4gICAgICBuYW1lID0gJ2RlZmF1bHQnO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwidi1zbG90IHNob3J0aGFuZCBzeW50YXggcmVxdWlyZXMgYSBzbG90IG5hbWUuXCIsXG4gICAgICAgIGJpbmRpbmdcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkeW5hbWljQXJnUkUudGVzdChuYW1lKVxuICAgIC8vIGR5bmFtaWMgW25hbWVdXG4gICAgPyB7IG5hbWU6IG5hbWUuc2xpY2UoMSwgLTEpLCBkeW5hbWljOiB0cnVlIH1cbiAgICAvLyBzdGF0aWMgbmFtZVxuICAgIDogeyBuYW1lOiAoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCIpLCBkeW5hbWljOiBmYWxzZSB9XG59XG5cbi8vIGhhbmRsZSA8c2xvdC8+IG91dGxldHNcbmZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0IChlbCkge1xuICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICBlbC5zbG90TmFtZSA9IGdldEJpbmRpbmdBdHRyKGVsLCAnbmFtZScpO1xuICAgIGlmIChlbC5rZXkpIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgXCJga2V5YCBkb2VzIG5vdCB3b3JrIG9uIDxzbG90PiBiZWNhdXNlIHNsb3RzIGFyZSBhYnN0cmFjdCBvdXRsZXRzIFwiICtcbiAgICAgICAgXCJhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBcIiArXG4gICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCIsXG4gICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gIHZhciBiaW5kaW5nO1xuICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgfVxuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgdmFyIGksIGwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBtb2RpZmllcnMsIHN5bmNHZW4sIGlzRHluYW1pYztcbiAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbmFtZSA9IHJhd05hbWUgPSBsaXN0W2ldLm5hbWU7XG4gICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAvLyBtYXJrIGVsZW1lbnQgYXMgZHluYW1pY1xuICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICBtb2RpZmllcnMgPSBwYXJzZU1vZGlmaWVycyhuYW1lLnJlcGxhY2UoZGlyUkUsICcnKSk7XG4gICAgICAvLyBzdXBwb3J0IC5mb28gc2hvcnRoYW5kIHN5bnRheCBmb3IgdGhlIC5wcm9wIG1vZGlmaWVyXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UobW9kaWZpZXJSRSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKGJpbmRSRS50ZXN0KG5hbWUpKSB7IC8vIHYtYmluZFxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGJpbmRSRSwgJycpO1xuICAgICAgICB2YWx1ZSA9IHBhcnNlRmlsdGVycyh2YWx1ZSk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIChcIlRoZSB2YWx1ZSBmb3IgYSB2LWJpbmQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgZW1wdHkuIEZvdW5kIGluIFxcXCJ2LWJpbmQ6XCIgKyBuYW1lICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5wcm9wICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5jYW1lbCAmJiAhaXNEeW5hbWljKSB7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuc3luYykge1xuICAgICAgICAgICAgc3luY0dlbiA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKTtcbiAgICAgICAgICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChoeXBoZW5hdGUobmFtZSkgIT09IGNhbWVsaXplKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGh5cGhlbmF0ZShuYW1lKSkpLFxuICAgICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBoYW5kbGVyIHcvIGR5bmFtaWMgZXZlbnQgbmFtZVxuICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgIChcIlxcXCJ1cGRhdGU6XFxcIisoXCIgKyBuYW1lICsgXCIpXCIpLFxuICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgbGlzdFtpXSxcbiAgICAgICAgICAgICAgICB0cnVlIC8vIGR5bmFtaWNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnByb3ApIHx8IChcbiAgICAgICAgICAhZWwuY29tcG9uZW50ICYmIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKVxuICAgICAgICApKSB7XG4gICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7IC8vIHYtb25cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGFkZEhhbmRsZXIoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMsIGZhbHNlLCB3YXJuJDIsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICB9IGVsc2UgeyAvLyBub3JtYWwgZGlyZWN0aXZlc1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGRpclJFLCAnJyk7XG4gICAgICAgIC8vIHBhcnNlIGFyZ1xuICAgICAgICB2YXIgYXJnTWF0Y2ggPSBuYW1lLm1hdGNoKGFyZ1JFKTtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ01hdGNoICYmIGFyZ01hdGNoWzFdO1xuICAgICAgICBpc0R5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0FyZ1JFLnRlc3QoYXJnKSkge1xuICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIGlzRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgaXNEeW5hbWljLCBtb2RpZmllcnMsIGxpc3RbaV0pO1xuICAgICAgICBpZiAobmFtZSA9PT0gJ21vZGVsJykge1xuICAgICAgICAgIGNoZWNrRm9yQWxpYXNNb2RlbChlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGxpdGVyYWwgYXR0cmlidXRlXG4gICAgICB7XG4gICAgICAgIHZhciByZXMgPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LicsXG4gICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWRkQXR0cihlbCwgbmFtZSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpLCBsaXN0W2ldKTtcbiAgICAgIC8vICM2ODg3IGZpcmVmb3ggZG9lc24ndCB1cGRhdGUgbXV0ZWQgc3RhdGUgaWYgc2V0IHZpYSBhdHRyaWJ1dGVcbiAgICAgIC8vIGV2ZW4gaW1tZWRpYXRlbHkgYWZ0ZXIgZWxlbWVudCBjcmVhdGlvblxuICAgICAgaWYgKCFlbC5jb21wb25lbnQgJiZcbiAgICAgICAgICBuYW1lID09PSAnbXV0ZWQnICYmXG4gICAgICAgICAgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpKSB7XG4gICAgICAgIGFkZFByb3AoZWwsIG5hbWUsICd0cnVlJywgbGlzdFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5Gb3IgKGVsKSB7XG4gIHZhciBwYXJlbnQgPSBlbDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuZm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kaWZpZXJzIChuYW1lKSB7XG4gIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gobW9kaWZpZXJSRSk7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciByZXQgPSB7fTtcbiAgICBtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldFttLnNsaWNlKDEpXSA9IHRydWU7IH0pO1xuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlQXR0cnNNYXAgKGF0dHJzKSB7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoXG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZVxuICAgICkge1xuICAgICAgd2FybiQyKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0pO1xuICAgIH1cbiAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbi8vIGZvciBzY3JpcHQgKGUuZy4gdHlwZT1cIngvdGVtcGxhdGVcIikgb3Igc3R5bGUsIGRvIG5vdCBkZWNvZGUgY29udGVudFxuZnVuY3Rpb24gaXNUZXh0VGFnIChlbCkge1xuICByZXR1cm4gZWwudGFnID09PSAnc2NyaXB0JyB8fCBlbC50YWcgPT09ICdzdHlsZSdcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG52YXIgaWVOU0J1ZyA9IC9eeG1sbnM6TlNcXGQrLztcbnZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGd1YXJkSUVTVkdCdWcgKGF0dHJzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBhdHRyID0gYXR0cnNbaV07XG4gICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgcmVzLnB1c2goYXR0cik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgdmFyIF9lbCA9IGVsO1xuICB3aGlsZSAoX2VsKSB7XG4gICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICBcIlRoaXMgd2lsbCBub3QgYmUgYWJsZSB0byBtb2RpZnkgdGhlIHYtZm9yIHNvdXJjZSBhcnJheSBiZWNhdXNlIFwiICtcbiAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICAgIF9lbCA9IF9lbC5wYXJlbnQ7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIGlmIChlbC50YWcgPT09ICdpbnB1dCcpIHtcbiAgICB2YXIgbWFwID0gZWwuYXR0cnNNYXA7XG4gICAgaWYgKCFtYXBbJ3YtbW9kZWwnXSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHR5cGVCaW5kaW5nO1xuICAgIGlmIChtYXBbJzp0eXBlJ10gfHwgbWFwWyd2LWJpbmQ6dHlwZSddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHlwZScpO1xuICAgIH1cbiAgICBpZiAoIW1hcC50eXBlICYmICF0eXBlQmluZGluZyAmJiBtYXBbJ3YtYmluZCddKSB7XG4gICAgICB0eXBlQmluZGluZyA9IFwiKFwiICsgKG1hcFsndi1iaW5kJ10pICsgXCIpLnR5cGVcIjtcbiAgICB9XG5cbiAgICBpZiAodHlwZUJpbmRpbmcpIHtcbiAgICAgIHZhciBpZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJywgdHJ1ZSk7XG4gICAgICB2YXIgaWZDb25kaXRpb25FeHRyYSA9IGlmQ29uZGl0aW9uID8gKFwiJiYoXCIgKyBpZkNvbmRpdGlvbiArIFwiKVwiKSA6IFwiXCI7XG4gICAgICB2YXIgaGFzRWxzZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnLCB0cnVlKSAhPSBudWxsO1xuICAgICAgdmFyIGVsc2VJZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnLCB0cnVlKTtcbiAgICAgIC8vIDEuIGNoZWNrYm94XG4gICAgICB2YXIgYnJhbmNoMCA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICAvLyBwcm9jZXNzIGZvciBvbiB0aGUgbWFpbiBub2RlXG4gICAgICBwcm9jZXNzRm9yKGJyYW5jaDApO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gwLCAndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMCwgb3B0aW9ucyk7XG4gICAgICBicmFuY2gwLnByb2Nlc3NlZCA9IHRydWU7IC8vIHByZXZlbnQgaXQgZnJvbSBkb3VibGUtcHJvY2Vzc2VkXG4gICAgICBicmFuY2gwLmlmID0gXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdjaGVja2JveCdcIiArIGlmQ29uZGl0aW9uRXh0cmE7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogYnJhbmNoMC5pZixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDBcbiAgICAgIH0pO1xuICAgICAgLy8gMi4gYWRkIHJhZGlvIGVsc2UtaWYgY29uZGl0aW9uXG4gICAgICB2YXIgYnJhbmNoMSA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDEsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gxLCAndHlwZScsICdyYWRpbycpO1xuICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMSwgb3B0aW9ucyk7XG4gICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgIGV4cDogXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdyYWRpbydcIiArIGlmQ29uZGl0aW9uRXh0cmEsXG4gICAgICAgIGJsb2NrOiBicmFuY2gxXG4gICAgICB9KTtcbiAgICAgIC8vIDMuIG90aGVyXG4gICAgICB2YXIgYnJhbmNoMiA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDIsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gyLCAnOnR5cGUnLCB0eXBlQmluZGluZyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gyLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBpZkNvbmRpdGlvbixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaGFzRWxzZSkge1xuICAgICAgICBicmFuY2gwLmVsc2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbHNlSWZDb25kaXRpb24pIHtcbiAgICAgICAgYnJhbmNoMC5lbHNlaWYgPSBlbHNlSWZDb25kaXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicmFuY2gwXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQVNURWxlbWVudCAoZWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUFTVEVsZW1lbnQoZWwudGFnLCBlbC5hdHRyc0xpc3Quc2xpY2UoKSwgZWwucGFyZW50KVxufVxuXG52YXIgbW9kZWwkMSA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZVxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtcbiAga2xhc3MkMSxcbiAgc3R5bGUkMSxcbiAgbW9kZWwkMVxuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRleHQgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICd0ZXh0Q29udGVudCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIiksIGRpcik7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGh0bWwgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICdpbm5lckhUTUwnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpLCBkaXIpO1xuICB9XG59XG5cbnZhciBkaXJlY3RpdmVzJDEgPSB7XG4gIG1vZGVsOiBtb2RlbCxcbiAgdGV4dDogdGV4dCxcbiAgaHRtbDogaHRtbFxufTtcblxuLyogICovXG5cbnZhciBiYXNlT3B0aW9ucyA9IHtcbiAgZXhwZWN0SFRNTDogdHJ1ZSxcbiAgbW9kdWxlczogbW9kdWxlcyQxLFxuICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzJDEsXG4gIGlzUHJlVGFnOiBpc1ByZVRhZyxcbiAgaXNVbmFyeVRhZzogaXNVbmFyeVRhZyxcbiAgbXVzdFVzZVByb3A6IG11c3RVc2VQcm9wLFxuICBjYW5CZUxlZnRPcGVuVGFnOiBjYW5CZUxlZnRPcGVuVGFnLFxuICBpc1Jlc2VydmVkVGFnOiBpc1Jlc2VydmVkVGFnLFxuICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSxcbiAgc3RhdGljS2V5czogZ2VuU3RhdGljS2V5cyhtb2R1bGVzJDEpXG59O1xuXG4vKiAgKi9cblxudmFyIGlzU3RhdGljS2V5O1xudmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZztcblxudmFyIGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTtcblxuLyoqXG4gKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuICogYW5kIGRldGVjdCBzdWItdHJlZXMgdGhhdCBhcmUgcHVyZWx5IHN0YXRpYywgaS5lLiBwYXJ0cyBvZlxuICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS5cbiAqXG4gKiBPbmNlIHdlIGRldGVjdCB0aGVzZSBzdWItdHJlZXMsIHdlIGNhbjpcbiAqXG4gKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG4gKiAgICBjcmVhdGUgZnJlc2ggbm9kZXMgZm9yIHRoZW0gb24gZWFjaCByZS1yZW5kZXI7XG4gKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gb3B0aW1pemUgKHJvb3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFyb290KSB7IHJldHVybiB9XG4gIGlzU3RhdGljS2V5ID0gZ2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXMgfHwgJycpO1xuICBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIC8vIGZpcnN0IHBhc3M6IG1hcmsgYWxsIG5vbi1zdGF0aWMgbm9kZXMuXG4gIG1hcmtTdGF0aWMkMShyb290KTtcbiAgLy8gc2Vjb25kIHBhc3M6IG1hcmsgc3RhdGljIHJvb3RzLlxuICBtYXJrU3RhdGljUm9vdHMocm9vdCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzJDEgKGtleXMpIHtcbiAgcmV0dXJuIG1ha2VNYXAoXG4gICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMsc3RhcnQsZW5kLHJhd0F0dHJzTWFwJyArXG4gICAgKGtleXMgPyAnLCcgKyBrZXlzIDogJycpXG4gIClcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyQxIChub2RlKSB7XG4gIG5vZGUuc3RhdGljID0gaXNTdGF0aWMobm9kZSk7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICAvLyBkbyBub3QgbWFrZSBjb21wb25lbnQgc2xvdCBjb250ZW50IHN0YXRpYy4gdGhpcyBhdm9pZHNcbiAgICAvLyAxLiBjb21wb25lbnRzIG5vdCBhYmxlIHRvIG11dGF0ZSBzbG90IG5vZGVzXG4gICAgLy8gMi4gc3RhdGljIHNsb3QgY29udGVudCBmYWlscyBmb3IgaG90LXJlbG9hZGluZ1xuICAgIGlmIChcbiAgICAgICFpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmXG4gICAgICBub2RlLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgICBub2RlLmF0dHJzTWFwWydpbmxpbmUtdGVtcGxhdGUnXSA9PSBudWxsXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIG1hcmtTdGF0aWMkMShjaGlsZCk7XG4gICAgICBpZiAoIWNoaWxkLnN0YXRpYykge1xuICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICB2YXIgYmxvY2sgPSBub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrO1xuICAgICAgICBtYXJrU3RhdGljJDEoYmxvY2spO1xuICAgICAgICBpZiAoIWJsb2NrLnN0YXRpYykge1xuICAgICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY1Jvb3RzIChub2RlLCBpc0luRm9yKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBpZiAobm9kZS5zdGF0aWMgfHwgbm9kZS5vbmNlKSB7XG4gICAgICBub2RlLnN0YXRpY0luRm9yID0gaXNJbkZvcjtcbiAgICB9XG4gICAgLy8gRm9yIGEgbm9kZSB0byBxdWFsaWZ5IGFzIGEgc3RhdGljIHJvb3QsIGl0IHNob3VsZCBoYXZlIGNoaWxkcmVuIHRoYXRcbiAgICAvLyBhcmUgbm90IGp1c3Qgc3RhdGljIHRleHQuIE90aGVyd2lzZSB0aGUgY29zdCBvZiBob2lzdGluZyBvdXQgd2lsbFxuICAgIC8vIG91dHdlaWdoIHRoZSBiZW5lZml0cyBhbmQgaXQncyBiZXR0ZXIgb2ZmIHRvIGp1c3QgYWx3YXlzIHJlbmRlciBpdCBmcmVzaC5cbiAgICBpZiAobm9kZS5zdGF0aWMgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIShcbiAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICBub2RlLmNoaWxkcmVuWzBdLnR5cGUgPT09IDNcbiAgICApKSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSB0cnVlO1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5jaGlsZHJlbltpXSwgaXNJbkZvciB8fCAhIW5vZGUuZm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2ssIGlzSW5Gb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0YXRpYyAobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAyKSB7IC8vIGV4cHJlc3Npb25cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAobm9kZS50eXBlID09PSAzKSB7IC8vIHRleHRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiAhIShub2RlLnByZSB8fCAoXG4gICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuICAgICFub2RlLmlmICYmICFub2RlLmZvciAmJiAvLyBub3Qgdi1pZiBvciB2LWZvciBvciB2LWVsc2VcbiAgICAhaXNCdWlsdEluVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBidWlsdC1pblxuICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG4gICAgIWlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yKG5vZGUpICYmXG4gICAgT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG4gIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5mb3IpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxudmFyIGZuRXhwUkUgPSAvXihbXFx3JF9dK3xcXChbXildKj9cXCkpXFxzKj0+fF5mdW5jdGlvblxccyooPzpbXFx3JF0rKT9cXHMqXFwoLztcbnZhciBmbkludm9rZVJFID0gL1xcKFteKV0qP1xcKTsqJC87XG52YXIgc2ltcGxlUGF0aFJFID0gL15bQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWydbXiddKj8nXXxcXFtcIlteXCJdKj9cIl18XFxbXFxkK118XFxbW0EtWmEtel8kXVtcXHckXSpdKSokLztcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXlDb2RlIGFsaWFzZXNcbnZhciBrZXlDb2RlcyA9IHtcbiAgZXNjOiAyNyxcbiAgdGFiOiA5LFxuICBlbnRlcjogMTMsXG4gIHNwYWNlOiAzMixcbiAgdXA6IDM4LFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBkb3duOiA0MCxcbiAgJ2RlbGV0ZSc6IFs4LCA0Nl1cbn07XG5cbi8vIEtleWJvYXJkRXZlbnQua2V5IGFsaWFzZXNcbnZhciBrZXlOYW1lcyA9IHtcbiAgLy8gIzc4ODA6IElFMTEgYW5kIEVkZ2UgdXNlIGBFc2NgIGZvciBFc2NhcGUga2V5IG5hbWUuXG4gIGVzYzogWydFc2MnLCAnRXNjYXBlJ10sXG4gIHRhYjogJ1RhYicsXG4gIGVudGVyOiAnRW50ZXInLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBTcGFjZWJhcmAgZm9yIFNwYWNlIGtleSBuYW1lLlxuICBzcGFjZTogWycgJywgJ1NwYWNlYmFyJ10sXG4gIC8vICM3ODA2OiBJRTExIHVzZXMga2V5IG5hbWVzIHdpdGhvdXQgYEFycm93YCBwcmVmaXggZm9yIGFycm93IGtleXMuXG4gIHVwOiBbJ1VwJywgJ0Fycm93VXAnXSxcbiAgbGVmdDogWydMZWZ0JywgJ0Fycm93TGVmdCddLFxuICByaWdodDogWydSaWdodCcsICdBcnJvd1JpZ2h0J10sXG4gIGRvd246IFsnRG93bicsICdBcnJvd0Rvd24nXSxcbiAgLy8gIzkxMTI6IElFMTEgdXNlcyBgRGVsYCBmb3IgRGVsZXRlIGtleSBuYW1lLlxuICAnZGVsZXRlJzogWydCYWNrc3BhY2UnLCAnRGVsZXRlJywgJ0RlbCddXG59O1xuXG4vLyAjNDg2ODogbW9kaWZpZXJzIHRoYXQgcHJldmVudCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBsaXN0ZW5lclxuLy8gbmVlZCB0byBleHBsaWNpdGx5IHJldHVybiBudWxsIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSB3aGV0aGVyIHRvIHJlbW92ZVxuLy8gdGhlIGxpc3RlbmVyIGZvciAub25jZVxudmFyIGdlbkd1YXJkID0gZnVuY3Rpb24gKGNvbmRpdGlvbikgeyByZXR1cm4gKFwiaWYoXCIgKyBjb25kaXRpb24gKyBcIilyZXR1cm4gbnVsbDtcIik7IH07XG5cbnZhciBtb2RpZmllckNvZGUgPSB7XG4gIHN0b3A6ICckZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7JyxcbiAgcHJldmVudDogJyRldmVudC5wcmV2ZW50RGVmYXVsdCgpOycsXG4gIHNlbGY6IGdlbkd1YXJkKFwiJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXRcIiksXG4gIGN0cmw6IGdlbkd1YXJkKFwiISRldmVudC5jdHJsS2V5XCIpLFxuICBzaGlmdDogZ2VuR3VhcmQoXCIhJGV2ZW50LnNoaWZ0S2V5XCIpLFxuICBhbHQ6IGdlbkd1YXJkKFwiISRldmVudC5hbHRLZXlcIiksXG4gIG1ldGE6IGdlbkd1YXJkKFwiISRldmVudC5tZXRhS2V5XCIpLFxuICBsZWZ0OiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAwXCIpLFxuICBtaWRkbGU6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDFcIiksXG4gIHJpZ2h0OiBnZW5HdWFyZChcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAyXCIpXG59O1xuXG5mdW5jdGlvbiBnZW5IYW5kbGVycyAoXG4gIGV2ZW50cyxcbiAgaXNOYXRpdmVcbikge1xuICB2YXIgcHJlZml4ID0gaXNOYXRpdmUgPyAnbmF0aXZlT246JyA6ICdvbjonO1xuICB2YXIgc3RhdGljSGFuZGxlcnMgPSBcIlwiO1xuICB2YXIgZHluYW1pY0hhbmRsZXJzID0gXCJcIjtcbiAgZm9yICh2YXIgbmFtZSBpbiBldmVudHMpIHtcbiAgICB2YXIgaGFuZGxlckNvZGUgPSBnZW5IYW5kbGVyKGV2ZW50c1tuYW1lXSk7XG4gICAgaWYgKGV2ZW50c1tuYW1lXSAmJiBldmVudHNbbmFtZV0uZHluYW1pYykge1xuICAgICAgZHluYW1pY0hhbmRsZXJzICs9IG5hbWUgKyBcIixcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY0hhbmRsZXJzICs9IFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIjpcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIHN0YXRpY0hhbmRsZXJzID0gXCJ7XCIgKyAoc3RhdGljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICBpZiAoZHluYW1pY0hhbmRsZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIFwiX2QoXCIgKyBzdGF0aWNIYW5kbGVycyArIFwiLFtcIiArIChkeW5hbWljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwiXSlcIlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXggKyBzdGF0aWNIYW5kbGVyc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgIHJldHVybiAoXCJbXCIgKyAoaGFuZGxlci5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGdlbkhhbmRsZXIoaGFuZGxlcik7IH0pLmpvaW4oJywnKSkgKyBcIl1cIilcbiAgfVxuXG4gIHZhciBpc01ldGhvZFBhdGggPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcbiAgdmFyIGlzRnVuY3Rpb25FeHByZXNzaW9uID0gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICB2YXIgaXNGdW5jdGlvbkludm9jYXRpb24gPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlLnJlcGxhY2UoZm5JbnZva2VSRSwgJycpKTtcblxuICBpZiAoIWhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGhhbmRsZXIudmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaXNGdW5jdGlvbkludm9jYXRpb24gPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpIDogaGFuZGxlci52YWx1ZSkgKyBcIn1cIikgLy8gaW5saW5lIHN0YXRlbWVudFxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IG1vZGlmaWVyQ29kZVtrZXldO1xuICAgICAgICAvLyBsZWZ0L3JpZ2h0XG4gICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXhhY3QnKSB7XG4gICAgICAgIHZhciBtb2RpZmllcnMgPSAoaGFuZGxlci5tb2RpZmllcnMpO1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gZ2VuR3VhcmQoXG4gICAgICAgICAgWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ11cbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAhbW9kaWZpZXJzW2tleU1vZGlmaWVyXTsgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleU1vZGlmaWVyKSB7IHJldHVybiAoXCIkZXZlbnQuXCIgKyBrZXlNb2RpZmllciArIFwiS2V5XCIpOyB9KVxuICAgICAgICAgICAgLmpvaW4oJ3x8JylcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGNvZGUgKz0gZ2VuS2V5RmlsdGVyKGtleXMpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgbW9kaWZpZXJzIGxpa2UgcHJldmVudCBhbmQgc3RvcCBnZXQgZXhlY3V0ZWQgYWZ0ZXIga2V5IGZpbHRlcmluZ1xuICAgIGlmIChnZW5Nb2RpZmllckNvZGUpIHtcbiAgICAgIGNvZGUgKz0gZ2VuTW9kaWZpZXJDb2RlO1xuICAgIH1cbiAgICB2YXIgaGFuZGxlckNvZGUgPSBpc01ldGhvZFBhdGhcbiAgICAgID8gKFwicmV0dXJuIFwiICsgKGhhbmRsZXIudmFsdWUpICsgXCIoJGV2ZW50KVwiKVxuICAgICAgOiBpc0Z1bmN0aW9uRXhwcmVzc2lvblxuICAgICAgICA/IChcInJldHVybiAoXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIikoJGV2ZW50KVwiKVxuICAgICAgICA6IGlzRnVuY3Rpb25JbnZvY2F0aW9uXG4gICAgICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpXG4gICAgICAgICAgOiBoYW5kbGVyLnZhbHVlO1xuICAgIHJldHVybiAoXCJmdW5jdGlvbigkZXZlbnQpe1wiICsgY29kZSArIGhhbmRsZXJDb2RlICsgXCJ9XCIpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuS2V5RmlsdGVyIChrZXlzKSB7XG4gIHJldHVybiAoXG4gICAgLy8gbWFrZSBzdXJlIHRoZSBrZXkgZmlsdGVycyBvbmx5IGFwcGx5IHRvIEtleWJvYXJkRXZlbnRzXG4gICAgLy8gIzk0NDE6IGNhbid0IHVzZSAna2V5Q29kZScgaW4gJGV2ZW50IGJlY2F1c2UgQ2hyb21lIGF1dG9maWxsIGZpcmVzIGZha2VcbiAgICAvLyBrZXkgZXZlbnRzIHRoYXQgZG8gbm90IGhhdmUga2V5Q29kZSBwcm9wZXJ0eS4uLlxuICAgIFwiaWYoISRldmVudC50eXBlLmluZGV4T2YoJ2tleScpJiZcIiArXG4gICAgKGtleXMubWFwKGdlbkZpbHRlckNvZGUpLmpvaW4oJyYmJykpICsgXCIpcmV0dXJuIG51bGw7XCJcbiAgKVxufVxuXG5mdW5jdGlvbiBnZW5GaWx0ZXJDb2RlIChrZXkpIHtcbiAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApO1xuICBpZiAoa2V5VmFsKSB7XG4gICAgcmV0dXJuIChcIiRldmVudC5rZXlDb2RlIT09XCIgKyBrZXlWYWwpXG4gIH1cbiAgdmFyIGtleUNvZGUgPSBrZXlDb2Rlc1trZXldO1xuICB2YXIga2V5TmFtZSA9IGtleU5hbWVzW2tleV07XG4gIHJldHVybiAoXG4gICAgXCJfaygkZXZlbnQua2V5Q29kZSxcIiArXG4gICAgKEpTT04uc3RyaW5naWZ5KGtleSkpICsgXCIsXCIgK1xuICAgIChKU09OLnN0cmluZ2lmeShrZXlDb2RlKSkgKyBcIixcIiArXG4gICAgXCIkZXZlbnQua2V5LFwiICtcbiAgICBcIlwiICsgKEpTT04uc3RyaW5naWZ5KGtleU5hbWUpKSArXG4gICAgXCIpXCJcbiAgKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gb24gKGVsLCBkaXIpIHtcbiAgaWYgKGRpci5tb2RpZmllcnMpIHtcbiAgICB3YXJuKFwidi1vbiB3aXRob3V0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgbW9kaWZpZXJzLlwiKTtcbiAgfVxuICBlbC53cmFwTGlzdGVuZXJzID0gZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcIl9nKFwiICsgY29kZSArIFwiLFwiICsgKGRpci52YWx1ZSkgKyBcIilcIik7IH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kJDEgKGVsLCBkaXIpIHtcbiAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiAoXCJfYihcIiArIGNvZGUgKyBcIiwnXCIgKyAoZWwudGFnKSArIFwiJyxcIiArIChkaXIudmFsdWUpICsgXCIsXCIgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnByb3AgPyAndHJ1ZScgOiAnZmFsc2UnKSArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMuc3luYyA/ICcsdHJ1ZScgOiAnJykgKyBcIilcIilcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBiYXNlRGlyZWN0aXZlcyA9IHtcbiAgb246IG9uLFxuICBiaW5kOiBiaW5kJDEsXG4gIGNsb2FrOiBub29wXG59O1xuXG4vKiAgKi9cblxuXG5cblxuXG52YXIgQ29kZWdlblN0YXRlID0gZnVuY3Rpb24gQ29kZWdlblN0YXRlIChvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMud2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdGhpcy50cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Db2RlJyk7XG4gIHRoaXMuZGF0YUdlbkZucyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAnZ2VuRGF0YScpO1xuICB0aGlzLmRpcmVjdGl2ZXMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiYXNlRGlyZWN0aXZlcyksIG9wdGlvbnMuZGlyZWN0aXZlcyk7XG4gIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICB0aGlzLm1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuICB0aGlzLm9uY2VJZCA9IDA7XG4gIHRoaXMuc3RhdGljUmVuZGVyRm5zID0gW107XG4gIHRoaXMucHJlID0gZmFsc2U7XG59O1xuXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGUgKFxuICBhc3QsXG4gIG9wdGlvbnNcbikge1xuICB2YXIgc3RhdGUgPSBuZXcgQ29kZWdlblN0YXRlKG9wdGlvbnMpO1xuICB2YXIgY29kZSA9IGFzdCA/IGdlbkVsZW1lbnQoYXN0LCBzdGF0ZSkgOiAnX2MoXCJkaXZcIiknO1xuICByZXR1cm4ge1xuICAgIHJlbmRlcjogKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyBjb2RlICsgXCJ9XCIpLFxuICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRWxlbWVudCAoZWwsIHN0YXRlKSB7XG4gIGlmIChlbC5wYXJlbnQpIHtcbiAgICBlbC5wcmUgPSBlbC5wcmUgfHwgZWwucGFyZW50LnByZTtcbiAgfVxuXG4gIGlmIChlbC5zdGF0aWNSb290ICYmICFlbC5zdGF0aWNQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbk9uY2UoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQgJiYgIXN0YXRlLnByZSkge1xuICAgIHJldHVybiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd2b2lkIDAnXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICByZXR1cm4gZ2VuU2xvdChlbCwgc3RhdGUpXG4gIH0gZWxzZSB7XG4gICAgLy8gY29tcG9uZW50IG9yIGVsZW1lbnRcbiAgICB2YXIgY29kZTtcbiAgICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgICBjb2RlID0gZ2VuQ29tcG9uZW50KGVsLmNvbXBvbmVudCwgZWwsIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRhdGE7XG4gICAgICBpZiAoIWVsLnBsYWluIHx8IChlbC5wcmUgJiYgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpKSkge1xuICAgICAgICBkYXRhID0gZ2VuRGF0YSQyKGVsLCBzdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gICAgICBjb2RlID0gXCJfYygnXCIgKyAoZWwudGFnKSArIFwiJ1wiICsgKGRhdGEgPyAoXCIsXCIgKyBkYXRhKSA6ICcnKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiO1xuICAgIH1cbiAgICAvLyBtb2R1bGUgdHJhbnNmb3Jtc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUudHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29kZSA9IHN0YXRlLnRyYW5zZm9ybXNbaV0oZWwsIGNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY29kZVxuICB9XG59XG5cbi8vIGhvaXN0IHN0YXRpYyBzdWItdHJlZXMgb3V0XG5mdW5jdGlvbiBnZW5TdGF0aWMgKGVsLCBzdGF0ZSkge1xuICBlbC5zdGF0aWNQcm9jZXNzZWQgPSB0cnVlO1xuICAvLyBTb21lIGVsZW1lbnRzICh0ZW1wbGF0ZXMpIG5lZWQgdG8gYmVoYXZlIGRpZmZlcmVudGx5IGluc2lkZSBvZiBhIHYtcHJlXG4gIC8vIG5vZGUuICBBbGwgcHJlIG5vZGVzIGFyZSBzdGF0aWMgcm9vdHMsIHNvIHdlIGNhbiB1c2UgdGhpcyBhcyBhIGxvY2F0aW9uIHRvXG4gIC8vIHdyYXAgYSBzdGF0ZSBjaGFuZ2UgYW5kIHJlc2V0IGl0IHVwb24gZXhpdGluZyB0aGUgcHJlIG5vZGUuXG4gIHZhciBvcmlnaW5hbFByZVN0YXRlID0gc3RhdGUucHJlO1xuICBpZiAoZWwucHJlKSB7XG4gICAgc3RhdGUucHJlID0gZWwucHJlO1xuICB9XG4gIHN0YXRlLnN0YXRpY1JlbmRlckZucy5wdXNoKChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgKGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIn1cIikpO1xuICBzdGF0ZS5wcmUgPSBvcmlnaW5hbFByZVN0YXRlO1xuICByZXR1cm4gKFwiX20oXCIgKyAoc3RhdGUuc3RhdGljUmVuZGVyRm5zLmxlbmd0aCAtIDEpICsgKGVsLnN0YXRpY0luRm9yID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxufVxuXG4vLyB2LW9uY2VcbmZ1bmN0aW9uIGdlbk9uY2UgKGVsLCBzdGF0ZSkge1xuICBlbC5vbmNlUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuc3RhdGljSW5Gb3IpIHtcbiAgICB2YXIga2V5ID0gJyc7XG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LmZvcikge1xuICAgICAgICBrZXkgPSBwYXJlbnQua2V5O1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHN0YXRlLndhcm4oXG4gICAgICAgIFwidi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIFwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1vbmNlJ11cbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2VuRWxlbWVudChlbCwgc3RhdGUpXG4gICAgfVxuICAgIHJldHVybiAoXCJfbyhcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCIsXCIgKyAoc3RhdGUub25jZUlkKyspICsgXCIsXCIgKyBrZXkgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JZiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCksIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KVxufVxuXG5mdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKFxuICBjb25kaXRpb25zLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknXG4gIH1cblxuICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9ucy5zaGlmdCgpO1xuICBpZiAoY29uZGl0aW9uLmV4cCkge1xuICAgIHJldHVybiAoXCIoXCIgKyAoY29uZGl0aW9uLmV4cCkgKyBcIik/XCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSArIFwiOlwiICsgKGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBhbHRHZW5cbiAgICAgID8gYWx0R2VuKGVsLCBzdGF0ZSlcbiAgICAgIDogZWwub25jZVxuICAgICAgICA/IGdlbk9uY2UoZWwsIHN0YXRlKVxuICAgICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRIZWxwZXJcbikge1xuICB2YXIgZXhwID0gZWwuZm9yO1xuICB2YXIgYWxpYXMgPSBlbC5hbGlhcztcbiAgdmFyIGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IChcIixcIiArIChlbC5pdGVyYXRvcjEpKSA6ICcnO1xuICB2YXIgaXRlcmF0b3IyID0gZWwuaXRlcmF0b3IyID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMikpIDogJyc7XG5cbiAgaWYgKHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSAmJlxuICAgIGVsLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgZWwudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgIWVsLmtleVxuICApIHtcbiAgICBzdGF0ZS53YXJuKFxuICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtZm9yPVxcXCJcIiArIGFsaWFzICsgXCIgaW4gXCIgKyBleHAgKyBcIlxcXCI+OiBjb21wb25lbnQgbGlzdHMgcmVuZGVyZWQgd2l0aCBcIiArXG4gICAgICBcInYtZm9yIHNob3VsZCBoYXZlIGV4cGxpY2l0IGtleXMuIFwiICtcbiAgICAgIFwiU2VlIGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2xpc3QuaHRtbCNrZXkgZm9yIG1vcmUgaW5mby5cIixcbiAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddLFxuICAgICAgdHJ1ZSAvKiB0aXAgKi9cbiAgICApO1xuICB9XG5cbiAgZWwuZm9yUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiAoYWx0SGVscGVyIHx8ICdfbCcpICsgXCIoKFwiICsgZXhwICsgXCIpLFwiICtcbiAgICBcImZ1bmN0aW9uKFwiICsgYWxpYXMgKyBpdGVyYXRvcjEgKyBpdGVyYXRvcjIgKyBcIil7XCIgK1xuICAgICAgXCJyZXR1cm4gXCIgKyAoKGFsdEdlbiB8fCBnZW5FbGVtZW50KShlbCwgc3RhdGUpKSArXG4gICAgJ30pJ1xufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDIgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGF0YSA9ICd7JztcblxuICAvLyBkaXJlY3RpdmVzIGZpcnN0LlxuICAvLyBkaXJlY3RpdmVzIG1heSBtdXRhdGUgdGhlIGVsJ3Mgb3RoZXIgcHJvcGVydGllcyBiZWZvcmUgdGhleSBhcmUgZ2VuZXJhdGVkLlxuICB2YXIgZGlycyA9IGdlbkRpcmVjdGl2ZXMoZWwsIHN0YXRlKTtcbiAgaWYgKGRpcnMpIHsgZGF0YSArPSBkaXJzICsgJywnOyB9XG5cbiAgLy8ga2V5XG4gIGlmIChlbC5rZXkpIHtcbiAgICBkYXRhICs9IFwia2V5OlwiICsgKGVsLmtleSkgKyBcIixcIjtcbiAgfVxuICAvLyByZWZcbiAgaWYgKGVsLnJlZikge1xuICAgIGRhdGEgKz0gXCJyZWY6XCIgKyAoZWwucmVmKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5yZWZJbkZvcikge1xuICAgIGRhdGEgKz0gXCJyZWZJbkZvcjp0cnVlLFwiO1xuICB9XG4gIC8vIHByZVxuICBpZiAoZWwucHJlKSB7XG4gICAgZGF0YSArPSBcInByZTp0cnVlLFwiO1xuICB9XG4gIC8vIHJlY29yZCBvcmlnaW5hbCB0YWcgbmFtZSBmb3IgY29tcG9uZW50cyB1c2luZyBcImlzXCIgYXR0cmlidXRlXG4gIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICBkYXRhICs9IFwidGFnOlxcXCJcIiArIChlbC50YWcpICsgXCJcXFwiLFwiO1xuICB9XG4gIC8vIG1vZHVsZSBkYXRhIGdlbmVyYXRpb24gZnVuY3Rpb25zXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUuZGF0YUdlbkZucy5sZW5ndGg7IGkrKykge1xuICAgIGRhdGEgKz0gc3RhdGUuZGF0YUdlbkZuc1tpXShlbCk7XG4gIH1cbiAgLy8gYXR0cmlidXRlc1xuICBpZiAoZWwuYXR0cnMpIHtcbiAgICBkYXRhICs9IFwiYXR0cnM6XCIgKyAoZ2VuUHJvcHMoZWwuYXR0cnMpKSArIFwiLFwiO1xuICB9XG4gIC8vIERPTSBwcm9wc1xuICBpZiAoZWwucHJvcHMpIHtcbiAgICBkYXRhICs9IFwiZG9tUHJvcHM6XCIgKyAoZ2VuUHJvcHMoZWwucHJvcHMpKSArIFwiLFwiO1xuICB9XG4gIC8vIGV2ZW50IGhhbmRsZXJzXG4gIGlmIChlbC5ldmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5ldmVudHMsIGZhbHNlKSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwubmF0aXZlRXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwubmF0aXZlRXZlbnRzLCB0cnVlKSkgKyBcIixcIjtcbiAgfVxuICAvLyBzbG90IHRhcmdldFxuICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zbG90VGFyZ2V0ICYmICFlbC5zbG90U2NvcGUpIHtcbiAgICBkYXRhICs9IFwic2xvdDpcIiArIChlbC5zbG90VGFyZ2V0KSArIFwiLFwiO1xuICB9XG4gIC8vIHNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICBkYXRhICs9IChnZW5TY29wZWRTbG90cyhlbCwgZWwuc2NvcGVkU2xvdHMsIHN0YXRlKSkgKyBcIixcIjtcbiAgfVxuICAvLyBjb21wb25lbnQgdi1tb2RlbFxuICBpZiAoZWwubW9kZWwpIHtcbiAgICBkYXRhICs9IFwibW9kZWw6e3ZhbHVlOlwiICsgKGVsLm1vZGVsLnZhbHVlKSArIFwiLGNhbGxiYWNrOlwiICsgKGVsLm1vZGVsLmNhbGxiYWNrKSArIFwiLGV4cHJlc3Npb246XCIgKyAoZWwubW9kZWwuZXhwcmVzc2lvbikgKyBcIn0sXCI7XG4gIH1cbiAgLy8gaW5saW5lLXRlbXBsYXRlXG4gIGlmIChlbC5pbmxpbmVUZW1wbGF0ZSkge1xuICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IGdlbklubGluZVRlbXBsYXRlKGVsLCBzdGF0ZSk7XG4gICAgaWYgKGlubGluZVRlbXBsYXRlKSB7XG4gICAgICBkYXRhICs9IGlubGluZVRlbXBsYXRlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoLywkLywgJycpICsgJ30nO1xuICAvLyB2LWJpbmQgZHluYW1pYyBhcmd1bWVudCB3cmFwXG4gIC8vIHYtYmluZCB3aXRoIGR5bmFtaWMgYXJndW1lbnRzIG11c3QgYmUgYXBwbGllZCB1c2luZyB0aGUgc2FtZSB2LWJpbmQgb2JqZWN0XG4gIC8vIG1lcmdlIGhlbHBlciBzbyB0aGF0IGNsYXNzL3N0eWxlL211c3RVc2VQcm9wIGF0dHJzIGFyZSBoYW5kbGVkIGNvcnJlY3RseS5cbiAgaWYgKGVsLmR5bmFtaWNBdHRycykge1xuICAgIGRhdGEgPSBcIl9iKFwiICsgZGF0YSArIFwiLFxcXCJcIiArIChlbC50YWcpICsgXCJcXFwiLFwiICsgKGdlblByb3BzKGVsLmR5bmFtaWNBdHRycykpICsgXCIpXCI7XG4gIH1cbiAgLy8gdi1iaW5kIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcERhdGEpIHtcbiAgICBkYXRhID0gZWwud3JhcERhdGEoZGF0YSk7XG4gIH1cbiAgLy8gdi1vbiBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBMaXN0ZW5lcnMpIHtcbiAgICBkYXRhID0gZWwud3JhcExpc3RlbmVycyhkYXRhKTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBnZW5EaXJlY3RpdmVzIChlbCwgc3RhdGUpIHtcbiAgdmFyIGRpcnMgPSBlbC5kaXJlY3RpdmVzO1xuICBpZiAoIWRpcnMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9ICdkaXJlY3RpdmVzOlsnO1xuICB2YXIgaGFzUnVudGltZSA9IGZhbHNlO1xuICB2YXIgaSwgbCwgZGlyLCBuZWVkUnVudGltZTtcbiAgZm9yIChpID0gMCwgbCA9IGRpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBuZWVkUnVudGltZSA9IHRydWU7XG4gICAgdmFyIGdlbiA9IHN0YXRlLmRpcmVjdGl2ZXNbZGlyLm5hbWVdO1xuICAgIGlmIChnZW4pIHtcbiAgICAgIC8vIGNvbXBpbGUtdGltZSBkaXJlY3RpdmUgdGhhdCBtYW5pcHVsYXRlcyBBU1QuXG4gICAgICAvLyByZXR1cm5zIHRydWUgaWYgaXQgYWxzbyBuZWVkcyBhIHJ1bnRpbWUgY291bnRlcnBhcnQuXG4gICAgICBuZWVkUnVudGltZSA9ICEhZ2VuKGVsLCBkaXIsIHN0YXRlLndhcm4pO1xuICAgIH1cbiAgICBpZiAobmVlZFJ1bnRpbWUpIHtcbiAgICAgIGhhc1J1bnRpbWUgPSB0cnVlO1xuICAgICAgcmVzICs9IFwie25hbWU6XFxcIlwiICsgKGRpci5uYW1lKSArIFwiXFxcIixyYXdOYW1lOlxcXCJcIiArIChkaXIucmF3TmFtZSkgKyBcIlxcXCJcIiArIChkaXIudmFsdWUgPyAoXCIsdmFsdWU6KFwiICsgKGRpci52YWx1ZSkgKyBcIiksZXhwcmVzc2lvbjpcIiArIChKU09OLnN0cmluZ2lmeShkaXIudmFsdWUpKSkgOiAnJykgKyAoZGlyLmFyZyA/IChcIixhcmc6XCIgKyAoZGlyLmlzRHluYW1pY0FyZyA/IGRpci5hcmcgOiAoXCJcXFwiXCIgKyAoZGlyLmFyZykgKyBcIlxcXCJcIikpKSA6ICcnKSArIChkaXIubW9kaWZpZXJzID8gKFwiLG1vZGlmaWVyczpcIiArIChKU09OLnN0cmluZ2lmeShkaXIubW9kaWZpZXJzKSkpIDogJycpICsgXCJ9LFwiO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzUnVudGltZSkge1xuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ10nXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSW5saW5lVGVtcGxhdGUgKGVsLCBzdGF0ZSkge1xuICB2YXIgYXN0ID0gZWwuY2hpbGRyZW5bMF07XG4gIGlmIChlbC5jaGlsZHJlbi5sZW5ndGggIT09IDEgfHwgYXN0LnR5cGUgIT09IDEpIHtcbiAgICBzdGF0ZS53YXJuKFxuICAgICAgJ0lubGluZS10ZW1wbGF0ZSBjb21wb25lbnRzIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjaGlsZCBlbGVtZW50LicsXG4gICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgKTtcbiAgfVxuICBpZiAoYXN0ICYmIGFzdC50eXBlID09PSAxKSB7XG4gICAgdmFyIGlubGluZVJlbmRlckZucyA9IGdlbmVyYXRlKGFzdCwgc3RhdGUub3B0aW9ucyk7XG4gICAgcmV0dXJuIChcImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIiArIChpbmxpbmVSZW5kZXJGbnMucmVuZGVyKSArIFwifSxzdGF0aWNSZW5kZXJGbnM6W1wiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJmdW5jdGlvbigpe1wiICsgY29kZSArIFwifVwiKTsgfSkuam9pbignLCcpKSArIFwiXX1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90cyAoXG4gIGVsLFxuICBzbG90cyxcbiAgc3RhdGVcbikge1xuICAvLyBieSBkZWZhdWx0IHNjb3BlZCBzbG90cyBhcmUgY29uc2lkZXJlZCBcInN0YWJsZVwiLCB0aGlzIGFsbG93cyBjaGlsZFxuICAvLyBjb21wb25lbnRzIHdpdGggb25seSBzY29wZWQgc2xvdHMgdG8gc2tpcCBmb3JjZWQgdXBkYXRlcyBmcm9tIHBhcmVudC5cbiAgLy8gYnV0IGluIHNvbWUgY2FzZXMgd2UgaGF2ZSB0byBiYWlsLW91dCBvZiB0aGlzIG9wdGltaXphdGlvblxuICAvLyBmb3IgZXhhbXBsZSBpZiB0aGUgc2xvdCBjb250YWlucyBkeW5hbWljIG5hbWVzLCBoYXMgdi1pZiBvciB2LWZvciBvbiB0aGVtLi4uXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gZWwuZm9yIHx8IE9iamVjdC5rZXlzKHNsb3RzKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc2xvdCA9IHNsb3RzW2tleV07XG4gICAgcmV0dXJuIChcbiAgICAgIHNsb3Quc2xvdFRhcmdldER5bmFtaWMgfHxcbiAgICAgIHNsb3QuaWYgfHxcbiAgICAgIHNsb3QuZm9yIHx8XG4gICAgICBjb250YWluc1Nsb3RDaGlsZChzbG90KSAvLyBpcyBwYXNzaW5nIGRvd24gc2xvdCBmcm9tIHBhcmVudCB3aGljaCBtYXkgYmUgZHluYW1pY1xuICAgIClcbiAgfSk7XG5cbiAgLy8gIzk1MzQ6IGlmIGEgY29tcG9uZW50IHdpdGggc2NvcGVkIHNsb3RzIGlzIGluc2lkZSBhIGNvbmRpdGlvbmFsIGJyYW5jaCxcbiAgLy8gaXQncyBwb3NzaWJsZSBmb3IgdGhlIHNhbWUgY29tcG9uZW50IHRvIGJlIHJldXNlZCBidXQgd2l0aCBkaWZmZXJlbnRcbiAgLy8gY29tcGlsZWQgc2xvdCBjb250ZW50LiBUbyBhdm9pZCB0aGF0LCB3ZSBnZW5lcmF0ZSBhIHVuaXF1ZSBrZXkgYmFzZWQgb25cbiAgLy8gdGhlIGdlbmVyYXRlZCBjb2RlIG9mIGFsbCB0aGUgc2xvdCBjb250ZW50cy5cbiAgdmFyIG5lZWRzS2V5ID0gISFlbC5pZjtcblxuICAvLyBPUiB3aGVuIGl0IGlzIGluc2lkZSBhbm90aGVyIHNjb3BlZCBzbG90IG9yIHYtZm9yICh0aGUgcmVhY3Rpdml0eSBtYXkgYmVcbiAgLy8gZGlzY29ubmVjdGVkIGR1ZSB0byB0aGUgaW50ZXJtZWRpYXRlIHNjb3BlIHZhcmlhYmxlKVxuICAvLyAjOTQzOCwgIzk1MDZcbiAgLy8gVE9ETzogdGhpcyBjYW4gYmUgZnVydGhlciBvcHRpbWl6ZWQgYnkgcHJvcGVybHkgYW5hbHl6aW5nIGluLXNjb3BlIGJpbmRpbmdzXG4gIC8vIGFuZCBza2lwIGZvcmNlIHVwZGF0aW5nIG9uZXMgdGhhdCBkbyBub3QgYWN0dWFsbHkgdXNlIHNjb3BlIHZhcmlhYmxlcy5cbiAgaWYgKCFuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwYXJlbnQuc2xvdFNjb3BlICYmIHBhcmVudC5zbG90U2NvcGUgIT09IGVtcHR5U2xvdFNjb3BlVG9rZW4pIHx8XG4gICAgICAgIHBhcmVudC5mb3JcbiAgICAgICkge1xuICAgICAgICBuZWVkc0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQuaWYpIHtcbiAgICAgICAgbmVlZHNLZXkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gIH1cblxuICB2YXIgZ2VuZXJhdGVkU2xvdHMgPSBPYmplY3Qua2V5cyhzbG90cylcbiAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGdlblNjb3BlZFNsb3Qoc2xvdHNba2V5XSwgc3RhdGUpOyB9KVxuICAgIC5qb2luKCcsJyk7XG5cbiAgcmV0dXJuIChcInNjb3BlZFNsb3RzOl91KFtcIiArIGdlbmVyYXRlZFNsb3RzICsgXCJdXCIgKyAobmVlZHNGb3JjZVVwZGF0ZSA/IFwiLG51bGwsdHJ1ZVwiIDogXCJcIikgKyAoIW5lZWRzRm9yY2VVcGRhdGUgJiYgbmVlZHNLZXkgPyAoXCIsbnVsbCxmYWxzZSxcIiArIChoYXNoKGdlbmVyYXRlZFNsb3RzKSkpIDogXCJcIikgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgdmFyIGhhc2ggPSA1MzgxO1xuICB2YXIgaSA9IHN0ci5sZW5ndGg7XG4gIHdoaWxlKGkpIHtcbiAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICB9XG4gIHJldHVybiBoYXNoID4+PiAwXG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zU2xvdENoaWxkIChlbCkge1xuICBpZiAoZWwudHlwZSA9PT0gMSkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGVsLmNoaWxkcmVuLnNvbWUoY29udGFpbnNTbG90Q2hpbGQpXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3QgKFxuICBlbCxcbiAgc3RhdGVcbikge1xuICB2YXIgaXNMZWdhY3lTeW50YXggPSBlbC5hdHRyc01hcFsnc2xvdC1zY29wZSddO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkICYmICFpc0xlZ2FjeVN5bnRheCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUsIGdlblNjb3BlZFNsb3QsIFwibnVsbFwiKVxuICB9XG4gIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90KVxuICB9XG4gIHZhciBzbG90U2NvcGUgPSBlbC5zbG90U2NvcGUgPT09IGVtcHR5U2xvdFNjb3BlVG9rZW5cbiAgICA/IFwiXCJcbiAgICA6IFN0cmluZyhlbC5zbG90U2NvcGUpO1xuICB2YXIgZm4gPSBcImZ1bmN0aW9uKFwiICsgc2xvdFNjb3BlICsgXCIpe1wiICtcbiAgICBcInJldHVybiBcIiArIChlbC50YWcgPT09ICd0ZW1wbGF0ZSdcbiAgICAgID8gZWwuaWYgJiYgaXNMZWdhY3lTeW50YXhcbiAgICAgICAgPyAoXCIoXCIgKyAoZWwuaWYpICsgXCIpP1wiICsgKGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCcpICsgXCI6dW5kZWZpbmVkXCIpXG4gICAgICAgIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndW5kZWZpbmVkJ1xuICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCI7XG4gIC8vIHJldmVyc2UgcHJveHkgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgdmFyIHJldmVyc2VQcm94eSA9IHNsb3RTY29wZSA/IFwiXCIgOiBcIixwcm94eTp0cnVlXCI7XG4gIHJldHVybiAoXCJ7a2V5OlwiICsgKGVsLnNsb3RUYXJnZXQgfHwgXCJcXFwiZGVmYXVsdFxcXCJcIikgKyBcIixmbjpcIiArIGZuICsgcmV2ZXJzZVByb3h5ICsgXCJ9XCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNoaWxkcmVuIChcbiAgZWwsXG4gIHN0YXRlLFxuICBjaGVja1NraXAsXG4gIGFsdEdlbkVsZW1lbnQsXG4gIGFsdEdlbk5vZGVcbikge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHZhciBlbCQxID0gY2hpbGRyZW5bMF07XG4gICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgZWwkMS5mb3IgJiZcbiAgICAgIGVsJDEudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnXG4gICAgKSB7XG4gICAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUgPSBjaGVja1NraXBcbiAgICAgICAgPyBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCQxKSA/IFwiLDFcIiA6IFwiLDBcIlxuICAgICAgICA6IFwiXCI7XG4gICAgICByZXR1cm4gKFwiXCIgKyAoKGFsdEdlbkVsZW1lbnQgfHwgZ2VuRWxlbWVudCkoZWwkMSwgc3RhdGUpKSArIG5vcm1hbGl6YXRpb25UeXBlKVxuICAgIH1cbiAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUkMSA9IGNoZWNrU2tpcFxuICAgICAgPyBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbiwgc3RhdGUubWF5YmVDb21wb25lbnQpXG4gICAgICA6IDA7XG4gICAgdmFyIGdlbiA9IGFsdEdlbk5vZGUgfHwgZ2VuTm9kZTtcbiAgICByZXR1cm4gKFwiW1wiICsgKGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gZ2VuKGMsIHN0YXRlKTsgfSkuam9pbignLCcpKSArIFwiXVwiICsgKG5vcm1hbGl6YXRpb25UeXBlJDEgPyAoXCIsXCIgKyBub3JtYWxpemF0aW9uVHlwZSQxKSA6ICcnKSlcbiAgfVxufVxuXG4vLyBkZXRlcm1pbmUgdGhlIG5vcm1hbGl6YXRpb24gbmVlZGVkIGZvciB0aGUgY2hpbGRyZW4gYXJyYXkuXG4vLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuLy8gMTogc2ltcGxlIG5vcm1hbGl6YXRpb24gbmVlZGVkIChwb3NzaWJsZSAxLWxldmVsIGRlZXAgbmVzdGVkIGFycmF5KVxuLy8gMjogZnVsbCBub3JtYWxpemF0aW9uIG5lZWRlZFxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKFxuICBjaGlsZHJlbixcbiAgbWF5YmVDb21wb25lbnRcbikge1xuICB2YXIgcmVzID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChlbC50eXBlICE9PSAxKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAobmVlZHNOb3JtYWxpemF0aW9uKGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMjtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbWF5YmVDb21wb25lbnQoYy5ibG9jayk7IH0pKSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBuZWVkc05vcm1hbGl6YXRpb24gKGVsKSB7XG4gIHJldHVybiBlbC5mb3IgIT09IHVuZGVmaW5lZCB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbn1cblxuZnVuY3Rpb24gZ2VuTm9kZSAobm9kZSwgc3RhdGUpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBnZW5FbGVtZW50KG5vZGUsIHN0YXRlKVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMyAmJiBub2RlLmlzQ29tbWVudCkge1xuICAgIHJldHVybiBnZW5Db21tZW50KG5vZGUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblRleHQobm9kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5UZXh0ICh0ZXh0KSB7XG4gIHJldHVybiAoXCJfdihcIiArICh0ZXh0LnR5cGUgPT09IDJcbiAgICA/IHRleHQuZXhwcmVzc2lvbiAvLyBubyBuZWVkIGZvciAoKSBiZWNhdXNlIGFscmVhZHkgd3JhcHBlZCBpbiBfcygpXG4gICAgOiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMoSlNPTi5zdHJpbmdpZnkodGV4dC50ZXh0KSkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlbkNvbW1lbnQgKGNvbW1lbnQpIHtcbiAgcmV0dXJuIChcIl9lKFwiICsgKEpTT04uc3RyaW5naWZ5KGNvbW1lbnQudGV4dCkpICsgXCIpXCIpXG59XG5cbmZ1bmN0aW9uIGdlblNsb3QgKGVsLCBzdGF0ZSkge1xuICB2YXIgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnXCJkZWZhdWx0XCInO1xuICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCwgc3RhdGUpO1xuICB2YXIgcmVzID0gXCJfdChcIiArIHNsb3ROYW1lICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpO1xuICB2YXIgYXR0cnMgPSBlbC5hdHRycyB8fCBlbC5keW5hbWljQXR0cnNcbiAgICA/IGdlblByb3BzKChlbC5hdHRycyB8fCBbXSkuY29uY2F0KGVsLmR5bmFtaWNBdHRycyB8fCBbXSkubWFwKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiAoe1xuICAgICAgICAvLyBzbG90IHByb3BzIGFyZSBjYW1lbGl6ZWRcbiAgICAgICAgbmFtZTogY2FtZWxpemUoYXR0ci5uYW1lKSxcbiAgICAgICAgdmFsdWU6IGF0dHIudmFsdWUsXG4gICAgICAgIGR5bmFtaWM6IGF0dHIuZHluYW1pY1xuICAgICAgfSk7IH0pKVxuICAgIDogbnVsbDtcbiAgdmFyIGJpbmQkJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kJ107XG4gIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7XG4gICAgcmVzICs9IFwiLG51bGxcIjtcbiAgfVxuICBpZiAoYXR0cnMpIHtcbiAgICByZXMgKz0gXCIsXCIgKyBhdHRycztcbiAgfVxuICBpZiAoYmluZCQkMSkge1xuICAgIHJlcyArPSAoYXR0cnMgPyAnJyA6ICcsbnVsbCcpICsgXCIsXCIgKyBiaW5kJCQxO1xuICB9XG4gIHJldHVybiByZXMgKyAnKSdcbn1cblxuLy8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuZnVuY3Rpb24gZ2VuQ29tcG9uZW50IChcbiAgY29tcG9uZW50TmFtZSxcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgcmV0dXJuIChcIl9jKFwiICsgY29tcG9uZW50TmFtZSArIFwiLFwiICsgKGdlbkRhdGEkMihlbCwgc3RhdGUpKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Qcm9wcyAocHJvcHMpIHtcbiAgdmFyIHN0YXRpY1Byb3BzID0gXCJcIjtcbiAgdmFyIGR5bmFtaWNQcm9wcyA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgIHZhciB2YWx1ZSA9IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKTtcbiAgICBpZiAocHJvcC5keW5hbWljKSB7XG4gICAgICBkeW5hbWljUHJvcHMgKz0gKHByb3AubmFtZSkgKyBcIixcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY1Byb3BzICs9IFwiXFxcIlwiICsgKHByb3AubmFtZSkgKyBcIlxcXCI6XCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBzdGF0aWNQcm9wcyA9IFwie1wiICsgKHN0YXRpY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgaWYgKGR5bmFtaWNQcm9wcykge1xuICAgIHJldHVybiAoXCJfZChcIiArIHN0YXRpY1Byb3BzICsgXCIsW1wiICsgKGR5bmFtaWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJdKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0aWNQcm9wc1xuICB9XG59XG5cbi8vICMzODk1LCAjNDI2OFxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpXG59XG5cbi8qICAqL1xuXG5cblxuLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2Vcbi8vIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbnZhciBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCwnICtcbiAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcbiAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXGJ8XFxcXGInKSArICdcXFxcYicpO1xuXG4vLyB0aGVzZSB1bmFyeSBvcGVyYXRvcnMgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHByb3BlcnR5L21ldGhvZCBuYW1lc1xudmFyIHVuYXJ5T3BlcmF0b3JzUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkZWxldGUsdHlwZW9mLHZvaWQnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKXxcXFxcYicpICsgJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCknKTtcblxuLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xudmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0LCB3YXJuKSB7XG4gIGlmIChhc3QpIHtcbiAgICBjaGVja05vZGUoYXN0LCB3YXJuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIHdhcm4pIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbm9kZS5hdHRyc01hcCkge1xuICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5hdHRyc01hcFtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gbm9kZS5yYXdBdHRyc01hcFtuYW1lXTtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgKFwidi1mb3I9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgY2hlY2tFdmVudCh2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja0V4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgd2Fybik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMikge1xuICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIG5vZGUudGV4dCwgd2Fybiwgbm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFdmVudCAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB2YXIgc3RpcHBlZCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKTtcbiAgdmFyIGtleXdvcmRNYXRjaCA9IHN0aXBwZWQubWF0Y2godW5hcnlPcGVyYXRvcnNSRSk7XG4gIGlmIChrZXl3b3JkTWF0Y2ggJiYgc3RpcHBlZC5jaGFyQXQoa2V5d29yZE1hdGNoLmluZGV4IC0gMSkgIT09ICckJykge1xuICAgIHdhcm4oXG4gICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQgdW5hcnkgb3BlcmF0b3IgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxuICBjaGVja0V4cHJlc3Npb24oZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuYWxpYXMsICd2LWZvciBhbGlhcycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKFxuICBpZGVudCxcbiAgdHlwZSxcbiAgdGV4dCxcbiAgd2FybixcbiAgcmFuZ2Vcbikge1xuICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRnVuY3Rpb24oKFwidmFyIFwiICsgaWRlbnQgKyBcIj1fXCIpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKChcImludmFsaWQgXCIgKyB0eXBlICsgXCIgXFxcIlwiICsgaWRlbnQgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpKSwgcmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oKFwicmV0dXJuIFwiICsgZXhwKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpO1xuICAgIGlmIChrZXl3b3JkTWF0Y2gpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIlxcbiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiaW52YWxpZCBleHByZXNzaW9uOiBcIiArIChlLm1lc3NhZ2UpICsgXCIgaW5cXG5cXG5cIiArXG4gICAgICAgIFwiICAgIFwiICsgZXhwICsgXCJcXG5cXG5cIiArXG4gICAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIixcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgcmFuZ2UgPSAyO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZSAoXG4gIHNvdXJjZSxcbiAgc3RhcnQsXG4gIGVuZFxuKSB7XG4gIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0ID0gMDtcbiAgaWYgKCBlbmQgPT09IHZvaWQgMCApIGVuZCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgdmFyIGxpbmVzID0gc291cmNlLnNwbGl0KC9cXHI/XFxuLyk7XG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7XG4gICAgaWYgKGNvdW50ID49IHN0YXJ0KSB7XG4gICAgICBmb3IgKHZhciBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XG4gICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aCkgeyBjb250aW51ZSB9XG4gICAgICAgIHJlcy5wdXNoKChcIlwiICsgKGogKyAxKSArIChyZXBlYXQkMShcIiBcIiwgMyAtIFN0cmluZyhqICsgMSkubGVuZ3RoKSkgKyBcInwgIFwiICsgKGxpbmVzW2pdKSkpO1xuICAgICAgICB2YXIgbGluZUxlbmd0aCA9IGxpbmVzW2pdLmxlbmd0aDtcbiAgICAgICAgaWYgKGogPT09IGkpIHtcbiAgICAgICAgICAvLyBwdXNoIHVuZGVybGluZVxuICAgICAgICAgIHZhciBwYWQgPSBzdGFydCAtIChjb3VudCAtIGxpbmVMZW5ndGgpICsgMTtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQ7XG4gICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiIFwiLCBwYWQpICsgcmVwZWF0JDEoXCJeXCIsIGxlbmd0aCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGogPiBpKSB7XG4gICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoJDEgPSBNYXRoLm1pbihlbmQgLSBjb3VudCwgbGluZUxlbmd0aCk7XG4gICAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCJeXCIsIGxlbmd0aCQxKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzLmpvaW4oJ1xcbicpXG59XG5cbmZ1bmN0aW9uIHJlcGVhdCQxIChzdHIsIG4pIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAobiA+IDApIHtcbiAgICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBpZiAobiAmIDEpIHsgcmVzdWx0ICs9IHN0cjsgfVxuICAgICAgbiA+Pj49IDE7XG4gICAgICBpZiAobiA8PSAwKSB7IGJyZWFrIH1cbiAgICAgIHN0ciArPSBzdHI7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbiAoY29kZSwgZXJyb3JzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihjb2RlKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcnMucHVzaCh7IGVycjogZXJyLCBjb2RlOiBjb2RlIH0pO1xuICAgIHJldHVybiBub29wXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiAoY29tcGlsZSkge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb21waWxlVG9GdW5jdGlvbnMgKFxuICAgIHRlbXBsYXRlLFxuICAgIG9wdGlvbnMsXG4gICAgdm1cbiAgKSB7XG4gICAgb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gICAgdmFyIHdhcm4kJDEgPSBvcHRpb25zLndhcm4gfHwgd2FybjtcbiAgICBkZWxldGUgb3B0aW9ucy53YXJuO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAge1xuICAgICAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkge1xuICAgICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgICAnSXQgc2VlbXMgeW91IGFyZSB1c2luZyB0aGUgc3RhbmRhbG9uZSBidWlsZCBvZiBWdWUuanMgaW4gYW4gJyArXG4gICAgICAgICAgICAnZW52aXJvbm1lbnQgd2l0aCBDb250ZW50IFNlY3VyaXR5IFBvbGljeSB0aGF0IHByb2hpYml0cyB1bnNhZmUtZXZhbC4gJyArXG4gICAgICAgICAgICAnVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGNhbm5vdCB3b3JrIGluIHRoaXMgZW52aXJvbm1lbnQuIENvbnNpZGVyICcgK1xuICAgICAgICAgICAgJ3JlbGF4aW5nIHRoZSBwb2xpY3kgdG8gYWxsb3cgdW5zYWZlLWV2YWwgb3IgcHJlLWNvbXBpbGluZyB5b3VyICcgK1xuICAgICAgICAgICAgJ3RlbXBsYXRlcyBpbnRvIHJlbmRlciBmdW5jdGlvbnMuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjaGVjayBjYWNoZVxuICAgIHZhciBrZXkgPSBvcHRpb25zLmRlbGltaXRlcnNcbiAgICAgID8gU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVycykgKyB0ZW1wbGF0ZVxuICAgICAgOiB0ZW1wbGF0ZTtcbiAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgcmV0dXJuIGNhY2hlW2tleV1cbiAgICB9XG5cbiAgICAvLyBjb21waWxlXG4gICAgdmFyIGNvbXBpbGVkID0gY29tcGlsZSh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG5cbiAgICAvLyBjaGVjayBjb21waWxhdGlvbiBlcnJvcnMvdGlwc1xuICAgIHtcbiAgICAgIGlmIChjb21waWxlZC5lcnJvcnMgJiYgY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIChlLm1zZykgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgICAgZ2VuZXJhdGVDb2RlRnJhbWUodGVtcGxhdGUsIGUuc3RhcnQsIGUuZW5kKSxcbiAgICAgICAgICAgICAgdm1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgdGVtcGxhdGUgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChcIi0gXCIgKyBlKTsgfSkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKG1zZykgeyByZXR1cm4gdGlwKG1zZywgdm0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbihjb2RlLCBmbkdlbkVycm9ycylcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrIGZ1bmN0aW9uIGdlbmVyYXRpb24gZXJyb3JzLlxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGlmIHRoZXJlIGlzIGEgYnVnIGluIHRoZSBjb21waWxlciBpdHNlbGYuXG4gICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIHtcbiAgICAgIGlmICgoIWNvbXBpbGVkLmVycm9ycyB8fCAhY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkgJiYgZm5HZW5FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgXCJGYWlsZWQgdG8gZ2VuZXJhdGUgcmVuZGVyIGZ1bmN0aW9uOlxcblxcblwiICtcbiAgICAgICAgICBmbkdlbkVycm9ycy5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgdmFyIGVyciA9IHJlZi5lcnI7XG4gICAgICAgICAgICB2YXIgY29kZSA9IHJlZi5jb2RlO1xuXG4gICAgICAgICAgICByZXR1cm4gKChlcnIudG9TdHJpbmcoKSkgKyBcIiBpblxcblxcblwiICsgY29kZSArIFwiXFxuXCIpO1xuICAgICAgICB9KS5qb2luKCdcXG4nKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXJDcmVhdG9yIChiYXNlQ29tcGlsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXIgKGJhc2VPcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gY29tcGlsZSAoXG4gICAgICB0ZW1wbGF0ZSxcbiAgICAgIG9wdGlvbnNcbiAgICApIHtcbiAgICAgIHZhciBmaW5hbE9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKGJhc2VPcHRpb25zKTtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciB0aXBzID0gW107XG5cbiAgICAgIHZhciB3YXJuID0gZnVuY3Rpb24gKG1zZywgcmFuZ2UsIHRpcCkge1xuICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChtc2cpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB2YXIgbGVhZGluZ1NwYWNlTGVuZ3RoID0gdGVtcGxhdGUubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuXG4gICAgICAgICAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0geyBtc2c6IG1zZyB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zdGFydCA9IHJhbmdlLnN0YXJ0ICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuZW5kID0gcmFuZ2UuZW5kICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChkYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBtb2R1bGVzXG4gICAgICAgIGlmIChvcHRpb25zLm1vZHVsZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMubW9kdWxlcyA9XG4gICAgICAgICAgICAoYmFzZU9wdGlvbnMubW9kdWxlcyB8fCBbXSkuY29uY2F0KG9wdGlvbnMubW9kdWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIGRpcmVjdGl2ZXNcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5kaXJlY3RpdmVzID0gZXh0ZW5kKFxuICAgICAgICAgICAgT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucy5kaXJlY3RpdmVzIHx8IG51bGwpLFxuICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbW9kdWxlcycgJiYga2V5ICE9PSAnZGlyZWN0aXZlcycpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaW5hbE9wdGlvbnMud2FybiA9IHdhcm47XG5cbiAgICAgIHZhciBjb21waWxlZCA9IGJhc2VDb21waWxlKHRlbXBsYXRlLnRyaW0oKSwgZmluYWxPcHRpb25zKTtcbiAgICAgIHtcbiAgICAgICAgZGV0ZWN0RXJyb3JzKGNvbXBpbGVkLmFzdCwgd2Fybik7XG4gICAgICB9XG4gICAgICBjb21waWxlZC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICBjb21waWxlZC50aXBzID0gdGlwcztcbiAgICAgIHJldHVybiBjb21waWxlZFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBjb21waWxlOiBjb21waWxlLFxuICAgICAgY29tcGlsZVRvRnVuY3Rpb25zOiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuKGNvbXBpbGUpXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBgY3JlYXRlQ29tcGlsZXJDcmVhdG9yYCBhbGxvd3MgY3JlYXRpbmcgY29tcGlsZXJzIHRoYXQgdXNlIGFsdGVybmF0aXZlXG4vLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuXG4vLyBIZXJlIHdlIGp1c3QgZXhwb3J0IGEgZGVmYXVsdCBjb21waWxlciB1c2luZyB0aGUgZGVmYXVsdCBwYXJ0cy5cbnZhciBjcmVhdGVDb21waWxlciA9IGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcihmdW5jdGlvbiBiYXNlQ29tcGlsZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLm9wdGltaXplICE9PSBmYWxzZSkge1xuICAgIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG4gIH1cbiAgdmFyIGNvZGUgPSBnZW5lcmF0ZShhc3QsIG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIGFzdDogYXN0LFxuICAgIHJlbmRlcjogY29kZS5yZW5kZXIsXG4gICAgc3RhdGljUmVuZGVyRm5zOiBjb2RlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59KTtcblxuLyogICovXG5cbnZhciByZWYkMSA9IGNyZWF0ZUNvbXBpbGVyKGJhc2VPcHRpb25zKTtcbnZhciBjb21waWxlID0gcmVmJDEuY29tcGlsZTtcbnZhciBjb21waWxlVG9GdW5jdGlvbnMgPSByZWYkMS5jb21waWxlVG9GdW5jdGlvbnM7XG5cbi8qICAqL1xuXG4vLyBjaGVjayB3aGV0aGVyIGN1cnJlbnQgYnJvd3NlciBlbmNvZGVzIGEgY2hhciBpbnNpZGUgYXR0cmlidXRlIHZhbHVlc1xudmFyIGRpdjtcbmZ1bmN0aW9uIGdldFNob3VsZERlY29kZSAoaHJlZikge1xuICBkaXYgPSBkaXYgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pbm5lckhUTUwgPSBocmVmID8gXCI8YSBocmVmPVxcXCJcXG5cXFwiLz5cIiA6IFwiPGRpdiBhPVxcXCJcXG5cXFwiLz5cIjtcbiAgcmV0dXJuIGRpdi5pbm5lckhUTUwuaW5kZXhPZignJiMxMDsnKSA+IDBcbn1cblxuLy8gIzM2NjM6IElFIGVuY29kZXMgbmV3bGluZXMgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXMgd2hpbGUgb3RoZXIgYnJvd3NlcnMgZG9uJ3RcbnZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IGluQnJvd3NlciA/IGdldFNob3VsZERlY29kZShmYWxzZSkgOiBmYWxzZTtcbi8vICM2ODI4OiBjaHJvbWUgZW5jb2RlcyBjb250ZW50IGluIGFbaHJlZl1cbnZhciBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYgPSBpbkJyb3dzZXIgPyBnZXRTaG91bGREZWNvZGUodHJ1ZSkgOiBmYWxzZTtcblxuLyogICovXG5cbnZhciBpZFRvVGVtcGxhdGUgPSBjYWNoZWQoZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBlbCA9IHF1ZXJ5KGlkKTtcbiAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTFxufSk7XG5cbnZhciBtb3VudCA9IFZ1ZS5wcm90b3R5cGUuJG1vdW50O1xuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIHF1ZXJ5KGVsKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5IHx8IGVsID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICB3YXJuKFxuICAgICAgXCJEbyBub3QgbW91bnQgVnVlIHRvIDxodG1sPiBvciA8Ym9keT4gLSBtb3VudCB0byBub3JtYWwgZWxlbWVudHMgaW5zdGVhZC5cIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgLy8gcmVzb2x2ZSB0ZW1wbGF0ZS9lbCBhbmQgY29udmVydCB0byByZW5kZXIgZnVuY3Rpb25cbiAgaWYgKCFvcHRpb25zLnJlbmRlcikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICB0ZW1wbGF0ZSA9IGlkVG9UZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgKFwiVGVtcGxhdGUgZWxlbWVudCBub3QgZm91bmQgb3IgaXMgZW1wdHk6IFwiICsgKG9wdGlvbnMudGVtcGxhdGUpKSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGUubm9kZVR5cGUpIHtcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5pbm5lckhUTUw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB7XG4gICAgICAgICAgd2FybignaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246JyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgIHRlbXBsYXRlID0gZ2V0T3V0ZXJIVE1MKGVsKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWYgPSBjb21waWxlVG9GdW5jdGlvbnModGVtcGxhdGUsIHtcbiAgICAgICAgb3V0cHV0U291cmNlUmFuZ2U6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lczogc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjogc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmLFxuICAgICAgICBkZWxpbWl0ZXJzOiBvcHRpb25zLmRlbGltaXRlcnMsXG4gICAgICAgIGNvbW1lbnRzOiBvcHRpb25zLmNvbW1lbnRzXG4gICAgICB9LCB0aGlzKTtcbiAgICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IHJlZi5zdGF0aWNSZW5kZXJGbnM7XG4gICAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlcjtcbiAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh0aGlzLl9uYW1lKSArIFwiIGNvbXBpbGVcIiksICdjb21waWxlJywgJ2NvbXBpbGUgZW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtb3VudC5jYWxsKHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vKipcbiAqIEdldCBvdXRlckhUTUwgb2YgZWxlbWVudHMsIHRha2luZyBjYXJlXG4gKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MIChlbCkge1xuICBpZiAoZWwub3V0ZXJIVE1MKSB7XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTFxuICB9IGVsc2Uge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwuY2xvbmVOb2RlKHRydWUpKTtcbiAgICByZXR1cm4gY29udGFpbmVyLmlubmVySFRNTFxuICB9XG59XG5cblZ1ZS5jb21waWxlID0gY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZ1ZTtcbiIsImlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi92dWUuY29tbW9uLnByb2QuanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3Z1ZS5jb21tb24uZGV2LmpzJylcbn1cbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTBcbiAqIChjKSAyMDE0LTIwMTkgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIGU9T2JqZWN0LmZyZWV6ZSh7fSk7ZnVuY3Rpb24gdChlKXtyZXR1cm4gbnVsbD09ZX1mdW5jdGlvbiBuKGUpe3JldHVybiBudWxsIT1lfWZ1bmN0aW9uIHIoZSl7cmV0dXJuITA9PT1lfWZ1bmN0aW9uIGkoZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlfHxcInN5bWJvbFwiPT10eXBlb2YgZXx8XCJib29sZWFuXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIG51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZX12YXIgYT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIHMoZSl7cmV0dXJuXCJbb2JqZWN0IE9iamVjdF1cIj09PWEuY2FsbChlKX1mdW5jdGlvbiBjKGUpe3ZhciB0PXBhcnNlRmxvYXQoU3RyaW5nKGUpKTtyZXR1cm4gdD49MCYmTWF0aC5mbG9vcih0KT09PXQmJmlzRmluaXRlKGUpfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIG4oZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUudGhlbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5jYXRjaH1mdW5jdGlvbiBsKGUpe3JldHVybiBudWxsPT1lP1wiXCI6QXJyYXkuaXNBcnJheShlKXx8cyhlKSYmZS50b1N0cmluZz09PWE/SlNPTi5zdHJpbmdpZnkoZSxudWxsLDIpOlN0cmluZyhlKX1mdW5jdGlvbiBmKGUpe3ZhciB0PXBhcnNlRmxvYXQoZSk7cmV0dXJuIGlzTmFOKHQpP2U6dH1mdW5jdGlvbiBwKGUsdCl7Zm9yKHZhciBuPU9iamVjdC5jcmVhdGUobnVsbCkscj1lLnNwbGl0KFwiLFwiKSxpPTA7aTxyLmxlbmd0aDtpKyspbltyW2ldXT0hMDtyZXR1cm4gdD9mdW5jdGlvbihlKXtyZXR1cm4gbltlLnRvTG93ZXJDYXNlKCldfTpmdW5jdGlvbihlKXtyZXR1cm4gbltlXX19dmFyIGQ9cChcInNsb3QsY29tcG9uZW50XCIsITApLHY9cChcImtleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzXCIpO2Z1bmN0aW9uIGgoZSx0KXtpZihlLmxlbmd0aCl7dmFyIG49ZS5pbmRleE9mKHQpO2lmKG4+LTEpcmV0dXJuIGUuc3BsaWNlKG4sMSl9fXZhciBtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24geShlLHQpe3JldHVybiBtLmNhbGwoZSx0KX1mdW5jdGlvbiBnKGUpe3ZhciB0PU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiB0W25dfHwodFtuXT1lKG4pKX19dmFyIF89Ly0oXFx3KS9nLGI9ZyhmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKF8sZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD90LnRvVXBwZXJDYXNlKCk6XCJcIn0pfSksJD1nKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSl9KSx3PS9cXEIoW0EtWl0pL2csQz1nKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UodyxcIi0kMVwiKS50b0xvd2VyQ2FzZSgpfSk7dmFyIHg9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5iaW5kKHQpfTpmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4obil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDtyZXR1cm4gcj9yPjE/ZS5hcHBseSh0LGFyZ3VtZW50cyk6ZS5jYWxsKHQsbik6ZS5jYWxsKHQpfXJldHVybiBuLl9sZW5ndGg9ZS5sZW5ndGgsbn07ZnVuY3Rpb24gayhlLHQpe3Q9dHx8MDtmb3IodmFyIG49ZS5sZW5ndGgtdCxyPW5ldyBBcnJheShuKTtuLS07KXJbbl09ZVtuK3RdO3JldHVybiByfWZ1bmN0aW9uIEEoZSx0KXtmb3IodmFyIG4gaW4gdCllW25dPXRbbl07cmV0dXJuIGV9ZnVuY3Rpb24gTyhlKXtmb3IodmFyIHQ9e30sbj0wO248ZS5sZW5ndGg7bisrKWVbbl0mJkEodCxlW25dKTtyZXR1cm4gdH1mdW5jdGlvbiBTKGUsdCxuKXt9dmFyIFQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiExfSxFPWZ1bmN0aW9uKGUpe3JldHVybiBlfTtmdW5jdGlvbiBOKGUsdCl7aWYoZT09PXQpcmV0dXJuITA7dmFyIG49byhlKSxyPW8odCk7aWYoIW58fCFyKXJldHVybiFuJiYhciYmU3RyaW5nKGUpPT09U3RyaW5nKHQpO3RyeXt2YXIgaT1BcnJheS5pc0FycmF5KGUpLGE9QXJyYXkuaXNBcnJheSh0KTtpZihpJiZhKXJldHVybiBlLmxlbmd0aD09PXQubGVuZ3RoJiZlLmV2ZXJ5KGZ1bmN0aW9uKGUsbil7cmV0dXJuIE4oZSx0W25dKX0pO2lmKGUgaW5zdGFuY2VvZiBEYXRlJiZ0IGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gZS5nZXRUaW1lKCk9PT10LmdldFRpbWUoKTtpZihpfHxhKXJldHVybiExO3ZhciBzPU9iamVjdC5rZXlzKGUpLGM9T2JqZWN0LmtleXModCk7cmV0dXJuIHMubGVuZ3RoPT09Yy5sZW5ndGgmJnMuZXZlcnkoZnVuY3Rpb24obil7cmV0dXJuIE4oZVtuXSx0W25dKX0pfWNhdGNoKGUpe3JldHVybiExfX1mdW5jdGlvbiBqKGUsdCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspaWYoTihlW25dLHQpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIEQoZSl7dmFyIHQ9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7dHx8KHQ9ITAsZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfX12YXIgTD1cImRhdGEtc2VydmVyLXJlbmRlcmVkXCIsTT1bXCJjb21wb25lbnRcIixcImRpcmVjdGl2ZVwiLFwiZmlsdGVyXCJdLEk9W1wiYmVmb3JlQ3JlYXRlXCIsXCJjcmVhdGVkXCIsXCJiZWZvcmVNb3VudFwiLFwibW91bnRlZFwiLFwiYmVmb3JlVXBkYXRlXCIsXCJ1cGRhdGVkXCIsXCJiZWZvcmVEZXN0cm95XCIsXCJkZXN0cm95ZWRcIixcImFjdGl2YXRlZFwiLFwiZGVhY3RpdmF0ZWRcIixcImVycm9yQ2FwdHVyZWRcIixcInNlcnZlclByZWZldGNoXCJdLEY9e29wdGlvbk1lcmdlU3RyYXRlZ2llczpPYmplY3QuY3JlYXRlKG51bGwpLHNpbGVudDohMSxwcm9kdWN0aW9uVGlwOiExLGRldnRvb2xzOiExLHBlcmZvcm1hbmNlOiExLGVycm9ySGFuZGxlcjpudWxsLHdhcm5IYW5kbGVyOm51bGwsaWdub3JlZEVsZW1lbnRzOltdLGtleUNvZGVzOk9iamVjdC5jcmVhdGUobnVsbCksaXNSZXNlcnZlZFRhZzpULGlzUmVzZXJ2ZWRBdHRyOlQsaXNVbmtub3duRWxlbWVudDpULGdldFRhZ05hbWVzcGFjZTpTLHBhcnNlUGxhdGZvcm1UYWdOYW1lOkUsbXVzdFVzZVByb3A6VCxhc3luYzohMCxfbGlmZWN5Y2xlSG9va3M6SX0sUD0vYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87ZnVuY3Rpb24gUihlLHQsbixyKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpuLGVudW1lcmFibGU6ISFyLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfXZhciBIPW5ldyBSZWdFeHAoXCJbXlwiK1Auc291cmNlK1wiLiRfXFxcXGRdXCIpO3ZhciBCLFU9XCJfX3Byb3RvX19cImlue30sej1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93LFY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFdYRW52aXJvbm1lbnQmJiEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybSxLPVYmJldYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKSxKPXomJndpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkscT1KJiYvbXNpZXx0cmlkZW50Ly50ZXN0KEopLFc9SiYmSi5pbmRleE9mKFwibXNpZSA5LjBcIik+MCxaPUomJkouaW5kZXhPZihcImVkZ2UvXCIpPjAsRz0oSiYmSi5pbmRleE9mKFwiYW5kcm9pZFwiKSxKJiYvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoSil8fFwiaW9zXCI9PT1LKSxYPShKJiYvY2hyb21lXFwvXFxkKy8udGVzdChKKSxKJiYvcGhhbnRvbWpzLy50ZXN0KEopLEomJkoubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSksWT17fS53YXRjaCxRPSExO2lmKHopdHJ5e3ZhciBlZT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZWUsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1E9ITB9fSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0LXBhc3NpdmVcIixudWxsLGVlKX1jYXRjaChlKXt9dmFyIHRlPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PUImJihCPSF6JiYhViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmKGdsb2JhbC5wcm9jZXNzJiZcInNlcnZlclwiPT09Z2xvYmFsLnByb2Nlc3MuZW52LlZVRV9FTlYpKSxCfSxuZT16JiZ3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztmdW5jdGlvbiByZShlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYvbmF0aXZlIGNvZGUvLnRlc3QoZS50b1N0cmluZygpKX12YXIgaWUsb2U9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmcmUoU3ltYm9sKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QmJnJlKFJlZmxlY3Qub3duS2V5cyk7aWU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCYmcmUoU2V0KT9TZXQ6ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5zZXQ9T2JqZWN0LmNyZWF0ZShudWxsKX1yZXR1cm4gZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3JldHVybiEwPT09dGhpcy5zZXRbZV19LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXt0aGlzLnNldFtlXT0hMH0sZS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLnNldD1PYmplY3QuY3JlYXRlKG51bGwpfSxlfSgpO3ZhciBhZT1TLHNlPTAsY2U9ZnVuY3Rpb24oKXt0aGlzLmlkPXNlKyssdGhpcy5zdWJzPVtdfTtjZS5wcm90b3R5cGUuYWRkU3ViPWZ1bmN0aW9uKGUpe3RoaXMuc3Vicy5wdXNoKGUpfSxjZS5wcm90b3R5cGUucmVtb3ZlU3ViPWZ1bmN0aW9uKGUpe2godGhpcy5zdWJzLGUpfSxjZS5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uKCl7Y2UudGFyZ2V0JiZjZS50YXJnZXQuYWRkRGVwKHRoaXMpfSxjZS5wcm90b3R5cGUubm90aWZ5PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuc3Vicy5zbGljZSgpLHQ9MCxuPWUubGVuZ3RoO3Q8bjt0KyspZVt0XS51cGRhdGUoKX0sY2UudGFyZ2V0PW51bGw7dmFyIHVlPVtdO2Z1bmN0aW9uIGxlKGUpe3VlLnB1c2goZSksY2UudGFyZ2V0PWV9ZnVuY3Rpb24gZmUoKXt1ZS5wb3AoKSxjZS50YXJnZXQ9dWVbdWUubGVuZ3RoLTFdfXZhciBwZT1mdW5jdGlvbihlLHQsbixyLGksbyxhLHMpe3RoaXMudGFnPWUsdGhpcy5kYXRhPXQsdGhpcy5jaGlsZHJlbj1uLHRoaXMudGV4dD1yLHRoaXMuZWxtPWksdGhpcy5ucz12b2lkIDAsdGhpcy5jb250ZXh0PW8sdGhpcy5mbkNvbnRleHQ9dm9pZCAwLHRoaXMuZm5PcHRpb25zPXZvaWQgMCx0aGlzLmZuU2NvcGVJZD12b2lkIDAsdGhpcy5rZXk9dCYmdC5rZXksdGhpcy5jb21wb25lbnRPcHRpb25zPWEsdGhpcy5jb21wb25lbnRJbnN0YW5jZT12b2lkIDAsdGhpcy5wYXJlbnQ9dm9pZCAwLHRoaXMucmF3PSExLHRoaXMuaXNTdGF0aWM9ITEsdGhpcy5pc1Jvb3RJbnNlcnQ9ITAsdGhpcy5pc0NvbW1lbnQ9ITEsdGhpcy5pc0Nsb25lZD0hMSx0aGlzLmlzT25jZT0hMSx0aGlzLmFzeW5jRmFjdG9yeT1zLHRoaXMuYXN5bmNNZXRhPXZvaWQgMCx0aGlzLmlzQXN5bmNQbGFjZWhvbGRlcj0hMX0sZGU9e2NoaWxkOntjb25maWd1cmFibGU6ITB9fTtkZS5jaGlsZC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocGUucHJvdG90eXBlLGRlKTt2YXIgdmU9ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9XCJcIik7dmFyIHQ9bmV3IHBlO3JldHVybiB0LnRleHQ9ZSx0LmlzQ29tbWVudD0hMCx0fTtmdW5jdGlvbiBoZShlKXtyZXR1cm4gbmV3IHBlKHZvaWQgMCx2b2lkIDAsdm9pZCAwLFN0cmluZyhlKSl9ZnVuY3Rpb24gbWUoZSl7dmFyIHQ9bmV3IHBlKGUudGFnLGUuZGF0YSxlLmNoaWxkcmVuJiZlLmNoaWxkcmVuLnNsaWNlKCksZS50ZXh0LGUuZWxtLGUuY29udGV4dCxlLmNvbXBvbmVudE9wdGlvbnMsZS5hc3luY0ZhY3RvcnkpO3JldHVybiB0Lm5zPWUubnMsdC5pc1N0YXRpYz1lLmlzU3RhdGljLHQua2V5PWUua2V5LHQuaXNDb21tZW50PWUuaXNDb21tZW50LHQuZm5Db250ZXh0PWUuZm5Db250ZXh0LHQuZm5PcHRpb25zPWUuZm5PcHRpb25zLHQuZm5TY29wZUlkPWUuZm5TY29wZUlkLHQuYXN5bmNNZXRhPWUuYXN5bmNNZXRhLHQuaXNDbG9uZWQ9ITAsdH12YXIgeWU9QXJyYXkucHJvdG90eXBlLGdlPU9iamVjdC5jcmVhdGUoeWUpO1tcInB1c2hcIixcInBvcFwiLFwic2hpZnRcIixcInVuc2hpZnRcIixcInNwbGljZVwiLFwic29ydFwiLFwicmV2ZXJzZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXllW2VdO1IoZ2UsZSxmdW5jdGlvbigpe2Zvcih2YXIgbj1bXSxyPWFyZ3VtZW50cy5sZW5ndGg7ci0tOyluW3JdPWFyZ3VtZW50c1tyXTt2YXIgaSxvPXQuYXBwbHkodGhpcyxuKSxhPXRoaXMuX19vYl9fO3N3aXRjaChlKXtjYXNlXCJwdXNoXCI6Y2FzZVwidW5zaGlmdFwiOmk9bjticmVhaztjYXNlXCJzcGxpY2VcIjppPW4uc2xpY2UoMil9cmV0dXJuIGkmJmEub2JzZXJ2ZUFycmF5KGkpLGEuZGVwLm5vdGlmeSgpLG99KX0pO3ZhciBfZT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnZSksYmU9ITA7ZnVuY3Rpb24gJGUoZSl7YmU9ZX12YXIgd2U9ZnVuY3Rpb24oZSl7dmFyIHQ7dGhpcy52YWx1ZT1lLHRoaXMuZGVwPW5ldyBjZSx0aGlzLnZtQ291bnQ9MCxSKGUsXCJfX29iX19cIix0aGlzKSxBcnJheS5pc0FycmF5KGUpPyhVPyh0PWdlLGUuX19wcm90b19fPXQpOmZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9MCxpPW4ubGVuZ3RoO3I8aTtyKyspe3ZhciBvPW5bcl07UihlLG8sdFtvXSl9fShlLGdlLF9lKSx0aGlzLm9ic2VydmVBcnJheShlKSk6dGhpcy53YWxrKGUpfTtmdW5jdGlvbiBDZShlLHQpe3ZhciBuO2lmKG8oZSkmJiEoZSBpbnN0YW5jZW9mIHBlKSlyZXR1cm4geShlLFwiX19vYl9fXCIpJiZlLl9fb2JfXyBpbnN0YW5jZW9mIHdlP249ZS5fX29iX186YmUmJiF0ZSgpJiYoQXJyYXkuaXNBcnJheShlKXx8cyhlKSkmJk9iamVjdC5pc0V4dGVuc2libGUoZSkmJiFlLl9pc1Z1ZSYmKG49bmV3IHdlKGUpKSx0JiZuJiZuLnZtQ291bnQrKyxufWZ1bmN0aW9uIHhlKGUsdCxuLHIsaSl7dmFyIG89bmV3IGNlLGE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpO2lmKCFhfHwhMSE9PWEuY29uZmlndXJhYmxlKXt2YXIgcz1hJiZhLmdldCxjPWEmJmEuc2V0O3MmJiFjfHwyIT09YXJndW1lbnRzLmxlbmd0aHx8KG49ZVt0XSk7dmFyIHU9IWkmJkNlKG4pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3ZhciB0PXM/cy5jYWxsKGUpOm47cmV0dXJuIGNlLnRhcmdldCYmKG8uZGVwZW5kKCksdSYmKHUuZGVwLmRlcGVuZCgpLEFycmF5LmlzQXJyYXkodCkmJmZ1bmN0aW9uIGUodCl7Zm9yKHZhciBuPXZvaWQgMCxyPTAsaT10Lmxlbmd0aDtyPGk7cisrKShuPXRbcl0pJiZuLl9fb2JfXyYmbi5fX29iX18uZGVwLmRlcGVuZCgpLEFycmF5LmlzQXJyYXkobikmJmUobil9KHQpKSksdH0sc2V0OmZ1bmN0aW9uKHQpe3ZhciByPXM/cy5jYWxsKGUpOm47dD09PXJ8fHQhPXQmJnIhPXJ8fHMmJiFjfHwoYz9jLmNhbGwoZSx0KTpuPXQsdT0haSYmQ2UodCksby5ub3RpZnkoKSl9fSl9fWZ1bmN0aW9uIGtlKGUsdCxuKXtpZihBcnJheS5pc0FycmF5KGUpJiZjKHQpKXJldHVybiBlLmxlbmd0aD1NYXRoLm1heChlLmxlbmd0aCx0KSxlLnNwbGljZSh0LDEsbiksbjtpZih0IGluIGUmJiEodCBpbiBPYmplY3QucHJvdG90eXBlKSlyZXR1cm4gZVt0XT1uLG47dmFyIHI9ZS5fX29iX187cmV0dXJuIGUuX2lzVnVlfHxyJiZyLnZtQ291bnQ/bjpyPyh4ZShyLnZhbHVlLHQsbiksci5kZXAubm90aWZ5KCksbik6KGVbdF09bixuKX1mdW5jdGlvbiBBZShlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkmJmModCkpZS5zcGxpY2UodCwxKTtlbHNle3ZhciBuPWUuX19vYl9fO2UuX2lzVnVlfHxuJiZuLnZtQ291bnR8fHkoZSx0KSYmKGRlbGV0ZSBlW3RdLG4mJm4uZGVwLm5vdGlmeSgpKX19d2UucHJvdG90eXBlLndhbGs9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PU9iamVjdC5rZXlzKGUpLG49MDtuPHQubGVuZ3RoO24rKyl4ZShlLHRbbl0pfSx3ZS5wcm90b3R5cGUub2JzZXJ2ZUFycmF5PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49ZS5sZW5ndGg7dDxuO3QrKylDZShlW3RdKX07dmFyIE9lPUYub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO2Z1bmN0aW9uIFNlKGUsdCl7aWYoIXQpcmV0dXJuIGU7Zm9yKHZhciBuLHIsaSxvPW9lP1JlZmxlY3Qub3duS2V5cyh0KTpPYmplY3Qua2V5cyh0KSxhPTA7YTxvLmxlbmd0aDthKyspXCJfX29iX19cIiE9PShuPW9bYV0pJiYocj1lW25dLGk9dFtuXSx5KGUsbik/ciE9PWkmJnMocikmJnMoaSkmJlNlKHIsaSk6a2UoZSxuLGkpKTtyZXR1cm4gZX1mdW5jdGlvbiBUZShlLHQsbil7cmV0dXJuIG4/ZnVuY3Rpb24oKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3QuY2FsbChuLG4pOnQsaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2UuY2FsbChuLG4pOmU7cmV0dXJuIHI/U2UocixpKTppfTp0P2U/ZnVuY3Rpb24oKXtyZXR1cm4gU2UoXCJmdW5jdGlvblwiPT10eXBlb2YgdD90LmNhbGwodGhpcyx0aGlzKTp0LFwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZS5jYWxsKHRoaXMsdGhpcyk6ZSl9OnQ6ZX1mdW5jdGlvbiBFZShlLHQpe3ZhciBuPXQ/ZT9lLmNvbmNhdCh0KTpBcnJheS5pc0FycmF5KHQpP3Q6W3RdOmU7cmV0dXJuIG4/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MDtuPGUubGVuZ3RoO24rKyktMT09PXQuaW5kZXhPZihlW25dKSYmdC5wdXNoKGVbbl0pO3JldHVybiB0fShuKTpufWZ1bmN0aW9uIE5lKGUsdCxuLHIpe3ZhciBpPU9iamVjdC5jcmVhdGUoZXx8bnVsbCk7cmV0dXJuIHQ/QShpLHQpOml9T2UuZGF0YT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG4/VGUoZSx0LG4pOnQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTpUZShlLHQpfSxJLmZvckVhY2goZnVuY3Rpb24oZSl7T2VbZV09RWV9KSxNLmZvckVhY2goZnVuY3Rpb24oZSl7T2VbZStcInNcIl09TmV9KSxPZS53YXRjaD1mdW5jdGlvbihlLHQsbixyKXtpZihlPT09WSYmKGU9dm9pZCAwKSx0PT09WSYmKHQ9dm9pZCAwKSwhdClyZXR1cm4gT2JqZWN0LmNyZWF0ZShlfHxudWxsKTtpZighZSlyZXR1cm4gdDt2YXIgaT17fTtmb3IodmFyIG8gaW4gQShpLGUpLHQpe3ZhciBhPWlbb10scz10W29dO2EmJiFBcnJheS5pc0FycmF5KGEpJiYoYT1bYV0pLGlbb109YT9hLmNvbmNhdChzKTpBcnJheS5pc0FycmF5KHMpP3M6W3NdfXJldHVybiBpfSxPZS5wcm9wcz1PZS5tZXRob2RzPU9lLmluamVjdD1PZS5jb21wdXRlZD1mdW5jdGlvbihlLHQsbixyKXtpZighZSlyZXR1cm4gdDt2YXIgaT1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBBKGksZSksdCYmQShpLHQpLGl9LE9lLnByb3ZpZGU9VGU7dmFyIGplPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/ZTp0fTtmdW5jdGlvbiBEZShlLHQsbil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHQ9dC5vcHRpb25zKSxmdW5jdGlvbihlLHQpe3ZhciBuPWUucHJvcHM7aWYobil7dmFyIHIsaSxvPXt9O2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHI9bi5sZW5ndGg7ci0tOylcInN0cmluZ1wiPT10eXBlb2YoaT1uW3JdKSYmKG9bYihpKV09e3R5cGU6bnVsbH0pO2Vsc2UgaWYocyhuKSlmb3IodmFyIGEgaW4gbilpPW5bYV0sb1tiKGEpXT1zKGkpP2k6e3R5cGU6aX07ZS5wcm9wcz1vfX0odCksZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmluamVjdDtpZihuKXt2YXIgcj1lLmluamVjdD17fTtpZihBcnJheS5pc0FycmF5KG4pKWZvcih2YXIgaT0wO2k8bi5sZW5ndGg7aSsrKXJbbltpXV09e2Zyb206bltpXX07ZWxzZSBpZihzKG4pKWZvcih2YXIgbyBpbiBuKXt2YXIgYT1uW29dO3Jbb109cyhhKT9BKHtmcm9tOm99LGEpOntmcm9tOmF9fX19KHQpLGZ1bmN0aW9uKGUpe3ZhciB0PWUuZGlyZWN0aXZlcztpZih0KWZvcih2YXIgbiBpbiB0KXt2YXIgcj10W25dO1wiZnVuY3Rpb25cIj09dHlwZW9mIHImJih0W25dPXtiaW5kOnIsdXBkYXRlOnJ9KX19KHQpLCF0Ll9iYXNlJiYodC5leHRlbmRzJiYoZT1EZShlLHQuZXh0ZW5kcyxuKSksdC5taXhpbnMpKWZvcih2YXIgcj0wLGk9dC5taXhpbnMubGVuZ3RoO3I8aTtyKyspZT1EZShlLHQubWl4aW5zW3JdLG4pO3ZhciBvLGE9e307Zm9yKG8gaW4gZSljKG8pO2ZvcihvIGluIHQpeShlLG8pfHxjKG8pO2Z1bmN0aW9uIGMocil7dmFyIGk9T2Vbcl18fGplO2Fbcl09aShlW3JdLHRbcl0sbixyKX1yZXR1cm4gYX1mdW5jdGlvbiBMZShlLHQsbixyKXtpZihcInN0cmluZ1wiPT10eXBlb2Ygbil7dmFyIGk9ZVt0XTtpZih5KGksbikpcmV0dXJuIGlbbl07dmFyIG89YihuKTtpZih5KGksbykpcmV0dXJuIGlbb107dmFyIGE9JChvKTtyZXR1cm4geShpLGEpP2lbYV06aVtuXXx8aVtvXXx8aVthXX19ZnVuY3Rpb24gTWUoZSx0LG4scil7dmFyIGk9dFtlXSxvPSF5KG4sZSksYT1uW2VdLHM9UGUoQm9vbGVhbixpLnR5cGUpO2lmKHM+LTEpaWYobyYmIXkoaSxcImRlZmF1bHRcIikpYT0hMTtlbHNlIGlmKFwiXCI9PT1hfHxhPT09QyhlKSl7dmFyIGM9UGUoU3RyaW5nLGkudHlwZSk7KGM8MHx8czxjKSYmKGE9ITApfWlmKHZvaWQgMD09PWEpe2E9ZnVuY3Rpb24oZSx0LG4pe2lmKCF5KHQsXCJkZWZhdWx0XCIpKXJldHVybjt2YXIgcj10LmRlZmF1bHQ7aWYoZSYmZS4kb3B0aW9ucy5wcm9wc0RhdGEmJnZvaWQgMD09PWUuJG9wdGlvbnMucHJvcHNEYXRhW25dJiZ2b2lkIDAhPT1lLl9wcm9wc1tuXSlyZXR1cm4gZS5fcHJvcHNbbl07cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgciYmXCJGdW5jdGlvblwiIT09SWUodC50eXBlKT9yLmNhbGwoZSk6cn0ocixpLGUpO3ZhciB1PWJlOyRlKCEwKSxDZShhKSwkZSh1KX1yZXR1cm4gYX1mdW5jdGlvbiBJZShlKXt2YXIgdD1lJiZlLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7cmV0dXJuIHQ/dFsxXTpcIlwifWZ1bmN0aW9uIEZlKGUsdCl7cmV0dXJuIEllKGUpPT09SWUodCl9ZnVuY3Rpb24gUGUoZSx0KXtpZighQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gRmUodCxlKT8wOi0xO2Zvcih2YXIgbj0wLHI9dC5sZW5ndGg7bjxyO24rKylpZihGZSh0W25dLGUpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIFJlKGUsdCxuKXtsZSgpO3RyeXtpZih0KWZvcih2YXIgcj10O3I9ci4kcGFyZW50Oyl7dmFyIGk9ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO2lmKGkpZm9yKHZhciBvPTA7bzxpLmxlbmd0aDtvKyspdHJ5e2lmKCExPT09aVtvXS5jYWxsKHIsZSx0LG4pKXJldHVybn1jYXRjaChlKXtCZShlLHIsXCJlcnJvckNhcHR1cmVkIGhvb2tcIil9fUJlKGUsdCxuKX1maW5hbGx5e2ZlKCl9fWZ1bmN0aW9uIEhlKGUsdCxuLHIsaSl7dmFyIG87dHJ5eyhvPW4/ZS5hcHBseSh0LG4pOmUuY2FsbCh0KSkmJiFvLl9pc1Z1ZSYmdShvKSYmIW8uX2hhbmRsZWQmJihvLmNhdGNoKGZ1bmN0aW9uKGUpe3JldHVybiBSZShlLHIsaStcIiAoUHJvbWlzZS9hc3luYylcIil9KSxvLl9oYW5kbGVkPSEwKX1jYXRjaChlKXtSZShlLHIsaSl9cmV0dXJuIG99ZnVuY3Rpb24gQmUoZSx0LG4pe2lmKEYuZXJyb3JIYW5kbGVyKXRyeXtyZXR1cm4gRi5lcnJvckhhbmRsZXIuY2FsbChudWxsLGUsdCxuKX1jYXRjaCh0KXt0IT09ZSYmVWUodCxudWxsLFwiY29uZmlnLmVycm9ySGFuZGxlclwiKX1VZShlLHQsbil9ZnVuY3Rpb24gVWUoZSx0LG4pe2lmKCF6JiYhVnx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGUpdGhyb3cgZTtjb25zb2xlLmVycm9yKGUpfXZhciB6ZSxWZT0hMSxLZT1bXSxKZT0hMTtmdW5jdGlvbiBxZSgpe0plPSExO3ZhciBlPUtlLnNsaWNlKDApO0tlLmxlbmd0aD0wO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0oKX1pZihcInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmcmUoUHJvbWlzZSkpe3ZhciBXZT1Qcm9taXNlLnJlc29sdmUoKTt6ZT1mdW5jdGlvbigpe1dlLnRoZW4ocWUpLEcmJnNldFRpbWVvdXQoUyl9LFZlPSEwfWVsc2UgaWYocXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXJ8fCFyZShNdXRhdGlvbk9ic2VydmVyKSYmXCJbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl1cIiE9PU11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSl6ZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZyZShzZXRJbW1lZGlhdGUpP2Z1bmN0aW9uKCl7c2V0SW1tZWRpYXRlKHFlKX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KHFlLDApfTtlbHNle3ZhciBaZT0xLEdlPW5ldyBNdXRhdGlvbk9ic2VydmVyKHFlKSxYZT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoWmUpKTtHZS5vYnNlcnZlKFhlLHtjaGFyYWN0ZXJEYXRhOiEwfSksemU9ZnVuY3Rpb24oKXtaZT0oWmUrMSklMixYZS5kYXRhPVN0cmluZyhaZSl9LFZlPSEwfWZ1bmN0aW9uIFllKGUsdCl7dmFyIG47aWYoS2UucHVzaChmdW5jdGlvbigpe2lmKGUpdHJ5e2UuY2FsbCh0KX1jYXRjaChlKXtSZShlLHQsXCJuZXh0VGlja1wiKX1lbHNlIG4mJm4odCl9KSxKZXx8KEplPSEwLHplKCkpLCFlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSlyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSl7bj1lfSl9dmFyIFFlPW5ldyBpZTtmdW5jdGlvbiBldChlKXshZnVuY3Rpb24gZSh0LG4pe3ZhciByLGk7dmFyIGE9QXJyYXkuaXNBcnJheSh0KTtpZighYSYmIW8odCl8fE9iamVjdC5pc0Zyb3plbih0KXx8dCBpbnN0YW5jZW9mIHBlKXJldHVybjtpZih0Ll9fb2JfXyl7dmFyIHM9dC5fX29iX18uZGVwLmlkO2lmKG4uaGFzKHMpKXJldHVybjtuLmFkZChzKX1pZihhKWZvcihyPXQubGVuZ3RoO3ItLTspZSh0W3JdLG4pO2Vsc2UgZm9yKGk9T2JqZWN0LmtleXModCkscj1pLmxlbmd0aDtyLS07KWUodFtpW3JdXSxuKX0oZSxRZSksUWUuY2xlYXIoKX12YXIgdHQ9ZyhmdW5jdGlvbihlKXt2YXIgdD1cIiZcIj09PWUuY2hhckF0KDApLG49XCJ+XCI9PT0oZT10P2Uuc2xpY2UoMSk6ZSkuY2hhckF0KDApLHI9XCIhXCI9PT0oZT1uP2Uuc2xpY2UoMSk6ZSkuY2hhckF0KDApO3JldHVybntuYW1lOmU9cj9lLnNsaWNlKDEpOmUsb25jZTpuLGNhcHR1cmU6cixwYXNzaXZlOnR9fSk7ZnVuY3Rpb24gbnQoZSx0KXtmdW5jdGlvbiBuKCl7dmFyIGU9YXJndW1lbnRzLHI9bi5mbnM7aWYoIUFycmF5LmlzQXJyYXkocikpcmV0dXJuIEhlKHIsbnVsbCxhcmd1bWVudHMsdCxcInYtb24gaGFuZGxlclwiKTtmb3IodmFyIGk9ci5zbGljZSgpLG89MDtvPGkubGVuZ3RoO28rKylIZShpW29dLG51bGwsZSx0LFwidi1vbiBoYW5kbGVyXCIpfXJldHVybiBuLmZucz1lLG59ZnVuY3Rpb24gcnQoZSxuLGksbyxhLHMpe3ZhciBjLHUsbCxmO2ZvcihjIGluIGUpdT1lW2NdLGw9bltjXSxmPXR0KGMpLHQodSl8fCh0KGwpPyh0KHUuZm5zKSYmKHU9ZVtjXT1udCh1LHMpKSxyKGYub25jZSkmJih1PWVbY109YShmLm5hbWUsdSxmLmNhcHR1cmUpKSxpKGYubmFtZSx1LGYuY2FwdHVyZSxmLnBhc3NpdmUsZi5wYXJhbXMpKTp1IT09bCYmKGwuZm5zPXUsZVtjXT1sKSk7Zm9yKGMgaW4gbil0KGVbY10pJiZvKChmPXR0KGMpKS5uYW1lLG5bY10sZi5jYXB0dXJlKX1mdW5jdGlvbiBpdChlLGksbyl7dmFyIGE7ZSBpbnN0YW5jZW9mIHBlJiYoZT1lLmRhdGEuaG9va3x8KGUuZGF0YS5ob29rPXt9KSk7dmFyIHM9ZVtpXTtmdW5jdGlvbiBjKCl7by5hcHBseSh0aGlzLGFyZ3VtZW50cyksaChhLmZucyxjKX10KHMpP2E9bnQoW2NdKTpuKHMuZm5zKSYmcihzLm1lcmdlZCk/KGE9cykuZm5zLnB1c2goYyk6YT1udChbcyxjXSksYS5tZXJnZWQ9ITAsZVtpXT1hfWZ1bmN0aW9uIG90KGUsdCxyLGksbyl7aWYobih0KSl7aWYoeSh0LHIpKXJldHVybiBlW3JdPXRbcl0sb3x8ZGVsZXRlIHRbcl0sITA7aWYoeSh0LGkpKXJldHVybiBlW3JdPXRbaV0sb3x8ZGVsZXRlIHRbaV0sITB9cmV0dXJuITF9ZnVuY3Rpb24gYXQoZSl7cmV0dXJuIGkoZSk/W2hlKGUpXTpBcnJheS5pc0FycmF5KGUpP2Z1bmN0aW9uIGUobyxhKXt2YXIgcz1bXTt2YXIgYyx1LGwsZjtmb3IoYz0wO2M8by5sZW5ndGg7YysrKXQodT1vW2NdKXx8XCJib29sZWFuXCI9PXR5cGVvZiB1fHwobD1zLmxlbmd0aC0xLGY9c1tsXSxBcnJheS5pc0FycmF5KHUpP3UubGVuZ3RoPjAmJihzdCgodT1lKHUsKGF8fFwiXCIpK1wiX1wiK2MpKVswXSkmJnN0KGYpJiYoc1tsXT1oZShmLnRleHQrdVswXS50ZXh0KSx1LnNoaWZ0KCkpLHMucHVzaC5hcHBseShzLHUpKTppKHUpP3N0KGYpP3NbbF09aGUoZi50ZXh0K3UpOlwiXCIhPT11JiZzLnB1c2goaGUodSkpOnN0KHUpJiZzdChmKT9zW2xdPWhlKGYudGV4dCt1LnRleHQpOihyKG8uX2lzVkxpc3QpJiZuKHUudGFnKSYmdCh1LmtleSkmJm4oYSkmJih1LmtleT1cIl9fdmxpc3RcIithK1wiX1wiK2MrXCJfX1wiKSxzLnB1c2godSkpKTtyZXR1cm4gc30oZSk6dm9pZCAwfWZ1bmN0aW9uIHN0KGUpe3JldHVybiBuKGUpJiZuKGUudGV4dCkmJiExPT09ZS5pc0NvbW1lbnR9ZnVuY3Rpb24gY3QoZSx0KXtpZihlKXtmb3IodmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPW9lP1JlZmxlY3Qub3duS2V5cyhlKTpPYmplY3Qua2V5cyhlKSxpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBvPXJbaV07aWYoXCJfX29iX19cIiE9PW8pe2Zvcih2YXIgYT1lW29dLmZyb20scz10O3M7KXtpZihzLl9wcm92aWRlZCYmeShzLl9wcm92aWRlZCxhKSl7bltvXT1zLl9wcm92aWRlZFthXTticmVha31zPXMuJHBhcmVudH1pZighcyYmXCJkZWZhdWx0XCJpbiBlW29dKXt2YXIgYz1lW29dLmRlZmF1bHQ7bltvXT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjP2MuY2FsbCh0KTpjfX19cmV0dXJuIG59fWZ1bmN0aW9uIHV0KGUsdCl7aWYoIWV8fCFlLmxlbmd0aClyZXR1cm57fTtmb3IodmFyIG49e30scj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyl7dmFyIG89ZVtyXSxhPW8uZGF0YTtpZihhJiZhLmF0dHJzJiZhLmF0dHJzLnNsb3QmJmRlbGV0ZSBhLmF0dHJzLnNsb3Qsby5jb250ZXh0IT09dCYmby5mbkNvbnRleHQhPT10fHwhYXx8bnVsbD09YS5zbG90KShuLmRlZmF1bHR8fChuLmRlZmF1bHQ9W10pKS5wdXNoKG8pO2Vsc2V7dmFyIHM9YS5zbG90LGM9bltzXXx8KG5bc109W10pO1widGVtcGxhdGVcIj09PW8udGFnP2MucHVzaC5hcHBseShjLG8uY2hpbGRyZW58fFtdKTpjLnB1c2gobyl9fWZvcih2YXIgdSBpbiBuKW5bdV0uZXZlcnkobHQpJiZkZWxldGUgblt1XTtyZXR1cm4gbn1mdW5jdGlvbiBsdChlKXtyZXR1cm4gZS5pc0NvbW1lbnQmJiFlLmFzeW5jRmFjdG9yeXx8XCIgXCI9PT1lLnRleHR9ZnVuY3Rpb24gZnQodCxuLHIpe3ZhciBpLG89T2JqZWN0LmtleXMobikubGVuZ3RoPjAsYT10PyEhdC4kc3RhYmxlOiFvLHM9dCYmdC4ka2V5O2lmKHQpe2lmKHQuX25vcm1hbGl6ZWQpcmV0dXJuIHQuX25vcm1hbGl6ZWQ7aWYoYSYmciYmciE9PWUmJnM9PT1yLiRrZXkmJiFvJiYhci4kaGFzTm9ybWFsKXJldHVybiByO2Zvcih2YXIgYyBpbiBpPXt9LHQpdFtjXSYmXCIkXCIhPT1jWzBdJiYoaVtjXT1wdChuLGMsdFtjXSkpfWVsc2UgaT17fTtmb3IodmFyIHUgaW4gbil1IGluIGl8fChpW3VdPWR0KG4sdSkpO3JldHVybiB0JiZPYmplY3QuaXNFeHRlbnNpYmxlKHQpJiYodC5fbm9ybWFsaXplZD1pKSxSKGksXCIkc3RhYmxlXCIsYSksUihpLFwiJGtleVwiLHMpLFIoaSxcIiRoYXNOb3JtYWxcIixvKSxpfWZ1bmN0aW9uIHB0KGUsdCxuKXt2YXIgcj1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg/bi5hcHBseShudWxsLGFyZ3VtZW50cyk6bih7fSk7cmV0dXJuKGU9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJiFBcnJheS5pc0FycmF5KGUpP1tlXTphdChlKSkmJigwPT09ZS5sZW5ndGh8fDE9PT1lLmxlbmd0aCYmZVswXS5pc0NvbW1lbnQpP3ZvaWQgMDplfTtyZXR1cm4gbi5wcm94eSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Z2V0OnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxyfWZ1bmN0aW9uIGR0KGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGVbdF19fWZ1bmN0aW9uIHZ0KGUsdCl7dmFyIHIsaSxhLHMsYztpZihBcnJheS5pc0FycmF5KGUpfHxcInN0cmluZ1wiPT10eXBlb2YgZSlmb3Iocj1uZXcgQXJyYXkoZS5sZW5ndGgpLGk9MCxhPWUubGVuZ3RoO2k8YTtpKyspcltpXT10KGVbaV0saSk7ZWxzZSBpZihcIm51bWJlclwiPT10eXBlb2YgZSlmb3Iocj1uZXcgQXJyYXkoZSksaT0wO2k8ZTtpKyspcltpXT10KGkrMSxpKTtlbHNlIGlmKG8oZSkpaWYob2UmJmVbU3ltYm9sLml0ZXJhdG9yXSl7cj1bXTtmb3IodmFyIHU9ZVtTeW1ib2wuaXRlcmF0b3JdKCksbD11Lm5leHQoKTshbC5kb25lOylyLnB1c2godChsLnZhbHVlLHIubGVuZ3RoKSksbD11Lm5leHQoKX1lbHNlIGZvcihzPU9iamVjdC5rZXlzKGUpLHI9bmV3IEFycmF5KHMubGVuZ3RoKSxpPTAsYT1zLmxlbmd0aDtpPGE7aSsrKWM9c1tpXSxyW2ldPXQoZVtjXSxjLGkpO3JldHVybiBuKHIpfHwocj1bXSksci5faXNWTGlzdD0hMCxyfWZ1bmN0aW9uIGh0KGUsdCxuLHIpe3ZhciBpLG89dGhpcy4kc2NvcGVkU2xvdHNbZV07bz8obj1ufHx7fSxyJiYobj1BKEEoe30sciksbikpLGk9byhuKXx8dCk6aT10aGlzLiRzbG90c1tlXXx8dDt2YXIgYT1uJiZuLnNsb3Q7cmV0dXJuIGE/dGhpcy4kY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIse3Nsb3Q6YX0saSk6aX1mdW5jdGlvbiBtdChlKXtyZXR1cm4gTGUodGhpcy4kb3B0aW9ucyxcImZpbHRlcnNcIixlKXx8RX1mdW5jdGlvbiB5dChlLHQpe3JldHVybiBBcnJheS5pc0FycmF5KGUpPy0xPT09ZS5pbmRleE9mKHQpOmUhPT10fWZ1bmN0aW9uIGd0KGUsdCxuLHIsaSl7dmFyIG89Ri5rZXlDb2Rlc1t0XXx8bjtyZXR1cm4gaSYmciYmIUYua2V5Q29kZXNbdF0/eXQoaSxyKTpvP3l0KG8sZSk6cj9DKHIpIT09dDp2b2lkIDB9ZnVuY3Rpb24gX3QoZSx0LG4scixpKXtpZihuKWlmKG8obikpe3ZhciBhO0FycmF5LmlzQXJyYXkobikmJihuPU8obikpO3ZhciBzPWZ1bmN0aW9uKG8pe2lmKFwiY2xhc3NcIj09PW98fFwic3R5bGVcIj09PW98fHYobykpYT1lO2Vsc2V7dmFyIHM9ZS5hdHRycyYmZS5hdHRycy50eXBlO2E9cnx8Ri5tdXN0VXNlUHJvcCh0LHMsbyk/ZS5kb21Qcm9wc3x8KGUuZG9tUHJvcHM9e30pOmUuYXR0cnN8fChlLmF0dHJzPXt9KX12YXIgYz1iKG8pLHU9QyhvKTtjIGluIGF8fHUgaW4gYXx8KGFbb109bltvXSxpJiYoKGUub258fChlLm9uPXt9KSlbXCJ1cGRhdGU6XCIrb109ZnVuY3Rpb24oZSl7bltvXT1lfSkpfTtmb3IodmFyIGMgaW4gbilzKGMpfWVsc2U7cmV0dXJuIGV9ZnVuY3Rpb24gYnQoZSx0KXt2YXIgbj10aGlzLl9zdGF0aWNUcmVlc3x8KHRoaXMuX3N0YXRpY1RyZWVzPVtdKSxyPW5bZV07cmV0dXJuIHImJiF0P3I6KHd0KHI9bltlXT10aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tlXS5jYWxsKHRoaXMuX3JlbmRlclByb3h5LG51bGwsdGhpcyksXCJfX3N0YXRpY19fXCIrZSwhMSkscil9ZnVuY3Rpb24gJHQoZSx0LG4pe3JldHVybiB3dChlLFwiX19vbmNlX19cIit0KyhuP1wiX1wiK246XCJcIiksITApLGV9ZnVuY3Rpb24gd3QoZSx0LG4pe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspZVtyXSYmXCJzdHJpbmdcIiE9dHlwZW9mIGVbcl0mJkN0KGVbcl0sdCtcIl9cIityLG4pO2Vsc2UgQ3QoZSx0LG4pfWZ1bmN0aW9uIEN0KGUsdCxuKXtlLmlzU3RhdGljPSEwLGUua2V5PXQsZS5pc09uY2U9bn1mdW5jdGlvbiB4dChlLHQpe2lmKHQpaWYocyh0KSl7dmFyIG49ZS5vbj1lLm9uP0Eoe30sZS5vbik6e307Zm9yKHZhciByIGluIHQpe3ZhciBpPW5bcl0sbz10W3JdO25bcl09aT9bXS5jb25jYXQoaSxvKTpvfX1lbHNlO3JldHVybiBlfWZ1bmN0aW9uIGt0KGUsdCxuLHIpe3Q9dHx8eyRzdGFibGU6IW59O2Zvcih2YXIgaT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgbz1lW2ldO0FycmF5LmlzQXJyYXkobyk/a3Qobyx0LG4pOm8mJihvLnByb3h5JiYoby5mbi5wcm94eT0hMCksdFtvLmtleV09by5mbil9cmV0dXJuIHImJih0LiRrZXk9ciksdH1mdW5jdGlvbiBBdChlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bis9Mil7dmFyIHI9dFtuXTtcInN0cmluZ1wiPT10eXBlb2YgciYmciYmKGVbdFtuXV09dFtuKzFdKX1yZXR1cm4gZX1mdW5jdGlvbiBPdChlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3QrZTplfWZ1bmN0aW9uIFN0KGUpe2UuX289JHQsZS5fbj1mLGUuX3M9bCxlLl9sPXZ0LGUuX3Q9aHQsZS5fcT1OLGUuX2k9aixlLl9tPWJ0LGUuX2Y9bXQsZS5faz1ndCxlLl9iPV90LGUuX3Y9aGUsZS5fZT12ZSxlLl91PWt0LGUuX2c9eHQsZS5fZD1BdCxlLl9wPU90fWZ1bmN0aW9uIFR0KHQsbixpLG8sYSl7dmFyIHMsYz10aGlzLHU9YS5vcHRpb25zO3kobyxcIl91aWRcIik/KHM9T2JqZWN0LmNyZWF0ZShvKSkuX29yaWdpbmFsPW86KHM9byxvPW8uX29yaWdpbmFsKTt2YXIgbD1yKHUuX2NvbXBpbGVkKSxmPSFsO3RoaXMuZGF0YT10LHRoaXMucHJvcHM9bix0aGlzLmNoaWxkcmVuPWksdGhpcy5wYXJlbnQ9byx0aGlzLmxpc3RlbmVycz10Lm9ufHxlLHRoaXMuaW5qZWN0aW9ucz1jdCh1LmluamVjdCxvKSx0aGlzLnNsb3RzPWZ1bmN0aW9uKCl7cmV0dXJuIGMuJHNsb3RzfHxmdCh0LnNjb3BlZFNsb3RzLGMuJHNsb3RzPXV0KGksbykpLGMuJHNsb3RzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInNjb3BlZFNsb3RzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ0KHQuc2NvcGVkU2xvdHMsdGhpcy5zbG90cygpKX19KSxsJiYodGhpcy4kb3B0aW9ucz11LHRoaXMuJHNsb3RzPXRoaXMuc2xvdHMoKSx0aGlzLiRzY29wZWRTbG90cz1mdCh0LnNjb3BlZFNsb3RzLHRoaXMuJHNsb3RzKSksdS5fc2NvcGVJZD90aGlzLl9jPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpPVB0KHMsZSx0LG4scixmKTtyZXR1cm4gaSYmIUFycmF5LmlzQXJyYXkoaSkmJihpLmZuU2NvcGVJZD11Ll9zY29wZUlkLGkuZm5Db250ZXh0PW8pLGl9OnRoaXMuX2M9ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIFB0KHMsZSx0LG4scixmKX19ZnVuY3Rpb24gRXQoZSx0LG4scixpKXt2YXIgbz1tZShlKTtyZXR1cm4gby5mbkNvbnRleHQ9bixvLmZuT3B0aW9ucz1yLHQuc2xvdCYmKChvLmRhdGF8fChvLmRhdGE9e30pKS5zbG90PXQuc2xvdCksb31mdW5jdGlvbiBOdChlLHQpe2Zvcih2YXIgbiBpbiB0KWVbYihuKV09dFtuXX1TdChUdC5wcm90b3R5cGUpO3ZhciBqdD17aW5pdDpmdW5jdGlvbihlLHQpe2lmKGUuY29tcG9uZW50SW5zdGFuY2UmJiFlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCYmZS5kYXRhLmtlZXBBbGl2ZSl7dmFyIHI9ZTtqdC5wcmVwYXRjaChyLHIpfWVsc2V7KGUuY29tcG9uZW50SW5zdGFuY2U9ZnVuY3Rpb24oZSx0KXt2YXIgcj17X2lzQ29tcG9uZW50OiEwLF9wYXJlbnRWbm9kZTplLHBhcmVudDp0fSxpPWUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtuKGkpJiYoci5yZW5kZXI9aS5yZW5kZXIsci5zdGF0aWNSZW5kZXJGbnM9aS5zdGF0aWNSZW5kZXJGbnMpO3JldHVybiBuZXcgZS5jb21wb25lbnRPcHRpb25zLkN0b3Iocil9KGUsV3QpKS4kbW91bnQodD9lLmVsbTp2b2lkIDAsdCl9fSxwcmVwYXRjaDpmdW5jdGlvbih0LG4pe3ZhciByPW4uY29tcG9uZW50T3B0aW9uczshZnVuY3Rpb24odCxuLHIsaSxvKXt2YXIgYT1pLmRhdGEuc2NvcGVkU2xvdHMscz10LiRzY29wZWRTbG90cyxjPSEhKGEmJiFhLiRzdGFibGV8fHMhPT1lJiYhcy4kc3RhYmxlfHxhJiZ0LiRzY29wZWRTbG90cy4ka2V5IT09YS4ka2V5KSx1PSEhKG98fHQuJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVufHxjKTt0LiRvcHRpb25zLl9wYXJlbnRWbm9kZT1pLHQuJHZub2RlPWksdC5fdm5vZGUmJih0Ll92bm9kZS5wYXJlbnQ9aSk7aWYodC4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW49byx0LiRhdHRycz1pLmRhdGEuYXR0cnN8fGUsdC4kbGlzdGVuZXJzPXJ8fGUsbiYmdC4kb3B0aW9ucy5wcm9wcyl7JGUoITEpO2Zvcih2YXIgbD10Ll9wcm9wcyxmPXQuJG9wdGlvbnMuX3Byb3BLZXlzfHxbXSxwPTA7cDxmLmxlbmd0aDtwKyspe3ZhciBkPWZbcF0sdj10LiRvcHRpb25zLnByb3BzO2xbZF09TWUoZCx2LG4sdCl9JGUoITApLHQuJG9wdGlvbnMucHJvcHNEYXRhPW59cj1yfHxlO3ZhciBoPXQuJG9wdGlvbnMuX3BhcmVudExpc3RlbmVyczt0LiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM9cixxdCh0LHIsaCksdSYmKHQuJHNsb3RzPXV0KG8saS5jb250ZXh0KSx0LiRmb3JjZVVwZGF0ZSgpKX0obi5jb21wb25lbnRJbnN0YW5jZT10LmNvbXBvbmVudEluc3RhbmNlLHIucHJvcHNEYXRhLHIubGlzdGVuZXJzLG4sci5jaGlsZHJlbil9LGluc2VydDpmdW5jdGlvbihlKXt2YXIgdCxuPWUuY29udGV4dCxyPWUuY29tcG9uZW50SW5zdGFuY2U7ci5faXNNb3VudGVkfHwoci5faXNNb3VudGVkPSEwLFl0KHIsXCJtb3VudGVkXCIpKSxlLmRhdGEua2VlcEFsaXZlJiYobi5faXNNb3VudGVkPygodD1yKS5faW5hY3RpdmU9ITEsZW4ucHVzaCh0KSk6WHQociwhMCkpfSxkZXN0cm95OmZ1bmN0aW9uKGUpe3ZhciB0PWUuY29tcG9uZW50SW5zdGFuY2U7dC5faXNEZXN0cm95ZWR8fChlLmRhdGEua2VlcEFsaXZlP2Z1bmN0aW9uIGUodCxuKXtpZihuJiYodC5fZGlyZWN0SW5hY3RpdmU9ITAsR3QodCkpKXJldHVybjtpZighdC5faW5hY3RpdmUpe3QuX2luYWN0aXZlPSEwO2Zvcih2YXIgcj0wO3I8dC4kY2hpbGRyZW4ubGVuZ3RoO3IrKyllKHQuJGNoaWxkcmVuW3JdKTtZdCh0LFwiZGVhY3RpdmF0ZWRcIil9fSh0LCEwKTp0LiRkZXN0cm95KCkpfX0sRHQ9T2JqZWN0LmtleXMoanQpO2Z1bmN0aW9uIEx0KGksYSxzLGMsbCl7aWYoIXQoaSkpe3ZhciBmPXMuJG9wdGlvbnMuX2Jhc2U7aWYobyhpKSYmKGk9Zi5leHRlbmQoaSkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGkpe3ZhciBwO2lmKHQoaS5jaWQpJiZ2b2lkIDA9PT0oaT1mdW5jdGlvbihlLGkpe2lmKHIoZS5lcnJvcikmJm4oZS5lcnJvckNvbXApKXJldHVybiBlLmVycm9yQ29tcDtpZihuKGUucmVzb2x2ZWQpKXJldHVybiBlLnJlc29sdmVkO3ZhciBhPUh0O2EmJm4oZS5vd25lcnMpJiYtMT09PWUub3duZXJzLmluZGV4T2YoYSkmJmUub3duZXJzLnB1c2goYSk7aWYocihlLmxvYWRpbmcpJiZuKGUubG9hZGluZ0NvbXApKXJldHVybiBlLmxvYWRpbmdDb21wO2lmKGEmJiFuKGUub3duZXJzKSl7dmFyIHM9ZS5vd25lcnM9W2FdLGM9ITAsbD1udWxsLGY9bnVsbDthLiRvbihcImhvb2s6ZGVzdHJveWVkXCIsZnVuY3Rpb24oKXtyZXR1cm4gaChzLGEpfSk7dmFyIHA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj1zLmxlbmd0aDt0PG47dCsrKXNbdF0uJGZvcmNlVXBkYXRlKCk7ZSYmKHMubGVuZ3RoPTAsbnVsbCE9PWwmJihjbGVhclRpbWVvdXQobCksbD1udWxsKSxudWxsIT09ZiYmKGNsZWFyVGltZW91dChmKSxmPW51bGwpKX0sZD1EKGZ1bmN0aW9uKHQpe2UucmVzb2x2ZWQ9QnQodCxpKSxjP3MubGVuZ3RoPTA6cCghMCl9KSx2PUQoZnVuY3Rpb24odCl7bihlLmVycm9yQ29tcCkmJihlLmVycm9yPSEwLHAoITApKX0pLG09ZShkLHYpO3JldHVybiBvKG0pJiYodShtKT90KGUucmVzb2x2ZWQpJiZtLnRoZW4oZCx2KTp1KG0uY29tcG9uZW50KSYmKG0uY29tcG9uZW50LnRoZW4oZCx2KSxuKG0uZXJyb3IpJiYoZS5lcnJvckNvbXA9QnQobS5lcnJvcixpKSksbihtLmxvYWRpbmcpJiYoZS5sb2FkaW5nQ29tcD1CdChtLmxvYWRpbmcsaSksMD09PW0uZGVsYXk/ZS5sb2FkaW5nPSEwOmw9c2V0VGltZW91dChmdW5jdGlvbigpe2w9bnVsbCx0KGUucmVzb2x2ZWQpJiZ0KGUuZXJyb3IpJiYoZS5sb2FkaW5nPSEwLHAoITEpKX0sbS5kZWxheXx8MjAwKSksbihtLnRpbWVvdXQpJiYoZj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zj1udWxsLHQoZS5yZXNvbHZlZCkmJnYobnVsbCl9LG0udGltZW91dCkpKSksYz0hMSxlLmxvYWRpbmc/ZS5sb2FkaW5nQ29tcDplLnJlc29sdmVkfX0ocD1pLGYpKSlyZXR1cm4gZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz12ZSgpO3JldHVybiBvLmFzeW5jRmFjdG9yeT1lLG8uYXN5bmNNZXRhPXtkYXRhOnQsY29udGV4dDpuLGNoaWxkcmVuOnIsdGFnOml9LG99KHAsYSxzLGMsbCk7YT1hfHx7fSwkbihpKSxuKGEubW9kZWwpJiZmdW5jdGlvbihlLHQpe3ZhciByPWUubW9kZWwmJmUubW9kZWwucHJvcHx8XCJ2YWx1ZVwiLGk9ZS5tb2RlbCYmZS5tb2RlbC5ldmVudHx8XCJpbnB1dFwiOyh0LmF0dHJzfHwodC5hdHRycz17fSkpW3JdPXQubW9kZWwudmFsdWU7dmFyIG89dC5vbnx8KHQub249e30pLGE9b1tpXSxzPXQubW9kZWwuY2FsbGJhY2s7bihhKT8oQXJyYXkuaXNBcnJheShhKT8tMT09PWEuaW5kZXhPZihzKTphIT09cykmJihvW2ldPVtzXS5jb25jYXQoYSkpOm9baV09c30oaS5vcHRpb25zLGEpO3ZhciBkPWZ1bmN0aW9uKGUscixpKXt2YXIgbz1yLm9wdGlvbnMucHJvcHM7aWYoIXQobykpe3ZhciBhPXt9LHM9ZS5hdHRycyxjPWUucHJvcHM7aWYobihzKXx8bihjKSlmb3IodmFyIHUgaW4gbyl7dmFyIGw9Qyh1KTtvdChhLGMsdSxsLCEwKXx8b3QoYSxzLHUsbCwhMSl9cmV0dXJuIGF9fShhLGkpO2lmKHIoaS5vcHRpb25zLmZ1bmN0aW9uYWwpKXJldHVybiBmdW5jdGlvbih0LHIsaSxvLGEpe3ZhciBzPXQub3B0aW9ucyxjPXt9LHU9cy5wcm9wcztpZihuKHUpKWZvcih2YXIgbCBpbiB1KWNbbF09TWUobCx1LHJ8fGUpO2Vsc2UgbihpLmF0dHJzKSYmTnQoYyxpLmF0dHJzKSxuKGkucHJvcHMpJiZOdChjLGkucHJvcHMpO3ZhciBmPW5ldyBUdChpLGMsYSxvLHQpLHA9cy5yZW5kZXIuY2FsbChudWxsLGYuX2MsZik7aWYocCBpbnN0YW5jZW9mIHBlKXJldHVybiBFdChwLGksZi5wYXJlbnQscyk7aWYoQXJyYXkuaXNBcnJheShwKSl7Zm9yKHZhciBkPWF0KHApfHxbXSx2PW5ldyBBcnJheShkLmxlbmd0aCksaD0wO2g8ZC5sZW5ndGg7aCsrKXZbaF09RXQoZFtoXSxpLGYucGFyZW50LHMpO3JldHVybiB2fX0oaSxkLGEscyxjKTt2YXIgdj1hLm9uO2lmKGEub249YS5uYXRpdmVPbixyKGkub3B0aW9ucy5hYnN0cmFjdCkpe3ZhciBtPWEuc2xvdDthPXt9LG0mJihhLnNsb3Q9bSl9IWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmhvb2t8fChlLmhvb2s9e30pLG49MDtuPER0Lmxlbmd0aDtuKyspe3ZhciByPUR0W25dLGk9dFtyXSxvPWp0W3JdO2k9PT1vfHxpJiZpLl9tZXJnZWR8fCh0W3JdPWk/TXQobyxpKTpvKX19KGEpO3ZhciB5PWkub3B0aW9ucy5uYW1lfHxsO3JldHVybiBuZXcgcGUoXCJ2dWUtY29tcG9uZW50LVwiK2kuY2lkKyh5P1wiLVwiK3k6XCJcIiksYSx2b2lkIDAsdm9pZCAwLHZvaWQgMCxzLHtDdG9yOmkscHJvcHNEYXRhOmQsbGlzdGVuZXJzOnYsdGFnOmwsY2hpbGRyZW46Y30scCl9fX1mdW5jdGlvbiBNdChlLHQpe3ZhciBuPWZ1bmN0aW9uKG4scil7ZShuLHIpLHQobixyKX07cmV0dXJuIG4uX21lcmdlZD0hMCxufXZhciBJdD0xLEZ0PTI7ZnVuY3Rpb24gUHQoZSxhLHMsYyx1LGwpe3JldHVybihBcnJheS5pc0FycmF5KHMpfHxpKHMpKSYmKHU9YyxjPXMscz12b2lkIDApLHIobCkmJih1PUZ0KSxmdW5jdGlvbihlLGksYSxzLGMpe2lmKG4oYSkmJm4oYS5fX29iX18pKXJldHVybiB2ZSgpO24oYSkmJm4oYS5pcykmJihpPWEuaXMpO2lmKCFpKXJldHVybiB2ZSgpO0FycmF5LmlzQXJyYXkocykmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHNbMF0mJigoYT1hfHx7fSkuc2NvcGVkU2xvdHM9e2RlZmF1bHQ6c1swXX0scy5sZW5ndGg9MCk7Yz09PUZ0P3M9YXQocyk6Yz09PUl0JiYocz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKylpZihBcnJheS5pc0FycmF5KGVbdF0pKXJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGUpO3JldHVybiBlfShzKSk7dmFyIHUsbDtpZihcInN0cmluZ1wiPT10eXBlb2YgaSl7dmFyIGY7bD1lLiR2bm9kZSYmZS4kdm5vZGUubnN8fEYuZ2V0VGFnTmFtZXNwYWNlKGkpLHU9Ri5pc1Jlc2VydmVkVGFnKGkpP25ldyBwZShGLnBhcnNlUGxhdGZvcm1UYWdOYW1lKGkpLGEscyx2b2lkIDAsdm9pZCAwLGUpOmEmJmEucHJlfHwhbihmPUxlKGUuJG9wdGlvbnMsXCJjb21wb25lbnRzXCIsaSkpP25ldyBwZShpLGEscyx2b2lkIDAsdm9pZCAwLGUpOkx0KGYsYSxlLHMsaSl9ZWxzZSB1PUx0KGksYSxlLHMpO3JldHVybiBBcnJheS5pc0FycmF5KHUpP3U6bih1KT8obihsKSYmZnVuY3Rpb24gZShpLG8sYSl7aS5ucz1vO1wiZm9yZWlnbk9iamVjdFwiPT09aS50YWcmJihvPXZvaWQgMCxhPSEwKTtpZihuKGkuY2hpbGRyZW4pKWZvcih2YXIgcz0wLGM9aS5jaGlsZHJlbi5sZW5ndGg7czxjO3MrKyl7dmFyIHU9aS5jaGlsZHJlbltzXTtuKHUudGFnKSYmKHQodS5ucyl8fHIoYSkmJlwic3ZnXCIhPT11LnRhZykmJmUodSxvLGEpfX0odSxsKSxuKGEpJiZmdW5jdGlvbihlKXtvKGUuc3R5bGUpJiZldChlLnN0eWxlKTtvKGUuY2xhc3MpJiZldChlLmNsYXNzKX0oYSksdSk6dmUoKX0oZSxhLHMsYyx1KX12YXIgUnQsSHQ9bnVsbDtmdW5jdGlvbiBCdChlLHQpe3JldHVybihlLl9fZXNNb2R1bGV8fG9lJiZcIk1vZHVsZVwiPT09ZVtTeW1ib2wudG9TdHJpbmdUYWddKSYmKGU9ZS5kZWZhdWx0KSxvKGUpP3QuZXh0ZW5kKGUpOmV9ZnVuY3Rpb24gVXQoZSl7cmV0dXJuIGUuaXNDb21tZW50JiZlLmFzeW5jRmFjdG9yeX1mdW5jdGlvbiB6dChlKXtpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lW3RdO2lmKG4ocikmJihuKHIuY29tcG9uZW50T3B0aW9ucyl8fFV0KHIpKSlyZXR1cm4gcn19ZnVuY3Rpb24gVnQoZSx0KXtSdC4kb24oZSx0KX1mdW5jdGlvbiBLdChlLHQpe1J0LiRvZmYoZSx0KX1mdW5jdGlvbiBKdChlLHQpe3ZhciBuPVJ0O3JldHVybiBmdW5jdGlvbiByKCl7bnVsbCE9PXQuYXBwbHkobnVsbCxhcmd1bWVudHMpJiZuLiRvZmYoZSxyKX19ZnVuY3Rpb24gcXQoZSx0LG4pe1J0PWUscnQodCxufHx7fSxWdCxLdCxKdCxlKSxSdD12b2lkIDB9dmFyIFd0PW51bGw7ZnVuY3Rpb24gWnQoZSl7dmFyIHQ9V3Q7cmV0dXJuIFd0PWUsZnVuY3Rpb24oKXtXdD10fX1mdW5jdGlvbiBHdChlKXtmb3IoO2UmJihlPWUuJHBhcmVudCk7KWlmKGUuX2luYWN0aXZlKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIFh0KGUsdCl7aWYodCl7aWYoZS5fZGlyZWN0SW5hY3RpdmU9ITEsR3QoZSkpcmV0dXJufWVsc2UgaWYoZS5fZGlyZWN0SW5hY3RpdmUpcmV0dXJuO2lmKGUuX2luYWN0aXZlfHxudWxsPT09ZS5faW5hY3RpdmUpe2UuX2luYWN0aXZlPSExO2Zvcih2YXIgbj0wO248ZS4kY2hpbGRyZW4ubGVuZ3RoO24rKylYdChlLiRjaGlsZHJlbltuXSk7WXQoZSxcImFjdGl2YXRlZFwiKX19ZnVuY3Rpb24gWXQoZSx0KXtsZSgpO3ZhciBuPWUuJG9wdGlvbnNbdF0scj10K1wiIGhvb2tcIjtpZihuKWZvcih2YXIgaT0wLG89bi5sZW5ndGg7aTxvO2krKylIZShuW2ldLGUsbnVsbCxlLHIpO2UuX2hhc0hvb2tFdmVudCYmZS4kZW1pdChcImhvb2s6XCIrdCksZmUoKX12YXIgUXQ9W10sZW49W10sdG49e30sbm49ITEscm49ITEsb249MDt2YXIgYW49MCxzbj1EYXRlLm5vdztpZih6JiYhcSl7dmFyIGNuPXdpbmRvdy5wZXJmb3JtYW5jZTtjbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgY24ubm93JiZzbigpPmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikudGltZVN0YW1wJiYoc249ZnVuY3Rpb24oKXtyZXR1cm4gY24ubm93KCl9KX1mdW5jdGlvbiB1bigpe3ZhciBlLHQ7Zm9yKGFuPXNuKCkscm49ITAsUXQuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBlLmlkLXQuaWR9KSxvbj0wO29uPFF0Lmxlbmd0aDtvbisrKShlPVF0W29uXSkuYmVmb3JlJiZlLmJlZm9yZSgpLHQ9ZS5pZCx0blt0XT1udWxsLGUucnVuKCk7dmFyIG49ZW4uc2xpY2UoKSxyPVF0LnNsaWNlKCk7b249UXQubGVuZ3RoPWVuLmxlbmd0aD0wLHRuPXt9LG5uPXJuPSExLGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0uX2luYWN0aXZlPSEwLFh0KGVbdF0sITApfShuKSxmdW5jdGlvbihlKXt2YXIgdD1lLmxlbmd0aDtmb3IoO3QtLTspe3ZhciBuPWVbdF0scj1uLnZtO3IuX3dhdGNoZXI9PT1uJiZyLl9pc01vdW50ZWQmJiFyLl9pc0Rlc3Ryb3llZCYmWXQocixcInVwZGF0ZWRcIil9fShyKSxuZSYmRi5kZXZ0b29scyYmbmUuZW1pdChcImZsdXNoXCIpfXZhciBsbj0wLGZuPWZ1bmN0aW9uKGUsdCxuLHIsaSl7dGhpcy52bT1lLGkmJihlLl93YXRjaGVyPXRoaXMpLGUuX3dhdGNoZXJzLnB1c2godGhpcykscj8odGhpcy5kZWVwPSEhci5kZWVwLHRoaXMudXNlcj0hIXIudXNlcix0aGlzLmxhenk9ISFyLmxhenksdGhpcy5zeW5jPSEhci5zeW5jLHRoaXMuYmVmb3JlPXIuYmVmb3JlKTp0aGlzLmRlZXA9dGhpcy51c2VyPXRoaXMubGF6eT10aGlzLnN5bmM9ITEsdGhpcy5jYj1uLHRoaXMuaWQ9Kytsbix0aGlzLmFjdGl2ZT0hMCx0aGlzLmRpcnR5PXRoaXMubGF6eSx0aGlzLmRlcHM9W10sdGhpcy5uZXdEZXBzPVtdLHRoaXMuZGVwSWRzPW5ldyBpZSx0aGlzLm5ld0RlcElkcz1uZXcgaWUsdGhpcy5leHByZXNzaW9uPVwiXCIsXCJmdW5jdGlvblwiPT10eXBlb2YgdD90aGlzLmdldHRlcj10Oih0aGlzLmdldHRlcj1mdW5jdGlvbihlKXtpZighSC50ZXN0KGUpKXt2YXIgdD1lLnNwbGl0KFwiLlwiKTtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe2lmKCFlKXJldHVybjtlPWVbdFtuXV19cmV0dXJuIGV9fX0odCksdGhpcy5nZXR0ZXJ8fCh0aGlzLmdldHRlcj1TKSksdGhpcy52YWx1ZT10aGlzLmxhenk/dm9pZCAwOnRoaXMuZ2V0KCl9O2ZuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt2YXIgZTtsZSh0aGlzKTt2YXIgdD10aGlzLnZtO3RyeXtlPXRoaXMuZ2V0dGVyLmNhbGwodCx0KX1jYXRjaChlKXtpZighdGhpcy51c2VyKXRocm93IGU7UmUoZSx0LCdnZXR0ZXIgZm9yIHdhdGNoZXIgXCInK3RoaXMuZXhwcmVzc2lvbisnXCInKX1maW5hbGx5e3RoaXMuZGVlcCYmZXQoZSksZmUoKSx0aGlzLmNsZWFudXBEZXBzKCl9cmV0dXJuIGV9LGZuLnByb3RvdHlwZS5hZGREZXA9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5pZDt0aGlzLm5ld0RlcElkcy5oYXModCl8fCh0aGlzLm5ld0RlcElkcy5hZGQodCksdGhpcy5uZXdEZXBzLnB1c2goZSksdGhpcy5kZXBJZHMuaGFzKHQpfHxlLmFkZFN1Yih0aGlzKSl9LGZuLnByb3RvdHlwZS5jbGVhbnVwRGVwcz1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmRlcHMubGVuZ3RoO2UtLTspe3ZhciB0PXRoaXMuZGVwc1tlXTt0aGlzLm5ld0RlcElkcy5oYXModC5pZCl8fHQucmVtb3ZlU3ViKHRoaXMpfXZhciBuPXRoaXMuZGVwSWRzO3RoaXMuZGVwSWRzPXRoaXMubmV3RGVwSWRzLHRoaXMubmV3RGVwSWRzPW4sdGhpcy5uZXdEZXBJZHMuY2xlYXIoKSxuPXRoaXMuZGVwcyx0aGlzLmRlcHM9dGhpcy5uZXdEZXBzLHRoaXMubmV3RGVwcz1uLHRoaXMubmV3RGVwcy5sZW5ndGg9MH0sZm4ucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMubGF6eT90aGlzLmRpcnR5PSEwOnRoaXMuc3luYz90aGlzLnJ1bigpOmZ1bmN0aW9uKGUpe3ZhciB0PWUuaWQ7aWYobnVsbD09dG5bdF0pe2lmKHRuW3RdPSEwLHJuKXtmb3IodmFyIG49UXQubGVuZ3RoLTE7bj5vbiYmUXRbbl0uaWQ+ZS5pZDspbi0tO1F0LnNwbGljZShuKzEsMCxlKX1lbHNlIFF0LnB1c2goZSk7bm58fChubj0hMCxZZSh1bikpfX0odGhpcyl9LGZuLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZSl7dmFyIGU9dGhpcy5nZXQoKTtpZihlIT09dGhpcy52YWx1ZXx8byhlKXx8dGhpcy5kZWVwKXt2YXIgdD10aGlzLnZhbHVlO2lmKHRoaXMudmFsdWU9ZSx0aGlzLnVzZXIpdHJ5e3RoaXMuY2IuY2FsbCh0aGlzLnZtLGUsdCl9Y2F0Y2goZSl7UmUoZSx0aGlzLnZtLCdjYWxsYmFjayBmb3Igd2F0Y2hlciBcIicrdGhpcy5leHByZXNzaW9uKydcIicpfWVsc2UgdGhpcy5jYi5jYWxsKHRoaXMudm0sZSx0KX19fSxmbi5wcm90b3R5cGUuZXZhbHVhdGU9ZnVuY3Rpb24oKXt0aGlzLnZhbHVlPXRoaXMuZ2V0KCksdGhpcy5kaXJ0eT0hMX0sZm4ucHJvdG90eXBlLmRlcGVuZD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmRlcHMubGVuZ3RoO2UtLTspdGhpcy5kZXBzW2VdLmRlcGVuZCgpfSxmbi5wcm90b3R5cGUudGVhcmRvd249ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZSl7dGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZHx8aCh0aGlzLnZtLl93YXRjaGVycyx0aGlzKTtmb3IodmFyIGU9dGhpcy5kZXBzLmxlbmd0aDtlLS07KXRoaXMuZGVwc1tlXS5yZW1vdmVTdWIodGhpcyk7dGhpcy5hY3RpdmU9ITF9fTt2YXIgcG49e2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpTLHNldDpTfTtmdW5jdGlvbiBkbihlLHQsbil7cG4uZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbdF1bbl19LHBuLnNldD1mdW5jdGlvbihlKXt0aGlzW3RdW25dPWV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4scG4pfWZ1bmN0aW9uIHZuKGUpe2UuX3dhdGNoZXJzPVtdO3ZhciB0PWUuJG9wdGlvbnM7dC5wcm9wcyYmZnVuY3Rpb24oZSx0KXt2YXIgbj1lLiRvcHRpb25zLnByb3BzRGF0YXx8e30scj1lLl9wcm9wcz17fSxpPWUuJG9wdGlvbnMuX3Byb3BLZXlzPVtdO2UuJHBhcmVudCYmJGUoITEpO3ZhciBvPWZ1bmN0aW9uKG8pe2kucHVzaChvKTt2YXIgYT1NZShvLHQsbixlKTt4ZShyLG8sYSksbyBpbiBlfHxkbihlLFwiX3Byb3BzXCIsbyl9O2Zvcih2YXIgYSBpbiB0KW8oYSk7JGUoITApfShlLHQucHJvcHMpLHQubWV0aG9kcyYmZnVuY3Rpb24oZSx0KXtlLiRvcHRpb25zLnByb3BzO2Zvcih2YXIgbiBpbiB0KWVbbl09XCJmdW5jdGlvblwiIT10eXBlb2YgdFtuXT9TOngodFtuXSxlKX0oZSx0Lm1ldGhvZHMpLHQuZGF0YT9mdW5jdGlvbihlKXt2YXIgdD1lLiRvcHRpb25zLmRhdGE7cyh0PWUuX2RhdGE9XCJmdW5jdGlvblwiPT10eXBlb2YgdD9mdW5jdGlvbihlLHQpe2xlKCk7dHJ5e3JldHVybiBlLmNhbGwodCx0KX1jYXRjaChlKXtyZXR1cm4gUmUoZSx0LFwiZGF0YSgpXCIpLHt9fWZpbmFsbHl7ZmUoKX19KHQsZSk6dHx8e30pfHwodD17fSk7dmFyIG49T2JqZWN0LmtleXModCkscj1lLiRvcHRpb25zLnByb3BzLGk9KGUuJG9wdGlvbnMubWV0aG9kcyxuLmxlbmd0aCk7Zm9yKDtpLS07KXt2YXIgbz1uW2ldO3ImJnkocixvKXx8KGE9dm9pZCAwLDM2IT09KGE9KG8rXCJcIikuY2hhckNvZGVBdCgwKSkmJjk1IT09YSYmZG4oZSxcIl9kYXRhXCIsbykpfXZhciBhO0NlKHQsITApfShlKTpDZShlLl9kYXRhPXt9LCEwKSx0LmNvbXB1dGVkJiZmdW5jdGlvbihlLHQpe3ZhciBuPWUuX2NvbXB1dGVkV2F0Y2hlcnM9T2JqZWN0LmNyZWF0ZShudWxsKSxyPXRlKCk7Zm9yKHZhciBpIGluIHQpe3ZhciBvPXRbaV0sYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP286by5nZXQ7cnx8KG5baV09bmV3IGZuKGUsYXx8UyxTLGhuKSksaSBpbiBlfHxtbihlLGksbyl9fShlLHQuY29tcHV0ZWQpLHQud2F0Y2gmJnQud2F0Y2ghPT1ZJiZmdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiB0KXt2YXIgcj10W25dO2lmKEFycmF5LmlzQXJyYXkocikpZm9yKHZhciBpPTA7aTxyLmxlbmd0aDtpKyspX24oZSxuLHJbaV0pO2Vsc2UgX24oZSxuLHIpfX0oZSx0LndhdGNoKX12YXIgaG49e2xhenk6ITB9O2Z1bmN0aW9uIG1uKGUsdCxuKXt2YXIgcj0hdGUoKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuPyhwbi5nZXQ9cj95bih0KTpnbihuKSxwbi5zZXQ9Uyk6KHBuLmdldD1uLmdldD9yJiYhMSE9PW4uY2FjaGU/eW4odCk6Z24obi5nZXQpOlMscG4uc2V0PW4uc2V0fHxTKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHBuKX1mdW5jdGlvbiB5bihlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9jb21wdXRlZFdhdGNoZXJzJiZ0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2VdO2lmKHQpcmV0dXJuIHQuZGlydHkmJnQuZXZhbHVhdGUoKSxjZS50YXJnZXQmJnQuZGVwZW5kKCksdC52YWx1ZX19ZnVuY3Rpb24gZ24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzLHRoaXMpfX1mdW5jdGlvbiBfbihlLHQsbixyKXtyZXR1cm4gcyhuKSYmKHI9bixuPW4uaGFuZGxlciksXCJzdHJpbmdcIj09dHlwZW9mIG4mJihuPWVbbl0pLGUuJHdhdGNoKHQsbixyKX12YXIgYm49MDtmdW5jdGlvbiAkbihlKXt2YXIgdD1lLm9wdGlvbnM7aWYoZS5zdXBlcil7dmFyIG49JG4oZS5zdXBlcik7aWYobiE9PWUuc3VwZXJPcHRpb25zKXtlLnN1cGVyT3B0aW9ucz1uO3ZhciByPWZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5vcHRpb25zLHI9ZS5zZWFsZWRPcHRpb25zO2Zvcih2YXIgaSBpbiBuKW5baV0hPT1yW2ldJiYodHx8KHQ9e30pLHRbaV09bltpXSk7cmV0dXJuIHR9KGUpO3ImJkEoZS5leHRlbmRPcHRpb25zLHIpLCh0PWUub3B0aW9ucz1EZShuLGUuZXh0ZW5kT3B0aW9ucykpLm5hbWUmJih0LmNvbXBvbmVudHNbdC5uYW1lXT1lKX19cmV0dXJuIHR9ZnVuY3Rpb24gd24oZSl7dGhpcy5faW5pdChlKX1mdW5jdGlvbiBDbihlKXtlLmNpZD0wO3ZhciB0PTE7ZS5leHRlbmQ9ZnVuY3Rpb24oZSl7ZT1lfHx7fTt2YXIgbj10aGlzLHI9bi5jaWQsaT1lLl9DdG9yfHwoZS5fQ3Rvcj17fSk7aWYoaVtyXSlyZXR1cm4gaVtyXTt2YXIgbz1lLm5hbWV8fG4ub3B0aW9ucy5uYW1lLGE9ZnVuY3Rpb24oZSl7dGhpcy5faW5pdChlKX07cmV0dXJuKGEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobi5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1hLGEuY2lkPXQrKyxhLm9wdGlvbnM9RGUobi5vcHRpb25zLGUpLGEuc3VwZXI9bixhLm9wdGlvbnMucHJvcHMmJmZ1bmN0aW9uKGUpe3ZhciB0PWUub3B0aW9ucy5wcm9wcztmb3IodmFyIG4gaW4gdClkbihlLnByb3RvdHlwZSxcIl9wcm9wc1wiLG4pfShhKSxhLm9wdGlvbnMuY29tcHV0ZWQmJmZ1bmN0aW9uKGUpe3ZhciB0PWUub3B0aW9ucy5jb21wdXRlZDtmb3IodmFyIG4gaW4gdCltbihlLnByb3RvdHlwZSxuLHRbbl0pfShhKSxhLmV4dGVuZD1uLmV4dGVuZCxhLm1peGluPW4ubWl4aW4sYS51c2U9bi51c2UsTS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2FbZV09bltlXX0pLG8mJihhLm9wdGlvbnMuY29tcG9uZW50c1tvXT1hKSxhLnN1cGVyT3B0aW9ucz1uLm9wdGlvbnMsYS5leHRlbmRPcHRpb25zPWUsYS5zZWFsZWRPcHRpb25zPUEoe30sYS5vcHRpb25zKSxpW3JdPWEsYX19ZnVuY3Rpb24geG4oZSl7cmV0dXJuIGUmJihlLkN0b3Iub3B0aW9ucy5uYW1lfHxlLnRhZyl9ZnVuY3Rpb24ga24oZSx0KXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lLmluZGV4T2YodCk+LTE6XCJzdHJpbmdcIj09dHlwZW9mIGU/ZS5zcGxpdChcIixcIikuaW5kZXhPZih0KT4tMToobj1lLFwiW29iamVjdCBSZWdFeHBdXCI9PT1hLmNhbGwobikmJmUudGVzdCh0KSk7dmFyIG59ZnVuY3Rpb24gQW4oZSx0KXt2YXIgbj1lLmNhY2hlLHI9ZS5rZXlzLGk9ZS5fdm5vZGU7Zm9yKHZhciBvIGluIG4pe3ZhciBhPW5bb107aWYoYSl7dmFyIHM9eG4oYS5jb21wb25lbnRPcHRpb25zKTtzJiYhdChzKSYmT24obixvLHIsaSl9fX1mdW5jdGlvbiBPbihlLHQsbixyKXt2YXIgaT1lW3RdOyFpfHxyJiZpLnRhZz09PXIudGFnfHxpLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCksZVt0XT1udWxsLGgobix0KX0hZnVuY3Rpb24odCl7dC5wcm90b3R5cGUuX2luaXQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpcztuLl91aWQ9Ym4rKyxuLl9pc1Z1ZT0hMCx0JiZ0Ll9pc0NvbXBvbmVudD9mdW5jdGlvbihlLHQpe3ZhciBuPWUuJG9wdGlvbnM9T2JqZWN0LmNyZWF0ZShlLmNvbnN0cnVjdG9yLm9wdGlvbnMpLHI9dC5fcGFyZW50Vm5vZGU7bi5wYXJlbnQ9dC5wYXJlbnQsbi5fcGFyZW50Vm5vZGU9cjt2YXIgaT1yLmNvbXBvbmVudE9wdGlvbnM7bi5wcm9wc0RhdGE9aS5wcm9wc0RhdGEsbi5fcGFyZW50TGlzdGVuZXJzPWkubGlzdGVuZXJzLG4uX3JlbmRlckNoaWxkcmVuPWkuY2hpbGRyZW4sbi5fY29tcG9uZW50VGFnPWkudGFnLHQucmVuZGVyJiYobi5yZW5kZXI9dC5yZW5kZXIsbi5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMpfShuLHQpOm4uJG9wdGlvbnM9RGUoJG4obi5jb25zdHJ1Y3RvciksdHx8e30sbiksbi5fcmVuZGVyUHJveHk9bixuLl9zZWxmPW4sZnVuY3Rpb24oZSl7dmFyIHQ9ZS4kb3B0aW9ucyxuPXQucGFyZW50O2lmKG4mJiF0LmFic3RyYWN0KXtmb3IoO24uJG9wdGlvbnMuYWJzdHJhY3QmJm4uJHBhcmVudDspbj1uLiRwYXJlbnQ7bi4kY2hpbGRyZW4ucHVzaChlKX1lLiRwYXJlbnQ9bixlLiRyb290PW4/bi4kcm9vdDplLGUuJGNoaWxkcmVuPVtdLGUuJHJlZnM9e30sZS5fd2F0Y2hlcj1udWxsLGUuX2luYWN0aXZlPW51bGwsZS5fZGlyZWN0SW5hY3RpdmU9ITEsZS5faXNNb3VudGVkPSExLGUuX2lzRGVzdHJveWVkPSExLGUuX2lzQmVpbmdEZXN0cm95ZWQ9ITF9KG4pLGZ1bmN0aW9uKGUpe2UuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX2hhc0hvb2tFdmVudD0hMTt2YXIgdD1lLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7dCYmcXQoZSx0KX0obiksZnVuY3Rpb24odCl7dC5fdm5vZGU9bnVsbCx0Ll9zdGF0aWNUcmVlcz1udWxsO3ZhciBuPXQuJG9wdGlvbnMscj10LiR2bm9kZT1uLl9wYXJlbnRWbm9kZSxpPXImJnIuY29udGV4dDt0LiRzbG90cz11dChuLl9yZW5kZXJDaGlsZHJlbixpKSx0LiRzY29wZWRTbG90cz1lLHQuX2M9ZnVuY3Rpb24oZSxuLHIsaSl7cmV0dXJuIFB0KHQsZSxuLHIsaSwhMSl9LHQuJGNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24oZSxuLHIsaSl7cmV0dXJuIFB0KHQsZSxuLHIsaSwhMCl9O3ZhciBvPXImJnIuZGF0YTt4ZSh0LFwiJGF0dHJzXCIsbyYmby5hdHRyc3x8ZSxudWxsLCEwKSx4ZSh0LFwiJGxpc3RlbmVyc1wiLG4uX3BhcmVudExpc3RlbmVyc3x8ZSxudWxsLCEwKX0obiksWXQobixcImJlZm9yZUNyZWF0ZVwiKSxmdW5jdGlvbihlKXt2YXIgdD1jdChlLiRvcHRpb25zLmluamVjdCxlKTt0JiYoJGUoITEpLE9iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24obil7eGUoZSxuLHRbbl0pfSksJGUoITApKX0obiksdm4obiksZnVuY3Rpb24oZSl7dmFyIHQ9ZS4kb3B0aW9ucy5wcm92aWRlO3QmJihlLl9wcm92aWRlZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3QuY2FsbChlKTp0KX0obiksWXQobixcImNyZWF0ZWRcIiksbi4kb3B0aW9ucy5lbCYmbi4kbW91bnQobi4kb3B0aW9ucy5lbCl9fSh3biksZnVuY3Rpb24oZSl7dmFyIHQ9e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhfX0sbj17Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Byb3BzfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiJGRhdGFcIix0KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCIkcHJvcHNcIixuKSxlLnByb3RvdHlwZS4kc2V0PWtlLGUucHJvdG90eXBlLiRkZWxldGU9QWUsZS5wcm90b3R5cGUuJHdhdGNoPWZ1bmN0aW9uKGUsdCxuKXtpZihzKHQpKXJldHVybiBfbih0aGlzLGUsdCxuKTsobj1ufHx7fSkudXNlcj0hMDt2YXIgcj1uZXcgZm4odGhpcyxlLHQsbik7aWYobi5pbW1lZGlhdGUpdHJ5e3QuY2FsbCh0aGlzLHIudmFsdWUpfWNhdGNoKGUpe1JlKGUsdGhpcywnY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFwiJytyLmV4cHJlc3Npb24rJ1wiJyl9cmV0dXJuIGZ1bmN0aW9uKCl7ci50ZWFyZG93bigpfX19KHduKSxmdW5jdGlvbihlKXt2YXIgdD0vXmhvb2s6LztlLnByb3RvdHlwZS4kb249ZnVuY3Rpb24oZSxuKXt2YXIgcj10aGlzO2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciBpPTAsbz1lLmxlbmd0aDtpPG87aSsrKXIuJG9uKGVbaV0sbik7ZWxzZShyLl9ldmVudHNbZV18fChyLl9ldmVudHNbZV09W10pKS5wdXNoKG4pLHQudGVzdChlKSYmKHIuX2hhc0hvb2tFdmVudD0hMCk7cmV0dXJuIHJ9LGUucHJvdG90eXBlLiRvbmNlPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztmdW5jdGlvbiByKCl7bi4kb2ZmKGUsciksdC5hcHBseShuLGFyZ3VtZW50cyl9cmV0dXJuIHIuZm49dCxuLiRvbihlLHIpLG59LGUucHJvdG90eXBlLiRvZmY9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiBuLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSxuO2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgcj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyluLiRvZmYoZVtyXSx0KTtyZXR1cm4gbn12YXIgbyxhPW4uX2V2ZW50c1tlXTtpZighYSlyZXR1cm4gbjtpZighdClyZXR1cm4gbi5fZXZlbnRzW2VdPW51bGwsbjtmb3IodmFyIHM9YS5sZW5ndGg7cy0tOylpZigobz1hW3NdKT09PXR8fG8uZm49PT10KXthLnNwbGljZShzLDEpO2JyZWFrfXJldHVybiBufSxlLnByb3RvdHlwZS4kZW1pdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9ldmVudHNbZV07aWYodCl7dD10Lmxlbmd0aD4xP2sodCk6dDtmb3IodmFyIG49ayhhcmd1bWVudHMsMSkscj0nZXZlbnQgaGFuZGxlciBmb3IgXCInK2UrJ1wiJyxpPTAsbz10Lmxlbmd0aDtpPG87aSsrKUhlKHRbaV0sdGhpcyxuLHRoaXMscil9cmV0dXJuIHRoaXN9fSh3biksZnVuY3Rpb24oZSl7ZS5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMscj1uLiRlbCxpPW4uX3Zub2RlLG89WnQobik7bi5fdm5vZGU9ZSxuLiRlbD1pP24uX19wYXRjaF9fKGksZSk6bi5fX3BhdGNoX18obi4kZWwsZSx0LCExKSxvKCksciYmKHIuX192dWVfXz1udWxsKSxuLiRlbCYmKG4uJGVsLl9fdnVlX189biksbi4kdm5vZGUmJm4uJHBhcmVudCYmbi4kdm5vZGU9PT1uLiRwYXJlbnQuX3Zub2RlJiYobi4kcGFyZW50LiRlbD1uLiRlbCl9LGUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuX3dhdGNoZXImJnRoaXMuX3dhdGNoZXIudXBkYXRlKCl9LGUucHJvdG90eXBlLiRkZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighZS5faXNCZWluZ0Rlc3Ryb3llZCl7WXQoZSxcImJlZm9yZURlc3Ryb3lcIiksZS5faXNCZWluZ0Rlc3Ryb3llZD0hMDt2YXIgdD1lLiRwYXJlbnQ7IXR8fHQuX2lzQmVpbmdEZXN0cm95ZWR8fGUuJG9wdGlvbnMuYWJzdHJhY3R8fGgodC4kY2hpbGRyZW4sZSksZS5fd2F0Y2hlciYmZS5fd2F0Y2hlci50ZWFyZG93bigpO2Zvcih2YXIgbj1lLl93YXRjaGVycy5sZW5ndGg7bi0tOyllLl93YXRjaGVyc1tuXS50ZWFyZG93bigpO2UuX2RhdGEuX19vYl9fJiZlLl9kYXRhLl9fb2JfXy52bUNvdW50LS0sZS5faXNEZXN0cm95ZWQ9ITAsZS5fX3BhdGNoX18oZS5fdm5vZGUsbnVsbCksWXQoZSxcImRlc3Ryb3llZFwiKSxlLiRvZmYoKSxlLiRlbCYmKGUuJGVsLl9fdnVlX189bnVsbCksZS4kdm5vZGUmJihlLiR2bm9kZS5wYXJlbnQ9bnVsbCl9fX0od24pLGZ1bmN0aW9uKGUpe1N0KGUucHJvdG90eXBlKSxlLnByb3RvdHlwZS4kbmV4dFRpY2s9ZnVuY3Rpb24oZSl7cmV0dXJuIFllKGUsdGhpcyl9LGUucHJvdG90eXBlLl9yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMsbj10LiRvcHRpb25zLHI9bi5yZW5kZXIsaT1uLl9wYXJlbnRWbm9kZTtpJiYodC4kc2NvcGVkU2xvdHM9ZnQoaS5kYXRhLnNjb3BlZFNsb3RzLHQuJHNsb3RzLHQuJHNjb3BlZFNsb3RzKSksdC4kdm5vZGU9aTt0cnl7SHQ9dCxlPXIuY2FsbCh0Ll9yZW5kZXJQcm94eSx0LiRjcmVhdGVFbGVtZW50KX1jYXRjaChuKXtSZShuLHQsXCJyZW5kZXJcIiksZT10Ll92bm9kZX1maW5hbGx5e0h0PW51bGx9cmV0dXJuIEFycmF5LmlzQXJyYXkoZSkmJjE9PT1lLmxlbmd0aCYmKGU9ZVswXSksZSBpbnN0YW5jZW9mIHBlfHwoZT12ZSgpKSxlLnBhcmVudD1pLGV9fSh3bik7dmFyIFNuPVtTdHJpbmcsUmVnRXhwLEFycmF5XSxUbj17S2VlcEFsaXZlOntuYW1lOlwia2VlcC1hbGl2ZVwiLGFic3RyYWN0OiEwLHByb3BzOntpbmNsdWRlOlNuLGV4Y2x1ZGU6U24sbWF4OltTdHJpbmcsTnVtYmVyXX0sY3JlYXRlZDpmdW5jdGlvbigpe3RoaXMuY2FjaGU9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLmtleXM9W119LGRlc3Ryb3llZDpmdW5jdGlvbigpe2Zvcih2YXIgZSBpbiB0aGlzLmNhY2hlKU9uKHRoaXMuY2FjaGUsZSx0aGlzLmtleXMpfSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiR3YXRjaChcImluY2x1ZGVcIixmdW5jdGlvbih0KXtBbihlLGZ1bmN0aW9uKGUpe3JldHVybiBrbih0LGUpfSl9KSx0aGlzLiR3YXRjaChcImV4Y2x1ZGVcIixmdW5jdGlvbih0KXtBbihlLGZ1bmN0aW9uKGUpe3JldHVybiFrbih0LGUpfSl9KX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kc2xvdHMuZGVmYXVsdCx0PXp0KGUpLG49dCYmdC5jb21wb25lbnRPcHRpb25zO2lmKG4pe3ZhciByPXhuKG4pLGk9dGhpcy5pbmNsdWRlLG89dGhpcy5leGNsdWRlO2lmKGkmJighcnx8IWtuKGkscikpfHxvJiZyJiZrbihvLHIpKXJldHVybiB0O3ZhciBhPXRoaXMuY2FjaGUscz10aGlzLmtleXMsYz1udWxsPT10LmtleT9uLkN0b3IuY2lkKyhuLnRhZz9cIjo6XCIrbi50YWc6XCJcIik6dC5rZXk7YVtjXT8odC5jb21wb25lbnRJbnN0YW5jZT1hW2NdLmNvbXBvbmVudEluc3RhbmNlLGgocyxjKSxzLnB1c2goYykpOihhW2NdPXQscy5wdXNoKGMpLHRoaXMubWF4JiZzLmxlbmd0aD5wYXJzZUludCh0aGlzLm1heCkmJk9uKGEsc1swXSxzLHRoaXMuX3Zub2RlKSksdC5kYXRhLmtlZXBBbGl2ZT0hMH1yZXR1cm4gdHx8ZSYmZVswXX19fTshZnVuY3Rpb24oZSl7dmFyIHQ9e2dldDpmdW5jdGlvbigpe3JldHVybiBGfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJjb25maWdcIix0KSxlLnV0aWw9e3dhcm46YWUsZXh0ZW5kOkEsbWVyZ2VPcHRpb25zOkRlLGRlZmluZVJlYWN0aXZlOnhlfSxlLnNldD1rZSxlLmRlbGV0ZT1BZSxlLm5leHRUaWNrPVllLGUub2JzZXJ2YWJsZT1mdW5jdGlvbihlKXtyZXR1cm4gQ2UoZSksZX0sZS5vcHRpb25zPU9iamVjdC5jcmVhdGUobnVsbCksTS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2Uub3B0aW9uc1t0K1wic1wiXT1PYmplY3QuY3JlYXRlKG51bGwpfSksZS5vcHRpb25zLl9iYXNlPWUsQShlLm9wdGlvbnMuY29tcG9uZW50cyxUbiksZnVuY3Rpb24oZSl7ZS51c2U9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5faW5zdGFsbGVkUGx1Z2luc3x8KHRoaXMuX2luc3RhbGxlZFBsdWdpbnM9W10pO2lmKHQuaW5kZXhPZihlKT4tMSlyZXR1cm4gdGhpczt2YXIgbj1rKGFyZ3VtZW50cywxKTtyZXR1cm4gbi51bnNoaWZ0KHRoaXMpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuaW5zdGFsbD9lLmluc3RhbGwuYXBwbHkoZSxuKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLmFwcGx5KG51bGwsbiksdC5wdXNoKGUpLHRoaXN9fShlKSxmdW5jdGlvbihlKXtlLm1peGluPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9wdGlvbnM9RGUodGhpcy5vcHRpb25zLGUpLHRoaXN9fShlKSxDbihlKSxmdW5jdGlvbihlKXtNLmZvckVhY2goZnVuY3Rpb24odCl7ZVt0XT1mdW5jdGlvbihlLG4pe3JldHVybiBuPyhcImNvbXBvbmVudFwiPT09dCYmcyhuKSYmKG4ubmFtZT1uLm5hbWV8fGUsbj10aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKG4pKSxcImRpcmVjdGl2ZVwiPT09dCYmXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKG49e2JpbmQ6bix1cGRhdGU6bn0pLHRoaXMub3B0aW9uc1t0K1wic1wiXVtlXT1uLG4pOnRoaXMub3B0aW9uc1t0K1wic1wiXVtlXX19KX0oZSl9KHduKSxPYmplY3QuZGVmaW5lUHJvcGVydHkod24ucHJvdG90eXBlLFwiJGlzU2VydmVyXCIse2dldDp0ZX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3bi5wcm90b3R5cGUsXCIkc3NyQ29udGV4dFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHduLFwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcIix7dmFsdWU6VHR9KSx3bi52ZXJzaW9uPVwiMi42LjEwXCI7dmFyIEVuPXAoXCJzdHlsZSxjbGFzc1wiKSxObj1wKFwiaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzc1wiKSxqbj1mdW5jdGlvbihlLHQsbil7cmV0dXJuXCJ2YWx1ZVwiPT09biYmTm4oZSkmJlwiYnV0dG9uXCIhPT10fHxcInNlbGVjdGVkXCI9PT1uJiZcIm9wdGlvblwiPT09ZXx8XCJjaGVja2VkXCI9PT1uJiZcImlucHV0XCI9PT1lfHxcIm11dGVkXCI9PT1uJiZcInZpZGVvXCI9PT1lfSxEbj1wKFwiY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrXCIpLExuPXAoXCJldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5XCIpLE1uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEhuKHQpfHxcImZhbHNlXCI9PT10P1wiZmFsc2VcIjpcImNvbnRlbnRlZGl0YWJsZVwiPT09ZSYmTG4odCk/dDpcInRydWVcIn0sSW49cChcImFsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLGVuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSxyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLHRydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGVcIiksRm49XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsUG49ZnVuY3Rpb24oZSl7cmV0dXJuXCI6XCI9PT1lLmNoYXJBdCg1KSYmXCJ4bGlua1wiPT09ZS5zbGljZSgwLDUpfSxSbj1mdW5jdGlvbihlKXtyZXR1cm4gUG4oZSk/ZS5zbGljZSg2LGUubGVuZ3RoKTpcIlwifSxIbj1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZXx8ITE9PT1lfTtmdW5jdGlvbiBCbihlKXtmb3IodmFyIHQ9ZS5kYXRhLHI9ZSxpPWU7bihpLmNvbXBvbmVudEluc3RhbmNlKTspKGk9aS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpJiZpLmRhdGEmJih0PVVuKGkuZGF0YSx0KSk7Zm9yKDtuKHI9ci5wYXJlbnQpOylyJiZyLmRhdGEmJih0PVVuKHQsci5kYXRhKSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYobihlKXx8bih0KSlyZXR1cm4gem4oZSxWbih0KSk7cmV0dXJuXCJcIn0odC5zdGF0aWNDbGFzcyx0LmNsYXNzKX1mdW5jdGlvbiBVbihlLHQpe3JldHVybntzdGF0aWNDbGFzczp6bihlLnN0YXRpY0NsYXNzLHQuc3RhdGljQ2xhc3MpLGNsYXNzOm4oZS5jbGFzcyk/W2UuY2xhc3MsdC5jbGFzc106dC5jbGFzc319ZnVuY3Rpb24gem4oZSx0KXtyZXR1cm4gZT90P2UrXCIgXCIrdDplOnR8fFwiXCJ9ZnVuY3Rpb24gVm4oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9XCJcIixpPTAsbz1lLmxlbmd0aDtpPG87aSsrKW4odD1WbihlW2ldKSkmJlwiXCIhPT10JiYociYmKHIrPVwiIFwiKSxyKz10KTtyZXR1cm4gcn0oZSk6byhlKT9mdW5jdGlvbihlKXt2YXIgdD1cIlwiO2Zvcih2YXIgbiBpbiBlKWVbbl0mJih0JiYodCs9XCIgXCIpLHQrPW4pO3JldHVybiB0fShlKTpcInN0cmluZ1wiPT10eXBlb2YgZT9lOlwiXCJ9dmFyIEtuPXtzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLG1hdGg6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCJ9LEpuPXAoXCJodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdFwiKSxxbj1wKFwic3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLGZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLHBvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXdcIiwhMCksV249ZnVuY3Rpb24oZSl7cmV0dXJuIEpuKGUpfHxxbihlKX07ZnVuY3Rpb24gWm4oZSl7cmV0dXJuIHFuKGUpP1wic3ZnXCI6XCJtYXRoXCI9PT1lP1wibWF0aFwiOnZvaWQgMH12YXIgR249T2JqZWN0LmNyZWF0ZShudWxsKTt2YXIgWG49cChcInRleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsXCIpO2Z1bmN0aW9uIFluKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpO3JldHVybiB0fHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpfXJldHVybiBlfXZhciBRbj1PYmplY3QuZnJlZXplKHtjcmVhdGVFbGVtZW50OmZ1bmN0aW9uKGUsdCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTtyZXR1cm5cInNlbGVjdFwiIT09ZT9uOih0LmRhdGEmJnQuZGF0YS5hdHRycyYmdm9pZCAwIT09dC5kYXRhLmF0dHJzLm11bHRpcGxlJiZuLnNldEF0dHJpYnV0ZShcIm11bHRpcGxlXCIsXCJtdWx0aXBsZVwiKSxuKX0sY3JlYXRlRWxlbWVudE5TOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhLbltlXSx0KX0sY3JlYXRlVGV4dE5vZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGUpfSxjcmVhdGVDb21tZW50OmZ1bmN0aW9uKGUpe3JldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KGUpfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24oZSx0LG4pe2UuaW5zZXJ0QmVmb3JlKHQsbil9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGUsdCl7ZS5yZW1vdmVDaGlsZCh0KX0sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oZSx0KXtlLmFwcGVuZENoaWxkKHQpfSxwYXJlbnROb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcmVudE5vZGV9LG5leHRTaWJsaW5nOmZ1bmN0aW9uKGUpe3JldHVybiBlLm5leHRTaWJsaW5nfSx0YWdOYW1lOmZ1bmN0aW9uKGUpe3JldHVybiBlLnRhZ05hbWV9LHNldFRleHRDb250ZW50OmZ1bmN0aW9uKGUsdCl7ZS50ZXh0Q29udGVudD10fSxzZXRTdHlsZVNjb3BlOmZ1bmN0aW9uKGUsdCl7ZS5zZXRBdHRyaWJ1dGUodCxcIlwiKX19KSxlcj17Y3JlYXRlOmZ1bmN0aW9uKGUsdCl7dHIodCl9LHVwZGF0ZTpmdW5jdGlvbihlLHQpe2UuZGF0YS5yZWYhPT10LmRhdGEucmVmJiYodHIoZSwhMCksdHIodCkpfSxkZXN0cm95OmZ1bmN0aW9uKGUpe3RyKGUsITApfX07ZnVuY3Rpb24gdHIoZSx0KXt2YXIgcj1lLmRhdGEucmVmO2lmKG4ocikpe3ZhciBpPWUuY29udGV4dCxvPWUuY29tcG9uZW50SW5zdGFuY2V8fGUuZWxtLGE9aS4kcmVmczt0P0FycmF5LmlzQXJyYXkoYVtyXSk/aChhW3JdLG8pOmFbcl09PT1vJiYoYVtyXT12b2lkIDApOmUuZGF0YS5yZWZJbkZvcj9BcnJheS5pc0FycmF5KGFbcl0pP2Fbcl0uaW5kZXhPZihvKTwwJiZhW3JdLnB1c2gobyk6YVtyXT1bb106YVtyXT1vfX12YXIgbnI9bmV3IHBlKFwiXCIse30sW10pLHJyPVtcImNyZWF0ZVwiLFwiYWN0aXZhdGVcIixcInVwZGF0ZVwiLFwicmVtb3ZlXCIsXCJkZXN0cm95XCJdO2Z1bmN0aW9uIGlyKGUsaSl7cmV0dXJuIGUua2V5PT09aS5rZXkmJihlLnRhZz09PWkudGFnJiZlLmlzQ29tbWVudD09PWkuaXNDb21tZW50JiZuKGUuZGF0YSk9PT1uKGkuZGF0YSkmJmZ1bmN0aW9uKGUsdCl7aWYoXCJpbnB1dFwiIT09ZS50YWcpcmV0dXJuITA7dmFyIHIsaT1uKHI9ZS5kYXRhKSYmbihyPXIuYXR0cnMpJiZyLnR5cGUsbz1uKHI9dC5kYXRhKSYmbihyPXIuYXR0cnMpJiZyLnR5cGU7cmV0dXJuIGk9PT1vfHxYbihpKSYmWG4obyl9KGUsaSl8fHIoZS5pc0FzeW5jUGxhY2Vob2xkZXIpJiZlLmFzeW5jRmFjdG9yeT09PWkuYXN5bmNGYWN0b3J5JiZ0KGkuYXN5bmNGYWN0b3J5LmVycm9yKSl9ZnVuY3Rpb24gb3IoZSx0LHIpe3ZhciBpLG8sYT17fTtmb3IoaT10O2k8PXI7KytpKW4obz1lW2ldLmtleSkmJihhW29dPWkpO3JldHVybiBhfXZhciBhcj17Y3JlYXRlOnNyLHVwZGF0ZTpzcixkZXN0cm95OmZ1bmN0aW9uKGUpe3NyKGUsbnIpfX07ZnVuY3Rpb24gc3IoZSx0KXsoZS5kYXRhLmRpcmVjdGl2ZXN8fHQuZGF0YS5kaXJlY3RpdmVzKSYmZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbz1lPT09bnIsYT10PT09bnIscz11cihlLmRhdGEuZGlyZWN0aXZlcyxlLmNvbnRleHQpLGM9dXIodC5kYXRhLmRpcmVjdGl2ZXMsdC5jb250ZXh0KSx1PVtdLGw9W107Zm9yKG4gaW4gYylyPXNbbl0saT1jW25dLHI/KGkub2xkVmFsdWU9ci52YWx1ZSxpLm9sZEFyZz1yLmFyZyxmcihpLFwidXBkYXRlXCIsdCxlKSxpLmRlZiYmaS5kZWYuY29tcG9uZW50VXBkYXRlZCYmbC5wdXNoKGkpKTooZnIoaSxcImJpbmRcIix0LGUpLGkuZGVmJiZpLmRlZi5pbnNlcnRlZCYmdS5wdXNoKGkpKTtpZih1Lmxlbmd0aCl7dmFyIGY9ZnVuY3Rpb24oKXtmb3IodmFyIG49MDtuPHUubGVuZ3RoO24rKylmcih1W25dLFwiaW5zZXJ0ZWRcIix0LGUpfTtvP2l0KHQsXCJpbnNlcnRcIixmKTpmKCl9bC5sZW5ndGgmJml0KHQsXCJwb3N0cGF0Y2hcIixmdW5jdGlvbigpe2Zvcih2YXIgbj0wO248bC5sZW5ndGg7bisrKWZyKGxbbl0sXCJjb21wb25lbnRVcGRhdGVkXCIsdCxlKX0pO2lmKCFvKWZvcihuIGluIHMpY1tuXXx8ZnIoc1tuXSxcInVuYmluZFwiLGUsZSxhKX0oZSx0KX12YXIgY3I9T2JqZWN0LmNyZWF0ZShudWxsKTtmdW5jdGlvbiB1cihlLHQpe3ZhciBuLHIsaT1PYmplY3QuY3JlYXRlKG51bGwpO2lmKCFlKXJldHVybiBpO2ZvcihuPTA7bjxlLmxlbmd0aDtuKyspKHI9ZVtuXSkubW9kaWZpZXJzfHwoci5tb2RpZmllcnM9Y3IpLGlbbHIocildPXIsci5kZWY9TGUodC4kb3B0aW9ucyxcImRpcmVjdGl2ZXNcIixyLm5hbWUpO3JldHVybiBpfWZ1bmN0aW9uIGxyKGUpe3JldHVybiBlLnJhd05hbWV8fGUubmFtZStcIi5cIitPYmplY3Qua2V5cyhlLm1vZGlmaWVyc3x8e30pLmpvaW4oXCIuXCIpfWZ1bmN0aW9uIGZyKGUsdCxuLHIsaSl7dmFyIG89ZS5kZWYmJmUuZGVmW3RdO2lmKG8pdHJ5e28obi5lbG0sZSxuLHIsaSl9Y2F0Y2gocil7UmUocixuLmNvbnRleHQsXCJkaXJlY3RpdmUgXCIrZS5uYW1lK1wiIFwiK3QrXCIgaG9va1wiKX19dmFyIHByPVtlcixhcl07ZnVuY3Rpb24gZHIoZSxyKXt2YXIgaT1yLmNvbXBvbmVudE9wdGlvbnM7aWYoIShuKGkpJiYhMT09PWkuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRyc3x8dChlLmRhdGEuYXR0cnMpJiZ0KHIuZGF0YS5hdHRycykpKXt2YXIgbyxhLHM9ci5lbG0sYz1lLmRhdGEuYXR0cnN8fHt9LHU9ci5kYXRhLmF0dHJzfHx7fTtmb3IobyBpbiBuKHUuX19vYl9fKSYmKHU9ci5kYXRhLmF0dHJzPUEoe30sdSkpLHUpYT11W29dLGNbb10hPT1hJiZ2cihzLG8sYSk7Zm9yKG8gaW4ocXx8WikmJnUudmFsdWUhPT1jLnZhbHVlJiZ2cihzLFwidmFsdWVcIix1LnZhbHVlKSxjKXQodVtvXSkmJihQbihvKT9zLnJlbW92ZUF0dHJpYnV0ZU5TKEZuLFJuKG8pKTpEbihvKXx8cy5yZW1vdmVBdHRyaWJ1dGUobykpfX1mdW5jdGlvbiB2cihlLHQsbil7ZS50YWdOYW1lLmluZGV4T2YoXCItXCIpPi0xP2hyKGUsdCxuKTpJbih0KT9IbihuKT9lLnJlbW92ZUF0dHJpYnV0ZSh0KToobj1cImFsbG93ZnVsbHNjcmVlblwiPT09dCYmXCJFTUJFRFwiPT09ZS50YWdOYW1lP1widHJ1ZVwiOnQsZS5zZXRBdHRyaWJ1dGUodCxuKSk6RG4odCk/ZS5zZXRBdHRyaWJ1dGUodCxNbih0LG4pKTpQbih0KT9IbihuKT9lLnJlbW92ZUF0dHJpYnV0ZU5TKEZuLFJuKHQpKTplLnNldEF0dHJpYnV0ZU5TKEZuLHQsbik6aHIoZSx0LG4pfWZ1bmN0aW9uIGhyKGUsdCxuKXtpZihIbihuKSllLnJlbW92ZUF0dHJpYnV0ZSh0KTtlbHNle2lmKHEmJiFXJiZcIlRFWFRBUkVBXCI9PT1lLnRhZ05hbWUmJlwicGxhY2Vob2xkZXJcIj09PXQmJlwiXCIhPT1uJiYhZS5fX2llcGgpe3ZhciByPWZ1bmN0aW9uKHQpe3Quc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiaW5wdXRcIixyKX07ZS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIixyKSxlLl9faWVwaD0hMH1lLnNldEF0dHJpYnV0ZSh0LG4pfX12YXIgbXI9e2NyZWF0ZTpkcix1cGRhdGU6ZHJ9O2Z1bmN0aW9uIHlyKGUscil7dmFyIGk9ci5lbG0sbz1yLmRhdGEsYT1lLmRhdGE7aWYoISh0KG8uc3RhdGljQ2xhc3MpJiZ0KG8uY2xhc3MpJiYodChhKXx8dChhLnN0YXRpY0NsYXNzKSYmdChhLmNsYXNzKSkpKXt2YXIgcz1CbihyKSxjPWkuX3RyYW5zaXRpb25DbGFzc2VzO24oYykmJihzPXpuKHMsVm4oYykpKSxzIT09aS5fcHJldkNsYXNzJiYoaS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLHMpLGkuX3ByZXZDbGFzcz1zKX19dmFyIGdyLF9yLGJyLCRyLHdyLENyLHhyPXtjcmVhdGU6eXIsdXBkYXRlOnlyfSxrcj0vW1xcdykuK1xcLV8kXFxdXS87ZnVuY3Rpb24gQXIoZSl7dmFyIHQsbixyLGksbyxhPSExLHM9ITEsYz0hMSx1PSExLGw9MCxmPTAscD0wLGQ9MDtmb3Iocj0wO3I8ZS5sZW5ndGg7cisrKWlmKG49dCx0PWUuY2hhckNvZGVBdChyKSxhKTM5PT09dCYmOTIhPT1uJiYoYT0hMSk7ZWxzZSBpZihzKTM0PT09dCYmOTIhPT1uJiYocz0hMSk7ZWxzZSBpZihjKTk2PT09dCYmOTIhPT1uJiYoYz0hMSk7ZWxzZSBpZih1KTQ3PT09dCYmOTIhPT1uJiYodT0hMSk7ZWxzZSBpZigxMjQhPT10fHwxMjQ9PT1lLmNoYXJDb2RlQXQocisxKXx8MTI0PT09ZS5jaGFyQ29kZUF0KHItMSl8fGx8fGZ8fHApe3N3aXRjaCh0KXtjYXNlIDM0OnM9ITA7YnJlYWs7Y2FzZSAzOTphPSEwO2JyZWFrO2Nhc2UgOTY6Yz0hMDticmVhaztjYXNlIDQwOnArKzticmVhaztjYXNlIDQxOnAtLTticmVhaztjYXNlIDkxOmYrKzticmVhaztjYXNlIDkzOmYtLTticmVhaztjYXNlIDEyMzpsKys7YnJlYWs7Y2FzZSAxMjU6bC0tfWlmKDQ3PT09dCl7Zm9yKHZhciB2PXItMSxoPXZvaWQgMDt2Pj0wJiZcIiBcIj09PShoPWUuY2hhckF0KHYpKTt2LS0pO2gmJmtyLnRlc3QoaCl8fCh1PSEwKX19ZWxzZSB2b2lkIDA9PT1pPyhkPXIrMSxpPWUuc2xpY2UoMCxyKS50cmltKCkpOm0oKTtmdW5jdGlvbiBtKCl7KG98fChvPVtdKSkucHVzaChlLnNsaWNlKGQscikudHJpbSgpKSxkPXIrMX1pZih2b2lkIDA9PT1pP2k9ZS5zbGljZSgwLHIpLnRyaW0oKTowIT09ZCYmbSgpLG8pZm9yKHI9MDtyPG8ubGVuZ3RoO3IrKylpPU9yKGksb1tyXSk7cmV0dXJuIGl9ZnVuY3Rpb24gT3IoZSx0KXt2YXIgbj10LmluZGV4T2YoXCIoXCIpO2lmKG48MClyZXR1cm4nX2YoXCInK3QrJ1wiKSgnK2UrXCIpXCI7dmFyIHI9dC5zbGljZSgwLG4pLGk9dC5zbGljZShuKzEpO3JldHVybidfZihcIicrcisnXCIpKCcrZSsoXCIpXCIhPT1pP1wiLFwiK2k6aSl9ZnVuY3Rpb24gU3IoZSx0KXtjb25zb2xlLmVycm9yKFwiW1Z1ZSBjb21waWxlcl06IFwiK2UpfWZ1bmN0aW9uIFRyKGUsdCl7cmV0dXJuIGU/ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGVbdF19KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGV9KTpbXX1mdW5jdGlvbiBFcihlLHQsbixyLGkpeyhlLnByb3BzfHwoZS5wcm9wcz1bXSkpLnB1c2goUnIoe25hbWU6dCx2YWx1ZTpuLGR5bmFtaWM6aX0scikpLGUucGxhaW49ITF9ZnVuY3Rpb24gTnIoZSx0LG4scixpKXsoaT9lLmR5bmFtaWNBdHRyc3x8KGUuZHluYW1pY0F0dHJzPVtdKTplLmF0dHJzfHwoZS5hdHRycz1bXSkpLnB1c2goUnIoe25hbWU6dCx2YWx1ZTpuLGR5bmFtaWM6aX0scikpLGUucGxhaW49ITF9ZnVuY3Rpb24ganIoZSx0LG4scil7ZS5hdHRyc01hcFt0XT1uLGUuYXR0cnNMaXN0LnB1c2goUnIoe25hbWU6dCx2YWx1ZTpufSxyKSl9ZnVuY3Rpb24gRHIoZSx0LG4scixpLG8sYSxzKXsoZS5kaXJlY3RpdmVzfHwoZS5kaXJlY3RpdmVzPVtdKSkucHVzaChScih7bmFtZTp0LHJhd05hbWU6bix2YWx1ZTpyLGFyZzppLGlzRHluYW1pY0FyZzpvLG1vZGlmaWVyczphfSxzKSksZS5wbGFpbj0hMX1mdW5jdGlvbiBMcihlLHQsbil7cmV0dXJuIG4/XCJfcChcIit0KycsXCInK2UrJ1wiKSc6ZSt0fWZ1bmN0aW9uIE1yKHQsbixyLGksbyxhLHMsYyl7dmFyIHU7KGk9aXx8ZSkucmlnaHQ/Yz9uPVwiKFwiK24rXCIpPT09J2NsaWNrJz8nY29udGV4dG1lbnUnOihcIituK1wiKVwiOlwiY2xpY2tcIj09PW4mJihuPVwiY29udGV4dG1lbnVcIixkZWxldGUgaS5yaWdodCk6aS5taWRkbGUmJihjP249XCIoXCIrbitcIik9PT0nY2xpY2snPydtb3VzZXVwJzooXCIrbitcIilcIjpcImNsaWNrXCI9PT1uJiYobj1cIm1vdXNldXBcIikpLGkuY2FwdHVyZSYmKGRlbGV0ZSBpLmNhcHR1cmUsbj1McihcIiFcIixuLGMpKSxpLm9uY2UmJihkZWxldGUgaS5vbmNlLG49THIoXCJ+XCIsbixjKSksaS5wYXNzaXZlJiYoZGVsZXRlIGkucGFzc2l2ZSxuPUxyKFwiJlwiLG4sYykpLGkubmF0aXZlPyhkZWxldGUgaS5uYXRpdmUsdT10Lm5hdGl2ZUV2ZW50c3x8KHQubmF0aXZlRXZlbnRzPXt9KSk6dT10LmV2ZW50c3x8KHQuZXZlbnRzPXt9KTt2YXIgbD1Scih7dmFsdWU6ci50cmltKCksZHluYW1pYzpjfSxzKTtpIT09ZSYmKGwubW9kaWZpZXJzPWkpO3ZhciBmPXVbbl07QXJyYXkuaXNBcnJheShmKT9vP2YudW5zaGlmdChsKTpmLnB1c2gobCk6dVtuXT1mP28/W2wsZl06W2YsbF06bCx0LnBsYWluPSExfWZ1bmN0aW9uIElyKGUsdCxuKXt2YXIgcj1GcihlLFwiOlwiK3QpfHxGcihlLFwidi1iaW5kOlwiK3QpO2lmKG51bGwhPXIpcmV0dXJuIEFyKHIpO2lmKCExIT09bil7dmFyIGk9RnIoZSx0KTtpZihudWxsIT1pKXJldHVybiBKU09OLnN0cmluZ2lmeShpKX19ZnVuY3Rpb24gRnIoZSx0LG4pe3ZhciByO2lmKG51bGwhPShyPWUuYXR0cnNNYXBbdF0pKWZvcih2YXIgaT1lLmF0dHJzTGlzdCxvPTAsYT1pLmxlbmd0aDtvPGE7bysrKWlmKGlbb10ubmFtZT09PXQpe2kuc3BsaWNlKG8sMSk7YnJlYWt9cmV0dXJuIG4mJmRlbGV0ZSBlLmF0dHJzTWFwW3RdLHJ9ZnVuY3Rpb24gUHIoZSx0KXtmb3IodmFyIG49ZS5hdHRyc0xpc3Qscj0wLGk9bi5sZW5ndGg7cjxpO3IrKyl7dmFyIG89bltyXTtpZih0LnRlc3Qoby5uYW1lKSlyZXR1cm4gbi5zcGxpY2UociwxKSxvfX1mdW5jdGlvbiBScihlLHQpe3JldHVybiB0JiYobnVsbCE9dC5zdGFydCYmKGUuc3RhcnQ9dC5zdGFydCksbnVsbCE9dC5lbmQmJihlLmVuZD10LmVuZCkpLGV9ZnVuY3Rpb24gSHIoZSx0LG4pe3ZhciByPW58fHt9LGk9ci5udW1iZXIsbz1cIiQkdlwiO3IudHJpbSYmKG89XCIodHlwZW9mICQkdiA9PT0gJ3N0cmluZyc/ICQkdi50cmltKCk6ICQkdilcIiksaSYmKG89XCJfbihcIitvK1wiKVwiKTt2YXIgYT1Ccih0LG8pO2UubW9kZWw9e3ZhbHVlOlwiKFwiK3QrXCIpXCIsZXhwcmVzc2lvbjpKU09OLnN0cmluZ2lmeSh0KSxjYWxsYmFjazpcImZ1bmN0aW9uICgkJHYpIHtcIithK1wifVwifX1mdW5jdGlvbiBCcihlLHQpe3ZhciBuPWZ1bmN0aW9uKGUpe2lmKGU9ZS50cmltKCksZ3I9ZS5sZW5ndGgsZS5pbmRleE9mKFwiW1wiKTwwfHxlLmxhc3RJbmRleE9mKFwiXVwiKTxnci0xKXJldHVybigkcj1lLmxhc3RJbmRleE9mKFwiLlwiKSk+LTE/e2V4cDplLnNsaWNlKDAsJHIpLGtleTonXCInK2Uuc2xpY2UoJHIrMSkrJ1wiJ306e2V4cDplLGtleTpudWxsfTtfcj1lLCRyPXdyPUNyPTA7Zm9yKDshenIoKTspVnIoYnI9VXIoKSk/SnIoYnIpOjkxPT09YnImJktyKGJyKTtyZXR1cm57ZXhwOmUuc2xpY2UoMCx3ciksa2V5OmUuc2xpY2Uod3IrMSxDcil9fShlKTtyZXR1cm4gbnVsbD09PW4ua2V5P2UrXCI9XCIrdDpcIiRzZXQoXCIrbi5leHArXCIsIFwiK24ua2V5K1wiLCBcIit0K1wiKVwifWZ1bmN0aW9uIFVyKCl7cmV0dXJuIF9yLmNoYXJDb2RlQXQoKyskcil9ZnVuY3Rpb24genIoKXtyZXR1cm4gJHI+PWdyfWZ1bmN0aW9uIFZyKGUpe3JldHVybiAzND09PWV8fDM5PT09ZX1mdW5jdGlvbiBLcihlKXt2YXIgdD0xO2Zvcih3cj0kcjshenIoKTspaWYoVnIoZT1VcigpKSlKcihlKTtlbHNlIGlmKDkxPT09ZSYmdCsrLDkzPT09ZSYmdC0tLDA9PT10KXtDcj0kcjticmVha319ZnVuY3Rpb24gSnIoZSl7Zm9yKHZhciB0PWU7IXpyKCkmJihlPVVyKCkpIT09dDspO312YXIgcXIsV3I9XCJfX3JcIixacj1cIl9fY1wiO2Z1bmN0aW9uIEdyKGUsdCxuKXt2YXIgcj1xcjtyZXR1cm4gZnVuY3Rpb24gaSgpe251bGwhPT10LmFwcGx5KG51bGwsYXJndW1lbnRzKSYmUXIoZSxpLG4scil9fXZhciBYcj1WZSYmIShYJiZOdW1iZXIoWFsxXSk8PTUzKTtmdW5jdGlvbiBZcihlLHQsbixyKXtpZihYcil7dmFyIGk9YW4sbz10O3Q9by5fd3JhcHBlcj1mdW5jdGlvbihlKXtpZihlLnRhcmdldD09PWUuY3VycmVudFRhcmdldHx8ZS50aW1lU3RhbXA+PWl8fGUudGltZVN0YW1wPD0wfHxlLnRhcmdldC5vd25lckRvY3VtZW50IT09ZG9jdW1lbnQpcmV0dXJuIG8uYXBwbHkodGhpcyxhcmd1bWVudHMpfX1xci5hZGRFdmVudExpc3RlbmVyKGUsdCxRP3tjYXB0dXJlOm4scGFzc2l2ZTpyfTpuKX1mdW5jdGlvbiBRcihlLHQsbixyKXsocnx8cXIpLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSx0Ll93cmFwcGVyfHx0LG4pfWZ1bmN0aW9uIGVpKGUscil7aWYoIXQoZS5kYXRhLm9uKXx8IXQoci5kYXRhLm9uKSl7dmFyIGk9ci5kYXRhLm9ufHx7fSxvPWUuZGF0YS5vbnx8e307cXI9ci5lbG0sZnVuY3Rpb24oZSl7aWYobihlW1dyXSkpe3ZhciB0PXE/XCJjaGFuZ2VcIjpcImlucHV0XCI7ZVt0XT1bXS5jb25jYXQoZVtXcl0sZVt0XXx8W10pLGRlbGV0ZSBlW1dyXX1uKGVbWnJdKSYmKGUuY2hhbmdlPVtdLmNvbmNhdChlW1pyXSxlLmNoYW5nZXx8W10pLGRlbGV0ZSBlW1pyXSl9KGkpLHJ0KGksbyxZcixRcixHcixyLmNvbnRleHQpLHFyPXZvaWQgMH19dmFyIHRpLG5pPXtjcmVhdGU6ZWksdXBkYXRlOmVpfTtmdW5jdGlvbiByaShlLHIpe2lmKCF0KGUuZGF0YS5kb21Qcm9wcyl8fCF0KHIuZGF0YS5kb21Qcm9wcykpe3ZhciBpLG8sYT1yLmVsbSxzPWUuZGF0YS5kb21Qcm9wc3x8e30sYz1yLmRhdGEuZG9tUHJvcHN8fHt9O2ZvcihpIGluIG4oYy5fX29iX18pJiYoYz1yLmRhdGEuZG9tUHJvcHM9QSh7fSxjKSkscylpIGluIGN8fChhW2ldPVwiXCIpO2ZvcihpIGluIGMpe2lmKG89Y1tpXSxcInRleHRDb250ZW50XCI9PT1pfHxcImlubmVySFRNTFwiPT09aSl7aWYoci5jaGlsZHJlbiYmKHIuY2hpbGRyZW4ubGVuZ3RoPTApLG89PT1zW2ldKWNvbnRpbnVlOzE9PT1hLmNoaWxkTm9kZXMubGVuZ3RoJiZhLnJlbW92ZUNoaWxkKGEuY2hpbGROb2Rlc1swXSl9aWYoXCJ2YWx1ZVwiPT09aSYmXCJQUk9HUkVTU1wiIT09YS50YWdOYW1lKXthLl92YWx1ZT1vO3ZhciB1PXQobyk/XCJcIjpTdHJpbmcobyk7aWkoYSx1KSYmKGEudmFsdWU9dSl9ZWxzZSBpZihcImlubmVySFRNTFwiPT09aSYmcW4oYS50YWdOYW1lKSYmdChhLmlubmVySFRNTCkpeyh0aT10aXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuaW5uZXJIVE1MPVwiPHN2Zz5cIitvK1wiPC9zdmc+XCI7Zm9yKHZhciBsPXRpLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtsLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQobC5maXJzdENoaWxkKX1lbHNlIGlmKG8hPT1zW2ldKXRyeXthW2ldPW99Y2F0Y2goZSl7fX19fWZ1bmN0aW9uIGlpKGUsdCl7cmV0dXJuIWUuY29tcG9zaW5nJiYoXCJPUFRJT05cIj09PWUudGFnTmFtZXx8ZnVuY3Rpb24oZSx0KXt2YXIgbj0hMDt0cnl7bj1kb2N1bWVudC5hY3RpdmVFbGVtZW50IT09ZX1jYXRjaChlKXt9cmV0dXJuIG4mJmUudmFsdWUhPT10fShlLHQpfHxmdW5jdGlvbihlLHQpe3ZhciByPWUudmFsdWUsaT1lLl92TW9kaWZpZXJzO2lmKG4oaSkpe2lmKGkubnVtYmVyKXJldHVybiBmKHIpIT09Zih0KTtpZihpLnRyaW0pcmV0dXJuIHIudHJpbSgpIT09dC50cmltKCl9cmV0dXJuIHIhPT10fShlLHQpKX12YXIgb2k9e2NyZWF0ZTpyaSx1cGRhdGU6cml9LGFpPWcoZnVuY3Rpb24oZSl7dmFyIHQ9e30sbj0vOiguKykvO3JldHVybiBlLnNwbGl0KC87KD8hW14oXSpcXCkpL2cpLmZvckVhY2goZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHI9ZS5zcGxpdChuKTtyLmxlbmd0aD4xJiYodFtyWzBdLnRyaW0oKV09clsxXS50cmltKCkpfX0pLHR9KTtmdW5jdGlvbiBzaShlKXt2YXIgdD1jaShlLnN0eWxlKTtyZXR1cm4gZS5zdGF0aWNTdHlsZT9BKGUuc3RhdGljU3R5bGUsdCk6dH1mdW5jdGlvbiBjaShlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9PKGUpOlwic3RyaW5nXCI9PXR5cGVvZiBlP2FpKGUpOmV9dmFyIHVpLGxpPS9eLS0vLGZpPS9cXHMqIWltcG9ydGFudCQvLHBpPWZ1bmN0aW9uKGUsdCxuKXtpZihsaS50ZXN0KHQpKWUuc3R5bGUuc2V0UHJvcGVydHkodCxuKTtlbHNlIGlmKGZpLnRlc3QobikpZS5zdHlsZS5zZXRQcm9wZXJ0eShDKHQpLG4ucmVwbGFjZShmaSxcIlwiKSxcImltcG9ydGFudFwiKTtlbHNle3ZhciByPXZpKHQpO2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHZhciBpPTAsbz1uLmxlbmd0aDtpPG87aSsrKWUuc3R5bGVbcl09bltpXTtlbHNlIGUuc3R5bGVbcl09bn19LGRpPVtcIldlYmtpdFwiLFwiTW96XCIsXCJtc1wiXSx2aT1nKGZ1bmN0aW9uKGUpe2lmKHVpPXVpfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiZmlsdGVyXCIhPT0oZT1iKGUpKSYmZSBpbiB1aSlyZXR1cm4gZTtmb3IodmFyIHQ9ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG49MDtuPGRpLmxlbmd0aDtuKyspe3ZhciByPWRpW25dK3Q7aWYociBpbiB1aSlyZXR1cm4gcn19KTtmdW5jdGlvbiBoaShlLHIpe3ZhciBpPXIuZGF0YSxvPWUuZGF0YTtpZighKHQoaS5zdGF0aWNTdHlsZSkmJnQoaS5zdHlsZSkmJnQoby5zdGF0aWNTdHlsZSkmJnQoby5zdHlsZSkpKXt2YXIgYSxzLGM9ci5lbG0sdT1vLnN0YXRpY1N0eWxlLGw9by5ub3JtYWxpemVkU3R5bGV8fG8uc3R5bGV8fHt9LGY9dXx8bCxwPWNpKHIuZGF0YS5zdHlsZSl8fHt9O3IuZGF0YS5ub3JtYWxpemVkU3R5bGU9bihwLl9fb2JfXyk/QSh7fSxwKTpwO3ZhciBkPWZ1bmN0aW9uKGUsdCl7dmFyIG4scj17fTtpZih0KWZvcih2YXIgaT1lO2kuY29tcG9uZW50SW5zdGFuY2U7KShpPWkuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKSYmaS5kYXRhJiYobj1zaShpLmRhdGEpKSYmQShyLG4pOyhuPXNpKGUuZGF0YSkpJiZBKHIsbik7Zm9yKHZhciBvPWU7bz1vLnBhcmVudDspby5kYXRhJiYobj1zaShvLmRhdGEpKSYmQShyLG4pO3JldHVybiByfShyLCEwKTtmb3IocyBpbiBmKXQoZFtzXSkmJnBpKGMscyxcIlwiKTtmb3IocyBpbiBkKShhPWRbc10pIT09ZltzXSYmcGkoYyxzLG51bGw9PWE/XCJcIjphKX19dmFyIG1pPXtjcmVhdGU6aGksdXBkYXRlOmhpfSx5aT0vXFxzKy87ZnVuY3Rpb24gZ2koZSx0KXtpZih0JiYodD10LnRyaW0oKSkpaWYoZS5jbGFzc0xpc3QpdC5pbmRleE9mKFwiIFwiKT4tMT90LnNwbGl0KHlpKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBlLmNsYXNzTGlzdC5hZGQodCl9KTplLmNsYXNzTGlzdC5hZGQodCk7ZWxzZXt2YXIgbj1cIiBcIisoZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCI7bi5pbmRleE9mKFwiIFwiK3QrXCIgXCIpPDAmJmUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwobit0KS50cmltKCkpfX1mdW5jdGlvbiBfaShlLHQpe2lmKHQmJih0PXQudHJpbSgpKSlpZihlLmNsYXNzTGlzdCl0LmluZGV4T2YoXCIgXCIpPi0xP3Quc3BsaXQoeWkpLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIGUuY2xhc3NMaXN0LnJlbW92ZSh0KX0pOmUuY2xhc3NMaXN0LnJlbW92ZSh0KSxlLmNsYXNzTGlzdC5sZW5ndGh8fGUucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIik7ZWxzZXtmb3IodmFyIG49XCIgXCIrKGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIpK1wiIFwiLHI9XCIgXCIrdCtcIiBcIjtuLmluZGV4T2Yocik+PTA7KW49bi5yZXBsYWNlKHIsXCIgXCIpOyhuPW4udHJpbSgpKT9lLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsbik6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKX19ZnVuY3Rpb24gYmkoZSl7aWYoZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpe3ZhciB0PXt9O3JldHVybiExIT09ZS5jc3MmJkEodCwkaShlLm5hbWV8fFwidlwiKSksQSh0LGUpLHR9cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/JGkoZSk6dm9pZCAwfX12YXIgJGk9ZyhmdW5jdGlvbihlKXtyZXR1cm57ZW50ZXJDbGFzczplK1wiLWVudGVyXCIsZW50ZXJUb0NsYXNzOmUrXCItZW50ZXItdG9cIixlbnRlckFjdGl2ZUNsYXNzOmUrXCItZW50ZXItYWN0aXZlXCIsbGVhdmVDbGFzczplK1wiLWxlYXZlXCIsbGVhdmVUb0NsYXNzOmUrXCItbGVhdmUtdG9cIixsZWF2ZUFjdGl2ZUNsYXNzOmUrXCItbGVhdmUtYWN0aXZlXCJ9fSksd2k9eiYmIVcsQ2k9XCJ0cmFuc2l0aW9uXCIseGk9XCJhbmltYXRpb25cIixraT1cInRyYW5zaXRpb25cIixBaT1cInRyYW5zaXRpb25lbmRcIixPaT1cImFuaW1hdGlvblwiLFNpPVwiYW5pbWF0aW9uZW5kXCI7d2kmJih2b2lkIDA9PT13aW5kb3cub250cmFuc2l0aW9uZW5kJiZ2b2lkIDAhPT13aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kJiYoa2k9XCJXZWJraXRUcmFuc2l0aW9uXCIsQWk9XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIpLHZvaWQgMD09PXdpbmRvdy5vbmFuaW1hdGlvbmVuZCYmdm9pZCAwIT09d2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kJiYoT2k9XCJXZWJraXRBbmltYXRpb25cIixTaT1cIndlYmtpdEFuaW1hdGlvbkVuZFwiKSk7dmFyIFRpPXo/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT93aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KTpzZXRUaW1lb3V0OmZ1bmN0aW9uKGUpe3JldHVybiBlKCl9O2Z1bmN0aW9uIEVpKGUpe1RpKGZ1bmN0aW9uKCl7VGkoZSl9KX1mdW5jdGlvbiBOaShlLHQpe3ZhciBuPWUuX3RyYW5zaXRpb25DbGFzc2VzfHwoZS5fdHJhbnNpdGlvbkNsYXNzZXM9W10pO24uaW5kZXhPZih0KTwwJiYobi5wdXNoKHQpLGdpKGUsdCkpfWZ1bmN0aW9uIGppKGUsdCl7ZS5fdHJhbnNpdGlvbkNsYXNzZXMmJmgoZS5fdHJhbnNpdGlvbkNsYXNzZXMsdCksX2koZSx0KX1mdW5jdGlvbiBEaShlLHQsbil7dmFyIHI9TWkoZSx0KSxpPXIudHlwZSxvPXIudGltZW91dCxhPXIucHJvcENvdW50O2lmKCFpKXJldHVybiBuKCk7dmFyIHM9aT09PUNpP0FpOlNpLGM9MCx1PWZ1bmN0aW9uKCl7ZS5yZW1vdmVFdmVudExpc3RlbmVyKHMsbCksbigpfSxsPWZ1bmN0aW9uKHQpe3QudGFyZ2V0PT09ZSYmKytjPj1hJiZ1KCl9O3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjPGEmJnUoKX0sbysxKSxlLmFkZEV2ZW50TGlzdGVuZXIocyxsKX12YXIgTGk9L1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztmdW5jdGlvbiBNaShlLHQpe3ZhciBuLHI9d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSksaT0ocltraStcIkRlbGF5XCJdfHxcIlwiKS5zcGxpdChcIiwgXCIpLG89KHJba2krXCJEdXJhdGlvblwiXXx8XCJcIikuc3BsaXQoXCIsIFwiKSxhPUlpKGksbykscz0ocltPaStcIkRlbGF5XCJdfHxcIlwiKS5zcGxpdChcIiwgXCIpLGM9KHJbT2krXCJEdXJhdGlvblwiXXx8XCJcIikuc3BsaXQoXCIsIFwiKSx1PUlpKHMsYyksbD0wLGY9MDtyZXR1cm4gdD09PUNpP2E+MCYmKG49Q2ksbD1hLGY9by5sZW5ndGgpOnQ9PT14aT91PjAmJihuPXhpLGw9dSxmPWMubGVuZ3RoKTpmPShuPShsPU1hdGgubWF4KGEsdSkpPjA/YT51P0NpOnhpOm51bGwpP249PT1DaT9vLmxlbmd0aDpjLmxlbmd0aDowLHt0eXBlOm4sdGltZW91dDpsLHByb3BDb3VudDpmLGhhc1RyYW5zZm9ybTpuPT09Q2kmJkxpLnRlc3QocltraStcIlByb3BlcnR5XCJdKX19ZnVuY3Rpb24gSWkoZSx0KXtmb3IoO2UubGVuZ3RoPHQubGVuZ3RoOyllPWUuY29uY2F0KGUpO3JldHVybiBNYXRoLm1heC5hcHBseShudWxsLHQubWFwKGZ1bmN0aW9uKHQsbil7cmV0dXJuIEZpKHQpK0ZpKGVbbl0pfSkpfWZ1bmN0aW9uIEZpKGUpe3JldHVybiAxZTMqTnVtYmVyKGUuc2xpY2UoMCwtMSkucmVwbGFjZShcIixcIixcIi5cIikpfWZ1bmN0aW9uIFBpKGUscil7dmFyIGk9ZS5lbG07bihpLl9sZWF2ZUNiKSYmKGkuX2xlYXZlQ2IuY2FuY2VsbGVkPSEwLGkuX2xlYXZlQ2IoKSk7dmFyIGE9YmkoZS5kYXRhLnRyYW5zaXRpb24pO2lmKCF0KGEpJiYhbihpLl9lbnRlckNiKSYmMT09PWkubm9kZVR5cGUpe2Zvcih2YXIgcz1hLmNzcyxjPWEudHlwZSx1PWEuZW50ZXJDbGFzcyxsPWEuZW50ZXJUb0NsYXNzLHA9YS5lbnRlckFjdGl2ZUNsYXNzLGQ9YS5hcHBlYXJDbGFzcyx2PWEuYXBwZWFyVG9DbGFzcyxoPWEuYXBwZWFyQWN0aXZlQ2xhc3MsbT1hLmJlZm9yZUVudGVyLHk9YS5lbnRlcixnPWEuYWZ0ZXJFbnRlcixfPWEuZW50ZXJDYW5jZWxsZWQsYj1hLmJlZm9yZUFwcGVhciwkPWEuYXBwZWFyLHc9YS5hZnRlckFwcGVhcixDPWEuYXBwZWFyQ2FuY2VsbGVkLHg9YS5kdXJhdGlvbixrPVd0LEE9V3QuJHZub2RlO0EmJkEucGFyZW50OylrPUEuY29udGV4dCxBPUEucGFyZW50O3ZhciBPPSFrLl9pc01vdW50ZWR8fCFlLmlzUm9vdEluc2VydDtpZighT3x8JHx8XCJcIj09PSQpe3ZhciBTPU8mJmQ/ZDp1LFQ9TyYmaD9oOnAsRT1PJiZ2P3Y6bCxOPU8mJmJ8fG0saj1PJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiAkPyQ6eSxMPU8mJnd8fGcsTT1PJiZDfHxfLEk9ZihvKHgpP3guZW50ZXI6eCksRj0hMSE9PXMmJiFXLFA9QmkoaiksUj1pLl9lbnRlckNiPUQoZnVuY3Rpb24oKXtGJiYoamkoaSxFKSxqaShpLFQpKSxSLmNhbmNlbGxlZD8oRiYmamkoaSxTKSxNJiZNKGkpKTpMJiZMKGkpLGkuX2VudGVyQ2I9bnVsbH0pO2UuZGF0YS5zaG93fHxpdChlLFwiaW5zZXJ0XCIsZnVuY3Rpb24oKXt2YXIgdD1pLnBhcmVudE5vZGUsbj10JiZ0Ll9wZW5kaW5nJiZ0Ll9wZW5kaW5nW2Uua2V5XTtuJiZuLnRhZz09PWUudGFnJiZuLmVsbS5fbGVhdmVDYiYmbi5lbG0uX2xlYXZlQ2IoKSxqJiZqKGksUil9KSxOJiZOKGkpLEYmJihOaShpLFMpLE5pKGksVCksRWkoZnVuY3Rpb24oKXtqaShpLFMpLFIuY2FuY2VsbGVkfHwoTmkoaSxFKSxQfHwoSGkoSSk/c2V0VGltZW91dChSLEkpOkRpKGksYyxSKSkpfSkpLGUuZGF0YS5zaG93JiYociYmcigpLGomJmooaSxSKSksRnx8UHx8UigpfX19ZnVuY3Rpb24gUmkoZSxyKXt2YXIgaT1lLmVsbTtuKGkuX2VudGVyQ2IpJiYoaS5fZW50ZXJDYi5jYW5jZWxsZWQ9ITAsaS5fZW50ZXJDYigpKTt2YXIgYT1iaShlLmRhdGEudHJhbnNpdGlvbik7aWYodChhKXx8MSE9PWkubm9kZVR5cGUpcmV0dXJuIHIoKTtpZighbihpLl9sZWF2ZUNiKSl7dmFyIHM9YS5jc3MsYz1hLnR5cGUsdT1hLmxlYXZlQ2xhc3MsbD1hLmxlYXZlVG9DbGFzcyxwPWEubGVhdmVBY3RpdmVDbGFzcyxkPWEuYmVmb3JlTGVhdmUsdj1hLmxlYXZlLGg9YS5hZnRlckxlYXZlLG09YS5sZWF2ZUNhbmNlbGxlZCx5PWEuZGVsYXlMZWF2ZSxnPWEuZHVyYXRpb24sXz0hMSE9PXMmJiFXLGI9QmkodiksJD1mKG8oZyk/Zy5sZWF2ZTpnKSx3PWkuX2xlYXZlQ2I9RChmdW5jdGlvbigpe2kucGFyZW50Tm9kZSYmaS5wYXJlbnROb2RlLl9wZW5kaW5nJiYoaS5wYXJlbnROb2RlLl9wZW5kaW5nW2Uua2V5XT1udWxsKSxfJiYoamkoaSxsKSxqaShpLHApKSx3LmNhbmNlbGxlZD8oXyYmamkoaSx1KSxtJiZtKGkpKToocigpLGgmJmgoaSkpLGkuX2xlYXZlQ2I9bnVsbH0pO3k/eShDKTpDKCl9ZnVuY3Rpb24gQygpe3cuY2FuY2VsbGVkfHwoIWUuZGF0YS5zaG93JiZpLnBhcmVudE5vZGUmJigoaS5wYXJlbnROb2RlLl9wZW5kaW5nfHwoaS5wYXJlbnROb2RlLl9wZW5kaW5nPXt9KSlbZS5rZXldPWUpLGQmJmQoaSksXyYmKE5pKGksdSksTmkoaSxwKSxFaShmdW5jdGlvbigpe2ppKGksdSksdy5jYW5jZWxsZWR8fChOaShpLGwpLGJ8fChIaSgkKT9zZXRUaW1lb3V0KHcsJCk6RGkoaSxjLHcpKSl9KSksdiYmdihpLHcpLF98fGJ8fHcoKSl9fWZ1bmN0aW9uIEhpKGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlJiYhaXNOYU4oZSl9ZnVuY3Rpb24gQmkoZSl7aWYodChlKSlyZXR1cm4hMTt2YXIgcj1lLmZucztyZXR1cm4gbihyKT9CaShBcnJheS5pc0FycmF5KHIpP3JbMF06cik6KGUuX2xlbmd0aHx8ZS5sZW5ndGgpPjF9ZnVuY3Rpb24gVWkoZSx0KXshMCE9PXQuZGF0YS5zaG93JiZQaSh0KX12YXIgemk9ZnVuY3Rpb24oZSl7dmFyIG8sYSxzPXt9LGM9ZS5tb2R1bGVzLHU9ZS5ub2RlT3BzO2ZvcihvPTA7bzxyci5sZW5ndGg7KytvKWZvcihzW3JyW29dXT1bXSxhPTA7YTxjLmxlbmd0aDsrK2EpbihjW2FdW3JyW29dXSkmJnNbcnJbb11dLnB1c2goY1thXVtycltvXV0pO2Z1bmN0aW9uIGwoZSl7dmFyIHQ9dS5wYXJlbnROb2RlKGUpO24odCkmJnUucmVtb3ZlQ2hpbGQodCxlKX1mdW5jdGlvbiBmKGUsdCxpLG8sYSxjLGwpe2lmKG4oZS5lbG0pJiZuKGMpJiYoZT1jW2xdPW1lKGUpKSxlLmlzUm9vdEluc2VydD0hYSwhZnVuY3Rpb24oZSx0LGksbyl7dmFyIGE9ZS5kYXRhO2lmKG4oYSkpe3ZhciBjPW4oZS5jb21wb25lbnRJbnN0YW5jZSkmJmEua2VlcEFsaXZlO2lmKG4oYT1hLmhvb2spJiZuKGE9YS5pbml0KSYmYShlLCExKSxuKGUuY29tcG9uZW50SW5zdGFuY2UpKXJldHVybiBkKGUsdCksdihpLGUuZWxtLG8pLHIoYykmJmZ1bmN0aW9uKGUsdCxyLGkpe2Zvcih2YXIgbyxhPWU7YS5jb21wb25lbnRJbnN0YW5jZTspaWYoYT1hLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSxuKG89YS5kYXRhKSYmbihvPW8udHJhbnNpdGlvbikpe2ZvcihvPTA7bzxzLmFjdGl2YXRlLmxlbmd0aDsrK28pcy5hY3RpdmF0ZVtvXShucixhKTt0LnB1c2goYSk7YnJlYWt9dihyLGUuZWxtLGkpfShlLHQsaSxvKSwhMH19KGUsdCxpLG8pKXt2YXIgZj1lLmRhdGEscD1lLmNoaWxkcmVuLG09ZS50YWc7bihtKT8oZS5lbG09ZS5ucz91LmNyZWF0ZUVsZW1lbnROUyhlLm5zLG0pOnUuY3JlYXRlRWxlbWVudChtLGUpLGcoZSksaChlLHAsdCksbihmKSYmeShlLHQpLHYoaSxlLmVsbSxvKSk6cihlLmlzQ29tbWVudCk/KGUuZWxtPXUuY3JlYXRlQ29tbWVudChlLnRleHQpLHYoaSxlLmVsbSxvKSk6KGUuZWxtPXUuY3JlYXRlVGV4dE5vZGUoZS50ZXh0KSx2KGksZS5lbG0sbykpfX1mdW5jdGlvbiBkKGUsdCl7bihlLmRhdGEucGVuZGluZ0luc2VydCkmJih0LnB1c2guYXBwbHkodCxlLmRhdGEucGVuZGluZ0luc2VydCksZS5kYXRhLnBlbmRpbmdJbnNlcnQ9bnVsbCksZS5lbG09ZS5jb21wb25lbnRJbnN0YW5jZS4kZWwsbShlKT8oeShlLHQpLGcoZSkpOih0cihlKSx0LnB1c2goZSkpfWZ1bmN0aW9uIHYoZSx0LHIpe24oZSkmJihuKHIpP3UucGFyZW50Tm9kZShyKT09PWUmJnUuaW5zZXJ0QmVmb3JlKGUsdCxyKTp1LmFwcGVuZENoaWxkKGUsdCkpfWZ1bmN0aW9uIGgoZSx0LG4pe2lmKEFycmF5LmlzQXJyYXkodCkpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDsrK3IpZih0W3JdLG4sZS5lbG0sbnVsbCwhMCx0LHIpO2Vsc2UgaShlLnRleHQpJiZ1LmFwcGVuZENoaWxkKGUuZWxtLHUuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGUudGV4dCkpKX1mdW5jdGlvbiBtKGUpe2Zvcig7ZS5jb21wb25lbnRJbnN0YW5jZTspZT1lLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtyZXR1cm4gbihlLnRhZyl9ZnVuY3Rpb24geShlLHQpe2Zvcih2YXIgcj0wO3I8cy5jcmVhdGUubGVuZ3RoOysrcilzLmNyZWF0ZVtyXShucixlKTtuKG89ZS5kYXRhLmhvb2spJiYobihvLmNyZWF0ZSkmJm8uY3JlYXRlKG5yLGUpLG4oby5pbnNlcnQpJiZ0LnB1c2goZSkpfWZ1bmN0aW9uIGcoZSl7dmFyIHQ7aWYobih0PWUuZm5TY29wZUlkKSl1LnNldFN0eWxlU2NvcGUoZS5lbG0sdCk7ZWxzZSBmb3IodmFyIHI9ZTtyOyluKHQ9ci5jb250ZXh0KSYmbih0PXQuJG9wdGlvbnMuX3Njb3BlSWQpJiZ1LnNldFN0eWxlU2NvcGUoZS5lbG0sdCkscj1yLnBhcmVudDtuKHQ9V3QpJiZ0IT09ZS5jb250ZXh0JiZ0IT09ZS5mbkNvbnRleHQmJm4odD10LiRvcHRpb25zLl9zY29wZUlkKSYmdS5zZXRTdHlsZVNjb3BlKGUuZWxtLHQpfWZ1bmN0aW9uIF8oZSx0LG4scixpLG8pe2Zvcig7cjw9aTsrK3IpZihuW3JdLG8sZSx0LCExLG4scil9ZnVuY3Rpb24gYihlKXt2YXIgdCxyLGk9ZS5kYXRhO2lmKG4oaSkpZm9yKG4odD1pLmhvb2spJiZuKHQ9dC5kZXN0cm95KSYmdChlKSx0PTA7dDxzLmRlc3Ryb3kubGVuZ3RoOysrdClzLmRlc3Ryb3lbdF0oZSk7aWYobih0PWUuY2hpbGRyZW4pKWZvcihyPTA7cjxlLmNoaWxkcmVuLmxlbmd0aDsrK3IpYihlLmNoaWxkcmVuW3JdKX1mdW5jdGlvbiAkKGUsdCxyLGkpe2Zvcig7cjw9aTsrK3Ipe3ZhciBvPXRbcl07bihvKSYmKG4oby50YWcpPyh3KG8pLGIobykpOmwoby5lbG0pKX19ZnVuY3Rpb24gdyhlLHQpe2lmKG4odCl8fG4oZS5kYXRhKSl7dmFyIHIsaT1zLnJlbW92ZS5sZW5ndGgrMTtmb3Iobih0KT90Lmxpc3RlbmVycys9aTp0PWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbigpezA9PS0tbi5saXN0ZW5lcnMmJmwoZSl9cmV0dXJuIG4ubGlzdGVuZXJzPXQsbn0oZS5lbG0saSksbihyPWUuY29tcG9uZW50SW5zdGFuY2UpJiZuKHI9ci5fdm5vZGUpJiZuKHIuZGF0YSkmJncocix0KSxyPTA7cjxzLnJlbW92ZS5sZW5ndGg7KytyKXMucmVtb3ZlW3JdKGUsdCk7bihyPWUuZGF0YS5ob29rKSYmbihyPXIucmVtb3ZlKT9yKGUsdCk6dCgpfWVsc2UgbChlLmVsbSl9ZnVuY3Rpb24gQyhlLHQscixpKXtmb3IodmFyIG89cjtvPGk7bysrKXt2YXIgYT10W29dO2lmKG4oYSkmJmlyKGUsYSkpcmV0dXJuIG99fWZ1bmN0aW9uIHgoZSxpLG8sYSxjLGwpe2lmKGUhPT1pKXtuKGkuZWxtKSYmbihhKSYmKGk9YVtjXT1tZShpKSk7dmFyIHA9aS5lbG09ZS5lbG07aWYocihlLmlzQXN5bmNQbGFjZWhvbGRlcikpbihpLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCk/TyhlLmVsbSxpLG8pOmkuaXNBc3luY1BsYWNlaG9sZGVyPSEwO2Vsc2UgaWYocihpLmlzU3RhdGljKSYmcihlLmlzU3RhdGljKSYmaS5rZXk9PT1lLmtleSYmKHIoaS5pc0Nsb25lZCl8fHIoaS5pc09uY2UpKSlpLmNvbXBvbmVudEluc3RhbmNlPWUuY29tcG9uZW50SW5zdGFuY2U7ZWxzZXt2YXIgZCx2PWkuZGF0YTtuKHYpJiZuKGQ9di5ob29rKSYmbihkPWQucHJlcGF0Y2gpJiZkKGUsaSk7dmFyIGg9ZS5jaGlsZHJlbix5PWkuY2hpbGRyZW47aWYobih2KSYmbShpKSl7Zm9yKGQ9MDtkPHMudXBkYXRlLmxlbmd0aDsrK2Qpcy51cGRhdGVbZF0oZSxpKTtuKGQ9di5ob29rKSYmbihkPWQudXBkYXRlKSYmZChlLGkpfXQoaS50ZXh0KT9uKGgpJiZuKHkpP2ghPT15JiZmdW5jdGlvbihlLHIsaSxvLGEpe2Zvcih2YXIgcyxjLGwscD0wLGQ9MCx2PXIubGVuZ3RoLTEsaD1yWzBdLG09clt2XSx5PWkubGVuZ3RoLTEsZz1pWzBdLGI9aVt5XSx3PSFhO3A8PXYmJmQ8PXk7KXQoaCk/aD1yWysrcF06dChtKT9tPXJbLS12XTppcihoLGcpPyh4KGgsZyxvLGksZCksaD1yWysrcF0sZz1pWysrZF0pOmlyKG0sYik/KHgobSxiLG8saSx5KSxtPXJbLS12XSxiPWlbLS15XSk6aXIoaCxiKT8oeChoLGIsbyxpLHkpLHcmJnUuaW5zZXJ0QmVmb3JlKGUsaC5lbG0sdS5uZXh0U2libGluZyhtLmVsbSkpLGg9clsrK3BdLGI9aVstLXldKTppcihtLGcpPyh4KG0sZyxvLGksZCksdyYmdS5pbnNlcnRCZWZvcmUoZSxtLmVsbSxoLmVsbSksbT1yWy0tdl0sZz1pWysrZF0pOih0KHMpJiYocz1vcihyLHAsdikpLHQoYz1uKGcua2V5KT9zW2cua2V5XTpDKGcscixwLHYpKT9mKGcsbyxlLGguZWxtLCExLGksZCk6aXIobD1yW2NdLGcpPyh4KGwsZyxvLGksZCkscltjXT12b2lkIDAsdyYmdS5pbnNlcnRCZWZvcmUoZSxsLmVsbSxoLmVsbSkpOmYoZyxvLGUsaC5lbG0sITEsaSxkKSxnPWlbKytkXSk7cD52P18oZSx0KGlbeSsxXSk/bnVsbDppW3krMV0uZWxtLGksZCx5LG8pOmQ+eSYmJCgwLHIscCx2KX0ocCxoLHksbyxsKTpuKHkpPyhuKGUudGV4dCkmJnUuc2V0VGV4dENvbnRlbnQocCxcIlwiKSxfKHAsbnVsbCx5LDAseS5sZW5ndGgtMSxvKSk6bihoKT8kKDAsaCwwLGgubGVuZ3RoLTEpOm4oZS50ZXh0KSYmdS5zZXRUZXh0Q29udGVudChwLFwiXCIpOmUudGV4dCE9PWkudGV4dCYmdS5zZXRUZXh0Q29udGVudChwLGkudGV4dCksbih2KSYmbihkPXYuaG9vaykmJm4oZD1kLnBvc3RwYXRjaCkmJmQoZSxpKX19fWZ1bmN0aW9uIGsoZSx0LGkpe2lmKHIoaSkmJm4oZS5wYXJlbnQpKWUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydD10O2Vsc2UgZm9yKHZhciBvPTA7bzx0Lmxlbmd0aDsrK28pdFtvXS5kYXRhLmhvb2suaW5zZXJ0KHRbb10pfXZhciBBPXAoXCJhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXlcIik7ZnVuY3Rpb24gTyhlLHQsaSxvKXt2YXIgYSxzPXQudGFnLGM9dC5kYXRhLHU9dC5jaGlsZHJlbjtpZihvPW98fGMmJmMucHJlLHQuZWxtPWUscih0LmlzQ29tbWVudCkmJm4odC5hc3luY0ZhY3RvcnkpKXJldHVybiB0LmlzQXN5bmNQbGFjZWhvbGRlcj0hMCwhMDtpZihuKGMpJiYobihhPWMuaG9vaykmJm4oYT1hLmluaXQpJiZhKHQsITApLG4oYT10LmNvbXBvbmVudEluc3RhbmNlKSkpcmV0dXJuIGQodCxpKSwhMDtpZihuKHMpKXtpZihuKHUpKWlmKGUuaGFzQ2hpbGROb2RlcygpKWlmKG4oYT1jKSYmbihhPWEuZG9tUHJvcHMpJiZuKGE9YS5pbm5lckhUTUwpKXtpZihhIT09ZS5pbm5lckhUTUwpcmV0dXJuITF9ZWxzZXtmb3IodmFyIGw9ITAsZj1lLmZpcnN0Q2hpbGQscD0wO3A8dS5sZW5ndGg7cCsrKXtpZighZnx8IU8oZix1W3BdLGksbykpe2w9ITE7YnJlYWt9Zj1mLm5leHRTaWJsaW5nfWlmKCFsfHxmKXJldHVybiExfWVsc2UgaCh0LHUsaSk7aWYobihjKSl7dmFyIHY9ITE7Zm9yKHZhciBtIGluIGMpaWYoIUEobSkpe3Y9ITAseSh0LGkpO2JyZWFrfSF2JiZjLmNsYXNzJiZldChjLmNsYXNzKX19ZWxzZSBlLmRhdGEhPT10LnRleHQmJihlLmRhdGE9dC50ZXh0KTtyZXR1cm4hMH1yZXR1cm4gZnVuY3Rpb24oZSxpLG8sYSl7aWYoIXQoaSkpe3ZhciBjLGw9ITEscD1bXTtpZih0KGUpKWw9ITAsZihpLHApO2Vsc2V7dmFyIGQ9bihlLm5vZGVUeXBlKTtpZighZCYmaXIoZSxpKSl4KGUsaSxwLG51bGwsbnVsbCxhKTtlbHNle2lmKGQpe2lmKDE9PT1lLm5vZGVUeXBlJiZlLmhhc0F0dHJpYnV0ZShMKSYmKGUucmVtb3ZlQXR0cmlidXRlKEwpLG89ITApLHIobykmJk8oZSxpLHApKXJldHVybiBrKGkscCwhMCksZTtjPWUsZT1uZXcgcGUodS50YWdOYW1lKGMpLnRvTG93ZXJDYXNlKCkse30sW10sdm9pZCAwLGMpfXZhciB2PWUuZWxtLGg9dS5wYXJlbnROb2RlKHYpO2lmKGYoaSxwLHYuX2xlYXZlQ2I/bnVsbDpoLHUubmV4dFNpYmxpbmcodikpLG4oaS5wYXJlbnQpKWZvcih2YXIgeT1pLnBhcmVudCxnPW0oaSk7eTspe2Zvcih2YXIgXz0wO188cy5kZXN0cm95Lmxlbmd0aDsrK18pcy5kZXN0cm95W19dKHkpO2lmKHkuZWxtPWkuZWxtLGcpe2Zvcih2YXIgdz0wO3c8cy5jcmVhdGUubGVuZ3RoOysrdylzLmNyZWF0ZVt3XShucix5KTt2YXIgQz15LmRhdGEuaG9vay5pbnNlcnQ7aWYoQy5tZXJnZWQpZm9yKHZhciBBPTE7QTxDLmZucy5sZW5ndGg7QSsrKUMuZm5zW0FdKCl9ZWxzZSB0cih5KTt5PXkucGFyZW50fW4oaCk/JCgwLFtlXSwwLDApOm4oZS50YWcpJiZiKGUpfX1yZXR1cm4gayhpLHAsbCksaS5lbG19bihlKSYmYihlKX19KHtub2RlT3BzOlFuLG1vZHVsZXM6W21yLHhyLG5pLG9pLG1pLHo/e2NyZWF0ZTpVaSxhY3RpdmF0ZTpVaSxyZW1vdmU6ZnVuY3Rpb24oZSx0KXshMCE9PWUuZGF0YS5zaG93P1JpKGUsdCk6dCgpfX06e31dLmNvbmNhdChwcil9KTtXJiZkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsZnVuY3Rpb24oKXt2YXIgZT1kb2N1bWVudC5hY3RpdmVFbGVtZW50O2UmJmUudm1vZGVsJiZYaShlLFwiaW5wdXRcIil9KTt2YXIgVmk9e2luc2VydGVkOmZ1bmN0aW9uKGUsdCxuLHIpe1wic2VsZWN0XCI9PT1uLnRhZz8oci5lbG0mJiFyLmVsbS5fdk9wdGlvbnM/aXQobixcInBvc3RwYXRjaFwiLGZ1bmN0aW9uKCl7VmkuY29tcG9uZW50VXBkYXRlZChlLHQsbil9KTpLaShlLHQsbi5jb250ZXh0KSxlLl92T3B0aW9ucz1bXS5tYXAuY2FsbChlLm9wdGlvbnMsV2kpKTooXCJ0ZXh0YXJlYVwiPT09bi50YWd8fFhuKGUudHlwZSkpJiYoZS5fdk1vZGlmaWVycz10Lm1vZGlmaWVycyx0Lm1vZGlmaWVycy5sYXp5fHwoZS5hZGRFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25zdGFydFwiLFppKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjb21wb3NpdGlvbmVuZFwiLEdpKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixHaSksVyYmKGUudm1vZGVsPSEwKSkpfSxjb21wb25lbnRVcGRhdGVkOmZ1bmN0aW9uKGUsdCxuKXtpZihcInNlbGVjdFwiPT09bi50YWcpe0tpKGUsdCxuLmNvbnRleHQpO3ZhciByPWUuX3ZPcHRpb25zLGk9ZS5fdk9wdGlvbnM9W10ubWFwLmNhbGwoZS5vcHRpb25zLFdpKTtpZihpLnNvbWUoZnVuY3Rpb24oZSx0KXtyZXR1cm4hTihlLHJbdF0pfSkpKGUubXVsdGlwbGU/dC52YWx1ZS5zb21lKGZ1bmN0aW9uKGUpe3JldHVybiBxaShlLGkpfSk6dC52YWx1ZSE9PXQub2xkVmFsdWUmJnFpKHQudmFsdWUsaSkpJiZYaShlLFwiY2hhbmdlXCIpfX19O2Z1bmN0aW9uIEtpKGUsdCxuKXtKaShlLHQsbiksKHF8fFopJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7SmkoZSx0LG4pfSwwKX1mdW5jdGlvbiBKaShlLHQsbil7dmFyIHI9dC52YWx1ZSxpPWUubXVsdGlwbGU7aWYoIWl8fEFycmF5LmlzQXJyYXkocikpe2Zvcih2YXIgbyxhLHM9MCxjPWUub3B0aW9ucy5sZW5ndGg7czxjO3MrKylpZihhPWUub3B0aW9uc1tzXSxpKW89aihyLFdpKGEpKT4tMSxhLnNlbGVjdGVkIT09byYmKGEuc2VsZWN0ZWQ9byk7ZWxzZSBpZihOKFdpKGEpLHIpKXJldHVybiB2b2lkKGUuc2VsZWN0ZWRJbmRleCE9PXMmJihlLnNlbGVjdGVkSW5kZXg9cykpO2l8fChlLnNlbGVjdGVkSW5kZXg9LTEpfX1mdW5jdGlvbiBxaShlLHQpe3JldHVybiB0LmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiFOKHQsZSl9KX1mdW5jdGlvbiBXaShlKXtyZXR1cm5cIl92YWx1ZVwiaW4gZT9lLl92YWx1ZTplLnZhbHVlfWZ1bmN0aW9uIFppKGUpe2UudGFyZ2V0LmNvbXBvc2luZz0hMH1mdW5jdGlvbiBHaShlKXtlLnRhcmdldC5jb21wb3NpbmcmJihlLnRhcmdldC5jb21wb3Npbmc9ITEsWGkoZS50YXJnZXQsXCJpbnB1dFwiKSl9ZnVuY3Rpb24gWGkoZSx0KXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkhUTUxFdmVudHNcIik7bi5pbml0RXZlbnQodCwhMCwhMCksZS5kaXNwYXRjaEV2ZW50KG4pfWZ1bmN0aW9uIFlpKGUpe3JldHVybiFlLmNvbXBvbmVudEluc3RhbmNlfHxlLmRhdGEmJmUuZGF0YS50cmFuc2l0aW9uP2U6WWkoZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpfXZhciBRaT17bW9kZWw6Vmksc2hvdzp7YmluZDpmdW5jdGlvbihlLHQsbil7dmFyIHI9dC52YWx1ZSxpPShuPVlpKG4pKS5kYXRhJiZuLmRhdGEudHJhbnNpdGlvbixvPWUuX192T3JpZ2luYWxEaXNwbGF5PVwibm9uZVwiPT09ZS5zdHlsZS5kaXNwbGF5P1wiXCI6ZS5zdHlsZS5kaXNwbGF5O3ImJmk/KG4uZGF0YS5zaG93PSEwLFBpKG4sZnVuY3Rpb24oKXtlLnN0eWxlLmRpc3BsYXk9b30pKTplLnN0eWxlLmRpc3BsYXk9cj9vOlwibm9uZVwifSx1cGRhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQudmFsdWU7IXIhPSF0Lm9sZFZhbHVlJiYoKG49WWkobikpLmRhdGEmJm4uZGF0YS50cmFuc2l0aW9uPyhuLmRhdGEuc2hvdz0hMCxyP1BpKG4sZnVuY3Rpb24oKXtlLnN0eWxlLmRpc3BsYXk9ZS5fX3ZPcmlnaW5hbERpc3BsYXl9KTpSaShuLGZ1bmN0aW9uKCl7ZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwifSkpOmUuc3R5bGUuZGlzcGxheT1yP2UuX192T3JpZ2luYWxEaXNwbGF5Olwibm9uZVwiKX0sdW5iaW5kOmZ1bmN0aW9uKGUsdCxuLHIsaSl7aXx8KGUuc3R5bGUuZGlzcGxheT1lLl9fdk9yaWdpbmFsRGlzcGxheSl9fX0sZW89e25hbWU6U3RyaW5nLGFwcGVhcjpCb29sZWFuLGNzczpCb29sZWFuLG1vZGU6U3RyaW5nLHR5cGU6U3RyaW5nLGVudGVyQ2xhc3M6U3RyaW5nLGxlYXZlQ2xhc3M6U3RyaW5nLGVudGVyVG9DbGFzczpTdHJpbmcsbGVhdmVUb0NsYXNzOlN0cmluZyxlbnRlckFjdGl2ZUNsYXNzOlN0cmluZyxsZWF2ZUFjdGl2ZUNsYXNzOlN0cmluZyxhcHBlYXJDbGFzczpTdHJpbmcsYXBwZWFyQWN0aXZlQ2xhc3M6U3RyaW5nLGFwcGVhclRvQ2xhc3M6U3RyaW5nLGR1cmF0aW9uOltOdW1iZXIsU3RyaW5nLE9iamVjdF19O2Z1bmN0aW9uIHRvKGUpe3ZhciB0PWUmJmUuY29tcG9uZW50T3B0aW9ucztyZXR1cm4gdCYmdC5DdG9yLm9wdGlvbnMuYWJzdHJhY3Q/dG8oenQodC5jaGlsZHJlbikpOmV9ZnVuY3Rpb24gbm8oZSl7dmFyIHQ9e30sbj1lLiRvcHRpb25zO2Zvcih2YXIgciBpbiBuLnByb3BzRGF0YSl0W3JdPWVbcl07dmFyIGk9bi5fcGFyZW50TGlzdGVuZXJzO2Zvcih2YXIgbyBpbiBpKXRbYihvKV09aVtvXTtyZXR1cm4gdH1mdW5jdGlvbiBybyhlLHQpe2lmKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QodC50YWcpKXJldHVybiBlKFwia2VlcC1hbGl2ZVwiLHtwcm9wczp0LmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhfSl9dmFyIGlvPWZ1bmN0aW9uKGUpe3JldHVybiBlLnRhZ3x8VXQoZSl9LG9vPWZ1bmN0aW9uKGUpe3JldHVyblwic2hvd1wiPT09ZS5uYW1lfSxhbz17bmFtZTpcInRyYW5zaXRpb25cIixwcm9wczplbyxhYnN0cmFjdDohMCxyZW5kZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPXRoaXMuJHNsb3RzLmRlZmF1bHQ7aWYobiYmKG49bi5maWx0ZXIoaW8pKS5sZW5ndGgpe3ZhciByPXRoaXMubW9kZSxvPW5bMF07aWYoZnVuY3Rpb24oZSl7Zm9yKDtlPWUucGFyZW50OylpZihlLmRhdGEudHJhbnNpdGlvbilyZXR1cm4hMH0odGhpcy4kdm5vZGUpKXJldHVybiBvO3ZhciBhPXRvKG8pO2lmKCFhKXJldHVybiBvO2lmKHRoaXMuX2xlYXZpbmcpcmV0dXJuIHJvKGUsbyk7dmFyIHM9XCJfX3RyYW5zaXRpb24tXCIrdGhpcy5fdWlkK1wiLVwiO2Eua2V5PW51bGw9PWEua2V5P2EuaXNDb21tZW50P3MrXCJjb21tZW50XCI6cythLnRhZzppKGEua2V5KT8wPT09U3RyaW5nKGEua2V5KS5pbmRleE9mKHMpP2Eua2V5OnMrYS5rZXk6YS5rZXk7dmFyIGM9KGEuZGF0YXx8KGEuZGF0YT17fSkpLnRyYW5zaXRpb249bm8odGhpcyksdT10aGlzLl92bm9kZSxsPXRvKHUpO2lmKGEuZGF0YS5kaXJlY3RpdmVzJiZhLmRhdGEuZGlyZWN0aXZlcy5zb21lKG9vKSYmKGEuZGF0YS5zaG93PSEwKSxsJiZsLmRhdGEmJiFmdW5jdGlvbihlLHQpe3JldHVybiB0LmtleT09PWUua2V5JiZ0LnRhZz09PWUudGFnfShhLGwpJiYhVXQobCkmJighbC5jb21wb25lbnRJbnN0YW5jZXx8IWwuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudCkpe3ZhciBmPWwuZGF0YS50cmFuc2l0aW9uPUEoe30sYyk7aWYoXCJvdXQtaW5cIj09PXIpcmV0dXJuIHRoaXMuX2xlYXZpbmc9ITAsaXQoZixcImFmdGVyTGVhdmVcIixmdW5jdGlvbigpe3QuX2xlYXZpbmc9ITEsdC4kZm9yY2VVcGRhdGUoKX0pLHJvKGUsbyk7aWYoXCJpbi1vdXRcIj09PXIpe2lmKFV0KGEpKXJldHVybiB1O3ZhciBwLGQ9ZnVuY3Rpb24oKXtwKCl9O2l0KGMsXCJhZnRlckVudGVyXCIsZCksaXQoYyxcImVudGVyQ2FuY2VsbGVkXCIsZCksaXQoZixcImRlbGF5TGVhdmVcIixmdW5jdGlvbihlKXtwPWV9KX19cmV0dXJuIG99fX0sc289QSh7dGFnOlN0cmluZyxtb3ZlQ2xhc3M6U3RyaW5nfSxlbyk7ZnVuY3Rpb24gY28oZSl7ZS5lbG0uX21vdmVDYiYmZS5lbG0uX21vdmVDYigpLGUuZWxtLl9lbnRlckNiJiZlLmVsbS5fZW50ZXJDYigpfWZ1bmN0aW9uIHVvKGUpe2UuZGF0YS5uZXdQb3M9ZS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCl9ZnVuY3Rpb24gbG8oZSl7dmFyIHQ9ZS5kYXRhLnBvcyxuPWUuZGF0YS5uZXdQb3Mscj10LmxlZnQtbi5sZWZ0LGk9dC50b3Atbi50b3A7aWYocnx8aSl7ZS5kYXRhLm1vdmVkPSEwO3ZhciBvPWUuZWxtLnN0eWxlO28udHJhbnNmb3JtPW8uV2Via2l0VHJhbnNmb3JtPVwidHJhbnNsYXRlKFwiK3IrXCJweCxcIitpK1wicHgpXCIsby50cmFuc2l0aW9uRHVyYXRpb249XCIwc1wifX1kZWxldGUgc28ubW9kZTt2YXIgZm89e1RyYW5zaXRpb246YW8sVHJhbnNpdGlvbkdyb3VwOntwcm9wczpzbyxiZWZvcmVNb3VudDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLl91cGRhdGU7dGhpcy5fdXBkYXRlPWZ1bmN0aW9uKG4scil7dmFyIGk9WnQoZSk7ZS5fX3BhdGNoX18oZS5fdm5vZGUsZS5rZXB0LCExLCEwKSxlLl92bm9kZT1lLmtlcHQsaSgpLHQuY2FsbChlLG4scil9fSxyZW5kZXI6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudGFnfHx0aGlzLiR2bm9kZS5kYXRhLnRhZ3x8XCJzcGFuXCIsbj1PYmplY3QuY3JlYXRlKG51bGwpLHI9dGhpcy5wcmV2Q2hpbGRyZW49dGhpcy5jaGlsZHJlbixpPXRoaXMuJHNsb3RzLmRlZmF1bHR8fFtdLG89dGhpcy5jaGlsZHJlbj1bXSxhPW5vKHRoaXMpLHM9MDtzPGkubGVuZ3RoO3MrKyl7dmFyIGM9aVtzXTtjLnRhZyYmbnVsbCE9Yy5rZXkmJjAhPT1TdHJpbmcoYy5rZXkpLmluZGV4T2YoXCJfX3ZsaXN0XCIpJiYoby5wdXNoKGMpLG5bYy5rZXldPWMsKGMuZGF0YXx8KGMuZGF0YT17fSkpLnRyYW5zaXRpb249YSl9aWYocil7Zm9yKHZhciB1PVtdLGw9W10sZj0wO2Y8ci5sZW5ndGg7ZisrKXt2YXIgcD1yW2ZdO3AuZGF0YS50cmFuc2l0aW9uPWEscC5kYXRhLnBvcz1wLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuW3Aua2V5XT91LnB1c2gocCk6bC5wdXNoKHApfXRoaXMua2VwdD1lKHQsbnVsbCx1KSx0aGlzLnJlbW92ZWQ9bH1yZXR1cm4gZSh0LG51bGwsbyl9LHVwZGF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnByZXZDaGlsZHJlbix0PXRoaXMubW92ZUNsYXNzfHwodGhpcy5uYW1lfHxcInZcIikrXCItbW92ZVwiO2UubGVuZ3RoJiZ0aGlzLmhhc01vdmUoZVswXS5lbG0sdCkmJihlLmZvckVhY2goY28pLGUuZm9yRWFjaCh1byksZS5mb3JFYWNoKGxvKSx0aGlzLl9yZWZsb3c9ZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQsZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5tb3ZlZCl7dmFyIG49ZS5lbG0scj1uLnN0eWxlO05pKG4sdCksci50cmFuc2Zvcm09ci5XZWJraXRUcmFuc2Zvcm09ci50cmFuc2l0aW9uRHVyYXRpb249XCJcIixuLmFkZEV2ZW50TGlzdGVuZXIoQWksbi5fbW92ZUNiPWZ1bmN0aW9uIGUocil7ciYmci50YXJnZXQhPT1ufHxyJiYhL3RyYW5zZm9ybSQvLnRlc3Qoci5wcm9wZXJ0eU5hbWUpfHwobi5yZW1vdmVFdmVudExpc3RlbmVyKEFpLGUpLG4uX21vdmVDYj1udWxsLGppKG4sdCkpfSl9fSkpfSxtZXRob2RzOntoYXNNb3ZlOmZ1bmN0aW9uKGUsdCl7aWYoIXdpKXJldHVybiExO2lmKHRoaXMuX2hhc01vdmUpcmV0dXJuIHRoaXMuX2hhc01vdmU7dmFyIG49ZS5jbG9uZU5vZGUoKTtlLl90cmFuc2l0aW9uQ2xhc3NlcyYmZS5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbihlKXtfaShuLGUpfSksZ2kobix0KSxuLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsdGhpcy4kZWwuYXBwZW5kQ2hpbGQobik7dmFyIHI9TWkobik7cmV0dXJuIHRoaXMuJGVsLnJlbW92ZUNoaWxkKG4pLHRoaXMuX2hhc01vdmU9ci5oYXNUcmFuc2Zvcm19fX19O3duLmNvbmZpZy5tdXN0VXNlUHJvcD1qbix3bi5jb25maWcuaXNSZXNlcnZlZFRhZz1Xbix3bi5jb25maWcuaXNSZXNlcnZlZEF0dHI9RW4sd24uY29uZmlnLmdldFRhZ05hbWVzcGFjZT1abix3bi5jb25maWcuaXNVbmtub3duRWxlbWVudD1mdW5jdGlvbihlKXtpZigheilyZXR1cm4hMDtpZihXbihlKSlyZXR1cm4hMTtpZihlPWUudG9Mb3dlckNhc2UoKSxudWxsIT1HbltlXSlyZXR1cm4gR25bZV07dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTtyZXR1cm4gZS5pbmRleE9mKFwiLVwiKT4tMT9HbltlXT10LmNvbnN0cnVjdG9yPT09d2luZG93LkhUTUxVbmtub3duRWxlbWVudHx8dC5jb25zdHJ1Y3Rvcj09PXdpbmRvdy5IVE1MRWxlbWVudDpHbltlXT0vSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KHQudG9TdHJpbmcoKSl9LEEod24ub3B0aW9ucy5kaXJlY3RpdmVzLFFpKSxBKHduLm9wdGlvbnMuY29tcG9uZW50cyxmbyksd24ucHJvdG90eXBlLl9fcGF0Y2hfXz16P3ppOlMsd24ucHJvdG90eXBlLiRtb3VudD1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbil7dmFyIHI7cmV0dXJuIGUuJGVsPXQsZS4kb3B0aW9ucy5yZW5kZXJ8fChlLiRvcHRpb25zLnJlbmRlcj12ZSksWXQoZSxcImJlZm9yZU1vdW50XCIpLHI9ZnVuY3Rpb24oKXtlLl91cGRhdGUoZS5fcmVuZGVyKCksbil9LG5ldyBmbihlLHIsUyx7YmVmb3JlOmZ1bmN0aW9uKCl7ZS5faXNNb3VudGVkJiYhZS5faXNEZXN0cm95ZWQmJll0KGUsXCJiZWZvcmVVcGRhdGVcIil9fSwhMCksbj0hMSxudWxsPT1lLiR2bm9kZSYmKGUuX2lzTW91bnRlZD0hMCxZdChlLFwibW91bnRlZFwiKSksZX0odGhpcyxlPWUmJno/WW4oZSk6dm9pZCAwLHQpfSx6JiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Ri5kZXZ0b29scyYmbmUmJm5lLmVtaXQoXCJpbml0XCIsd24pfSwwKTt2YXIgcG89L1xce1xceygoPzoufFxccj9cXG4pKz8pXFx9XFx9L2csdm89L1stLiorP14ke30oKXxbXFxdXFwvXFxcXF0vZyxobz1nKGZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0ucmVwbGFjZSh2byxcIlxcXFwkJlwiKSxuPWVbMV0ucmVwbGFjZSh2byxcIlxcXFwkJlwiKTtyZXR1cm4gbmV3IFJlZ0V4cCh0K1wiKCg/Oi58XFxcXG4pKz8pXCIrbixcImdcIil9KTt2YXIgbW89e3N0YXRpY0tleXM6W1wic3RhdGljQ2xhc3NcIl0sdHJhbnNmb3JtTm9kZTpmdW5jdGlvbihlLHQpe3Qud2Fybjt2YXIgbj1GcihlLFwiY2xhc3NcIik7biYmKGUuc3RhdGljQ2xhc3M9SlNPTi5zdHJpbmdpZnkobikpO3ZhciByPUlyKGUsXCJjbGFzc1wiLCExKTtyJiYoZS5jbGFzc0JpbmRpbmc9cil9LGdlbkRhdGE6ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtyZXR1cm4gZS5zdGF0aWNDbGFzcyYmKHQrPVwic3RhdGljQ2xhc3M6XCIrZS5zdGF0aWNDbGFzcytcIixcIiksZS5jbGFzc0JpbmRpbmcmJih0Kz1cImNsYXNzOlwiK2UuY2xhc3NCaW5kaW5nK1wiLFwiKSx0fX07dmFyIHlvLGdvPXtzdGF0aWNLZXlzOltcInN0YXRpY1N0eWxlXCJdLHRyYW5zZm9ybU5vZGU6ZnVuY3Rpb24oZSx0KXt0Lndhcm47dmFyIG49RnIoZSxcInN0eWxlXCIpO24mJihlLnN0YXRpY1N0eWxlPUpTT04uc3RyaW5naWZ5KGFpKG4pKSk7dmFyIHI9SXIoZSxcInN0eWxlXCIsITEpO3ImJihlLnN0eWxlQmluZGluZz1yKX0sZ2VuRGF0YTpmdW5jdGlvbihlKXt2YXIgdD1cIlwiO3JldHVybiBlLnN0YXRpY1N0eWxlJiYodCs9XCJzdGF0aWNTdHlsZTpcIitlLnN0YXRpY1N0eWxlK1wiLFwiKSxlLnN0eWxlQmluZGluZyYmKHQrPVwic3R5bGU6KFwiK2Uuc3R5bGVCaW5kaW5nK1wiKSxcIiksdH19LF9vPWZ1bmN0aW9uKGUpe3JldHVybih5bz15b3x8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuaW5uZXJIVE1MPWUseW8udGV4dENvbnRlbnR9LGJvPXAoXCJhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGZyYW1lLGhyLGltZyxpbnB1dCxpc2luZGV4LGtleWdlbixsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdiclwiKSwkbz1wKFwiY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZVwiKSx3bz1wKFwiYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJhc2UsYmxvY2txdW90ZSxib2R5LGNhcHRpb24sY29sLGNvbGdyb3VwLGRkLGRldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSxoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSxvcHRncm91cCxvcHRpb24scGFyYW0scnAscnQsc291cmNlLHN0eWxlLHN1bW1hcnksdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsdGl0bGUsdHIsdHJhY2tcIiksQ289L15cXHMqKFteXFxzXCInPD5cXC89XSspKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy8seG89L15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XStcXF1bXlxcc1wiJzw+XFwvPV0qKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vLGtvPVwiW2EtekEtWl9dW1xcXFwtXFxcXC4wLTlfYS16QS1aXCIrUC5zb3VyY2UrXCJdKlwiLEFvPVwiKCg/OlwiK2tvK1wiXFxcXDopP1wiK2tvK1wiKVwiLE9vPW5ldyBSZWdFeHAoXCJePFwiK0FvKSxTbz0vXlxccyooXFwvPyk+LyxUbz1uZXcgUmVnRXhwKFwiXjxcXFxcL1wiK0FvK1wiW14+XSo+XCIpLEVvPS9ePCFET0NUWVBFIFtePl0rPi9pLE5vPS9ePCFcXC0tLyxqbz0vXjwhXFxbLyxEbz1wKFwic2NyaXB0LHN0eWxlLHRleHRhcmVhXCIsITApLExvPXt9LE1vPXtcIiZsdDtcIjpcIjxcIixcIiZndDtcIjpcIj5cIixcIiZxdW90O1wiOidcIicsXCImYW1wO1wiOlwiJlwiLFwiJiMxMDtcIjpcIlxcblwiLFwiJiM5O1wiOlwiXFx0XCIsXCImIzM5O1wiOlwiJ1wifSxJbz0vJig/Omx0fGd0fHF1b3R8YW1wfCMzOSk7L2csRm89LyYoPzpsdHxndHxxdW90fGFtcHwjMzl8IzEwfCM5KTsvZyxQbz1wKFwicHJlLHRleHRhcmVhXCIsITApLFJvPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUmJlBvKGUpJiZcIlxcblwiPT09dFswXX07ZnVuY3Rpb24gSG8oZSx0KXt2YXIgbj10P0ZvOklvO3JldHVybiBlLnJlcGxhY2UobixmdW5jdGlvbihlKXtyZXR1cm4gTW9bZV19KX12YXIgQm8sVW8sem8sVm8sS28sSm8scW8sV28sWm89L15AfF52LW9uOi8sR289L152LXxeQHxeOi8sWG89LyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvLFlvPS8sKFteLFxcfVxcXV0qKSg/OiwoW14sXFx9XFxdXSopKT8kLyxRbz0vXlxcKHxcXCkkL2csZWE9L15cXFsuKlxcXSQvLHRhPS86KC4qKSQvLG5hPS9eOnxeXFwufF52LWJpbmQ6LyxyYT0vXFwuW14uXFxdXSsoPz1bXlxcXV0qJCkvZyxpYT0vXnYtc2xvdCg6fCQpfF4jLyxvYT0vW1xcclxcbl0vLGFhPS9cXHMrL2csc2E9ZyhfbyksY2E9XCJfZW1wdHlfXCI7ZnVuY3Rpb24gdWEoZSx0LG4pe3JldHVybnt0eXBlOjEsdGFnOmUsYXR0cnNMaXN0OnQsYXR0cnNNYXA6bWEodCkscmF3QXR0cnNNYXA6e30scGFyZW50Om4sY2hpbGRyZW46W119fWZ1bmN0aW9uIGxhKGUsdCl7Qm89dC53YXJufHxTcixKbz10LmlzUHJlVGFnfHxULHFvPXQubXVzdFVzZVByb3B8fFQsV289dC5nZXRUYWdOYW1lc3BhY2V8fFQ7dC5pc1Jlc2VydmVkVGFnO3pvPVRyKHQubW9kdWxlcyxcInRyYW5zZm9ybU5vZGVcIiksVm89VHIodC5tb2R1bGVzLFwicHJlVHJhbnNmb3JtTm9kZVwiKSxLbz1Ucih0Lm1vZHVsZXMsXCJwb3N0VHJhbnNmb3JtTm9kZVwiKSxVbz10LmRlbGltaXRlcnM7dmFyIG4scixpPVtdLG89ITEhPT10LnByZXNlcnZlV2hpdGVzcGFjZSxhPXQud2hpdGVzcGFjZSxzPSExLGM9ITE7ZnVuY3Rpb24gdShlKXtpZihsKGUpLHN8fGUucHJvY2Vzc2VkfHwoZT1mYShlLHQpKSxpLmxlbmd0aHx8ZT09PW58fG4uaWYmJihlLmVsc2VpZnx8ZS5lbHNlKSYmZGEobix7ZXhwOmUuZWxzZWlmLGJsb2NrOmV9KSxyJiYhZS5mb3JiaWRkZW4paWYoZS5lbHNlaWZ8fGUuZWxzZSlhPWUsKHU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGg7Zm9yKDt0LS07KXtpZigxPT09ZVt0XS50eXBlKXJldHVybiBlW3RdO2UucG9wKCl9fShyLmNoaWxkcmVuKSkmJnUuaWYmJmRhKHUse2V4cDphLmVsc2VpZixibG9jazphfSk7ZWxzZXtpZihlLnNsb3RTY29wZSl7dmFyIG89ZS5zbG90VGFyZ2V0fHwnXCJkZWZhdWx0XCInOyhyLnNjb3BlZFNsb3RzfHwoci5zY29wZWRTbG90cz17fSkpW29dPWV9ci5jaGlsZHJlbi5wdXNoKGUpLGUucGFyZW50PXJ9dmFyIGEsdTtlLmNoaWxkcmVuPWUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFlLnNsb3RTY29wZX0pLGwoZSksZS5wcmUmJihzPSExKSxKbyhlLnRhZykmJihjPSExKTtmb3IodmFyIGY9MDtmPEtvLmxlbmd0aDtmKyspS29bZl0oZSx0KX1mdW5jdGlvbiBsKGUpe2lmKCFjKWZvcih2YXIgdDsodD1lLmNoaWxkcmVuW2UuY2hpbGRyZW4ubGVuZ3RoLTFdKSYmMz09PXQudHlwZSYmXCIgXCI9PT10LnRleHQ7KWUuY2hpbGRyZW4ucG9wKCl9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLHIsaT1bXSxvPXQuZXhwZWN0SFRNTCxhPXQuaXNVbmFyeVRhZ3x8VCxzPXQuY2FuQmVMZWZ0T3BlblRhZ3x8VCxjPTA7ZTspe2lmKG49ZSxyJiZEbyhyKSl7dmFyIHU9MCxsPXIudG9Mb3dlckNhc2UoKSxmPUxvW2xdfHwoTG9bbF09bmV3IFJlZ0V4cChcIihbXFxcXHNcXFxcU10qPykoPC9cIitsK1wiW14+XSo+KVwiLFwiaVwiKSkscD1lLnJlcGxhY2UoZixmdW5jdGlvbihlLG4scil7cmV0dXJuIHU9ci5sZW5ndGgsRG8obCl8fFwibm9zY3JpcHRcIj09PWx8fChuPW4ucmVwbGFjZSgvPCFcXC0tKFtcXHNcXFNdKj8pLS0+L2csXCIkMVwiKS5yZXBsYWNlKC88IVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pXV0+L2csXCIkMVwiKSksUm8obCxuKSYmKG49bi5zbGljZSgxKSksdC5jaGFycyYmdC5jaGFycyhuKSxcIlwifSk7Yys9ZS5sZW5ndGgtcC5sZW5ndGgsZT1wLEEobCxjLXUsYyl9ZWxzZXt2YXIgZD1lLmluZGV4T2YoXCI8XCIpO2lmKDA9PT1kKXtpZihOby50ZXN0KGUpKXt2YXIgdj1lLmluZGV4T2YoXCItLVxceDNlXCIpO2lmKHY+PTApe3Quc2hvdWxkS2VlcENvbW1lbnQmJnQuY29tbWVudChlLnN1YnN0cmluZyg0LHYpLGMsYyt2KzMpLEModiszKTtjb250aW51ZX19aWYoam8udGVzdChlKSl7dmFyIGg9ZS5pbmRleE9mKFwiXT5cIik7aWYoaD49MCl7QyhoKzIpO2NvbnRpbnVlfX12YXIgbT1lLm1hdGNoKEVvKTtpZihtKXtDKG1bMF0ubGVuZ3RoKTtjb250aW51ZX12YXIgeT1lLm1hdGNoKFRvKTtpZih5KXt2YXIgZz1jO0MoeVswXS5sZW5ndGgpLEEoeVsxXSxnLGMpO2NvbnRpbnVlfXZhciBfPXgoKTtpZihfKXtrKF8pLFJvKF8udGFnTmFtZSxlKSYmQygxKTtjb250aW51ZX19dmFyIGI9dm9pZCAwLCQ9dm9pZCAwLHc9dm9pZCAwO2lmKGQ+PTApe2ZvcigkPWUuc2xpY2UoZCk7IShUby50ZXN0KCQpfHxPby50ZXN0KCQpfHxOby50ZXN0KCQpfHxqby50ZXN0KCQpfHwodz0kLmluZGV4T2YoXCI8XCIsMSkpPDApOylkKz13LCQ9ZS5zbGljZShkKTtiPWUuc3Vic3RyaW5nKDAsZCl9ZDwwJiYoYj1lKSxiJiZDKGIubGVuZ3RoKSx0LmNoYXJzJiZiJiZ0LmNoYXJzKGIsYy1iLmxlbmd0aCxjKX1pZihlPT09bil7dC5jaGFycyYmdC5jaGFycyhlKTticmVha319ZnVuY3Rpb24gQyh0KXtjKz10LGU9ZS5zdWJzdHJpbmcodCl9ZnVuY3Rpb24geCgpe3ZhciB0PWUubWF0Y2goT28pO2lmKHQpe3ZhciBuLHIsaT17dGFnTmFtZTp0WzFdLGF0dHJzOltdLHN0YXJ0OmN9O2ZvcihDKHRbMF0ubGVuZ3RoKTshKG49ZS5tYXRjaChTbykpJiYocj1lLm1hdGNoKHhvKXx8ZS5tYXRjaChDbykpOylyLnN0YXJ0PWMsQyhyWzBdLmxlbmd0aCksci5lbmQ9YyxpLmF0dHJzLnB1c2gocik7aWYobilyZXR1cm4gaS51bmFyeVNsYXNoPW5bMV0sQyhuWzBdLmxlbmd0aCksaS5lbmQ9YyxpfX1mdW5jdGlvbiBrKGUpe3ZhciBuPWUudGFnTmFtZSxjPWUudW5hcnlTbGFzaDtvJiYoXCJwXCI9PT1yJiZ3byhuKSYmQShyKSxzKG4pJiZyPT09biYmQShuKSk7Zm9yKHZhciB1PWEobil8fCEhYyxsPWUuYXR0cnMubGVuZ3RoLGY9bmV3IEFycmF5KGwpLHA9MDtwPGw7cCsrKXt2YXIgZD1lLmF0dHJzW3BdLHY9ZFszXXx8ZFs0XXx8ZFs1XXx8XCJcIixoPVwiYVwiPT09biYmXCJocmVmXCI9PT1kWzFdP3Quc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOnQuc2hvdWxkRGVjb2RlTmV3bGluZXM7ZltwXT17bmFtZTpkWzFdLHZhbHVlOkhvKHYsaCl9fXV8fChpLnB1c2goe3RhZzpuLGxvd2VyQ2FzZWRUYWc6bi50b0xvd2VyQ2FzZSgpLGF0dHJzOmYsc3RhcnQ6ZS5zdGFydCxlbmQ6ZS5lbmR9KSxyPW4pLHQuc3RhcnQmJnQuc3RhcnQobixmLHUsZS5zdGFydCxlLmVuZCl9ZnVuY3Rpb24gQShlLG4sbyl7dmFyIGEscztpZihudWxsPT1uJiYobj1jKSxudWxsPT1vJiYobz1jKSxlKWZvcihzPWUudG9Mb3dlckNhc2UoKSxhPWkubGVuZ3RoLTE7YT49MCYmaVthXS5sb3dlckNhc2VkVGFnIT09czthLS0pO2Vsc2UgYT0wO2lmKGE+PTApe2Zvcih2YXIgdT1pLmxlbmd0aC0xO3U+PWE7dS0tKXQuZW5kJiZ0LmVuZChpW3VdLnRhZyxuLG8pO2kubGVuZ3RoPWEscj1hJiZpW2EtMV0udGFnfWVsc2VcImJyXCI9PT1zP3Quc3RhcnQmJnQuc3RhcnQoZSxbXSwhMCxuLG8pOlwicFwiPT09cyYmKHQuc3RhcnQmJnQuc3RhcnQoZSxbXSwhMSxuLG8pLHQuZW5kJiZ0LmVuZChlLG4sbykpfUEoKX0oZSx7d2FybjpCbyxleHBlY3RIVE1MOnQuZXhwZWN0SFRNTCxpc1VuYXJ5VGFnOnQuaXNVbmFyeVRhZyxjYW5CZUxlZnRPcGVuVGFnOnQuY2FuQmVMZWZ0T3BlblRhZyxzaG91bGREZWNvZGVOZXdsaW5lczp0LnNob3VsZERlY29kZU5ld2xpbmVzLHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjp0LnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixzaG91bGRLZWVwQ29tbWVudDp0LmNvbW1lbnRzLG91dHB1dFNvdXJjZVJhbmdlOnQub3V0cHV0U291cmNlUmFuZ2Usc3RhcnQ6ZnVuY3Rpb24oZSxvLGEsbCxmKXt2YXIgcD1yJiZyLm5zfHxXbyhlKTtxJiZcInN2Z1wiPT09cCYmKG89ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTt5YS50ZXN0KHIubmFtZSl8fChyLm5hbWU9ci5uYW1lLnJlcGxhY2UoZ2EsXCJcIiksdC5wdXNoKHIpKX1yZXR1cm4gdH0obykpO3ZhciBkLHY9dWEoZSxvLHIpO3AmJih2Lm5zPXApLFwic3R5bGVcIiE9PShkPXYpLnRhZyYmKFwic2NyaXB0XCIhPT1kLnRhZ3x8ZC5hdHRyc01hcC50eXBlJiZcInRleHQvamF2YXNjcmlwdFwiIT09ZC5hdHRyc01hcC50eXBlKXx8dGUoKXx8KHYuZm9yYmlkZGVuPSEwKTtmb3IodmFyIGg9MDtoPFZvLmxlbmd0aDtoKyspdj1Wb1toXSh2LHQpfHx2O3N8fCghZnVuY3Rpb24oZSl7bnVsbCE9RnIoZSxcInYtcHJlXCIpJiYoZS5wcmU9ITApfSh2KSx2LnByZSYmKHM9ITApKSxKbyh2LnRhZykmJihjPSEwKSxzP2Z1bmN0aW9uKGUpe3ZhciB0PWUuYXR0cnNMaXN0LG49dC5sZW5ndGg7aWYobilmb3IodmFyIHI9ZS5hdHRycz1uZXcgQXJyYXkobiksaT0wO2k8bjtpKyspcltpXT17bmFtZTp0W2ldLm5hbWUsdmFsdWU6SlNPTi5zdHJpbmdpZnkodFtpXS52YWx1ZSl9LG51bGwhPXRbaV0uc3RhcnQmJihyW2ldLnN0YXJ0PXRbaV0uc3RhcnQscltpXS5lbmQ9dFtpXS5lbmQpO2Vsc2UgZS5wcmV8fChlLnBsYWluPSEwKX0odik6di5wcm9jZXNzZWR8fChwYSh2KSxmdW5jdGlvbihlKXt2YXIgdD1GcihlLFwidi1pZlwiKTtpZih0KWUuaWY9dCxkYShlLHtleHA6dCxibG9jazplfSk7ZWxzZXtudWxsIT1GcihlLFwidi1lbHNlXCIpJiYoZS5lbHNlPSEwKTt2YXIgbj1GcihlLFwidi1lbHNlLWlmXCIpO24mJihlLmVsc2VpZj1uKX19KHYpLGZ1bmN0aW9uKGUpe251bGwhPUZyKGUsXCJ2LW9uY2VcIikmJihlLm9uY2U9ITApfSh2KSksbnx8KG49diksYT91KHYpOihyPXYsaS5wdXNoKHYpKX0sZW5kOmZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1pW2kubGVuZ3RoLTFdO2kubGVuZ3RoLT0xLHI9aVtpLmxlbmd0aC0xXSx1KG8pfSxjaGFyczpmdW5jdGlvbihlLHQsbil7aWYociYmKCFxfHxcInRleHRhcmVhXCIhPT1yLnRhZ3x8ci5hdHRyc01hcC5wbGFjZWhvbGRlciE9PWUpKXt2YXIgaSx1LGwsZj1yLmNoaWxkcmVuO2lmKGU9Y3x8ZS50cmltKCk/XCJzY3JpcHRcIj09PShpPXIpLnRhZ3x8XCJzdHlsZVwiPT09aS50YWc/ZTpzYShlKTpmLmxlbmd0aD9hP1wiY29uZGVuc2VcIj09PWEmJm9hLnRlc3QoZSk/XCJcIjpcIiBcIjpvP1wiIFwiOlwiXCI6XCJcIiljfHxcImNvbmRlbnNlXCIhPT1hfHwoZT1lLnJlcGxhY2UoYWEsXCIgXCIpKSwhcyYmXCIgXCIhPT1lJiYodT1mdW5jdGlvbihlLHQpe3ZhciBuPXQ/aG8odCk6cG87aWYobi50ZXN0KGUpKXtmb3IodmFyIHIsaSxvLGE9W10scz1bXSxjPW4ubGFzdEluZGV4PTA7cj1uLmV4ZWMoZSk7KXsoaT1yLmluZGV4KT5jJiYocy5wdXNoKG89ZS5zbGljZShjLGkpKSxhLnB1c2goSlNPTi5zdHJpbmdpZnkobykpKTt2YXIgdT1BcihyWzFdLnRyaW0oKSk7YS5wdXNoKFwiX3MoXCIrdStcIilcIikscy5wdXNoKHtcIkBiaW5kaW5nXCI6dX0pLGM9aStyWzBdLmxlbmd0aH1yZXR1cm4gYzxlLmxlbmd0aCYmKHMucHVzaChvPWUuc2xpY2UoYykpLGEucHVzaChKU09OLnN0cmluZ2lmeShvKSkpLHtleHByZXNzaW9uOmEuam9pbihcIitcIiksdG9rZW5zOnN9fX0oZSxVbykpP2w9e3R5cGU6MixleHByZXNzaW9uOnUuZXhwcmVzc2lvbix0b2tlbnM6dS50b2tlbnMsdGV4dDplfTpcIiBcIj09PWUmJmYubGVuZ3RoJiZcIiBcIj09PWZbZi5sZW5ndGgtMV0udGV4dHx8KGw9e3R5cGU6Myx0ZXh0OmV9KSxsJiZmLnB1c2gobCl9fSxjb21tZW50OmZ1bmN0aW9uKGUsdCxuKXtpZihyKXt2YXIgaT17dHlwZTozLHRleHQ6ZSxpc0NvbW1lbnQ6ITB9O3IuY2hpbGRyZW4ucHVzaChpKX19fSksbn1mdW5jdGlvbiBmYShlLHQpe3ZhciBuLHI7KHI9SXIobj1lLFwia2V5XCIpKSYmKG4ua2V5PXIpLGUucGxhaW49IWUua2V5JiYhZS5zY29wZWRTbG90cyYmIWUuYXR0cnNMaXN0Lmxlbmd0aCxmdW5jdGlvbihlKXt2YXIgdD1JcihlLFwicmVmXCIpO3QmJihlLnJlZj10LGUucmVmSW5Gb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9ZTtmb3IoO3Q7KXtpZih2b2lkIDAhPT10LmZvcilyZXR1cm4hMDt0PXQucGFyZW50fXJldHVybiExfShlKSl9KGUpLGZ1bmN0aW9uKGUpe3ZhciB0O1widGVtcGxhdGVcIj09PWUudGFnPyh0PUZyKGUsXCJzY29wZVwiKSxlLnNsb3RTY29wZT10fHxGcihlLFwic2xvdC1zY29wZVwiKSk6KHQ9RnIoZSxcInNsb3Qtc2NvcGVcIikpJiYoZS5zbG90U2NvcGU9dCk7dmFyIG49SXIoZSxcInNsb3RcIik7biYmKGUuc2xvdFRhcmdldD0nXCJcIic9PT1uPydcImRlZmF1bHRcIic6bixlLnNsb3RUYXJnZXREeW5hbWljPSEoIWUuYXR0cnNNYXBbXCI6c2xvdFwiXSYmIWUuYXR0cnNNYXBbXCJ2LWJpbmQ6c2xvdFwiXSksXCJ0ZW1wbGF0ZVwiPT09ZS50YWd8fGUuc2xvdFNjb3BlfHxOcihlLFwic2xvdFwiLG4sZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5yYXdBdHRyc01hcFtcIjpcIit0XXx8ZS5yYXdBdHRyc01hcFtcInYtYmluZDpcIit0XXx8ZS5yYXdBdHRyc01hcFt0XX0oZSxcInNsb3RcIikpKTtpZihcInRlbXBsYXRlXCI9PT1lLnRhZyl7dmFyIHI9UHIoZSxpYSk7aWYocil7dmFyIGk9dmEociksbz1pLm5hbWUsYT1pLmR5bmFtaWM7ZS5zbG90VGFyZ2V0PW8sZS5zbG90VGFyZ2V0RHluYW1pYz1hLGUuc2xvdFNjb3BlPXIudmFsdWV8fGNhfX1lbHNle3ZhciBzPVByKGUsaWEpO2lmKHMpe3ZhciBjPWUuc2NvcGVkU2xvdHN8fChlLnNjb3BlZFNsb3RzPXt9KSx1PXZhKHMpLGw9dS5uYW1lLGY9dS5keW5hbWljLHA9Y1tsXT11YShcInRlbXBsYXRlXCIsW10sZSk7cC5zbG90VGFyZ2V0PWwscC5zbG90VGFyZ2V0RHluYW1pYz1mLHAuY2hpbGRyZW49ZS5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24oZSl7aWYoIWUuc2xvdFNjb3BlKXJldHVybiBlLnBhcmVudD1wLCEwfSkscC5zbG90U2NvcGU9cy52YWx1ZXx8Y2EsZS5jaGlsZHJlbj1bXSxlLnBsYWluPSExfX19KGUpLGZ1bmN0aW9uKGUpe1wic2xvdFwiPT09ZS50YWcmJihlLnNsb3ROYW1lPUlyKGUsXCJuYW1lXCIpKX0oZSksZnVuY3Rpb24oZSl7dmFyIHQ7KHQ9SXIoZSxcImlzXCIpKSYmKGUuY29tcG9uZW50PXQpO251bGwhPUZyKGUsXCJpbmxpbmUtdGVtcGxhdGVcIikmJihlLmlubGluZVRlbXBsYXRlPSEwKX0oZSk7Zm9yKHZhciBpPTA7aTx6by5sZW5ndGg7aSsrKWU9em9baV0oZSx0KXx8ZTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhLHMsYyx1PWUuYXR0cnNMaXN0O2Zvcih0PTAsbj11Lmxlbmd0aDt0PG47dCsrKWlmKHI9aT11W3RdLm5hbWUsbz11W3RdLnZhbHVlLEdvLnRlc3QocikpaWYoZS5oYXNCaW5kaW5ncz0hMCwoYT1oYShyLnJlcGxhY2UoR28sXCJcIikpKSYmKHI9ci5yZXBsYWNlKHJhLFwiXCIpKSxuYS50ZXN0KHIpKXI9ci5yZXBsYWNlKG5hLFwiXCIpLG89QXIobyksKGM9ZWEudGVzdChyKSkmJihyPXIuc2xpY2UoMSwtMSkpLGEmJihhLnByb3AmJiFjJiZcImlubmVySHRtbFwiPT09KHI9YihyKSkmJihyPVwiaW5uZXJIVE1MXCIpLGEuY2FtZWwmJiFjJiYocj1iKHIpKSxhLnN5bmMmJihzPUJyKG8sXCIkZXZlbnRcIiksYz9NcihlLCdcInVwZGF0ZTpcIisoJytyK1wiKVwiLHMsbnVsbCwhMSwwLHVbdF0sITApOihNcihlLFwidXBkYXRlOlwiK2IocikscyxudWxsLCExLDAsdVt0XSksQyhyKSE9PWIocikmJk1yKGUsXCJ1cGRhdGU6XCIrQyhyKSxzLG51bGwsITEsMCx1W3RdKSkpKSxhJiZhLnByb3B8fCFlLmNvbXBvbmVudCYmcW8oZS50YWcsZS5hdHRyc01hcC50eXBlLHIpP0VyKGUscixvLHVbdF0sYyk6TnIoZSxyLG8sdVt0XSxjKTtlbHNlIGlmKFpvLnRlc3Qocikpcj1yLnJlcGxhY2UoWm8sXCJcIiksKGM9ZWEudGVzdChyKSkmJihyPXIuc2xpY2UoMSwtMSkpLE1yKGUscixvLGEsITEsMCx1W3RdLGMpO2Vsc2V7dmFyIGw9KHI9ci5yZXBsYWNlKEdvLFwiXCIpKS5tYXRjaCh0YSksZj1sJiZsWzFdO2M9ITEsZiYmKHI9ci5zbGljZSgwLC0oZi5sZW5ndGgrMSkpLGVhLnRlc3QoZikmJihmPWYuc2xpY2UoMSwtMSksYz0hMCkpLERyKGUscixpLG8sZixjLGEsdVt0XSl9ZWxzZSBOcihlLHIsSlNPTi5zdHJpbmdpZnkobyksdVt0XSksIWUuY29tcG9uZW50JiZcIm11dGVkXCI9PT1yJiZxbyhlLnRhZyxlLmF0dHJzTWFwLnR5cGUscikmJkVyKGUscixcInRydWVcIix1W3RdKX0oZSksZX1mdW5jdGlvbiBwYShlKXt2YXIgdDtpZih0PUZyKGUsXCJ2LWZvclwiKSl7dmFyIG49ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5tYXRjaChYbyk7aWYoIXQpcmV0dXJuO3ZhciBuPXt9O24uZm9yPXRbMl0udHJpbSgpO3ZhciByPXRbMV0udHJpbSgpLnJlcGxhY2UoUW8sXCJcIiksaT1yLm1hdGNoKFlvKTtpPyhuLmFsaWFzPXIucmVwbGFjZShZbyxcIlwiKS50cmltKCksbi5pdGVyYXRvcjE9aVsxXS50cmltKCksaVsyXSYmKG4uaXRlcmF0b3IyPWlbMl0udHJpbSgpKSk6bi5hbGlhcz1yO3JldHVybiBufSh0KTtuJiZBKGUsbil9fWZ1bmN0aW9uIGRhKGUsdCl7ZS5pZkNvbmRpdGlvbnN8fChlLmlmQ29uZGl0aW9ucz1bXSksZS5pZkNvbmRpdGlvbnMucHVzaCh0KX1mdW5jdGlvbiB2YShlKXt2YXIgdD1lLm5hbWUucmVwbGFjZShpYSxcIlwiKTtyZXR1cm4gdHx8XCIjXCIhPT1lLm5hbWVbMF0mJih0PVwiZGVmYXVsdFwiKSxlYS50ZXN0KHQpP3tuYW1lOnQuc2xpY2UoMSwtMSksZHluYW1pYzohMH06e25hbWU6J1wiJyt0KydcIicsZHluYW1pYzohMX19ZnVuY3Rpb24gaGEoZSl7dmFyIHQ9ZS5tYXRjaChyYSk7aWYodCl7dmFyIG49e307cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbihlKXtuW2Uuc2xpY2UoMSldPSEwfSksbn19ZnVuY3Rpb24gbWEoZSl7Zm9yKHZhciB0PXt9LG49MCxyPWUubGVuZ3RoO248cjtuKyspdFtlW25dLm5hbWVdPWVbbl0udmFsdWU7cmV0dXJuIHR9dmFyIHlhPS9eeG1sbnM6TlNcXGQrLyxnYT0vXk5TXFxkKzovO2Z1bmN0aW9uIF9hKGUpe3JldHVybiB1YShlLnRhZyxlLmF0dHJzTGlzdC5zbGljZSgpLGUucGFyZW50KX12YXIgYmE9W21vLGdvLHtwcmVUcmFuc2Zvcm1Ob2RlOmZ1bmN0aW9uKGUsdCl7aWYoXCJpbnB1dFwiPT09ZS50YWcpe3ZhciBuLHI9ZS5hdHRyc01hcDtpZighcltcInYtbW9kZWxcIl0pcmV0dXJuO2lmKChyW1wiOnR5cGVcIl18fHJbXCJ2LWJpbmQ6dHlwZVwiXSkmJihuPUlyKGUsXCJ0eXBlXCIpKSxyLnR5cGV8fG58fCFyW1widi1iaW5kXCJdfHwobj1cIihcIityW1widi1iaW5kXCJdK1wiKS50eXBlXCIpLG4pe3ZhciBpPUZyKGUsXCJ2LWlmXCIsITApLG89aT9cIiYmKFwiK2krXCIpXCI6XCJcIixhPW51bGwhPUZyKGUsXCJ2LWVsc2VcIiwhMCkscz1GcihlLFwidi1lbHNlLWlmXCIsITApLGM9X2EoZSk7cGEoYyksanIoYyxcInR5cGVcIixcImNoZWNrYm94XCIpLGZhKGMsdCksYy5wcm9jZXNzZWQ9ITAsYy5pZj1cIihcIituK1wiKT09PSdjaGVja2JveCdcIitvLGRhKGMse2V4cDpjLmlmLGJsb2NrOmN9KTt2YXIgdT1fYShlKTtGcih1LFwidi1mb3JcIiwhMCksanIodSxcInR5cGVcIixcInJhZGlvXCIpLGZhKHUsdCksZGEoYyx7ZXhwOlwiKFwiK24rXCIpPT09J3JhZGlvJ1wiK28sYmxvY2s6dX0pO3ZhciBsPV9hKGUpO3JldHVybiBGcihsLFwidi1mb3JcIiwhMCksanIobCxcIjp0eXBlXCIsbiksZmEobCx0KSxkYShjLHtleHA6aSxibG9jazpsfSksYT9jLmVsc2U9ITA6cyYmKGMuZWxzZWlmPXMpLGN9fX19XTt2YXIgJGEsd2EsQ2E9e2V4cGVjdEhUTUw6ITAsbW9kdWxlczpiYSxkaXJlY3RpdmVzOnttb2RlbDpmdW5jdGlvbihlLHQsbil7dmFyIHI9dC52YWx1ZSxpPXQubW9kaWZpZXJzLG89ZS50YWcsYT1lLmF0dHJzTWFwLnR5cGU7aWYoZS5jb21wb25lbnQpcmV0dXJuIEhyKGUscixpKSwhMTtpZihcInNlbGVjdFwiPT09bykhZnVuY3Rpb24oZSx0LG4pe3ZhciByPSd2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KS5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFwiX3ZhbHVlXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtyZXR1cm4gJysobiYmbi5udW1iZXI/XCJfbih2YWwpXCI6XCJ2YWxcIikrXCJ9KTtcIjtyPXIrXCIgXCIrQnIodCxcIiRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXVwiKSxNcihlLFwiY2hhbmdlXCIscixudWxsLCEwKX0oZSxyLGkpO2Vsc2UgaWYoXCJpbnB1dFwiPT09byYmXCJjaGVja2JveFwiPT09YSkhZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4mJm4ubnVtYmVyLGk9SXIoZSxcInZhbHVlXCIpfHxcIm51bGxcIixvPUlyKGUsXCJ0cnVlLXZhbHVlXCIpfHxcInRydWVcIixhPUlyKGUsXCJmYWxzZS12YWx1ZVwiKXx8XCJmYWxzZVwiO0VyKGUsXCJjaGVja2VkXCIsXCJBcnJheS5pc0FycmF5KFwiK3QrXCIpP19pKFwiK3QrXCIsXCIraStcIik+LTFcIisoXCJ0cnVlXCI9PT1vP1wiOihcIit0K1wiKVwiOlwiOl9xKFwiK3QrXCIsXCIrbytcIilcIikpLE1yKGUsXCJjaGFuZ2VcIixcInZhciAkJGE9XCIrdCtcIiwkJGVsPSRldmVudC50YXJnZXQsJCRjPSQkZWwuY2hlY2tlZD8oXCIrbytcIik6KFwiK2ErXCIpO2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7dmFyICQkdj1cIisocj9cIl9uKFwiK2krXCIpXCI6aSkrXCIsJCRpPV9pKCQkYSwkJHYpO2lmKCQkZWwuY2hlY2tlZCl7JCRpPDAmJihcIitCcih0LFwiJCRhLmNvbmNhdChbJCR2XSlcIikrXCIpfWVsc2V7JCRpPi0xJiYoXCIrQnIodCxcIiQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpXCIpK1wiKX19ZWxzZXtcIitCcih0LFwiJCRjXCIpK1wifVwiLG51bGwsITApfShlLHIsaSk7ZWxzZSBpZihcImlucHV0XCI9PT1vJiZcInJhZGlvXCI9PT1hKSFmdW5jdGlvbihlLHQsbil7dmFyIHI9biYmbi5udW1iZXIsaT1JcihlLFwidmFsdWVcIil8fFwibnVsbFwiO0VyKGUsXCJjaGVja2VkXCIsXCJfcShcIit0K1wiLFwiKyhpPXI/XCJfbihcIitpK1wiKVwiOmkpK1wiKVwiKSxNcihlLFwiY2hhbmdlXCIsQnIodCxpKSxudWxsLCEwKX0oZSxyLGkpO2Vsc2UgaWYoXCJpbnB1dFwiPT09b3x8XCJ0ZXh0YXJlYVwiPT09bykhZnVuY3Rpb24oZSx0LG4pe3ZhciByPWUuYXR0cnNNYXAudHlwZSxpPW58fHt9LG89aS5sYXp5LGE9aS5udW1iZXIscz1pLnRyaW0sYz0hbyYmXCJyYW5nZVwiIT09cix1PW8/XCJjaGFuZ2VcIjpcInJhbmdlXCI9PT1yP1dyOlwiaW5wdXRcIixsPVwiJGV2ZW50LnRhcmdldC52YWx1ZVwiO3MmJihsPVwiJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKClcIiksYSYmKGw9XCJfbihcIitsK1wiKVwiKTt2YXIgZj1Ccih0LGwpO2MmJihmPVwiaWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuO1wiK2YpLEVyKGUsXCJ2YWx1ZVwiLFwiKFwiK3QrXCIpXCIpLE1yKGUsdSxmLG51bGwsITApLChzfHxhKSYmTXIoZSxcImJsdXJcIixcIiRmb3JjZVVwZGF0ZSgpXCIpfShlLHIsaSk7ZWxzZSBpZighRi5pc1Jlc2VydmVkVGFnKG8pKXJldHVybiBIcihlLHIsaSksITE7cmV0dXJuITB9LHRleHQ6ZnVuY3Rpb24oZSx0KXt0LnZhbHVlJiZFcihlLFwidGV4dENvbnRlbnRcIixcIl9zKFwiK3QudmFsdWUrXCIpXCIsdCl9LGh0bWw6ZnVuY3Rpb24oZSx0KXt0LnZhbHVlJiZFcihlLFwiaW5uZXJIVE1MXCIsXCJfcyhcIit0LnZhbHVlK1wiKVwiLHQpfX0saXNQcmVUYWc6ZnVuY3Rpb24oZSl7cmV0dXJuXCJwcmVcIj09PWV9LGlzVW5hcnlUYWc6Ym8sbXVzdFVzZVByb3A6am4sY2FuQmVMZWZ0T3BlblRhZzokbyxpc1Jlc2VydmVkVGFnOlduLGdldFRhZ05hbWVzcGFjZTpabixzdGF0aWNLZXlzOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlLmNvbmNhdCh0LnN0YXRpY0tleXN8fFtdKX0sW10pLmpvaW4oXCIsXCIpfShiYSl9LHhhPWcoZnVuY3Rpb24oZSl7cmV0dXJuIHAoXCJ0eXBlLHRhZyxhdHRyc0xpc3QsYXR0cnNNYXAscGxhaW4scGFyZW50LGNoaWxkcmVuLGF0dHJzLHN0YXJ0LGVuZCxyYXdBdHRyc01hcFwiKyhlP1wiLFwiK2U6XCJcIikpfSk7ZnVuY3Rpb24ga2EoZSx0KXtlJiYoJGE9eGEodC5zdGF0aWNLZXlzfHxcIlwiKSx3YT10LmlzUmVzZXJ2ZWRUYWd8fFQsZnVuY3Rpb24gZSh0KXt0LnN0YXRpYz1mdW5jdGlvbihlKXtpZigyPT09ZS50eXBlKXJldHVybiExO2lmKDM9PT1lLnR5cGUpcmV0dXJuITA7cmV0dXJuISghZS5wcmUmJihlLmhhc0JpbmRpbmdzfHxlLmlmfHxlLmZvcnx8ZChlLnRhZyl8fCF3YShlLnRhZyl8fGZ1bmN0aW9uKGUpe2Zvcig7ZS5wYXJlbnQ7KXtpZihcInRlbXBsYXRlXCIhPT0oZT1lLnBhcmVudCkudGFnKXJldHVybiExO2lmKGUuZm9yKXJldHVybiEwfXJldHVybiExfShlKXx8IU9iamVjdC5rZXlzKGUpLmV2ZXJ5KCRhKSkpfSh0KTtpZigxPT09dC50eXBlKXtpZighd2EodC50YWcpJiZcInNsb3RcIiE9PXQudGFnJiZudWxsPT10LmF0dHJzTWFwW1wiaW5saW5lLXRlbXBsYXRlXCJdKXJldHVybjtmb3IodmFyIG49MCxyPXQuY2hpbGRyZW4ubGVuZ3RoO248cjtuKyspe3ZhciBpPXQuY2hpbGRyZW5bbl07ZShpKSxpLnN0YXRpY3x8KHQuc3RhdGljPSExKX1pZih0LmlmQ29uZGl0aW9ucylmb3IodmFyIG89MSxhPXQuaWZDb25kaXRpb25zLmxlbmd0aDtvPGE7bysrKXt2YXIgcz10LmlmQ29uZGl0aW9uc1tvXS5ibG9jaztlKHMpLHMuc3RhdGljfHwodC5zdGF0aWM9ITEpfX19KGUpLGZ1bmN0aW9uIGUodCxuKXtpZigxPT09dC50eXBlKXtpZigodC5zdGF0aWN8fHQub25jZSkmJih0LnN0YXRpY0luRm9yPW4pLHQuc3RhdGljJiZ0LmNoaWxkcmVuLmxlbmd0aCYmKDEhPT10LmNoaWxkcmVuLmxlbmd0aHx8MyE9PXQuY2hpbGRyZW5bMF0udHlwZSkpcmV0dXJuIHZvaWQodC5zdGF0aWNSb290PSEwKTtpZih0LnN0YXRpY1Jvb3Q9ITEsdC5jaGlsZHJlbilmb3IodmFyIHI9MCxpPXQuY2hpbGRyZW4ubGVuZ3RoO3I8aTtyKyspZSh0LmNoaWxkcmVuW3JdLG58fCEhdC5mb3IpO2lmKHQuaWZDb25kaXRpb25zKWZvcih2YXIgbz0xLGE9dC5pZkNvbmRpdGlvbnMubGVuZ3RoO288YTtvKyspZSh0LmlmQ29uZGl0aW9uc1tvXS5ibG9jayxuKX19KGUsITEpKX12YXIgQWE9L14oW1xcdyRfXSt8XFwoW14pXSo/XFwpKVxccyo9PnxeZnVuY3Rpb25cXHMqKD86W1xcdyRdKyk/XFxzKlxcKC8sT2E9L1xcKFteKV0qP1xcKTsqJC8sU2E9L15bQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWydbXiddKj8nXXxcXFtcIlteXCJdKj9cIl18XFxbXFxkK118XFxbW0EtWmEtel8kXVtcXHckXSpdKSokLyxUYT17ZXNjOjI3LHRhYjo5LGVudGVyOjEzLHNwYWNlOjMyLHVwOjM4LGxlZnQ6MzcscmlnaHQ6MzksZG93bjo0MCxkZWxldGU6WzgsNDZdfSxFYT17ZXNjOltcIkVzY1wiLFwiRXNjYXBlXCJdLHRhYjpcIlRhYlwiLGVudGVyOlwiRW50ZXJcIixzcGFjZTpbXCIgXCIsXCJTcGFjZWJhclwiXSx1cDpbXCJVcFwiLFwiQXJyb3dVcFwiXSxsZWZ0OltcIkxlZnRcIixcIkFycm93TGVmdFwiXSxyaWdodDpbXCJSaWdodFwiLFwiQXJyb3dSaWdodFwiXSxkb3duOltcIkRvd25cIixcIkFycm93RG93blwiXSxkZWxldGU6W1wiQmFja3NwYWNlXCIsXCJEZWxldGVcIixcIkRlbFwiXX0sTmE9ZnVuY3Rpb24oZSl7cmV0dXJuXCJpZihcIitlK1wiKXJldHVybiBudWxsO1wifSxqYT17c3RvcDpcIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcIixwcmV2ZW50OlwiJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XCIsc2VsZjpOYShcIiRldmVudC50YXJnZXQgIT09ICRldmVudC5jdXJyZW50VGFyZ2V0XCIpLGN0cmw6TmEoXCIhJGV2ZW50LmN0cmxLZXlcIiksc2hpZnQ6TmEoXCIhJGV2ZW50LnNoaWZ0S2V5XCIpLGFsdDpOYShcIiEkZXZlbnQuYWx0S2V5XCIpLG1ldGE6TmEoXCIhJGV2ZW50Lm1ldGFLZXlcIiksbGVmdDpOYShcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAwXCIpLG1pZGRsZTpOYShcIididXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAxXCIpLHJpZ2h0Ok5hKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIil9O2Z1bmN0aW9uIERhKGUsdCl7dmFyIG49dD9cIm5hdGl2ZU9uOlwiOlwib246XCIscj1cIlwiLGk9XCJcIjtmb3IodmFyIG8gaW4gZSl7dmFyIGE9TGEoZVtvXSk7ZVtvXSYmZVtvXS5keW5hbWljP2krPW8rXCIsXCIrYStcIixcIjpyKz0nXCInK28rJ1wiOicrYStcIixcIn1yZXR1cm4gcj1cIntcIityLnNsaWNlKDAsLTEpK1wifVwiLGk/bitcIl9kKFwiK3IrXCIsW1wiK2kuc2xpY2UoMCwtMSkrXCJdKVwiOm4rcn1mdW5jdGlvbiBMYShlKXtpZighZSlyZXR1cm5cImZ1bmN0aW9uKCl7fVwiO2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuXCJbXCIrZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIExhKGUpfSkuam9pbihcIixcIikrXCJdXCI7dmFyIHQ9U2EudGVzdChlLnZhbHVlKSxuPUFhLnRlc3QoZS52YWx1ZSkscj1TYS50ZXN0KGUudmFsdWUucmVwbGFjZShPYSxcIlwiKSk7aWYoZS5tb2RpZmllcnMpe3ZhciBpPVwiXCIsbz1cIlwiLGE9W107Zm9yKHZhciBzIGluIGUubW9kaWZpZXJzKWlmKGphW3NdKW8rPWphW3NdLFRhW3NdJiZhLnB1c2gocyk7ZWxzZSBpZihcImV4YWN0XCI9PT1zKXt2YXIgYz1lLm1vZGlmaWVycztvKz1OYShbXCJjdHJsXCIsXCJzaGlmdFwiLFwiYWx0XCIsXCJtZXRhXCJdLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hY1tlXX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cIiRldmVudC5cIitlK1wiS2V5XCJ9KS5qb2luKFwifHxcIikpfWVsc2UgYS5wdXNoKHMpO3JldHVybiBhLmxlbmd0aCYmKGkrPWZ1bmN0aW9uKGUpe3JldHVyblwiaWYoISRldmVudC50eXBlLmluZGV4T2YoJ2tleScpJiZcIitlLm1hcChNYSkuam9pbihcIiYmXCIpK1wiKXJldHVybiBudWxsO1wifShhKSksbyYmKGkrPW8pLFwiZnVuY3Rpb24oJGV2ZW50KXtcIitpKyh0P1wicmV0dXJuIFwiK2UudmFsdWUrXCIoJGV2ZW50KVwiOm4/XCJyZXR1cm4gKFwiK2UudmFsdWUrXCIpKCRldmVudClcIjpyP1wicmV0dXJuIFwiK2UudmFsdWU6ZS52YWx1ZSkrXCJ9XCJ9cmV0dXJuIHR8fG4/ZS52YWx1ZTpcImZ1bmN0aW9uKCRldmVudCl7XCIrKHI/XCJyZXR1cm4gXCIrZS52YWx1ZTplLnZhbHVlKStcIn1cIn1mdW5jdGlvbiBNYShlKXt2YXIgdD1wYXJzZUludChlLDEwKTtpZih0KXJldHVyblwiJGV2ZW50LmtleUNvZGUhPT1cIit0O3ZhciBuPVRhW2VdLHI9RWFbZV07cmV0dXJuXCJfaygkZXZlbnQua2V5Q29kZSxcIitKU09OLnN0cmluZ2lmeShlKStcIixcIitKU09OLnN0cmluZ2lmeShuKStcIiwkZXZlbnQua2V5LFwiK0pTT04uc3RyaW5naWZ5KHIpK1wiKVwifXZhciBJYT17b246ZnVuY3Rpb24oZSx0KXtlLndyYXBMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuXCJfZyhcIitlK1wiLFwiK3QudmFsdWUrXCIpXCJ9fSxiaW5kOmZ1bmN0aW9uKGUsdCl7ZS53cmFwRGF0YT1mdW5jdGlvbihuKXtyZXR1cm5cIl9iKFwiK24rXCIsJ1wiK2UudGFnK1wiJyxcIit0LnZhbHVlK1wiLFwiKyh0Lm1vZGlmaWVycyYmdC5tb2RpZmllcnMucHJvcD9cInRydWVcIjpcImZhbHNlXCIpKyh0Lm1vZGlmaWVycyYmdC5tb2RpZmllcnMuc3luYz9cIix0cnVlXCI6XCJcIikrXCIpXCJ9fSxjbG9hazpTfSxGYT1mdW5jdGlvbihlKXt0aGlzLm9wdGlvbnM9ZSx0aGlzLndhcm49ZS53YXJufHxTcix0aGlzLnRyYW5zZm9ybXM9VHIoZS5tb2R1bGVzLFwidHJhbnNmb3JtQ29kZVwiKSx0aGlzLmRhdGFHZW5GbnM9VHIoZS5tb2R1bGVzLFwiZ2VuRGF0YVwiKSx0aGlzLmRpcmVjdGl2ZXM9QShBKHt9LElhKSxlLmRpcmVjdGl2ZXMpO3ZhciB0PWUuaXNSZXNlcnZlZFRhZ3x8VDt0aGlzLm1heWJlQ29tcG9uZW50PWZ1bmN0aW9uKGUpe3JldHVybiEhZS5jb21wb25lbnR8fCF0KGUudGFnKX0sdGhpcy5vbmNlSWQ9MCx0aGlzLnN0YXRpY1JlbmRlckZucz1bXSx0aGlzLnByZT0hMX07ZnVuY3Rpb24gUGEoZSx0KXt2YXIgbj1uZXcgRmEodCk7cmV0dXJue3JlbmRlcjpcIndpdGgodGhpcyl7cmV0dXJuIFwiKyhlP1JhKGUsbik6J19jKFwiZGl2XCIpJykrXCJ9XCIsc3RhdGljUmVuZGVyRm5zOm4uc3RhdGljUmVuZGVyRm5zfX1mdW5jdGlvbiBSYShlLHQpe2lmKGUucGFyZW50JiYoZS5wcmU9ZS5wcmV8fGUucGFyZW50LnByZSksZS5zdGF0aWNSb290JiYhZS5zdGF0aWNQcm9jZXNzZWQpcmV0dXJuIEhhKGUsdCk7aWYoZS5vbmNlJiYhZS5vbmNlUHJvY2Vzc2VkKXJldHVybiBCYShlLHQpO2lmKGUuZm9yJiYhZS5mb3JQcm9jZXNzZWQpcmV0dXJuIHphKGUsdCk7aWYoZS5pZiYmIWUuaWZQcm9jZXNzZWQpcmV0dXJuIFVhKGUsdCk7aWYoXCJ0ZW1wbGF0ZVwiIT09ZS50YWd8fGUuc2xvdFRhcmdldHx8dC5wcmUpe2lmKFwic2xvdFwiPT09ZS50YWcpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5zbG90TmFtZXx8J1wiZGVmYXVsdFwiJyxyPXFhKGUsdCksaT1cIl90KFwiK24rKHI/XCIsXCIrcjpcIlwiKSxvPWUuYXR0cnN8fGUuZHluYW1pY0F0dHJzP0dhKChlLmF0dHJzfHxbXSkuY29uY2F0KGUuZHluYW1pY0F0dHJzfHxbXSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOmIoZS5uYW1lKSx2YWx1ZTplLnZhbHVlLGR5bmFtaWM6ZS5keW5hbWljfX0pKTpudWxsLGE9ZS5hdHRyc01hcFtcInYtYmluZFwiXTshbyYmIWF8fHJ8fChpKz1cIixudWxsXCIpO28mJihpKz1cIixcIitvKTthJiYoaSs9KG8/XCJcIjpcIixudWxsXCIpK1wiLFwiK2EpO3JldHVybiBpK1wiKVwifShlLHQpO3ZhciBuO2lmKGUuY29tcG9uZW50KW49ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQuaW5saW5lVGVtcGxhdGU/bnVsbDpxYSh0LG4sITApO3JldHVyblwiX2MoXCIrZStcIixcIitWYSh0LG4pKyhyP1wiLFwiK3I6XCJcIikrXCIpXCJ9KGUuY29tcG9uZW50LGUsdCk7ZWxzZXt2YXIgcjsoIWUucGxhaW58fGUucHJlJiZ0Lm1heWJlQ29tcG9uZW50KGUpKSYmKHI9VmEoZSx0KSk7dmFyIGk9ZS5pbmxpbmVUZW1wbGF0ZT9udWxsOnFhKGUsdCwhMCk7bj1cIl9jKCdcIitlLnRhZytcIidcIisocj9cIixcIityOlwiXCIpKyhpP1wiLFwiK2k6XCJcIikrXCIpXCJ9Zm9yKHZhciBvPTA7bzx0LnRyYW5zZm9ybXMubGVuZ3RoO28rKyluPXQudHJhbnNmb3Jtc1tvXShlLG4pO3JldHVybiBufXJldHVybiBxYShlLHQpfHxcInZvaWQgMFwifWZ1bmN0aW9uIEhhKGUsdCl7ZS5zdGF0aWNQcm9jZXNzZWQ9ITA7dmFyIG49dC5wcmU7cmV0dXJuIGUucHJlJiYodC5wcmU9ZS5wcmUpLHQuc3RhdGljUmVuZGVyRm5zLnB1c2goXCJ3aXRoKHRoaXMpe3JldHVybiBcIitSYShlLHQpK1wifVwiKSx0LnByZT1uLFwiX20oXCIrKHQuc3RhdGljUmVuZGVyRm5zLmxlbmd0aC0xKSsoZS5zdGF0aWNJbkZvcj9cIix0cnVlXCI6XCJcIikrXCIpXCJ9ZnVuY3Rpb24gQmEoZSx0KXtpZihlLm9uY2VQcm9jZXNzZWQ9ITAsZS5pZiYmIWUuaWZQcm9jZXNzZWQpcmV0dXJuIFVhKGUsdCk7aWYoZS5zdGF0aWNJbkZvcil7Zm9yKHZhciBuPVwiXCIscj1lLnBhcmVudDtyOyl7aWYoci5mb3Ipe249ci5rZXk7YnJlYWt9cj1yLnBhcmVudH1yZXR1cm4gbj9cIl9vKFwiK1JhKGUsdCkrXCIsXCIrdC5vbmNlSWQrKytcIixcIituK1wiKVwiOlJhKGUsdCl9cmV0dXJuIEhhKGUsdCl9ZnVuY3Rpb24gVWEoZSx0LG4scil7cmV0dXJuIGUuaWZQcm9jZXNzZWQ9ITAsZnVuY3Rpb24gZSh0LG4scixpKXtpZighdC5sZW5ndGgpcmV0dXJuIGl8fFwiX2UoKVwiO3ZhciBvPXQuc2hpZnQoKTtyZXR1cm4gby5leHA/XCIoXCIrby5leHArXCIpP1wiK2Eoby5ibG9jaykrXCI6XCIrZSh0LG4scixpKTpcIlwiK2Eoby5ibG9jayk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gcj9yKGUsbik6ZS5vbmNlP0JhKGUsbik6UmEoZSxuKX19KGUuaWZDb25kaXRpb25zLnNsaWNlKCksdCxuLHIpfWZ1bmN0aW9uIHphKGUsdCxuLHIpe3ZhciBpPWUuZm9yLG89ZS5hbGlhcyxhPWUuaXRlcmF0b3IxP1wiLFwiK2UuaXRlcmF0b3IxOlwiXCIscz1lLml0ZXJhdG9yMj9cIixcIitlLml0ZXJhdG9yMjpcIlwiO3JldHVybiBlLmZvclByb2Nlc3NlZD0hMCwocnx8XCJfbFwiKStcIigoXCIraStcIiksZnVuY3Rpb24oXCIrbythK3MrXCIpe3JldHVybiBcIisobnx8UmEpKGUsdCkrXCJ9KVwifWZ1bmN0aW9uIFZhKGUsdCl7dmFyIG49XCJ7XCIscj1mdW5jdGlvbihlLHQpe3ZhciBuPWUuZGlyZWN0aXZlcztpZighbilyZXR1cm47dmFyIHIsaSxvLGEscz1cImRpcmVjdGl2ZXM6W1wiLGM9ITE7Zm9yKHI9MCxpPW4ubGVuZ3RoO3I8aTtyKyspe289bltyXSxhPSEwO3ZhciB1PXQuZGlyZWN0aXZlc1tvLm5hbWVdO3UmJihhPSEhdShlLG8sdC53YXJuKSksYSYmKGM9ITAscys9J3tuYW1lOlwiJytvLm5hbWUrJ1wiLHJhd05hbWU6XCInK28ucmF3TmFtZSsnXCInKyhvLnZhbHVlP1wiLHZhbHVlOihcIitvLnZhbHVlK1wiKSxleHByZXNzaW9uOlwiK0pTT04uc3RyaW5naWZ5KG8udmFsdWUpOlwiXCIpKyhvLmFyZz9cIixhcmc6XCIrKG8uaXNEeW5hbWljQXJnP28uYXJnOidcIicrby5hcmcrJ1wiJyk6XCJcIikrKG8ubW9kaWZpZXJzP1wiLG1vZGlmaWVyczpcIitKU09OLnN0cmluZ2lmeShvLm1vZGlmaWVycyk6XCJcIikrXCJ9LFwiKX1pZihjKXJldHVybiBzLnNsaWNlKDAsLTEpK1wiXVwifShlLHQpO3ImJihuKz1yK1wiLFwiKSxlLmtleSYmKG4rPVwia2V5OlwiK2Uua2V5K1wiLFwiKSxlLnJlZiYmKG4rPVwicmVmOlwiK2UucmVmK1wiLFwiKSxlLnJlZkluRm9yJiYobis9XCJyZWZJbkZvcjp0cnVlLFwiKSxlLnByZSYmKG4rPVwicHJlOnRydWUsXCIpLGUuY29tcG9uZW50JiYobis9J3RhZzpcIicrZS50YWcrJ1wiLCcpO2Zvcih2YXIgaT0wO2k8dC5kYXRhR2VuRm5zLmxlbmd0aDtpKyspbis9dC5kYXRhR2VuRm5zW2ldKGUpO2lmKGUuYXR0cnMmJihuKz1cImF0dHJzOlwiK0dhKGUuYXR0cnMpK1wiLFwiKSxlLnByb3BzJiYobis9XCJkb21Qcm9wczpcIitHYShlLnByb3BzKStcIixcIiksZS5ldmVudHMmJihuKz1EYShlLmV2ZW50cywhMSkrXCIsXCIpLGUubmF0aXZlRXZlbnRzJiYobis9RGEoZS5uYXRpdmVFdmVudHMsITApK1wiLFwiKSxlLnNsb3RUYXJnZXQmJiFlLnNsb3RTY29wZSYmKG4rPVwic2xvdDpcIitlLnNsb3RUYXJnZXQrXCIsXCIpLGUuc2NvcGVkU2xvdHMmJihuKz1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZS5mb3J8fE9iamVjdC5rZXlzKHQpLnNvbWUoZnVuY3Rpb24oZSl7dmFyIG49dFtlXTtyZXR1cm4gbi5zbG90VGFyZ2V0RHluYW1pY3x8bi5pZnx8bi5mb3J8fEthKG4pfSksaT0hIWUuaWY7aWYoIXIpZm9yKHZhciBvPWUucGFyZW50O287KXtpZihvLnNsb3RTY29wZSYmby5zbG90U2NvcGUhPT1jYXx8by5mb3Ipe3I9ITA7YnJlYWt9by5pZiYmKGk9ITApLG89by5wYXJlbnR9dmFyIGE9T2JqZWN0LmtleXModCkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBKYSh0W2VdLG4pfSkuam9pbihcIixcIik7cmV0dXJuXCJzY29wZWRTbG90czpfdShbXCIrYStcIl1cIisocj9cIixudWxsLHRydWVcIjpcIlwiKSsoIXImJmk/XCIsbnVsbCxmYWxzZSxcIitmdW5jdGlvbihlKXt2YXIgdD01MzgxLG49ZS5sZW5ndGg7Zm9yKDtuOyl0PTMzKnReZS5jaGFyQ29kZUF0KC0tbik7cmV0dXJuIHQ+Pj4wfShhKTpcIlwiKStcIilcIn0oZSxlLnNjb3BlZFNsb3RzLHQpK1wiLFwiKSxlLm1vZGVsJiYobis9XCJtb2RlbDp7dmFsdWU6XCIrZS5tb2RlbC52YWx1ZStcIixjYWxsYmFjazpcIitlLm1vZGVsLmNhbGxiYWNrK1wiLGV4cHJlc3Npb246XCIrZS5tb2RlbC5leHByZXNzaW9uK1wifSxcIiksZS5pbmxpbmVUZW1wbGF0ZSl7dmFyIG89ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNoaWxkcmVuWzBdO2lmKG4mJjE9PT1uLnR5cGUpe3ZhciByPVBhKG4sdC5vcHRpb25zKTtyZXR1cm5cImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIityLnJlbmRlcitcIn0sc3RhdGljUmVuZGVyRm5zOltcIityLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvbigpe1wiK2UrXCJ9XCJ9KS5qb2luKFwiLFwiKStcIl19XCJ9fShlLHQpO28mJihuKz1vK1wiLFwiKX1yZXR1cm4gbj1uLnJlcGxhY2UoLywkLyxcIlwiKStcIn1cIixlLmR5bmFtaWNBdHRycyYmKG49XCJfYihcIituKycsXCInK2UudGFnKydcIiwnK0dhKGUuZHluYW1pY0F0dHJzKStcIilcIiksZS53cmFwRGF0YSYmKG49ZS53cmFwRGF0YShuKSksZS53cmFwTGlzdGVuZXJzJiYobj1lLndyYXBMaXN0ZW5lcnMobikpLG59ZnVuY3Rpb24gS2EoZSl7cmV0dXJuIDE9PT1lLnR5cGUmJihcInNsb3RcIj09PWUudGFnfHxlLmNoaWxkcmVuLnNvbWUoS2EpKX1mdW5jdGlvbiBKYShlLHQpe3ZhciBuPWUuYXR0cnNNYXBbXCJzbG90LXNjb3BlXCJdO2lmKGUuaWYmJiFlLmlmUHJvY2Vzc2VkJiYhbilyZXR1cm4gVWEoZSx0LEphLFwibnVsbFwiKTtpZihlLmZvciYmIWUuZm9yUHJvY2Vzc2VkKXJldHVybiB6YShlLHQsSmEpO3ZhciByPWUuc2xvdFNjb3BlPT09Y2E/XCJcIjpTdHJpbmcoZS5zbG90U2NvcGUpLGk9XCJmdW5jdGlvbihcIityK1wiKXtyZXR1cm4gXCIrKFwidGVtcGxhdGVcIj09PWUudGFnP2UuaWYmJm4/XCIoXCIrZS5pZitcIik/XCIrKHFhKGUsdCl8fFwidW5kZWZpbmVkXCIpK1wiOnVuZGVmaW5lZFwiOnFhKGUsdCl8fFwidW5kZWZpbmVkXCI6UmEoZSx0KSkrXCJ9XCIsbz1yP1wiXCI6XCIscHJveHk6dHJ1ZVwiO3JldHVyblwie2tleTpcIisoZS5zbG90VGFyZ2V0fHwnXCJkZWZhdWx0XCInKStcIixmbjpcIitpK28rXCJ9XCJ9ZnVuY3Rpb24gcWEoZSx0LG4scixpKXt2YXIgbz1lLmNoaWxkcmVuO2lmKG8ubGVuZ3RoKXt2YXIgYT1vWzBdO2lmKDE9PT1vLmxlbmd0aCYmYS5mb3ImJlwidGVtcGxhdGVcIiE9PWEudGFnJiZcInNsb3RcIiE9PWEudGFnKXt2YXIgcz1uP3QubWF5YmVDb21wb25lbnQoYSk/XCIsMVwiOlwiLDBcIjpcIlwiO3JldHVyblwiXCIrKHJ8fFJhKShhLHQpK3N9dmFyIGM9bj9mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIGk9ZVtyXTtpZigxPT09aS50eXBlKXtpZihXYShpKXx8aS5pZkNvbmRpdGlvbnMmJmkuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIFdhKGUuYmxvY2spfSkpe249MjticmVha30odChpKXx8aS5pZkNvbmRpdGlvbnMmJmkuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIHQoZS5ibG9jayl9KSkmJihuPTEpfX1yZXR1cm4gbn0obyx0Lm1heWJlQ29tcG9uZW50KTowLHU9aXx8WmE7cmV0dXJuXCJbXCIrby5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHUoZSx0KX0pLmpvaW4oXCIsXCIpK1wiXVwiKyhjP1wiLFwiK2M6XCJcIil9fWZ1bmN0aW9uIFdhKGUpe3JldHVybiB2b2lkIDAhPT1lLmZvcnx8XCJ0ZW1wbGF0ZVwiPT09ZS50YWd8fFwic2xvdFwiPT09ZS50YWd9ZnVuY3Rpb24gWmEoZSx0KXtyZXR1cm4gMT09PWUudHlwZT9SYShlLHQpOjM9PT1lLnR5cGUmJmUuaXNDb21tZW50PyhyPWUsXCJfZShcIitKU09OLnN0cmluZ2lmeShyLnRleHQpK1wiKVwiKTpcIl92KFwiKygyPT09KG49ZSkudHlwZT9uLmV4cHJlc3Npb246WGEoSlNPTi5zdHJpbmdpZnkobi50ZXh0KSkpK1wiKVwiO3ZhciBuLHJ9ZnVuY3Rpb24gR2EoZSl7Zm9yKHZhciB0PVwiXCIsbj1cIlwiLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIGk9ZVtyXSxvPVhhKGkudmFsdWUpO2kuZHluYW1pYz9uKz1pLm5hbWUrXCIsXCIrbytcIixcIjp0Kz0nXCInK2kubmFtZSsnXCI6JytvK1wiLFwifXJldHVybiB0PVwie1wiK3Quc2xpY2UoMCwtMSkrXCJ9XCIsbj9cIl9kKFwiK3QrXCIsW1wiK24uc2xpY2UoMCwtMSkrXCJdKVwiOnR9ZnVuY3Rpb24gWGEoZSl7cmV0dXJuIGUucmVwbGFjZSgvXFx1MjAyOC9nLFwiXFxcXHUyMDI4XCIpLnJlcGxhY2UoL1xcdTIwMjkvZyxcIlxcXFx1MjAyOVwiKX1uZXcgUmVnRXhwKFwiXFxcXGJcIitcImRvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3Qsc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LGV4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHNcIi5zcGxpdChcIixcIikuam9pbihcIlxcXFxifFxcXFxiXCIpK1wiXFxcXGJcIik7ZnVuY3Rpb24gWWEoZSx0KXt0cnl7cmV0dXJuIG5ldyBGdW5jdGlvbihlKX1jYXRjaChuKXtyZXR1cm4gdC5wdXNoKHtlcnI6bixjb2RlOmV9KSxTfX1mdW5jdGlvbiBRYShlKXt2YXIgdD1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBmdW5jdGlvbihuLHIsaSl7KHI9QSh7fSxyKSkud2FybjtkZWxldGUgci53YXJuO3ZhciBvPXIuZGVsaW1pdGVycz9TdHJpbmcoci5kZWxpbWl0ZXJzKStuOm47aWYodFtvXSlyZXR1cm4gdFtvXTt2YXIgYT1lKG4scikscz17fSxjPVtdO3JldHVybiBzLnJlbmRlcj1ZYShhLnJlbmRlcixjKSxzLnN0YXRpY1JlbmRlckZucz1hLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIFlhKGUsYyl9KSx0W29dPXN9fXZhciBlcyx0cyxucz0oZXM9ZnVuY3Rpb24oZSx0KXt2YXIgbj1sYShlLnRyaW0oKSx0KTshMSE9PXQub3B0aW1pemUmJmthKG4sdCk7dmFyIHI9UGEobix0KTtyZXR1cm57YXN0Om4scmVuZGVyOnIucmVuZGVyLHN0YXRpY1JlbmRlckZuczpyLnN0YXRpY1JlbmRlckZuc319LGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXt2YXIgcj1PYmplY3QuY3JlYXRlKGUpLGk9W10sbz1bXTtpZihuKWZvcih2YXIgYSBpbiBuLm1vZHVsZXMmJihyLm1vZHVsZXM9KGUubW9kdWxlc3x8W10pLmNvbmNhdChuLm1vZHVsZXMpKSxuLmRpcmVjdGl2ZXMmJihyLmRpcmVjdGl2ZXM9QShPYmplY3QuY3JlYXRlKGUuZGlyZWN0aXZlc3x8bnVsbCksbi5kaXJlY3RpdmVzKSksbilcIm1vZHVsZXNcIiE9PWEmJlwiZGlyZWN0aXZlc1wiIT09YSYmKHJbYV09blthXSk7ci53YXJuPWZ1bmN0aW9uKGUsdCxuKXsobj9vOmkpLnB1c2goZSl9O3ZhciBzPWVzKHQudHJpbSgpLHIpO3JldHVybiBzLmVycm9ycz1pLHMudGlwcz1vLHN9cmV0dXJue2NvbXBpbGU6dCxjb21waWxlVG9GdW5jdGlvbnM6UWEodCl9fSkoQ2EpLHJzPShucy5jb21waWxlLG5zLmNvbXBpbGVUb0Z1bmN0aW9ucyk7ZnVuY3Rpb24gaXMoZSl7cmV0dXJuKHRzPXRzfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKS5pbm5lckhUTUw9ZT8nPGEgaHJlZj1cIlxcblwiLz4nOic8ZGl2IGE9XCJcXG5cIi8+Jyx0cy5pbm5lckhUTUwuaW5kZXhPZihcIiYjMTA7XCIpPjB9dmFyIG9zPSEheiYmaXMoITEpLGFzPSEheiYmaXMoITApLHNzPWcoZnVuY3Rpb24oZSl7dmFyIHQ9WW4oZSk7cmV0dXJuIHQmJnQuaW5uZXJIVE1MfSksY3M9d24ucHJvdG90eXBlLiRtb3VudDt3bi5wcm90b3R5cGUuJG1vdW50PWZ1bmN0aW9uKGUsdCl7aWYoKGU9ZSYmWW4oZSkpPT09ZG9jdW1lbnQuYm9keXx8ZT09PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudClyZXR1cm4gdGhpczt2YXIgbj10aGlzLiRvcHRpb25zO2lmKCFuLnJlbmRlcil7dmFyIHI9bi50ZW1wbGF0ZTtpZihyKWlmKFwic3RyaW5nXCI9PXR5cGVvZiByKVwiI1wiPT09ci5jaGFyQXQoMCkmJihyPXNzKHIpKTtlbHNle2lmKCFyLm5vZGVUeXBlKXJldHVybiB0aGlzO3I9ci5pbm5lckhUTUx9ZWxzZSBlJiYocj1mdW5jdGlvbihlKXtpZihlLm91dGVySFRNTClyZXR1cm4gZS5vdXRlckhUTUw7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gdC5hcHBlbmRDaGlsZChlLmNsb25lTm9kZSghMCkpLHQuaW5uZXJIVE1MfShlKSk7aWYocil7dmFyIGk9cnMocix7b3V0cHV0U291cmNlUmFuZ2U6ITEsc2hvdWxkRGVjb2RlTmV3bGluZXM6b3Msc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOmFzLGRlbGltaXRlcnM6bi5kZWxpbWl0ZXJzLGNvbW1lbnRzOm4uY29tbWVudHN9LHRoaXMpLG89aS5yZW5kZXIsYT1pLnN0YXRpY1JlbmRlckZucztuLnJlbmRlcj1vLG4uc3RhdGljUmVuZGVyRm5zPWF9fXJldHVybiBjcy5jYWxsKHRoaXMsZSx0KX0sd24uY29tcGlsZT1ycyxtb2R1bGUuZXhwb3J0cz13bjsiLCJjb25zdCBWdWUgPSByZXF1aXJlKFwidnVlL2Rpc3QvdnVlLmNvbW1vblwiKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZShcImF4aW9zXCIpO1xuXG52YXIgYXBwID0gbmV3IFZ1ZSh7XG4gICAgZGF0YToge1xuICAgICAgICB1c2VyaW5mbzoge1xuICAgICAgICAgICAgdXNlcm5hbWU6IFwiXCIsXG4gICAgICAgICAgICBkZXZpY2VuYW1lOiBcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIGxvZ2dlZF9pbjogZmFsc2UsXG4gICAgICAgIHJlZ2lzdGVyZWQ6IGZhbHNlXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGxvZ291dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIWNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbG9nIG91dD8gRG9uJ3QgZm9yZ2V0IHRvIHJlbW92ZSB0aGUgZGV2aWNlIG5hbWUgZnJvbSB5b3VyIGFjY291bnQgaWYgeW91J3JlIHBsYW5uaW5nIG9uIHVzaW5nIGl0IGFnYWluLCBsYXRlci5cIikpIHJldHVybjtcblxuICAgICAgICAgICAgYXhpb3MucG9zdChcIi9hcGkvbG9nb3V0XCIpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gXCIvXCI7IC8vcmVkaXJlY3QgdG8gaW5kZXgsIHNvIHRoZSBzZXJ2ZXIgY2FuIG1ha2UgYSBkZXNjaXNpb24gb2Ygd2hlcmUgdG8gZ28gbmV4dFxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBheGlvcy5nZXQoXCIvYXBpL3VzZXJpbmZvXCIpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgICB0aGlzLnVzZXJpbmZvLnVzZXJuYW1lID0gcmVzcC5kYXRhLnVzZXJuYW1lO1xuICAgICAgICAgICAgdGhpcy51c2VyaW5mby5kZXZpY2VuYW1lID0gcmVzcC5kYXRhLmRldmljZW5hbWU7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlZF9pbiA9IHJlc3AuZGF0YS5sb2dnZWRpbjtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJlZCA9IHJlc3AuZGF0YS5yZWdpc3RlcmVkO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uKCkge1xuICAgIGFwcC4kbW91bnQoXCJtYWluXCIpO1xufSk7Il0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YVc1a1pYZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMkZrWVhCMFpYSnpMM2hvY2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aGVHbHZjeTlzYVdJdllYaHBiM011YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WVhocGIzTXZiR2xpTDJOaGJtTmxiQzlEWVc1alpXd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMk5oYm1ObGJDOURZVzVqWld4VWIydGxiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2WTJGdVkyVnNMMmx6UTJGdVkyVnNMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkY0YVc5ekwyeHBZaTlqYjNKbEwwRjRhVzl6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5amIzSmxMMGx1ZEdWeVkyVndkRzl5VFdGdVlXZGxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2WTI5eVpTOWpjbVZoZEdWRmNuSnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2WTI5eVpTOWthWE53WVhSamFGSmxjWFZsYzNRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YkdsaUwyTnZjbVV2Wlc1b1lXNWpaVVZ5Y205eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOWpiM0psTDNObGRIUnNaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2WTI5eVpTOTBjbUZ1YzJadmNtMUVZWFJoTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5a1pXWmhkV3gwY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aGVHbHZjeTlzYVdJdmFHVnNjR1Z5Y3k5aWFXNWtMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkY0YVc5ekwyeHBZaTlvWld4d1pYSnpMMkowYjJFdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YkdsaUwyaGxiSEJsY25NdlluVnBiR1JWVWt3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YkdsaUwyaGxiSEJsY25NdlkyOXRZbWx1WlZWU1RITXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMmhsYkhCbGNuTXZZMjl2YTJsbGN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWhlR2x2Y3k5c2FXSXZhR1ZzY0dWeWN5OXBjMEZpYzI5c2RYUmxWVkpNTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5b1pXeHdaWEp6TDJselZWSk1VMkZ0WlU5eWFXZHBiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2YUdWc2NHVnljeTl1YjNKdFlXeHBlbVZJWldGa1pYSk9ZVzFsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5b1pXeHdaWEp6TDNCaGNuTmxTR1ZoWkdWeWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWhlR2x2Y3k5c2FXSXZhR1ZzY0dWeWN5OXpjSEpsWVdRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YkdsaUwzVjBhV3h6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJsekxXSjFabVpsY2k5cGJtUmxlQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTl3Y205alpYTnpMMkp5YjNkelpYSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZkR2x0WlhKekxXSnliM2R6WlhKcFpua3ZiV0ZwYmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5MmRXVXZaR2x6ZEM5MmRXVXVZMjl0Ylc5dUxtUmxkaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTkyZFdVdlpHbHpkQzkyZFdVdVkyOXRiVzl1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDNaMVpTOWthWE4wTDNaMVpTNWpiMjF0YjI0dWNISnZaQzVxY3lJc0luTnlZeTlxY3k5a2IyNWxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkRRVUU3T3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRGNFeEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BFUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU12UlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTndSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU4wUmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVTndRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5vUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMWhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzQkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5zUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnlSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTndSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNKRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU16UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETDFOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzSkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVTjRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TzBGRE0wVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN08wRkRiSEZZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN1FVTk1RU3hKUVVGTkxFMUJRVTBzVVVGQlVTeHhRa0ZCVWl4RFFVRmFPMEZCUTBFc1NVRkJUU3hSUVVGUkxGRkJRVkVzVDBGQlVpeERRVUZrT3p0QlFVVkJMRWxCUVVrc1RVRkJUU3hKUVVGSkxFZEJRVW9zUTBGQlVUdEJRVU5rTEZWQlFVMDdRVUZEUml4clFrRkJWVHRCUVVOT0xITkNRVUZWTEVWQlJFbzdRVUZGVGl4M1FrRkJXVHRCUVVaT0xGTkJSRkk3UVVGTFJpeHRRa0ZCVnl4TFFVeFVPMEZCVFVZc2IwSkJRVms3UVVGT1ZpeExRVVJSTzBGQlUyUXNZVUZCVXp0QlFVTk1MR2RDUVVGUkxHdENRVUZYTzBGQlEyWXNaMEpCUVVrc1EwRkJReXhSUVVGUkxIbEpRVUZTTEVOQlFVd3NSVUZCZVVvN08wRkJSWHBLTEd0Q1FVRk5MRWxCUVU0c1EwRkJWeXhoUVVGWUxFVkJRVEJDTEVsQlFURkNMRU5CUVN0Q0xHZENRVUZSTzBGQlEyNURMSFZDUVVGUExGRkJRVkFzUjBGQmEwSXNSMEZCYkVJc1EwRkViVU1zUTBGRFdqdEJRVU14UWl4aFFVWkVMRVZCUlVjc1MwRkdTQ3hEUVVWVExHVkJRVTg3UVVGRFdpeDNRa0ZCVVN4SFFVRlNMRU5CUVZrc1IwRkJXanRCUVVOSUxHRkJTa1E3UVVGTFNEdEJRVlJKTEV0QlZFczdRVUZ2UW1Rc1lVRkJVeXh0UWtGQlZ6dEJRVUZCT3p0QlFVTm9RaXhqUVVGTkxFZEJRVTRzUTBGQlZTeGxRVUZXTEVWQlFUSkNMRWxCUVROQ0xFTkJRV2RETEdkQ1FVRlJPMEZCUTNCRExHdENRVUZMTEZGQlFVd3NRMEZCWXl4UlFVRmtMRWRCUVhsQ0xFdEJRVXNzU1VGQlRDeERRVUZWTEZGQlFXNURPMEZCUTBFc2EwSkJRVXNzVVVGQlRDeERRVUZqTEZWQlFXUXNSMEZCTWtJc1MwRkJTeXhKUVVGTUxFTkJRVlVzVlVGQmNrTTdRVUZEUVN4clFrRkJTeXhUUVVGTUxFZEJRV2xDTEV0QlFVc3NTVUZCVEN4RFFVRlZMRkZCUVROQ08wRkJRMEVzYTBKQlFVc3NWVUZCVEN4SFFVRnJRaXhMUVVGTExFbEJRVXdzUTBGQlZTeFZRVUUxUWp0QlFVTklMRk5CVEVRN1FVRk5TRHRCUVROQ1lTeERRVUZTTEVOQlFWWTdPMEZCT0VKQkxFOUJRVThzWjBKQlFWQXNRMEZCZDBJc2EwSkJRWGhDTEVWQlFUUkRMRmxCUVZjN1FVRkRia1FzVVVGQlNTeE5RVUZLTEVOQlFWY3NUVUZCV0R0QlFVTklMRU5CUmtRaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaWdwZTJaMWJtTjBhVzl1SUhJb1pTeHVMSFFwZTJaMWJtTjBhVzl1SUc4b2FTeG1LWHRwWmlnaGJsdHBYU2w3YVdZb0lXVmJhVjBwZTNaaGNpQmpQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVU3YVdZb0lXWW1KbU1wY21WMGRYSnVJR01vYVN3aE1DazdhV1lvZFNseVpYUjFjbTRnZFNocExDRXdLVHQyWVhJZ1lUMXVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUsya3JYQ0luWENJcE8zUm9jbTkzSUdFdVkyOWtaVDFjSWsxUFJGVk1SVjlPVDFSZlJrOVZUa1JjSWl4aGZYWmhjaUJ3UFc1YmFWMDllMlY0Y0c5eWRITTZlMzE5TzJWYmFWMWJNRjB1WTJGc2JDaHdMbVY0Y0c5eWRITXNablZ1WTNScGIyNG9jaWw3ZG1GeUlHNDlaVnRwWFZzeFhWdHlYVHR5WlhSMWNtNGdieWh1Zkh4eUtYMHNjQ3h3TG1WNGNHOXlkSE1zY2l4bExHNHNkQ2w5Y21WMGRYSnVJRzViYVYwdVpYaHdiM0owYzMxbWIzSW9kbUZ5SUhVOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjbVZ4ZFdseVpTWW1jbVZ4ZFdseVpTeHBQVEE3YVR4MExteGxibWQwYUR0cEt5c3BieWgwVzJsZEtUdHlaWFIxY200Z2IzMXlaWFIxY200Z2NuMHBLQ2tpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dmJHbGlMMkY0YVc5ekp5azdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2RYUnBiSE1nUFNCeVpYRjFhWEpsS0NjdUx5NHVMM1YwYVd4ekp5azdYRzUyWVhJZ2MyVjBkR3hsSUQwZ2NtVnhkV2x5WlNnbkxpOHVMaTlqYjNKbEwzTmxkSFJzWlNjcE8xeHVkbUZ5SUdKMWFXeGtWVkpNSUQwZ2NtVnhkV2x5WlNnbkxpOHVMaTlvWld4d1pYSnpMMkoxYVd4a1ZWSk1KeWs3WEc1MllYSWdjR0Z5YzJWSVpXRmtaWEp6SUQwZ2NtVnhkV2x5WlNnbkxpOHVMaTlvWld4d1pYSnpMM0JoY25ObFNHVmhaR1Z5Y3ljcE8xeHVkbUZ5SUdselZWSk1VMkZ0WlU5eWFXZHBiaUE5SUhKbGNYVnBjbVVvSnk0dkxpNHZhR1ZzY0dWeWN5OXBjMVZTVEZOaGJXVlBjbWxuYVc0bktUdGNiblpoY2lCamNtVmhkR1ZGY25KdmNpQTlJSEpsY1hWcGNtVW9KeTR1TDJOdmNtVXZZM0psWVhSbFJYSnliM0luS1R0Y2JuWmhjaUJpZEc5aElEMGdLSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIZHBibVJ2ZHk1aWRHOWhJQ1ltSUhkcGJtUnZkeTVpZEc5aExtSnBibVFvZDJsdVpHOTNLU2tnZkh3Z2NtVnhkV2x5WlNnbkxpOHVMaTlvWld4d1pYSnpMMkowYjJFbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUI0YUhKQlpHRndkR1Z5S0dOdmJtWnBaeWtnZTF4dUlDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNGdaR2x6Y0dGMFkyaFlhSEpTWlhGMVpYTjBLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lIWmhjaUJ5WlhGMVpYTjBSR0YwWVNBOUlHTnZibVpwWnk1a1lYUmhPMXh1SUNBZ0lIWmhjaUJ5WlhGMVpYTjBTR1ZoWkdWeWN5QTlJR052Ym1acFp5NW9aV0ZrWlhKek8xeHVYRzRnSUNBZ2FXWWdLSFYwYVd4ekxtbHpSbTl5YlVSaGRHRW9jbVZ4ZFdWemRFUmhkR0VwS1NCN1hHNGdJQ0FnSUNCa1pXeGxkR1VnY21WeGRXVnpkRWhsWVdSbGNuTmJKME52Ym5SbGJuUXRWSGx3WlNkZE95QXZMeUJNWlhRZ2RHaGxJR0p5YjNkelpYSWdjMlYwSUdsMFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlISmxjWFZsYzNRZ1BTQnVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUW9LVHRjYmlBZ0lDQjJZWElnYkc5aFpFVjJaVzUwSUQwZ0oyOXVjbVZoWkhsemRHRjBaV05vWVc1blpTYzdYRzRnSUNBZ2RtRnlJSGhFYjIxaGFXNGdQU0JtWVd4elpUdGNibHh1SUNBZ0lDOHZJRVp2Y2lCSlJTQTRMemtnUTA5U1V5QnpkWEJ3YjNKMFhHNGdJQ0FnTHk4Z1QyNXNlU0J6ZFhCd2IzSjBjeUJRVDFOVUlHRnVaQ0JIUlZRZ1kyRnNiSE1nWVc1a0lHUnZaWE51SjNRZ2NtVjBkWEp1Y3lCMGFHVWdjbVZ6Y0c5dWMyVWdhR1ZoWkdWeWN5NWNiaUFnSUNBdkx5QkVUMDRuVkNCa2J5QjBhR2x6SUdadmNpQjBaWE4wYVc1bklHSXZZeUJZVFV4SWRIUndVbVZ4ZFdWemRDQnBjeUJ0YjJOclpXUXNJRzV2ZENCWVJHOXRZV2x1VW1WeGRXVnpkQzVjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2QwWlhOMEp5QW1KbHh1SUNBZ0lDQWdJQ0IwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUpseHVJQ0FnSUNBZ0lDQjNhVzVrYjNjdVdFUnZiV0ZwYmxKbGNYVmxjM1FnSmlZZ0lTZ25kMmwwYUVOeVpXUmxiblJwWVd4ekp5QnBiaUJ5WlhGMVpYTjBLU0FtSmx4dUlDQWdJQ0FnSUNBaGFYTlZVa3hUWVcxbFQzSnBaMmx1S0dOdmJtWnBaeTUxY213cEtTQjdYRzRnSUNBZ0lDQnlaWEYxWlhOMElEMGdibVYzSUhkcGJtUnZkeTVZUkc5dFlXbHVVbVZ4ZFdWemRDZ3BPMXh1SUNBZ0lDQWdiRzloWkVWMlpXNTBJRDBnSjI5dWJHOWhaQ2M3WEc0Z0lDQWdJQ0I0Ukc5dFlXbHVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lISmxjWFZsYzNRdWIyNXdjbTluY21WemN5QTlJR1oxYm1OMGFXOXVJR2hoYm1Sc1pWQnliMmR5WlhOektDa2dlMzA3WEc0Z0lDQWdJQ0J5WlhGMVpYTjBMbTl1ZEdsdFpXOTFkQ0E5SUdaMWJtTjBhVzl1SUdoaGJtUnNaVlJwYldWdmRYUW9LU0I3ZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCSVZGUlFJR0poYzJsaklHRjFkR2hsYm5ScFkyRjBhVzl1WEc0Z0lDQWdhV1lnS0dOdmJtWnBaeTVoZFhSb0tTQjdYRzRnSUNBZ0lDQjJZWElnZFhObGNtNWhiV1VnUFNCamIyNW1hV2N1WVhWMGFDNTFjMlZ5Ym1GdFpTQjhmQ0FuSnp0Y2JpQWdJQ0FnSUhaaGNpQndZWE56ZDI5eVpDQTlJR052Ym1acFp5NWhkWFJvTG5CaGMzTjNiM0prSUh4OElDY25PMXh1SUNBZ0lDQWdjbVZ4ZFdWemRFaGxZV1JsY25NdVFYVjBhRzl5YVhwaGRHbHZiaUE5SUNkQ1lYTnBZeUFuSUNzZ1luUnZZU2gxYzJWeWJtRnRaU0FySUNjNkp5QXJJSEJoYzNOM2IzSmtLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWEYxWlhOMExtOXdaVzRvWTI5dVptbG5MbTFsZEdodlpDNTBiMVZ3Y0dWeVEyRnpaU2dwTENCaWRXbHNaRlZTVENoamIyNW1hV2N1ZFhKc0xDQmpiMjVtYVdjdWNHRnlZVzF6TENCamIyNW1hV2N1Y0dGeVlXMXpVMlZ5YVdGc2FYcGxjaWtzSUhSeWRXVXBPMXh1WEc0Z0lDQWdMeThnVTJWMElIUm9aU0J5WlhGMVpYTjBJSFJwYldWdmRYUWdhVzRnVFZOY2JpQWdJQ0J5WlhGMVpYTjBMblJwYldWdmRYUWdQU0JqYjI1bWFXY3VkR2x0Wlc5MWREdGNibHh1SUNBZ0lDOHZJRXhwYzNSbGJpQm1iM0lnY21WaFpIa2djM1JoZEdWY2JpQWdJQ0J5WlhGMVpYTjBXMnh2WVdSRmRtVnVkRjBnUFNCbWRXNWpkR2x2YmlCb1lXNWtiR1ZNYjJGa0tDa2dlMXh1SUNBZ0lDQWdhV1lnS0NGeVpYRjFaWE4wSUh4OElDaHlaWEYxWlhOMExuSmxZV1I1VTNSaGRHVWdJVDA5SURRZ0ppWWdJWGhFYjIxaGFXNHBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1ZHaGxJSEpsY1hWbGMzUWdaWEp5YjNKbFpDQnZkWFFnWVc1a0lIZGxJR1JwWkc0bmRDQm5aWFFnWVNCeVpYTndiMjV6WlN3Z2RHaHBjeUIzYVd4c0lHSmxYRzRnSUNBZ0lDQXZMeUJvWVc1a2JHVmtJR0o1SUc5dVpYSnliM0lnYVc1emRHVmhaRnh1SUNBZ0lDQWdMeThnVjJsMGFDQnZibVVnWlhoalpYQjBhVzl1T2lCeVpYRjFaWE4wSUhSb1lYUWdkWE5wYm1jZ1ptbHNaVG9nY0hKdmRHOWpiMndzSUcxdmMzUWdZbkp2ZDNObGNuTmNiaUFnSUNBZ0lDOHZJSGRwYkd3Z2NtVjBkWEp1SUhOMFlYUjFjeUJoY3lBd0lHVjJaVzRnZEdodmRXZG9JR2wwSjNNZ1lTQnpkV05qWlhOelpuVnNJSEpsY1hWbGMzUmNiaUFnSUNBZ0lHbG1JQ2h5WlhGMVpYTjBMbk4wWVhSMWN5QTlQVDBnTUNBbUppQWhLSEpsY1hWbGMzUXVjbVZ6Y0c5dWMyVlZVa3dnSmlZZ2NtVnhkV1Z6ZEM1eVpYTndiMjV6WlZWU1RDNXBibVJsZUU5bUtDZG1hV3hsT2ljcElEMDlQU0F3S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRkJ5WlhCaGNtVWdkR2hsSUhKbGMzQnZibk5sWEc0Z0lDQWdJQ0IyWVhJZ2NtVnpjRzl1YzJWSVpXRmtaWEp6SUQwZ0oyZGxkRUZzYkZKbGMzQnZibk5sU0dWaFpHVnljeWNnYVc0Z2NtVnhkV1Z6ZENBL0lIQmhjbk5sU0dWaFpHVnljeWh5WlhGMVpYTjBMbWRsZEVGc2JGSmxjM0J2Ym5ObFNHVmhaR1Z5Y3lncEtTQTZJRzUxYkd3N1hHNGdJQ0FnSUNCMllYSWdjbVZ6Y0c5dWMyVkVZWFJoSUQwZ0lXTnZibVpwWnk1eVpYTndiMjV6WlZSNWNHVWdmSHdnWTI5dVptbG5MbkpsYzNCdmJuTmxWSGx3WlNBOVBUMGdKM1JsZUhRbklEOGdjbVZ4ZFdWemRDNXlaWE53YjI1elpWUmxlSFFnT2lCeVpYRjFaWE4wTG5KbGMzQnZibk5sTzF4dUlDQWdJQ0FnZG1GeUlISmxjM0J2Ym5ObElEMGdlMXh1SUNBZ0lDQWdJQ0JrWVhSaE9pQnlaWE53YjI1elpVUmhkR0VzWEc0Z0lDQWdJQ0FnSUM4dklFbEZJSE5sYm1SeklERXlNak1nYVc1emRHVmhaQ0J2WmlBeU1EUWdLR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzloZUdsdmN5OWhlR2x2Y3k5cGMzTjFaWE12TWpBeEtWeHVJQ0FnSUNBZ0lDQnpkR0YwZFhNNklISmxjWFZsYzNRdWMzUmhkSFZ6SUQwOVBTQXhNakl6SUQ4Z01qQTBJRG9nY21WeGRXVnpkQzV6ZEdGMGRYTXNYRzRnSUNBZ0lDQWdJSE4wWVhSMWMxUmxlSFE2SUhKbGNYVmxjM1F1YzNSaGRIVnpJRDA5UFNBeE1qSXpJRDhnSjA1dklFTnZiblJsYm5RbklEb2djbVZ4ZFdWemRDNXpkR0YwZFhOVVpYaDBMRnh1SUNBZ0lDQWdJQ0JvWldGa1pYSnpPaUJ5WlhOd2IyNXpaVWhsWVdSbGNuTXNYRzRnSUNBZ0lDQWdJR052Ym1acFp6b2dZMjl1Wm1sbkxGeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOME9pQnlaWEYxWlhOMFhHNGdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQnpaWFIwYkdVb2NtVnpiMngyWlN3Z2NtVnFaV04wTENCeVpYTndiMjV6WlNrN1hHNWNiaUFnSUNBZ0lDOHZJRU5zWldGdUlIVndJSEpsY1hWbGMzUmNiaUFnSUNBZ0lISmxjWFZsYzNRZ1BTQnVkV3hzTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2THlCSVlXNWtiR1VnYkc5M0lHeGxkbVZzSUc1bGRIZHZjbXNnWlhKeWIzSnpYRzRnSUNBZ2NtVnhkV1Z6ZEM1dmJtVnljbTl5SUQwZ1puVnVZM1JwYjI0Z2FHRnVaR3hsUlhKeWIzSW9LU0I3WEc0Z0lDQWdJQ0F2THlCU1pXRnNJR1Z5Y205eWN5QmhjbVVnYUdsa1pHVnVJR1p5YjIwZ2RYTWdZbmtnZEdobElHSnliM2R6WlhKY2JpQWdJQ0FnSUM4dklHOXVaWEp5YjNJZ2MyaHZkV3hrSUc5dWJIa2dabWx5WlNCcFppQnBkQ2R6SUdFZ2JtVjBkMjl5YXlCbGNuSnZjbHh1SUNBZ0lDQWdjbVZxWldOMEtHTnlaV0YwWlVWeWNtOXlLQ2RPWlhSM2IzSnJJRVZ5Y205eUp5d2dZMjl1Wm1sbkxDQnVkV3hzTENCeVpYRjFaWE4wS1NrN1hHNWNiaUFnSUNBZ0lDOHZJRU5zWldGdUlIVndJSEpsY1hWbGMzUmNiaUFnSUNBZ0lISmxjWFZsYzNRZ1BTQnVkV3hzTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2THlCSVlXNWtiR1VnZEdsdFpXOTFkRnh1SUNBZ0lISmxjWFZsYzNRdWIyNTBhVzFsYjNWMElEMGdablZ1WTNScGIyNGdhR0Z1Wkd4bFZHbHRaVzkxZENncElIdGNiaUFnSUNBZ0lISmxhbVZqZENoamNtVmhkR1ZGY25KdmNpZ25kR2x0Wlc5MWRDQnZaaUFuSUNzZ1kyOXVabWxuTG5ScGJXVnZkWFFnS3lBbmJYTWdaWGhqWldWa1pXUW5MQ0JqYjI1bWFXY3NJQ2RGUTA5T1RrRkNUMUpVUlVRbkxGeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMEtTazdYRzVjYmlBZ0lDQWdJQzh2SUVOc1pXRnVJSFZ3SUhKbGNYVmxjM1JjYmlBZ0lDQWdJSEpsY1hWbGMzUWdQU0J1ZFd4c08xeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdkx5QkJaR1FnZUhOeVppQm9aV0ZrWlhKY2JpQWdJQ0F2THlCVWFHbHpJR2x6SUc5dWJIa2daRzl1WlNCcFppQnlkVzV1YVc1bklHbHVJR0VnYzNSaGJtUmhjbVFnWW5KdmQzTmxjaUJsYm5acGNtOXViV1Z1ZEM1Y2JpQWdJQ0F2THlCVGNHVmphV1pwWTJGc2JIa2dibTkwSUdsbUlIZGxKM0psSUdsdUlHRWdkMlZpSUhkdmNtdGxjaXdnYjNJZ2NtVmhZM1F0Ym1GMGFYWmxMbHh1SUNBZ0lHbG1JQ2gxZEdsc2N5NXBjMU4wWVc1a1lYSmtRbkp2ZDNObGNrVnVkaWdwS1NCN1hHNGdJQ0FnSUNCMllYSWdZMjl2YTJsbGN5QTlJSEpsY1hWcGNtVW9KeTR2TGk0dmFHVnNjR1Z5Y3k5amIyOXJhV1Z6SnlrN1hHNWNiaUFnSUNBZ0lDOHZJRUZrWkNCNGMzSm1JR2hsWVdSbGNseHVJQ0FnSUNBZ2RtRnlJSGh6Y21aV1lXeDFaU0E5SUNoamIyNW1hV2N1ZDJsMGFFTnlaV1JsYm5ScFlXeHpJSHg4SUdselZWSk1VMkZ0WlU5eWFXZHBiaWhqYjI1bWFXY3VkWEpzS1NrZ0ppWWdZMjl1Wm1sbkxuaHpjbVpEYjI5cmFXVk9ZVzFsSUQ5Y2JpQWdJQ0FnSUNBZ0lDQmpiMjlyYVdWekxuSmxZV1FvWTI5dVptbG5Mbmh6Y21aRGIyOXJhV1ZPWVcxbEtTQTZYRzRnSUNBZ0lDQWdJQ0FnZFc1a1pXWnBibVZrTzF4dVhHNGdJQ0FnSUNCcFppQW9lSE55WmxaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1JJWldGa1pYSnpXMk52Ym1acFp5NTRjM0ptU0dWaFpHVnlUbUZ0WlYwZ1BTQjRjM0ptVm1Gc2RXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRV1JrSUdobFlXUmxjbk1nZEc4Z2RHaGxJSEpsY1hWbGMzUmNiaUFnSUNCcFppQW9KM05sZEZKbGNYVmxjM1JJWldGa1pYSW5JR2x1SUhKbGNYVmxjM1FwSUh0Y2JpQWdJQ0FnSUhWMGFXeHpMbVp2Y2tWaFkyZ29jbVZ4ZFdWemRFaGxZV1JsY25Nc0lHWjFibU4wYVc5dUlITmxkRkpsY1hWbGMzUklaV0ZrWlhJb2RtRnNMQ0JyWlhrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ5WlhGMVpYTjBSR0YwWVNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2EyVjVMblJ2VEc5M1pYSkRZWE5sS0NrZ1BUMDlJQ2RqYjI1MFpXNTBMWFI1Y0dVbktTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1VtVnRiM1psSUVOdmJuUmxiblF0Vkhsd1pTQnBaaUJrWVhSaElHbHpJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J5WlhGMVpYTjBTR1ZoWkdWeWMxdHJaWGxkTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRTkwYUdWeWQybHpaU0JoWkdRZ2FHVmhaR1Z5SUhSdklIUm9aU0J5WlhGMVpYTjBYRzRnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkQzV6WlhSU1pYRjFaWE4wU0dWaFpHVnlLR3RsZVN3Z2RtRnNLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1FXUmtJSGRwZEdoRGNtVmtaVzUwYVdGc2N5QjBieUJ5WlhGMVpYTjBJR2xtSUc1bFpXUmxaRnh1SUNBZ0lHbG1JQ2hqYjI1bWFXY3VkMmwwYUVOeVpXUmxiblJwWVd4ektTQjdYRzRnSUNBZ0lDQnlaWEYxWlhOMExuZHBkR2hEY21Wa1pXNTBhV0ZzY3lBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUVdSa0lISmxjM0J2Ym5ObFZIbHdaU0IwYnlCeVpYRjFaWE4wSUdsbUlHNWxaV1JsWkZ4dUlDQWdJR2xtSUNoamIyNW1hV2N1Y21WemNHOXVjMlZVZVhCbEtTQjdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCeVpYRjFaWE4wTG5KbGMzQnZibk5sVkhsd1pTQTlJR052Ym1acFp5NXlaWE53YjI1elpWUjVjR1U3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVY0Y0dWamRHVmtJRVJQVFVWNFkyVndkR2x2YmlCMGFISnZkMjRnWW5rZ1luSnZkM05sY25NZ2JtOTBJR052YlhCaGRHbGliR1VnV0UxTVNIUjBjRkpsY1hWbGMzUWdUR1YyWld3Z01pNWNiaUFnSUNBZ0lDQWdMeThnUW5WMExDQjBhR2x6SUdOaGJpQmlaU0J6ZFhCd2NtVnpjMlZrSUdadmNpQW5hbk52YmljZ2RIbHdaU0JoY3lCcGRDQmpZVzRnWW1VZ2NHRnljMlZrSUdKNUlHUmxabUYxYkhRZ0ozUnlZVzV6Wm05eWJWSmxjM0J2Ym5ObEp5Qm1kVzVqZEdsdmJpNWNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJtWnBaeTV5WlhOd2IyNXpaVlI1Y0dVZ0lUMDlJQ2RxYzI5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCSVlXNWtiR1VnY0hKdlozSmxjM01nYVdZZ2JtVmxaR1ZrWEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJqYjI1bWFXY3ViMjVFYjNkdWJHOWhaRkJ5YjJkeVpYTnpJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQnlaWEYxWlhOMExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozQnliMmR5WlhOekp5d2dZMjl1Wm1sbkxtOXVSRzkzYm14dllXUlFjbTluY21WemN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdUbTkwSUdGc2JDQmljbTkzYzJWeWN5QnpkWEJ3YjNKMElIVndiRzloWkNCbGRtVnVkSE5jYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR052Ym1acFp5NXZibFZ3Ykc5aFpGQnliMmR5WlhOeklEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlISmxjWFZsYzNRdWRYQnNiMkZrS1NCN1hHNGdJQ0FnSUNCeVpYRjFaWE4wTG5Wd2JHOWhaQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R3Y205bmNtVnpjeWNzSUdOdmJtWnBaeTV2YmxWd2JHOWhaRkJ5YjJkeVpYTnpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTI5dVptbG5MbU5oYm1ObGJGUnZhMlZ1S1NCN1hHNGdJQ0FnSUNBdkx5QklZVzVrYkdVZ1kyRnVZMlZzYkdGMGFXOXVYRzRnSUNBZ0lDQmpiMjVtYVdjdVkyRnVZMlZzVkc5clpXNHVjSEp2YldselpTNTBhR1Z1S0daMWJtTjBhVzl1SUc5dVEyRnVZMlZzWldRb1kyRnVZMlZzS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doY21WeGRXVnpkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUXVZV0p2Y25Rb0tUdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtHTmhibU5sYkNrN1hHNGdJQ0FnSUNBZ0lDOHZJRU5zWldGdUlIVndJSEpsY1hWbGMzUmNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jbVZ4ZFdWemRFUmhkR0VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdjbVZ4ZFdWemRFUmhkR0VnUFNCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRk5sYm1RZ2RHaGxJSEpsY1hWbGMzUmNiaUFnSUNCeVpYRjFaWE4wTG5ObGJtUW9jbVZ4ZFdWemRFUmhkR0VwTzF4dUlDQjlLVHRjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCMWRHbHNjeUE5SUhKbGNYVnBjbVVvSnk0dmRYUnBiSE1uS1R0Y2JuWmhjaUJpYVc1a0lEMGdjbVZ4ZFdseVpTZ25MaTlvWld4d1pYSnpMMkpwYm1RbktUdGNiblpoY2lCQmVHbHZjeUE5SUhKbGNYVnBjbVVvSnk0dlkyOXlaUzlCZUdsdmN5Y3BPMXh1ZG1GeUlHUmxabUYxYkhSeklEMGdjbVZ4ZFdseVpTZ25MaTlrWldaaGRXeDBjeWNwTzF4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlNCaGJpQnBibk4wWVc1alpTQnZaaUJCZUdsdmMxeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCa1pXWmhkV3gwUTI5dVptbG5JRlJvWlNCa1pXWmhkV3gwSUdOdmJtWnBaeUJtYjNJZ2RHaGxJR2x1YzNSaGJtTmxYRzRnS2lCQWNtVjBkWEp1SUh0QmVHbHZjMzBnUVNCdVpYY2dhVzV6ZEdGdVkyVWdiMllnUVhocGIzTmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsU1c1emRHRnVZMlVvWkdWbVlYVnNkRU52Ym1acFp5a2dlMXh1SUNCMllYSWdZMjl1ZEdWNGRDQTlJRzVsZHlCQmVHbHZjeWhrWldaaGRXeDBRMjl1Wm1sbktUdGNiaUFnZG1GeUlHbHVjM1JoYm1ObElEMGdZbWx1WkNoQmVHbHZjeTV3Y205MGIzUjVjR1V1Y21WeGRXVnpkQ3dnWTI5dWRHVjRkQ2s3WEc1Y2JpQWdMeThnUTI5d2VTQmhlR2x2Y3k1d2NtOTBiM1I1Y0dVZ2RHOGdhVzV6ZEdGdVkyVmNiaUFnZFhScGJITXVaWGgwWlc1a0tHbHVjM1JoYm1ObExDQkJlR2x2Y3k1d2NtOTBiM1I1Y0dVc0lHTnZiblJsZUhRcE8xeHVYRzRnSUM4dklFTnZjSGtnWTI5dWRHVjRkQ0IwYnlCcGJuTjBZVzVqWlZ4dUlDQjFkR2xzY3k1bGVIUmxibVFvYVc1emRHRnVZMlVzSUdOdmJuUmxlSFFwTzF4dVhHNGdJSEpsZEhWeWJpQnBibk4wWVc1alpUdGNibjFjYmx4dUx5OGdRM0psWVhSbElIUm9aU0JrWldaaGRXeDBJR2x1YzNSaGJtTmxJSFJ2SUdKbElHVjRjRzl5ZEdWa1hHNTJZWElnWVhocGIzTWdQU0JqY21WaGRHVkpibk4wWVc1alpTaGtaV1poZFd4MGN5azdYRzVjYmk4dklFVjRjRzl6WlNCQmVHbHZjeUJqYkdGemN5QjBieUJoYkd4dmR5QmpiR0Z6Y3lCcGJtaGxjbWwwWVc1alpWeHVZWGhwYjNNdVFYaHBiM01nUFNCQmVHbHZjenRjYmx4dUx5OGdSbUZqZEc5eWVTQm1iM0lnWTNKbFlYUnBibWNnYm1WM0lHbHVjM1JoYm1ObGMxeHVZWGhwYjNNdVkzSmxZWFJsSUQwZ1puVnVZM1JwYjI0Z1kzSmxZWFJsS0dsdWMzUmhibU5sUTI5dVptbG5LU0I3WEc0Z0lISmxkSFZ5YmlCamNtVmhkR1ZKYm5OMFlXNWpaU2gxZEdsc2N5NXRaWEpuWlNoa1pXWmhkV3gwY3l3Z2FXNXpkR0Z1WTJWRGIyNW1hV2NwS1R0Y2JuMDdYRzVjYmk4dklFVjRjRzl6WlNCRFlXNWpaV3dnSmlCRFlXNWpaV3hVYjJ0bGJseHVZWGhwYjNNdVEyRnVZMlZzSUQwZ2NtVnhkV2x5WlNnbkxpOWpZVzVqWld3dlEyRnVZMlZzSnlrN1hHNWhlR2x2Y3k1RFlXNWpaV3hVYjJ0bGJpQTlJSEpsY1hWcGNtVW9KeTR2WTJGdVkyVnNMME5oYm1ObGJGUnZhMlZ1SnlrN1hHNWhlR2x2Y3k1cGMwTmhibU5sYkNBOUlISmxjWFZwY21Vb0p5NHZZMkZ1WTJWc0wybHpRMkZ1WTJWc0p5azdYRzVjYmk4dklFVjRjRzl6WlNCaGJHd3ZjM0J5WldGa1hHNWhlR2x2Y3k1aGJHd2dQU0JtZFc1amRHbHZiaUJoYkd3b2NISnZiV2x6WlhNcElIdGNiaUFnY21WMGRYSnVJRkJ5YjIxcGMyVXVZV3hzS0hCeWIyMXBjMlZ6S1R0Y2JuMDdYRzVoZUdsdmN5NXpjSEpsWVdRZ1BTQnlaWEYxYVhKbEtDY3VMMmhsYkhCbGNuTXZjM0J5WldGa0p5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWVhocGIzTTdYRzVjYmk4dklFRnNiRzkzSUhWelpTQnZaaUJrWldaaGRXeDBJR2x0Y0c5eWRDQnplVzUwWVhnZ2FXNGdWSGx3WlZOamNtbHdkRnh1Ylc5a2RXeGxMbVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR0Y0YVc5ek8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzR2S2lwY2JpQXFJRUVnWUVOaGJtTmxiR0FnYVhNZ1lXNGdiMkpxWldOMElIUm9ZWFFnYVhNZ2RHaHliM2R1SUhkb1pXNGdZVzRnYjNCbGNtRjBhVzl1SUdseklHTmhibU5sYkdWa0xseHVJQ3BjYmlBcUlFQmpiR0Z6YzF4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1jOWZTQnRaWE56WVdkbElGUm9aU0J0WlhOellXZGxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQkRZVzVqWld3b2JXVnpjMkZuWlNrZ2UxeHVJQ0IwYUdsekxtMWxjM05oWjJVZ1BTQnRaWE56WVdkbE8xeHVmVnh1WEc1RFlXNWpaV3d1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0Z2RHOVRkSEpwYm1jb0tTQjdYRzRnSUhKbGRIVnliaUFuUTJGdVkyVnNKeUFySUNoMGFHbHpMbTFsYzNOaFoyVWdQeUFuT2lBbklDc2dkR2hwY3k1dFpYTnpZV2RsSURvZ0p5Y3BPMXh1ZlR0Y2JseHVRMkZ1WTJWc0xuQnliM1J2ZEhsd1pTNWZYME5CVGtORlRGOWZJRDBnZEhKMVpUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JEWVc1alpXdzdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQkRZVzVqWld3Z1BTQnlaWEYxYVhKbEtDY3VMME5oYm1ObGJDY3BPMXh1WEc0dktpcGNiaUFxSUVFZ1lFTmhibU5sYkZSdmEyVnVZQ0JwY3lCaGJpQnZZbXBsWTNRZ2RHaGhkQ0JqWVc0Z1ltVWdkWE5sWkNCMGJ5QnlaWEYxWlhOMElHTmhibU5sYkd4aGRHbHZiaUJ2WmlCaGJpQnZjR1Z5WVhScGIyNHVYRzRnS2x4dUlDb2dRR05zWVhOelhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JsZUdWamRYUnZjaUJVYUdVZ1pYaGxZM1YwYjNJZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1aMWJtTjBhVzl1SUVOaGJtTmxiRlJ2YTJWdUtHVjRaV04xZEc5eUtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ1pYaGxZM1YwYjNJZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkbGVHVmpkWFJ2Y2lCdGRYTjBJR0psSUdFZ1puVnVZM1JwYjI0dUp5azdYRzRnSUgxY2JseHVJQ0IyWVhJZ2NtVnpiMngyWlZCeWIyMXBjMlU3WEc0Z0lIUm9hWE11Y0hKdmJXbHpaU0E5SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlIQnliMjFwYzJWRmVHVmpkWFJ2Y2loeVpYTnZiSFpsS1NCN1hHNGdJQ0FnY21WemIyeDJaVkJ5YjIxcGMyVWdQU0J5WlhOdmJIWmxPMXh1SUNCOUtUdGNibHh1SUNCMllYSWdkRzlyWlc0Z1BTQjBhR2x6TzF4dUlDQmxlR1ZqZFhSdmNpaG1kVzVqZEdsdmJpQmpZVzVqWld3b2JXVnpjMkZuWlNrZ2UxeHVJQ0FnSUdsbUlDaDBiMnRsYmk1eVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUM4dklFTmhibU5sYkd4aGRHbHZiaUJvWVhNZ1lXeHlaV0ZrZVNCaVpXVnVJSEpsY1hWbGMzUmxaRnh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSdmEyVnVMbkpsWVhOdmJpQTlJRzVsZHlCRFlXNWpaV3dvYldWemMyRm5aU2s3WEc0Z0lDQWdjbVZ6YjJ4MlpWQnliMjFwYzJVb2RHOXJaVzR1Y21WaGMyOXVLVHRjYmlBZ2ZTazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1ZHaHliM2R6SUdFZ1lFTmhibU5sYkdBZ2FXWWdZMkZ1WTJWc2JHRjBhVzl1SUdoaGN5QmlaV1Z1SUhKbGNYVmxjM1JsWkM1Y2JpQXFMMXh1UTJGdVkyVnNWRzlyWlc0dWNISnZkRzkwZVhCbExuUm9jbTkzU1daU1pYRjFaWE4wWldRZ1BTQm1kVzVqZEdsdmJpQjBhSEp2ZDBsbVVtVnhkV1Z6ZEdWa0tDa2dlMXh1SUNCcFppQW9kR2hwY3k1eVpXRnpiMjRwSUh0Y2JpQWdJQ0IwYUhKdmR5QjBhR2x6TG5KbFlYTnZianRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCU1pYUjFjbTV6SUdGdUlHOWlhbVZqZENCMGFHRjBJR052Ym5SaGFXNXpJR0VnYm1WM0lHQkRZVzVqWld4VWIydGxibUFnWVc1a0lHRWdablZ1WTNScGIyNGdkR2hoZEN3Z2QyaGxiaUJqWVd4c1pXUXNYRzRnS2lCallXNWpaV3h6SUhSb1pTQmdRMkZ1WTJWc1ZHOXJaVzVnTGx4dUlDb3ZYRzVEWVc1alpXeFViMnRsYmk1emIzVnlZMlVnUFNCbWRXNWpkR2x2YmlCemIzVnlZMlVvS1NCN1hHNGdJSFpoY2lCallXNWpaV3c3WEc0Z0lIWmhjaUIwYjJ0bGJpQTlJRzVsZHlCRFlXNWpaV3hVYjJ0bGJpaG1kVzVqZEdsdmJpQmxlR1ZqZFhSdmNpaGpLU0I3WEc0Z0lDQWdZMkZ1WTJWc0lEMGdZenRjYmlBZ2ZTazdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdkRzlyWlc0NklIUnZhMlZ1TEZ4dUlDQWdJR05oYm1ObGJEb2dZMkZ1WTJWc1hHNGdJSDA3WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRU5oYm1ObGJGUnZhMlZ1TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHbHpRMkZ1WTJWc0tIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQWhJU2gyWVd4MVpTQW1KaUIyWVd4MVpTNWZYME5CVGtORlRGOWZLVHRjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCa1pXWmhkV3gwY3lBOUlISmxjWFZwY21Vb0p5NHZMaTR2WkdWbVlYVnNkSE1uS1R0Y2JuWmhjaUIxZEdsc2N5QTlJSEpsY1hWcGNtVW9KeTR2TGk0dmRYUnBiSE1uS1R0Y2JuWmhjaUJKYm5SbGNtTmxjSFJ2Y2sxaGJtRm5aWElnUFNCeVpYRjFhWEpsS0NjdUwwbHVkR1Z5WTJWd2RHOXlUV0Z1WVdkbGNpY3BPMXh1ZG1GeUlHUnBjM0JoZEdOb1VtVnhkV1Z6ZENBOUlISmxjWFZwY21Vb0p5NHZaR2x6Y0dGMFkyaFNaWEYxWlhOMEp5azdYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JRUY0YVc5elhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdsdWMzUmhibU5sUTI5dVptbG5JRlJvWlNCa1pXWmhkV3gwSUdOdmJtWnBaeUJtYjNJZ2RHaGxJR2x1YzNSaGJtTmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlFRjRhVzl6S0dsdWMzUmhibU5sUTI5dVptbG5LU0I3WEc0Z0lIUm9hWE11WkdWbVlYVnNkSE1nUFNCcGJuTjBZVzVqWlVOdmJtWnBaenRjYmlBZ2RHaHBjeTVwYm5SbGNtTmxjSFJ2Y25NZ1BTQjdYRzRnSUNBZ2NtVnhkV1Z6ZERvZ2JtVjNJRWx1ZEdWeVkyVndkRzl5VFdGdVlXZGxjaWdwTEZ4dUlDQWdJSEpsYzNCdmJuTmxPaUJ1WlhjZ1NXNTBaWEpqWlhCMGIzSk5ZVzVoWjJWeUtDbGNiaUFnZlR0Y2JuMWNibHh1THlvcVhHNGdLaUJFYVhOd1lYUmphQ0JoSUhKbGNYVmxjM1JjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdZMjl1Wm1sbklGUm9aU0JqYjI1bWFXY2djM0JsWTJsbWFXTWdabTl5SUhSb2FYTWdjbVZ4ZFdWemRDQW9iV1Z5WjJWa0lIZHBkR2dnZEdocGN5NWtaV1poZFd4MGN5bGNiaUFxTDF4dVFYaHBiM011Y0hKdmRHOTBlWEJsTG5KbGNYVmxjM1FnUFNCbWRXNWpkR2x2YmlCeVpYRjFaWE4wS0dOdmJtWnBaeWtnZTF4dUlDQXZLbVZ6YkdsdWRDQnVieTF3WVhKaGJTMXlaV0Z6YzJsbmJqb3dLaTljYmlBZ0x5OGdRV3hzYjNjZ1ptOXlJR0Y0YVc5ektDZGxlR0Z0Y0d4bEwzVnliQ2RiTENCamIyNW1hV2RkS1NCaElHeGhJR1psZEdOb0lFRlFTVnh1SUNCcFppQW9kSGx3Wlc5bUlHTnZibVpwWnlBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQmpiMjVtYVdjZ1BTQjFkR2xzY3k1dFpYSm5aU2g3WEc0Z0lDQWdJQ0IxY213NklHRnlaM1Z0Wlc1MGMxc3dYVnh1SUNBZ0lIMHNJR0Z5WjNWdFpXNTBjMXN4WFNrN1hHNGdJSDFjYmx4dUlDQmpiMjVtYVdjZ1BTQjFkR2xzY3k1dFpYSm5aU2hrWldaaGRXeDBjeXdnZTIxbGRHaHZaRG9nSjJkbGRDZDlMQ0IwYUdsekxtUmxabUYxYkhSekxDQmpiMjVtYVdjcE8xeHVJQ0JqYjI1bWFXY3ViV1YwYUc5a0lEMGdZMjl1Wm1sbkxtMWxkR2h2WkM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1WEc0Z0lDOHZJRWh2YjJzZ2RYQWdhVzUwWlhKalpYQjBiM0p6SUcxcFpHUnNaWGRoY21WY2JpQWdkbUZ5SUdOb1lXbHVJRDBnVzJScGMzQmhkR05vVW1WeGRXVnpkQ3dnZFc1a1pXWnBibVZrWFR0Y2JpQWdkbUZ5SUhCeWIyMXBjMlVnUFNCUWNtOXRhWE5sTG5KbGMyOXNkbVVvWTI5dVptbG5LVHRjYmx4dUlDQjBhR2x6TG1sdWRHVnlZMlZ3ZEc5eWN5NXlaWEYxWlhOMExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z2RXNXphR2xtZEZKbGNYVmxjM1JKYm5SbGNtTmxjSFJ2Y25Nb2FXNTBaWEpqWlhCMGIzSXBJSHRjYmlBZ0lDQmphR0ZwYmk1MWJuTm9hV1owS0dsdWRHVnlZMlZ3ZEc5eUxtWjFiR1pwYkd4bFpDd2dhVzUwWlhKalpYQjBiM0l1Y21WcVpXTjBaV1FwTzF4dUlDQjlLVHRjYmx4dUlDQjBhR2x6TG1sdWRHVnlZMlZ3ZEc5eWN5NXlaWE53YjI1elpTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUlIQjFjMmhTWlhOd2IyNXpaVWx1ZEdWeVkyVndkRzl5Y3locGJuUmxjbU5sY0hSdmNpa2dlMXh1SUNBZ0lHTm9ZV2x1TG5CMWMyZ29hVzUwWlhKalpYQjBiM0l1Wm5Wc1ptbHNiR1ZrTENCcGJuUmxjbU5sY0hSdmNpNXlaV3BsWTNSbFpDazdYRzRnSUgwcE8xeHVYRzRnSUhkb2FXeGxJQ2hqYUdGcGJpNXNaVzVuZEdncElIdGNiaUFnSUNCd2NtOXRhWE5sSUQwZ2NISnZiV2x6WlM1MGFHVnVLR05vWVdsdUxuTm9hV1owS0Nrc0lHTm9ZV2x1TG5Ob2FXWjBLQ2twTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhCeWIyMXBjMlU3WEc1OU8xeHVYRzR2THlCUWNtOTJhV1JsSUdGc2FXRnpaWE1nWm05eUlITjFjSEJ2Y25SbFpDQnlaWEYxWlhOMElHMWxkR2h2WkhOY2JuVjBhV3h6TG1admNrVmhZMmdvV3lka1pXeGxkR1VuTENBbloyVjBKeXdnSjJobFlXUW5MQ0FuYjNCMGFXOXVjeWRkTENCbWRXNWpkR2x2YmlCbWIzSkZZV05vVFdWMGFHOWtUbTlFWVhSaEtHMWxkR2h2WkNrZ2UxeHVJQ0F2S21WemJHbHVkQ0JtZFc1akxXNWhiV1Z6T2pBcUwxeHVJQ0JCZUdsdmN5NXdjbTkwYjNSNWNHVmJiV1YwYUc5a1hTQTlJR1oxYm1OMGFXOXVLSFZ5YkN3Z1kyOXVabWxuS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVnhkV1Z6ZENoMWRHbHNjeTV0WlhKblpTaGpiMjVtYVdjZ2ZId2dlMzBzSUh0Y2JpQWdJQ0FnSUcxbGRHaHZaRG9nYldWMGFHOWtMRnh1SUNBZ0lDQWdkWEpzT2lCMWNteGNiaUFnSUNCOUtTazdYRzRnSUgwN1hHNTlLVHRjYmx4dWRYUnBiSE11Wm05eVJXRmphQ2hiSjNCdmMzUW5MQ0FuY0hWMEp5d2dKM0JoZEdOb0oxMHNJR1oxYm1OMGFXOXVJR1p2Y2tWaFkyaE5aWFJvYjJSWGFYUm9SR0YwWVNodFpYUm9iMlFwSUh0Y2JpQWdMeXBsYzJ4cGJuUWdablZ1WXkxdVlXMWxjem93S2k5Y2JpQWdRWGhwYjNNdWNISnZkRzkwZVhCbFcyMWxkR2h2WkYwZ1BTQm1kVzVqZEdsdmJpaDFjbXdzSUdSaGRHRXNJR052Ym1acFp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsY1hWbGMzUW9kWFJwYkhNdWJXVnlaMlVvWTI5dVptbG5JSHg4SUh0OUxDQjdYRzRnSUNBZ0lDQnRaWFJvYjJRNklHMWxkR2h2WkN4Y2JpQWdJQ0FnSUhWeWJEb2dkWEpzTEZ4dUlDQWdJQ0FnWkdGMFlUb2daR0YwWVZ4dUlDQWdJSDBwS1R0Y2JpQWdmVHRjYm4wcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRUY0YVc5ek8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2RYUnBiSE1nUFNCeVpYRjFhWEpsS0NjdUx5NHVMM1YwYVd4ekp5azdYRzVjYm1aMWJtTjBhVzl1SUVsdWRHVnlZMlZ3ZEc5eVRXRnVZV2RsY2lncElIdGNiaUFnZEdocGN5NW9ZVzVrYkdWeWN5QTlJRnRkTzF4dWZWeHVYRzR2S2lwY2JpQXFJRUZrWkNCaElHNWxkeUJwYm5SbGNtTmxjSFJ2Y2lCMGJ5QjBhR1VnYzNSaFkydGNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1kV3htYVd4c1pXUWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHaGhibVJzWlNCZ2RHaGxibUFnWm05eUlHRWdZRkJ5YjIxcGMyVmdYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCeVpXcGxZM1JsWkNCVWFHVWdablZ1WTNScGIyNGdkRzhnYUdGdVpHeGxJR0J5WldwbFkzUmdJR1p2Y2lCaElHQlFjbTl0YVhObFlGeHVJQ3BjYmlBcUlFQnlaWFIxY200Z2UwNTFiV0psY24wZ1FXNGdTVVFnZFhObFpDQjBieUJ5WlcxdmRtVWdhVzUwWlhKalpYQjBiM0lnYkdGMFpYSmNiaUFxTDF4dVNXNTBaWEpqWlhCMGIzSk5ZVzVoWjJWeUxuQnliM1J2ZEhsd1pTNTFjMlVnUFNCbWRXNWpkR2x2YmlCMWMyVW9ablZzWm1sc2JHVmtMQ0J5WldwbFkzUmxaQ2tnZTF4dUlDQjBhR2x6TG1oaGJtUnNaWEp6TG5CMWMyZ29lMXh1SUNBZ0lHWjFiR1pwYkd4bFpEb2dablZzWm1sc2JHVmtMRnh1SUNBZ0lISmxhbVZqZEdWa09pQnlaV3BsWTNSbFpGeHVJQ0I5S1R0Y2JpQWdjbVYwZFhKdUlIUm9hWE11YUdGdVpHeGxjbk11YkdWdVozUm9JQzBnTVR0Y2JuMDdYRzVjYmk4cUtseHVJQ29nVW1WdGIzWmxJR0Z1SUdsdWRHVnlZMlZ3ZEc5eUlHWnliMjBnZEdobElITjBZV05yWEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR2xrSUZSb1pTQkpSQ0IwYUdGMElIZGhjeUJ5WlhSMWNtNWxaQ0JpZVNCZ2RYTmxZRnh1SUNvdlhHNUpiblJsY21ObGNIUnZjazFoYm1GblpYSXVjSEp2ZEc5MGVYQmxMbVZxWldOMElEMGdablZ1WTNScGIyNGdaV3BsWTNRb2FXUXBJSHRjYmlBZ2FXWWdLSFJvYVhNdWFHRnVaR3hsY25OYmFXUmRLU0I3WEc0Z0lDQWdkR2hwY3k1b1lXNWtiR1Z5YzF0cFpGMGdQU0J1ZFd4c08xeHVJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJRWwwWlhKaGRHVWdiM1psY2lCaGJHd2dkR2hsSUhKbFoybHpkR1Z5WldRZ2FXNTBaWEpqWlhCMGIzSnpYRzRnS2x4dUlDb2dWR2hwY3lCdFpYUm9iMlFnYVhNZ2NHRnlkR2xqZFd4aGNteDVJSFZ6WldaMWJDQm1iM0lnYzJ0cGNIQnBibWNnYjNabGNpQmhibmxjYmlBcUlHbHVkR1Z5WTJWd2RHOXljeUIwYUdGMElHMWhlU0JvWVhabElHSmxZMjl0WlNCZ2JuVnNiR0FnWTJGc2JHbHVaeUJnWldwbFkzUmdMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1p1SUZSb1pTQm1kVzVqZEdsdmJpQjBieUJqWVd4c0lHWnZjaUJsWVdOb0lHbHVkR1Z5WTJWd2RHOXlYRzRnS2k5Y2JrbHVkR1Z5WTJWd2RHOXlUV0Z1WVdkbGNpNXdjbTkwYjNSNWNHVXVabTl5UldGamFDQTlJR1oxYm1OMGFXOXVJR1p2Y2tWaFkyZ29abTRwSUh0Y2JpQWdkWFJwYkhNdVptOXlSV0ZqYUNoMGFHbHpMbWhoYm1Sc1pYSnpMQ0JtZFc1amRHbHZiaUJtYjNKRllXTm9TR0Z1Wkd4bGNpaG9LU0I3WEc0Z0lDQWdhV1lnS0dnZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lHWnVLR2dwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFbHVkR1Z5WTJWd2RHOXlUV0Z1WVdkbGNqdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlHVnVhR0Z1WTJWRmNuSnZjaUE5SUhKbGNYVnBjbVVvSnk0dlpXNW9ZVzVqWlVWeWNtOXlKeWs3WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsSUdGdUlFVnljbTl5SUhkcGRHZ2dkR2hsSUhOd1pXTnBabWxsWkNCdFpYTnpZV2RsTENCamIyNW1hV2NzSUdWeWNtOXlJR052WkdVc0lISmxjWFZsYzNRZ1lXNWtJSEpsYzNCdmJuTmxMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnRaWE56WVdkbElGUm9aU0JsY25KdmNpQnRaWE56WVdkbExseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR052Ym1acFp5QlVhR1VnWTI5dVptbG5MbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0amIyUmxYU0JVYUdVZ1pYSnliM0lnWTI5a1pTQW9abTl5SUdWNFlXMXdiR1VzSUNkRlEwOU9Ua0ZDVDFKVVJVUW5LUzVjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmNtVnhkV1Z6ZEYwZ1ZHaGxJSEpsY1hWbGMzUXVYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnVzNKbGMzQnZibk5sWFNCVWFHVWdjbVZ6Y0c5dWMyVXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1JYSnliM0o5SUZSb1pTQmpjbVZoZEdWa0lHVnljbTl5TGx4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJR055WldGMFpVVnljbTl5S0cxbGMzTmhaMlVzSUdOdmJtWnBaeXdnWTI5a1pTd2djbVZ4ZFdWemRDd2djbVZ6Y0c5dWMyVXBJSHRjYmlBZ2RtRnlJR1Z5Y205eUlEMGdibVYzSUVWeWNtOXlLRzFsYzNOaFoyVXBPMXh1SUNCeVpYUjFjbTRnWlc1b1lXNWpaVVZ5Y205eUtHVnljbTl5TENCamIyNW1hV2NzSUdOdlpHVXNJSEpsY1hWbGMzUXNJSEpsYzNCdmJuTmxLVHRjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCMWRHbHNjeUE5SUhKbGNYVnBjbVVvSnk0dkxpNHZkWFJwYkhNbktUdGNiblpoY2lCMGNtRnVjMlp2Y20xRVlYUmhJRDBnY21WeGRXbHlaU2duTGk5MGNtRnVjMlp2Y20xRVlYUmhKeWs3WEc1MllYSWdhWE5EWVc1alpXd2dQU0J5WlhGMWFYSmxLQ2N1TGk5allXNWpaV3d2YVhORFlXNWpaV3duS1R0Y2JuWmhjaUJrWldaaGRXeDBjeUE5SUhKbGNYVnBjbVVvSnk0dUwyUmxabUYxYkhSekp5azdYRzUyWVhJZ2FYTkJZbk52YkhWMFpWVlNUQ0E5SUhKbGNYVnBjbVVvSnk0dkxpNHZhR1ZzY0dWeWN5OXBjMEZpYzI5c2RYUmxWVkpNSnlrN1hHNTJZWElnWTI5dFltbHVaVlZTVEhNZ1BTQnlaWEYxYVhKbEtDY3VMeTR1TDJobGJIQmxjbk12WTI5dFltbHVaVlZTVEhNbktUdGNibHh1THlvcVhHNGdLaUJVYUhKdmQzTWdZU0JnUTJGdVkyVnNZQ0JwWmlCallXNWpaV3hzWVhScGIyNGdhR0Z6SUdKbFpXNGdjbVZ4ZFdWemRHVmtMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQjBhSEp2ZDBsbVEyRnVZMlZzYkdGMGFXOXVVbVZ4ZFdWemRHVmtLR052Ym1acFp5a2dlMXh1SUNCcFppQW9ZMjl1Wm1sbkxtTmhibU5sYkZSdmEyVnVLU0I3WEc0Z0lDQWdZMjl1Wm1sbkxtTmhibU5sYkZSdmEyVnVMblJvY205M1NXWlNaWEYxWlhOMFpXUW9LVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVScGMzQmhkR05vSUdFZ2NtVnhkV1Z6ZENCMGJ5QjBhR1VnYzJWeWRtVnlJSFZ6YVc1bklIUm9aU0JqYjI1bWFXZDFjbVZrSUdGa1lYQjBaWEl1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR052Ym1acFp5QlVhR1VnWTI5dVptbG5JSFJvWVhRZ2FYTWdkRzhnWW1VZ2RYTmxaQ0JtYjNJZ2RHaGxJSEpsY1hWbGMzUmNiaUFxSUVCeVpYUjFjbTV6SUh0UWNtOXRhWE5sZlNCVWFHVWdVSEp2YldselpTQjBieUJpWlNCbWRXeG1hV3hzWldSY2JpQXFMMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJrYVhOd1lYUmphRkpsY1hWbGMzUW9ZMjl1Wm1sbktTQjdYRzRnSUhSb2NtOTNTV1pEWVc1alpXeHNZWFJwYjI1U1pYRjFaWE4wWldRb1kyOXVabWxuS1R0Y2JseHVJQ0F2THlCVGRYQndiM0owSUdKaGMyVlZVa3dnWTI5dVptbG5YRzRnSUdsbUlDaGpiMjVtYVdjdVltRnpaVlZTVENBbUppQWhhWE5CWW5OdmJIVjBaVlZTVENoamIyNW1hV2N1ZFhKc0tTa2dlMXh1SUNBZ0lHTnZibVpwWnk1MWNtd2dQU0JqYjIxaWFXNWxWVkpNY3loamIyNW1hV2N1WW1GelpWVlNUQ3dnWTI5dVptbG5MblZ5YkNrN1hHNGdJSDFjYmx4dUlDQXZMeUJGYm5OMWNtVWdhR1ZoWkdWeWN5QmxlR2x6ZEZ4dUlDQmpiMjVtYVdjdWFHVmhaR1Z5Y3lBOUlHTnZibVpwWnk1b1pXRmtaWEp6SUh4OElIdDlPMXh1WEc0Z0lDOHZJRlJ5WVc1elptOXliU0J5WlhGMVpYTjBJR1JoZEdGY2JpQWdZMjl1Wm1sbkxtUmhkR0VnUFNCMGNtRnVjMlp2Y20xRVlYUmhLRnh1SUNBZ0lHTnZibVpwWnk1a1lYUmhMRnh1SUNBZ0lHTnZibVpwWnk1b1pXRmtaWEp6TEZ4dUlDQWdJR052Ym1acFp5NTBjbUZ1YzJadmNtMVNaWEYxWlhOMFhHNGdJQ2s3WEc1Y2JpQWdMeThnUm14aGRIUmxiaUJvWldGa1pYSnpYRzRnSUdOdmJtWnBaeTVvWldGa1pYSnpJRDBnZFhScGJITXViV1Z5WjJVb1hHNGdJQ0FnWTI5dVptbG5MbWhsWVdSbGNuTXVZMjl0Ylc5dUlIeDhJSHQ5TEZ4dUlDQWdJR052Ym1acFp5NW9aV0ZrWlhKelcyTnZibVpwWnk1dFpYUm9iMlJkSUh4OElIdDlMRnh1SUNBZ0lHTnZibVpwWnk1b1pXRmtaWEp6SUh4OElIdDlYRzRnSUNrN1hHNWNiaUFnZFhScGJITXVabTl5UldGamFDaGNiaUFnSUNCYkoyUmxiR1YwWlNjc0lDZG5aWFFuTENBbmFHVmhaQ2NzSUNkd2IzTjBKeXdnSjNCMWRDY3NJQ2R3WVhSamFDY3NJQ2RqYjIxdGIyNG5YU3hjYmlBZ0lDQm1kVzVqZEdsdmJpQmpiR1ZoYmtobFlXUmxja052Ym1acFp5aHRaWFJvYjJRcElIdGNiaUFnSUNBZ0lHUmxiR1YwWlNCamIyNW1hV2N1YUdWaFpHVnljMXR0WlhSb2IyUmRPMXh1SUNBZ0lIMWNiaUFnS1R0Y2JseHVJQ0IyWVhJZ1lXUmhjSFJsY2lBOUlHTnZibVpwWnk1aFpHRndkR1Z5SUh4OElHUmxabUYxYkhSekxtRmtZWEIwWlhJN1hHNWNiaUFnY21WMGRYSnVJR0ZrWVhCMFpYSW9ZMjl1Wm1sbktTNTBhR1Z1S0daMWJtTjBhVzl1SUc5dVFXUmhjSFJsY2xKbGMyOXNkWFJwYjI0b2NtVnpjRzl1YzJVcElIdGNiaUFnSUNCMGFISnZkMGxtUTJGdVkyVnNiR0YwYVc5dVVtVnhkV1Z6ZEdWa0tHTnZibVpwWnlrN1hHNWNiaUFnSUNBdkx5QlVjbUZ1YzJadmNtMGdjbVZ6Y0c5dWMyVWdaR0YwWVZ4dUlDQWdJSEpsYzNCdmJuTmxMbVJoZEdFZ1BTQjBjbUZ1YzJadmNtMUVZWFJoS0Z4dUlDQWdJQ0FnY21WemNHOXVjMlV1WkdGMFlTeGNiaUFnSUNBZ0lISmxjM0J2Ym5ObExtaGxZV1JsY25Nc1hHNGdJQ0FnSUNCamIyNW1hV2N1ZEhKaGJuTm1iM0p0VW1WemNHOXVjMlZjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlISmxjM0J2Ym5ObE8xeHVJQ0I5TENCbWRXNWpkR2x2YmlCdmJrRmtZWEIwWlhKU1pXcGxZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnYVdZZ0tDRnBjME5oYm1ObGJDaHlaV0Z6YjI0cEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZDBsbVEyRnVZMlZzYkdGMGFXOXVVbVZ4ZFdWemRHVmtLR052Ym1acFp5azdYRzVjYmlBZ0lDQWdJQzh2SUZSeVlXNXpabTl5YlNCeVpYTndiMjV6WlNCa1lYUmhYRzRnSUNBZ0lDQnBaaUFvY21WaGMyOXVJQ1ltSUhKbFlYTnZiaTV5WlhOd2IyNXpaU2tnZTF4dUlDQWdJQ0FnSUNCeVpXRnpiMjR1Y21WemNHOXVjMlV1WkdGMFlTQTlJSFJ5WVc1elptOXliVVJoZEdFb1hHNGdJQ0FnSUNBZ0lDQWdjbVZoYzI5dUxuSmxjM0J2Ym5ObExtUmhkR0VzWEc0Z0lDQWdJQ0FnSUNBZ2NtVmhjMjl1TG5KbGMzQnZibk5sTG1obFlXUmxjbk1zWEc0Z0lDQWdJQ0FnSUNBZ1kyOXVabWxuTG5SeVlXNXpabTl5YlZKbGMzQnZibk5sWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZxWldOMEtISmxZWE52YmlrN1hHNGdJSDBwTzF4dWZUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1THlvcVhHNGdLaUJWY0dSaGRHVWdZVzRnUlhKeWIzSWdkMmwwYUNCMGFHVWdjM0JsWTJsbWFXVmtJR052Ym1acFp5d2daWEp5YjNJZ1kyOWtaU3dnWVc1a0lISmxjM0J2Ym5ObExseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1JYSnliM0o5SUdWeWNtOXlJRlJvWlNCbGNuSnZjaUIwYnlCMWNHUmhkR1V1WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1kyOXVabWxuSUZSb1pTQmpiMjVtYVdjdVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMk52WkdWZElGUm9aU0JsY25KdmNpQmpiMlJsSUNobWIzSWdaWGhoYlhCc1pTd2dKMFZEVDA1T1FVSlBVbFJGUkNjcExseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR5WlhGMVpYTjBYU0JVYUdVZ2NtVnhkV1Z6ZEM1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJjbVZ6Y0c5dWMyVmRJRlJvWlNCeVpYTndiMjV6WlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRGY25KdmNuMGdWR2hsSUdWeWNtOXlMbHh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHVnVhR0Z1WTJWRmNuSnZjaWhsY25KdmNpd2dZMjl1Wm1sbkxDQmpiMlJsTENCeVpYRjFaWE4wTENCeVpYTndiMjV6WlNrZ2UxeHVJQ0JsY25KdmNpNWpiMjVtYVdjZ1BTQmpiMjVtYVdjN1hHNGdJR2xtSUNoamIyUmxLU0I3WEc0Z0lDQWdaWEp5YjNJdVkyOWtaU0E5SUdOdlpHVTdYRzRnSUgxY2JpQWdaWEp5YjNJdWNtVnhkV1Z6ZENBOUlISmxjWFZsYzNRN1hHNGdJR1Z5Y205eUxuSmxjM0J2Ym5ObElEMGdjbVZ6Y0c5dWMyVTdYRzRnSUhKbGRIVnliaUJsY25KdmNqdGNibjA3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJqY21WaGRHVkZjbkp2Y2lBOUlISmxjWFZwY21Vb0p5NHZZM0psWVhSbFJYSnliM0luS1R0Y2JseHVMeW9xWEc0Z0tpQlNaWE52YkhabElHOXlJSEpsYW1WamRDQmhJRkJ5YjIxcGMyVWdZbUZ6WldRZ2IyNGdjbVZ6Y0c5dWMyVWdjM1JoZEhWekxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlISmxjMjlzZG1VZ1FTQm1kVzVqZEdsdmJpQjBhR0YwSUhKbGMyOXNkbVZ6SUhSb1pTQndjbTl0YVhObExseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnY21WcVpXTjBJRUVnWm5WdVkzUnBiMjRnZEdoaGRDQnlaV3BsWTNSeklIUm9aU0J3Y205dGFYTmxMbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhKbGMzQnZibk5sSUZSb1pTQnlaWE53YjI1elpTNWNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCelpYUjBiR1VvY21WemIyeDJaU3dnY21WcVpXTjBMQ0J5WlhOd2IyNXpaU2tnZTF4dUlDQjJZWElnZG1Gc2FXUmhkR1ZUZEdGMGRYTWdQU0J5WlhOd2IyNXpaUzVqYjI1bWFXY3VkbUZzYVdSaGRHVlRkR0YwZFhNN1hHNGdJQzh2SUU1dmRHVTZJSE4wWVhSMWN5QnBjeUJ1YjNRZ1pYaHdiM05sWkNCaWVTQllSRzl0WVdsdVVtVnhkV1Z6ZEZ4dUlDQnBaaUFvSVhKbGMzQnZibk5sTG5OMFlYUjFjeUI4ZkNBaGRtRnNhV1JoZEdWVGRHRjBkWE1nZkh3Z2RtRnNhV1JoZEdWVGRHRjBkWE1vY21WemNHOXVjMlV1YzNSaGRIVnpLU2tnZTF4dUlDQWdJSEpsYzI5c2RtVW9jbVZ6Y0c5dWMyVXBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsYW1WamRDaGpjbVZoZEdWRmNuSnZjaWhjYmlBZ0lDQWdJQ2RTWlhGMVpYTjBJR1poYVd4bFpDQjNhWFJvSUhOMFlYUjFjeUJqYjJSbElDY2dLeUJ5WlhOd2IyNXpaUzV6ZEdGMGRYTXNYRzRnSUNBZ0lDQnlaWE53YjI1elpTNWpiMjVtYVdjc1hHNGdJQ0FnSUNCdWRXeHNMRnh1SUNBZ0lDQWdjbVZ6Y0c5dWMyVXVjbVZ4ZFdWemRDeGNiaUFnSUNBZ0lISmxjM0J2Ym5ObFhHNGdJQ0FnS1NrN1hHNGdJSDFjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCMWRHbHNjeUE5SUhKbGNYVnBjbVVvSnk0dkxpNHZkWFJwYkhNbktUdGNibHh1THlvcVhHNGdLaUJVY21GdWMyWnZjbTBnZEdobElHUmhkR0VnWm05eUlHRWdjbVZ4ZFdWemRDQnZjaUJoSUhKbGMzQnZibk5sWEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjhVM1J5YVc1bmZTQmtZWFJoSUZSb1pTQmtZWFJoSUhSdklHSmxJSFJ5WVc1elptOXliV1ZrWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCb1pXRmtaWEp6SUZSb1pTQm9aV0ZrWlhKeklHWnZjaUIwYUdVZ2NtVnhkV1Z6ZENCdmNpQnlaWE53YjI1elpWeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYeEdkVzVqZEdsdmJuMGdabTV6SUVFZ2MybHVaMnhsSUdaMWJtTjBhVzl1SUc5eUlFRnljbUY1SUc5bUlHWjFibU4wYVc5dWMxeHVJQ29nUUhKbGRIVnlibk1nZXlwOUlGUm9aU0J5WlhOMWJIUnBibWNnZEhKaGJuTm1iM0p0WldRZ1pHRjBZVnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlIUnlZVzV6Wm05eWJVUmhkR0VvWkdGMFlTd2dhR1ZoWkdWeWN5d2dabTV6S1NCN1hHNGdJQzhxWlhOc2FXNTBJRzV2TFhCaGNtRnRMWEpsWVhOemFXZHVPakFxTDF4dUlDQjFkR2xzY3k1bWIzSkZZV05vS0dadWN5d2dablZ1WTNScGIyNGdkSEpoYm5ObWIzSnRLR1p1S1NCN1hHNGdJQ0FnWkdGMFlTQTlJR1p1S0dSaGRHRXNJR2hsWVdSbGNuTXBPMXh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnWkdGMFlUdGNibjA3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUIxZEdsc2N5QTlJSEpsY1hWcGNtVW9KeTR2ZFhScGJITW5LVHRjYm5aaGNpQnViM0p0WVd4cGVtVklaV0ZrWlhKT1lXMWxJRDBnY21WeGRXbHlaU2duTGk5b1pXeHdaWEp6TDI1dmNtMWhiR2w2WlVobFlXUmxjazVoYldVbktUdGNibHh1ZG1GeUlFUkZSa0ZWVEZSZlEwOU9WRVZPVkY5VVdWQkZJRDBnZTF4dUlDQW5RMjl1ZEdWdWRDMVVlWEJsSnpvZ0oyRndjR3hwWTJGMGFXOXVMM2d0ZDNkM0xXWnZjbTB0ZFhKc1pXNWpiMlJsWkNkY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhObGRFTnZiblJsYm5SVWVYQmxTV1pWYm5ObGRDaG9aV0ZrWlhKekxDQjJZV3gxWlNrZ2UxeHVJQ0JwWmlBb0lYVjBhV3h6TG1selZXNWtaV1pwYm1Wa0tHaGxZV1JsY25NcElDWW1JSFYwYVd4ekxtbHpWVzVrWldacGJtVmtLR2hsWVdSbGNuTmJKME52Ym5SbGJuUXRWSGx3WlNkZEtTa2dlMXh1SUNBZ0lHaGxZV1JsY25OYkowTnZiblJsYm5RdFZIbHdaU2RkSUQwZ2RtRnNkV1U3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBSR1ZtWVhWc2RFRmtZWEIwWlhJb0tTQjdYRzRnSUhaaGNpQmhaR0Z3ZEdWeU8xeHVJQ0JwWmlBb2RIbHdaVzltSUZoTlRFaDBkSEJTWlhGMVpYTjBJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDOHZJRVp2Y2lCaWNtOTNjMlZ5Y3lCMWMyVWdXRWhTSUdGa1lYQjBaWEpjYmlBZ0lDQmhaR0Z3ZEdWeUlEMGdjbVZ4ZFdseVpTZ25MaTloWkdGd2RHVnljeTk0YUhJbktUdGNiaUFnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnY0hKdlkyVnpjeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQXZMeUJHYjNJZ2JtOWtaU0IxYzJVZ1NGUlVVQ0JoWkdGd2RHVnlYRzRnSUNBZ1lXUmhjSFJsY2lBOUlISmxjWFZwY21Vb0p5NHZZV1JoY0hSbGNuTXZhSFIwY0NjcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCaFpHRndkR1Z5TzF4dWZWeHVYRzUyWVhJZ1pHVm1ZWFZzZEhNZ1BTQjdYRzRnSUdGa1lYQjBaWEk2SUdkbGRFUmxabUYxYkhSQlpHRndkR1Z5S0Nrc1hHNWNiaUFnZEhKaGJuTm1iM0p0VW1WeGRXVnpkRG9nVzJaMWJtTjBhVzl1SUhSeVlXNXpabTl5YlZKbGNYVmxjM1FvWkdGMFlTd2dhR1ZoWkdWeWN5a2dlMXh1SUNBZ0lHNXZjbTFoYkdsNlpVaGxZV1JsY2s1aGJXVW9hR1ZoWkdWeWN5d2dKME52Ym5SbGJuUXRWSGx3WlNjcE8xeHVJQ0FnSUdsbUlDaDFkR2xzY3k1cGMwWnZjbTFFWVhSaEtHUmhkR0VwSUh4OFhHNGdJQ0FnSUNCMWRHbHNjeTVwYzBGeWNtRjVRblZtWm1WeUtHUmhkR0VwSUh4OFhHNGdJQ0FnSUNCMWRHbHNjeTVwYzBKMVptWmxjaWhrWVhSaEtTQjhmRnh1SUNBZ0lDQWdkWFJwYkhNdWFYTlRkSEpsWVcwb1pHRjBZU2tnZkh4Y2JpQWdJQ0FnSUhWMGFXeHpMbWx6Um1sc1pTaGtZWFJoS1NCOGZGeHVJQ0FnSUNBZ2RYUnBiSE11YVhOQ2JHOWlLR1JoZEdFcFhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWkdGMFlUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIVjBhV3h6TG1selFYSnlZWGxDZFdabVpYSldhV1YzS0dSaGRHRXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaR0YwWVM1aWRXWm1aWEk3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gxZEdsc2N5NXBjMVZTVEZObFlYSmphRkJoY21GdGN5aGtZWFJoS1NrZ2UxeHVJQ0FnSUNBZ2MyVjBRMjl1ZEdWdWRGUjVjR1ZKWmxWdWMyVjBLR2hsWVdSbGNuTXNJQ2RoY0hCc2FXTmhkR2x2Ymk5NExYZDNkeTFtYjNKdExYVnliR1Z1WTI5a1pXUTdZMmhoY25ObGREMTFkR1l0T0NjcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdSaGRHRXVkRzlUZEhKcGJtY29LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFYwYVd4ekxtbHpUMkpxWldOMEtHUmhkR0VwS1NCN1hHNGdJQ0FnSUNCelpYUkRiMjUwWlc1MFZIbHdaVWxtVlc1elpYUW9hR1ZoWkdWeWN5d2dKMkZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZMmhoY25ObGREMTFkR1l0T0NjcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUVwVFQwNHVjM1J5YVc1bmFXWjVLR1JoZEdFcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdaR0YwWVR0Y2JpQWdmVjBzWEc1Y2JpQWdkSEpoYm5ObWIzSnRVbVZ6Y0c5dWMyVTZJRnRtZFc1amRHbHZiaUIwY21GdWMyWnZjbTFTWlhOd2IyNXpaU2hrWVhSaEtTQjdYRzRnSUNBZ0x5cGxjMnhwYm5RZ2JtOHRjR0Z5WVcwdGNtVmhjM05wWjI0Nk1Db3ZYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmtZWFJoSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1pHRjBZU0E5SUVwVFQwNHVjR0Z5YzJVb1pHRjBZU2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN0lDOHFJRWxuYm05eVpTQXFMeUI5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCa1lYUmhPMXh1SUNCOVhTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1FTQjBhVzFsYjNWMElHbHVJRzFwYkd4cGMyVmpiMjVrY3lCMGJ5QmhZbTl5ZENCaElISmxjWFZsYzNRdUlFbG1JSE5sZENCMGJ5QXdJQ2hrWldaaGRXeDBLU0JoWEc0Z0lDQXFJSFJwYldWdmRYUWdhWE1nYm05MElHTnlaV0YwWldRdVhHNGdJQ0FxTDF4dUlDQjBhVzFsYjNWME9pQXdMRnh1WEc0Z0lIaHpjbVpEYjI5cmFXVk9ZVzFsT2lBbldGTlNSaTFVVDB0RlRpY3NYRzRnSUhoemNtWklaV0ZrWlhKT1lXMWxPaUFuV0MxWVUxSkdMVlJQUzBWT0p5eGNibHh1SUNCdFlYaERiMjUwWlc1MFRHVnVaM1JvT2lBdE1TeGNibHh1SUNCMllXeHBaR0YwWlZOMFlYUjFjem9nWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZUZEdGMGRYTW9jM1JoZEhWektTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOMFlYUjFjeUErUFNBeU1EQWdKaVlnYzNSaGRIVnpJRHdnTXpBd08xeHVJQ0I5WEc1OU8xeHVYRzVrWldaaGRXeDBjeTVvWldGa1pYSnpJRDBnZTF4dUlDQmpiMjF0YjI0NklIdGNiaUFnSUNBblFXTmpaWEIwSnpvZ0oyRndjR3hwWTJGMGFXOXVMMnB6YjI0c0lIUmxlSFF2Y0d4aGFXNHNJQ292S2lkY2JpQWdmVnh1ZlR0Y2JseHVkWFJwYkhNdVptOXlSV0ZqYUNoYkoyUmxiR1YwWlNjc0lDZG5aWFFuTENBbmFHVmhaQ2RkTENCbWRXNWpkR2x2YmlCbWIzSkZZV05vVFdWMGFHOWtUbTlFWVhSaEtHMWxkR2h2WkNrZ2UxeHVJQ0JrWldaaGRXeDBjeTVvWldGa1pYSnpXMjFsZEdodlpGMGdQU0I3ZlR0Y2JuMHBPMXh1WEc1MWRHbHNjeTVtYjNKRllXTm9LRnNuY0c5emRDY3NJQ2R3ZFhRbkxDQW5jR0YwWTJnblhTd2dablZ1WTNScGIyNGdabTl5UldGamFFMWxkR2h2WkZkcGRHaEVZWFJoS0cxbGRHaHZaQ2tnZTF4dUlDQmtaV1poZFd4MGN5NW9aV0ZrWlhKelcyMWxkR2h2WkYwZ1BTQjFkR2xzY3k1dFpYSm5aU2hFUlVaQlZVeFVYME5QVGxSRlRsUmZWRmxRUlNrN1hHNTlLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCa1pXWmhkV3gwY3p0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmlhVzVrS0dadUxDQjBhR2x6UVhKbktTQjdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUIzY21Gd0tDa2dlMXh1SUNBZ0lIWmhjaUJoY21keklEMGdibVYzSUVGeWNtRjVLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZWEpuY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdZWEpuYzF0cFhTQTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9hWE5CY21jc0lHRnlaM01wTzF4dUlDQjlPMXh1ZlR0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVMeThnWW5SdllTQndiMng1Wm1sc2JDQm1iM0lnU1VVOE1UQWdZMjkxY25SbGMza2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMlJoZG1sa1kyaGhiV0psY25NdlFtRnpaVFkwTG1welhHNWNiblpoY2lCamFHRnljeUE5SUNkQlFrTkVSVVpIU0VsS1MweE5UazlRVVZKVFZGVldWMWhaV21GaVkyUmxabWRvYVdwcmJHMXViM0J4Y25OMGRYWjNlSGw2TURFeU16UTFOamM0T1NzdlBTYzdYRzVjYm1aMWJtTjBhVzl1SUVVb0tTQjdYRzRnSUhSb2FYTXViV1Z6YzJGblpTQTlJQ2RUZEhKcGJtY2dZMjl1ZEdGcGJuTWdZVzRnYVc1MllXeHBaQ0JqYUdGeVlXTjBaWEluTzF4dWZWeHVSUzV3Y205MGIzUjVjR1VnUFNCdVpYY2dSWEp5YjNJN1hHNUZMbkJ5YjNSdmRIbHdaUzVqYjJSbElEMGdOVHRjYmtVdWNISnZkRzkwZVhCbExtNWhiV1VnUFNBblNXNTJZV3hwWkVOb1lYSmhZM1JsY2tWeWNtOXlKenRjYmx4dVpuVnVZM1JwYjI0Z1luUnZZU2hwYm5CMWRDa2dlMXh1SUNCMllYSWdjM1J5SUQwZ1UzUnlhVzVuS0dsdWNIVjBLVHRjYmlBZ2RtRnlJRzkxZEhCMWRDQTlJQ2NuTzF4dUlDQm1iM0lnS0Z4dUlDQWdJQzh2SUdsdWFYUnBZV3hwZW1VZ2NtVnpkV3gwSUdGdVpDQmpiM1Z1ZEdWeVhHNGdJQ0FnZG1GeUlHSnNiMk5yTENCamFHRnlRMjlrWlN3Z2FXUjRJRDBnTUN3Z2JXRndJRDBnWTJoaGNuTTdYRzRnSUNBZ0x5OGdhV1lnZEdobElHNWxlSFFnYzNSeUlHbHVaR1Y0SUdSdlpYTWdibTkwSUdWNGFYTjBPbHh1SUNBZ0lDOHZJQ0FnWTJoaGJtZGxJSFJvWlNCdFlYQndhVzVuSUhSaFlteGxJSFJ2SUZ3aVBWd2lYRzRnSUNBZ0x5OGdJQ0JqYUdWamF5QnBaaUJrSUdoaGN5QnVieUJtY21GamRHbHZibUZzSUdScFoybDBjMXh1SUNBZ0lITjBjaTVqYUdGeVFYUW9hV1I0SUh3Z01Da2dmSHdnS0cxaGNDQTlJQ2M5Snl3Z2FXUjRJQ1VnTVNrN1hHNGdJQ0FnTHk4Z1hDSTRJQzBnYVdSNElDVWdNU0FxSURoY0lpQm5aVzVsY21GMFpYTWdkR2hsSUhObGNYVmxibU5sSURJc0lEUXNJRFlzSURoY2JpQWdJQ0J2ZFhSd2RYUWdLejBnYldGd0xtTm9ZWEpCZENnMk15QW1JR0pzYjJOcklENCtJRGdnTFNCcFpIZ2dKU0F4SUNvZ09DbGNiaUFnS1NCN1hHNGdJQ0FnWTJoaGNrTnZaR1VnUFNCemRISXVZMmhoY2tOdlpHVkJkQ2hwWkhnZ0t6MGdNeUF2SURRcE8xeHVJQ0FnSUdsbUlDaGphR0Z5UTI5a1pTQStJREI0UmtZcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHSnNiMk5ySUQwZ1lteHZZMnNnUER3Z09DQjhJR05vWVhKRGIyUmxPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJ3ZFhRN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWW5SdllUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlIVjBhV3h6SUQwZ2NtVnhkV2x5WlNnbkxpOHVMaTkxZEdsc2N5Y3BPMXh1WEc1bWRXNWpkR2x2YmlCbGJtTnZaR1VvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUJsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvZG1Gc0tTNWNiaUFnSUNCeVpYQnNZV05sS0M4bE5EQXZaMmtzSUNkQUp5a3VYRzRnSUNBZ2NtVndiR0ZqWlNndkpUTkJMMmRwTENBbk9pY3BMbHh1SUNBZ0lISmxjR3hoWTJVb0x5VXlOQzluTENBbkpDY3BMbHh1SUNBZ0lISmxjR3hoWTJVb0x5VXlReTluYVN3Z0p5d25LUzVjYmlBZ0lDQnlaWEJzWVdObEtDOGxNakF2Wnl3Z0p5c25LUzVjYmlBZ0lDQnlaWEJzWVdObEtDOGxOVUl2WjJrc0lDZGJKeWt1WEc0Z0lDQWdjbVZ3YkdGalpTZ3ZKVFZFTDJkcExDQW5YU2NwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRUoxYVd4a0lHRWdWVkpNSUdKNUlHRndjR1Z1WkdsdVp5QndZWEpoYlhNZ2RHOGdkR2hsSUdWdVpGeHVJQ3BjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMWNtd2dWR2hsSUdKaGMyVWdiMllnZEdobElIVnliQ0FvWlM1bkxpd2dhSFIwY0RvdkwzZDNkeTVuYjI5bmJHVXVZMjl0S1Z4dUlDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlGdHdZWEpoYlhOZElGUm9aU0J3WVhKaGJYTWdkRzhnWW1VZ1lYQndaVzVrWldSY2JpQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDlJRlJvWlNCbWIzSnRZWFIwWldRZ2RYSnNYRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z1luVnBiR1JWVWt3b2RYSnNMQ0J3WVhKaGJYTXNJSEJoY21GdGMxTmxjbWxoYkdsNlpYSXBJSHRjYmlBZ0x5cGxjMnhwYm5RZ2JtOHRjR0Z5WVcwdGNtVmhjM05wWjI0Nk1Db3ZYRzRnSUdsbUlDZ2hjR0Z5WVcxektTQjdYRzRnSUNBZ2NtVjBkWEp1SUhWeWJEdGNiaUFnZlZ4dVhHNGdJSFpoY2lCelpYSnBZV3hwZW1Wa1VHRnlZVzF6TzF4dUlDQnBaaUFvY0dGeVlXMXpVMlZ5YVdGc2FYcGxjaWtnZTF4dUlDQWdJSE5sY21saGJHbDZaV1JRWVhKaGJYTWdQU0J3WVhKaGJYTlRaWEpwWVd4cGVtVnlLSEJoY21GdGN5azdYRzRnSUgwZ1pXeHpaU0JwWmlBb2RYUnBiSE11YVhOVlVreFRaV0Z5WTJoUVlYSmhiWE1vY0dGeVlXMXpLU2tnZTF4dUlDQWdJSE5sY21saGJHbDZaV1JRWVhKaGJYTWdQU0J3WVhKaGJYTXVkRzlUZEhKcGJtY29LVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ2NHRnlkSE1nUFNCYlhUdGNibHh1SUNBZ0lIVjBhV3h6TG1admNrVmhZMmdvY0dGeVlXMXpMQ0JtZFc1amRHbHZiaUJ6WlhKcFlXeHBlbVVvZG1Gc0xDQnJaWGtwSUh0Y2JpQWdJQ0FnSUdsbUlDaDJZV3dnUFQwOUlHNTFiR3dnZkh3Z2RIbHdaVzltSUhaaGJDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvZFhScGJITXVhWE5CY25KaGVTaDJZV3dwS1NCN1hHNGdJQ0FnSUNBZ0lHdGxlU0E5SUd0bGVTQXJJQ2RiWFNjN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMllXd2dQU0JiZG1Gc1hUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkWFJwYkhNdVptOXlSV0ZqYUNoMllXd3NJR1oxYm1OMGFXOXVJSEJoY25ObFZtRnNkV1VvZGlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZFhScGJITXVhWE5FWVhSbEtIWXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RpQTlJSFl1ZEc5SlUwOVRkSEpwYm1jb0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gxZEdsc2N5NXBjMDlpYW1WamRDaDJLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIWWdQU0JLVTA5T0xuTjBjbWx1WjJsbWVTaDJLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCd1lYSjBjeTV3ZFhOb0tHVnVZMjlrWlNoclpYa3BJQ3NnSnowbklDc2daVzVqYjJSbEtIWXBLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnYzJWeWFXRnNhWHBsWkZCaGNtRnRjeUE5SUhCaGNuUnpMbXB2YVc0b0p5WW5LVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaHpaWEpwWVd4cGVtVmtVR0Z5WVcxektTQjdYRzRnSUNBZ2RYSnNJQ3M5SUNoMWNtd3VhVzVrWlhoUFppZ25QeWNwSUQwOVBTQXRNU0EvSUNjL0p5QTZJQ2NtSnlrZ0t5QnpaWEpwWVd4cGVtVmtVR0Z5WVcxek8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIVnliRHRjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJRzVsZHlCVlVrd2dZbmtnWTI5dFltbHVhVzVuSUhSb1pTQnpjR1ZqYVdacFpXUWdWVkpNYzF4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JpWVhObFZWSk1JRlJvWlNCaVlYTmxJRlZTVEZ4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISmxiR0YwYVhabFZWSk1JRlJvWlNCeVpXeGhkR2wyWlNCVlVreGNiaUFxSUVCeVpYUjFjbTV6SUh0emRISnBibWQ5SUZSb1pTQmpiMjFpYVc1bFpDQlZVa3hjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmpiMjFpYVc1bFZWSk1jeWhpWVhObFZWSk1MQ0J5Wld4aGRHbDJaVlZTVENrZ2UxeHVJQ0J5WlhSMWNtNGdjbVZzWVhScGRtVlZVa3hjYmlBZ0lDQS9JR0poYzJWVlVrd3VjbVZ3YkdGalpTZ3ZYRnd2S3lRdkxDQW5KeWtnS3lBbkx5Y2dLeUJ5Wld4aGRHbDJaVlZTVEM1eVpYQnNZV05sS0M5ZVhGd3ZLeThzSUNjbktWeHVJQ0FnSURvZ1ltRnpaVlZTVER0Y2JuMDdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQjFkR2xzY3lBOUlISmxjWFZwY21Vb0p5NHZMaTR2ZFhScGJITW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBb1hHNGdJSFYwYVd4ekxtbHpVM1JoYm1SaGNtUkNjbTkzYzJWeVJXNTJLQ2tnUDF4dVhHNGdJQzh2SUZOMFlXNWtZWEprSUdKeWIzZHpaWElnWlc1MmN5QnpkWEJ3YjNKMElHUnZZM1Z0Wlc1MExtTnZiMnRwWlZ4dUlDQW9ablZ1WTNScGIyNGdjM1JoYm1SaGNtUkNjbTkzYzJWeVJXNTJLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQjNjbWwwWlRvZ1puVnVZM1JwYjI0Z2QzSnBkR1VvYm1GdFpTd2dkbUZzZFdVc0lHVjRjR2x5WlhNc0lIQmhkR2dzSUdSdmJXRnBiaXdnYzJWamRYSmxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiMjlyYVdVZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWTI5dmEybGxMbkIxYzJnb2JtRnRaU0FySUNjOUp5QXJJR1Z1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2gyWVd4MVpTa3BPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDFkR2xzY3k1cGMwNTFiV0psY2lobGVIQnBjbVZ6S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052YjJ0cFpTNXdkWE5vS0NkbGVIQnBjbVZ6UFNjZ0t5QnVaWGNnUkdGMFpTaGxlSEJwY21WektTNTBiMGROVkZOMGNtbHVaeWdwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMWRHbHNjeTVwYzFOMGNtbHVaeWh3WVhSb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmIydHBaUzV3ZFhOb0tDZHdZWFJvUFNjZ0t5QndZWFJvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMWRHbHNjeTVwYzFOMGNtbHVaeWhrYjIxaGFXNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXZhMmxsTG5CMWMyZ29KMlJ2YldGcGJqMG5JQ3NnWkc5dFlXbHVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6WldOMWNtVWdQVDA5SUhSeWRXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyOXJhV1V1Y0hWemFDZ25jMlZqZFhKbEp5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1amIyOXJhV1VnUFNCamIyOXJhV1V1YW05cGJpZ25PeUFuS1R0Y2JpQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lISmxZV1E2SUdaMWJtTjBhVzl1SUhKbFlXUW9ibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYldGMFkyZ2dQU0JrYjJOMWJXVnVkQzVqYjI5cmFXVXViV0YwWTJnb2JtVjNJRkpsWjBWNGNDZ25LRjU4TzF4Y1hGeHpLaWtvSnlBcklHNWhiV1VnS3lBbktUMG9XMTQ3WFNvcEp5a3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRzFoZEdOb0lEOGdaR1ZqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLRzFoZEdOb1d6TmRLU0E2SUc1MWJHd3BPMXh1SUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnY21WdGIzWmxPaUJtZFc1amRHbHZiaUJ5WlcxdmRtVW9ibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5keWFYUmxLRzVoYldVc0lDY25MQ0JFWVhSbExtNXZkeWdwSUMwZ09EWTBNREF3TURBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJSDBwS0NrZ09seHVYRzRnSUM4dklFNXZiaUJ6ZEdGdVpHRnlaQ0JpY205M2MyVnlJR1Z1ZGlBb2QyVmlJSGR2Y210bGNuTXNJSEpsWVdOMExXNWhkR2wyWlNrZ2JHRmpheUJ1WldWa1pXUWdjM1Z3Y0c5eWRDNWNiaUFnS0daMWJtTjBhVzl1SUc1dmJsTjBZVzVrWVhKa1FuSnZkM05sY2tWdWRpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ2QzSnBkR1U2SUdaMWJtTjBhVzl1SUhkeWFYUmxLQ2tnZTMwc1hHNGdJQ0FnSUNCeVpXRmtPaUJtZFc1amRHbHZiaUJ5WldGa0tDa2dleUJ5WlhSMWNtNGdiblZzYkRzZ2ZTeGNiaUFnSUNBZ0lISmxiVzkyWlRvZ1puVnVZM1JwYjI0Z2NtVnRiM1psS0NrZ2UzMWNiaUFnSUNCOU8xeHVJQ0I5S1NncFhHNHBPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc0dktpcGNiaUFxSUVSbGRHVnliV2x1WlhNZ2QyaGxkR2hsY2lCMGFHVWdjM0JsWTJsbWFXVmtJRlZTVENCcGN5QmhZbk52YkhWMFpWeHVJQ3BjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMWNtd2dWR2hsSUZWU1RDQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIwYUdVZ2MzQmxZMmxtYVdWa0lGVlNUQ0JwY3lCaFluTnZiSFYwWlN3Z2IzUm9aWEozYVhObElHWmhiSE5sWEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdhWE5CWW5OdmJIVjBaVlZTVENoMWNtd3BJSHRjYmlBZ0x5OGdRU0JWVWt3Z2FYTWdZMjl1YzJsa1pYSmxaQ0JoWW5OdmJIVjBaU0JwWmlCcGRDQmlaV2RwYm5NZ2QybDBhQ0JjSWp4elkyaGxiV1UrT2k4dlhDSWdiM0lnWENJdkwxd2lJQ2h3Y205MGIyTnZiQzF5Wld4aGRHbDJaU0JWVWt3cExseHVJQ0F2THlCU1JrTWdNems0TmlCa1pXWnBibVZ6SUhOamFHVnRaU0J1WVcxbElHRnpJR0VnYzJWeGRXVnVZMlVnYjJZZ1kyaGhjbUZqZEdWeWN5QmlaV2RwYm01cGJtY2dkMmwwYUNCaElHeGxkSFJsY2lCaGJtUWdabTlzYkc5M1pXUmNiaUFnTHk4Z1lua2dZVzU1SUdOdmJXSnBibUYwYVc5dUlHOW1JR3hsZEhSbGNuTXNJR1JwWjJsMGN5d2djR3gxY3l3Z2NHVnlhVzlrTENCdmNpQm9lWEJvWlc0dVhHNGdJSEpsZEhWeWJpQXZYaWhiWVMxNlhWdGhMWHBjWEdSY1hDdGNYQzFjWEM1ZEtqb3BQMXhjTDF4Y0x5OXBMblJsYzNRb2RYSnNLVHRjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCMWRHbHNjeUE5SUhKbGNYVnBjbVVvSnk0dkxpNHZkWFJwYkhNbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvWEc0Z0lIVjBhV3h6TG1selUzUmhibVJoY21SQ2NtOTNjMlZ5Ulc1MktDa2dQMXh1WEc0Z0lDOHZJRk4wWVc1a1lYSmtJR0p5YjNkelpYSWdaVzUyY3lCb1lYWmxJR1oxYkd3Z2MzVndjRzl5ZENCdlppQjBhR1VnUVZCSmN5QnVaV1ZrWldRZ2RHOGdkR1Z6ZEZ4dUlDQXZMeUIzYUdWMGFHVnlJSFJvWlNCeVpYRjFaWE4wSUZWU1RDQnBjeUJ2WmlCMGFHVWdjMkZ0WlNCdmNtbG5hVzRnWVhNZ1kzVnljbVZ1ZENCc2IyTmhkR2x2Ymk1Y2JpQWdLR1oxYm1OMGFXOXVJSE4wWVc1a1lYSmtRbkp2ZDNObGNrVnVkaWdwSUh0Y2JpQWdJQ0IyWVhJZ2JYTnBaU0E5SUM4b2JYTnBaWHgwY21sa1pXNTBLUzlwTG5SbGMzUW9ibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkQ2s3WEc0Z0lDQWdkbUZ5SUhWeWJGQmhjbk5wYm1kT2IyUmxJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25ZU2NwTzF4dUlDQWdJSFpoY2lCdmNtbG5hVzVWVWt3N1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBcUlGQmhjbk5sSUdFZ1ZWSk1JSFJ2SUdScGMyTnZkbVZ5SUdsMEozTWdZMjl0Y0c5dVpXNTBjMXh1SUNBZ0lDcGNiaUFnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCMWNtd2dWR2hsSUZWU1RDQjBieUJpWlNCd1lYSnpaV1JjYmlBZ0lDQXFJRUJ5WlhSMWNtNXpJSHRQWW1wbFkzUjlYRzRnSUNBZ0tpOWNiaUFnSUNCbWRXNWpkR2x2YmlCeVpYTnZiSFpsVlZKTUtIVnliQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHaHlaV1lnUFNCMWNtdzdYRzVjYmlBZ0lDQWdJR2xtSUNodGMybGxLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFbEZJRzVsWldSeklHRjBkSEpwWW5WMFpTQnpaWFFnZEhkcFkyVWdkRzhnYm05eWJXRnNhWHBsSUhCeWIzQmxjblJwWlhOY2JpQWdJQ0FnSUNBZ2RYSnNVR0Z5YzJsdVowNXZaR1V1YzJWMFFYUjBjbWxpZFhSbEtDZG9jbVZtSnl3Z2FISmxaaWs3WEc0Z0lDQWdJQ0FnSUdoeVpXWWdQU0IxY214UVlYSnphVzVuVG05a1pTNW9jbVZtTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMWNteFFZWEp6YVc1blRtOWtaUzV6WlhSQmRIUnlhV0oxZEdVb0oyaHlaV1luTENCb2NtVm1LVHRjYmx4dUlDQWdJQ0FnTHk4Z2RYSnNVR0Z5YzJsdVowNXZaR1VnY0hKdmRtbGtaWE1nZEdobElGVnliRlYwYVd4eklHbHVkR1Z5Wm1GalpTQXRJR2gwZEhBNkx5OTFjbXd1YzNCbFl5NTNhR0YwZDJjdWIzSm5MeU4xY214MWRHbHNjMXh1SUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdhSEpsWmpvZ2RYSnNVR0Z5YzJsdVowNXZaR1V1YUhKbFppeGNiaUFnSUNBZ0lDQWdjSEp2ZEc5amIydzZJSFZ5YkZCaGNuTnBibWRPYjJSbExuQnliM1J2WTI5c0lEOGdkWEpzVUdGeWMybHVaMDV2WkdVdWNISnZkRzlqYjJ3dWNtVndiR0ZqWlNndk9pUXZMQ0FuSnlrZ09pQW5KeXhjYmlBZ0lDQWdJQ0FnYUc5emREb2dkWEpzVUdGeWMybHVaMDV2WkdVdWFHOXpkQ3hjYmlBZ0lDQWdJQ0FnYzJWaGNtTm9PaUIxY214UVlYSnphVzVuVG05a1pTNXpaV0Z5WTJnZ1B5QjFjbXhRWVhKemFXNW5UbTlrWlM1elpXRnlZMmd1Y21Wd2JHRmpaU2d2WGx4Y1B5OHNJQ2NuS1NBNklDY25MRnh1SUNBZ0lDQWdJQ0JvWVhOb09pQjFjbXhRWVhKemFXNW5UbTlrWlM1b1lYTm9JRDhnZFhKc1VHRnljMmx1WjA1dlpHVXVhR0Z6YUM1eVpYQnNZV05sS0M5ZUl5OHNJQ2NuS1NBNklDY25MRnh1SUNBZ0lDQWdJQ0JvYjNOMGJtRnRaVG9nZFhKc1VHRnljMmx1WjA1dlpHVXVhRzl6ZEc1aGJXVXNYRzRnSUNBZ0lDQWdJSEJ2Y25RNklIVnliRkJoY25OcGJtZE9iMlJsTG5CdmNuUXNYRzRnSUNBZ0lDQWdJSEJoZEdodVlXMWxPaUFvZFhKc1VHRnljMmx1WjA1dlpHVXVjR0YwYUc1aGJXVXVZMmhoY2tGMEtEQXBJRDA5UFNBbkx5Y3BJRDljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJGQmhjbk5wYm1kT2IyUmxMbkJoZEdodVlXMWxJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjdkp5QXJJSFZ5YkZCaGNuTnBibWRPYjJSbExuQmhkR2h1WVcxbFhHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUc5eWFXZHBibFZTVENBOUlISmxjMjlzZG1WVlVrd29kMmx1Wkc5M0xteHZZMkYwYVc5dUxtaHlaV1lwTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZU0JWVWt3Z2MyaGhjbVZ6SUhSb1pTQnpZVzFsSUc5eWFXZHBiaUJoY3lCMGFHVWdZM1Z5Y21WdWRDQnNiMk5oZEdsdmJseHVJQ0FnSUNwY2JpQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J5WlhGMVpYTjBWVkpNSUZSb1pTQlZVa3dnZEc4Z2RHVnpkRnh1SUNBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRlJ5ZFdVZ2FXWWdWVkpNSUhOb1lYSmxjeUIwYUdVZ2MyRnRaU0J2Y21sbmFXNHNJRzkwYUdWeWQybHpaU0JtWVd4elpWeHVJQ0FnSUNvdlhHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVJR2x6VlZKTVUyRnRaVTl5YVdkcGJpaHlaWEYxWlhOMFZWSk1LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NHRnljMlZrSUQwZ0tIVjBhV3h6TG1selUzUnlhVzVuS0hKbGNYVmxjM1JWVWt3cEtTQS9JSEpsYzI5c2RtVlZVa3dvY21WeGRXVnpkRlZTVENrZ09pQnlaWEYxWlhOMFZWSk1PMXh1SUNBZ0lDQWdjbVYwZFhKdUlDaHdZWEp6WldRdWNISnZkRzlqYjJ3Z1BUMDlJRzl5YVdkcGJsVlNUQzV3Y205MGIyTnZiQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5YzJWa0xtaHZjM1FnUFQwOUlHOXlhV2RwYmxWU1RDNW9iM04wS1R0Y2JpQWdJQ0I5TzF4dUlDQjlLU2dwSURwY2JseHVJQ0F2THlCT2IyNGdjM1JoYm1SaGNtUWdZbkp2ZDNObGNpQmxiblp6SUNoM1pXSWdkMjl5YTJWeWN5d2djbVZoWTNRdGJtRjBhWFpsS1NCc1lXTnJJRzVsWldSbFpDQnpkWEJ3YjNKMExseHVJQ0FvWm5WdVkzUnBiMjRnYm05dVUzUmhibVJoY21SQ2NtOTNjMlZ5Ulc1MktDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCcGMxVlNURk5oYldWUGNtbG5hVzRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOU8xeHVJQ0I5S1NncFhHNHBPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMaTkxZEdsc2N5Y3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUc1dmNtMWhiR2w2WlVobFlXUmxjazVoYldVb2FHVmhaR1Z5Y3l3Z2JtOXliV0ZzYVhwbFpFNWhiV1VwSUh0Y2JpQWdkWFJwYkhNdVptOXlSV0ZqYUNob1pXRmtaWEp6TENCbWRXNWpkR2x2YmlCd2NtOWpaWE56U0dWaFpHVnlLSFpoYkhWbExDQnVZVzFsS1NCN1hHNGdJQ0FnYVdZZ0tHNWhiV1VnSVQwOUlHNXZjbTFoYkdsNlpXUk9ZVzFsSUNZbUlHNWhiV1V1ZEc5VmNIQmxja05oYzJVb0tTQTlQVDBnYm05eWJXRnNhWHBsWkU1aGJXVXVkRzlWY0hCbGNrTmhjMlVvS1NrZ2UxeHVJQ0FnSUNBZ2FHVmhaR1Z5YzF0dWIzSnRZV3hwZW1Wa1RtRnRaVjBnUFNCMllXeDFaVHRjYmlBZ0lDQWdJR1JsYkdWMFpTQm9aV0ZrWlhKelcyNWhiV1ZkTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1THk0dUwzVjBhV3h6SnlrN1hHNWNiaTh2SUVobFlXUmxjbk1nZDJodmMyVWdaSFZ3YkdsallYUmxjeUJoY21VZ2FXZHViM0psWkNCaWVTQnViMlJsWEc0dkx5QmpMbVl1SUdoMGRIQnpPaTh2Ym05a1pXcHpMbTl5Wnk5aGNHa3ZhSFIwY0M1b2RHMXNJMmgwZEhCZmJXVnpjMkZuWlY5b1pXRmtaWEp6WEc1MllYSWdhV2R1YjNKbFJIVndiR2xqWVhSbFQyWWdQU0JiWEc0Z0lDZGhaMlVuTENBbllYVjBhRzl5YVhwaGRHbHZiaWNzSUNkamIyNTBaVzUwTFd4bGJtZDBhQ2NzSUNkamIyNTBaVzUwTFhSNWNHVW5MQ0FuWlhSaFp5Y3NYRzRnSUNkbGVIQnBjbVZ6Snl3Z0oyWnliMjBuTENBbmFHOXpkQ2NzSUNkcFppMXRiMlJwWm1sbFpDMXphVzVqWlNjc0lDZHBaaTExYm0xdlpHbG1hV1ZrTFhOcGJtTmxKeXhjYmlBZ0oyeGhjM1F0Ylc5a2FXWnBaV1FuTENBbmJHOWpZWFJwYjI0bkxDQW5iV0Y0TFdadmNuZGhjbVJ6Snl3Z0ozQnliM2g1TFdGMWRHaHZjbWw2WVhScGIyNG5MRnh1SUNBbmNtVm1aWEpsY2ljc0lDZHlaWFJ5ZVMxaFpuUmxjaWNzSUNkMWMyVnlMV0ZuWlc1MEoxeHVYVHRjYmx4dUx5b3FYRzRnS2lCUVlYSnpaU0JvWldGa1pYSnpJR2x1ZEc4Z1lXNGdiMkpxWldOMFhHNGdLbHh1SUNvZ1lHQmdYRzRnS2lCRVlYUmxPaUJYWldRc0lESTNJRUYxWnlBeU1ERTBJREE0T2pVNE9qUTVJRWROVkZ4dUlDb2dRMjl1ZEdWdWRDMVVlWEJsT2lCaGNIQnNhV05oZEdsdmJpOXFjMjl1WEc0Z0tpQkRiMjV1WldOMGFXOXVPaUJyWldWd0xXRnNhWFpsWEc0Z0tpQlVjbUZ1YzJabGNpMUZibU52WkdsdVp6b2dZMmgxYm10bFpGeHVJQ29nWUdCZ1hHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUdobFlXUmxjbk1nU0dWaFpHVnljeUJ1WldWa2FXNW5JSFJ2SUdKbElIQmhjbk5sWkZ4dUlDb2dRSEpsZEhWeWJuTWdlMDlpYW1WamRIMGdTR1ZoWkdWeWN5QndZWEp6WldRZ2FXNTBieUJoYmlCdlltcGxZM1JjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQndZWEp6WlVobFlXUmxjbk1vYUdWaFpHVnljeWtnZTF4dUlDQjJZWElnY0dGeWMyVmtJRDBnZTMwN1hHNGdJSFpoY2lCclpYazdYRzRnSUhaaGNpQjJZV3c3WEc0Z0lIWmhjaUJwTzF4dVhHNGdJR2xtSUNnaGFHVmhaR1Z5Y3lrZ2V5QnlaWFIxY200Z2NHRnljMlZrT3lCOVhHNWNiaUFnZFhScGJITXVabTl5UldGamFDaG9aV0ZrWlhKekxuTndiR2wwS0NkY1hHNG5LU3dnWm5WdVkzUnBiMjRnY0dGeWMyVnlLR3hwYm1VcElIdGNiaUFnSUNCcElEMGdiR2x1WlM1cGJtUmxlRTltS0NjNkp5azdYRzRnSUNBZ2EyVjVJRDBnZFhScGJITXVkSEpwYlNoc2FXNWxMbk4xWW5OMGNpZ3dMQ0JwS1NrdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmlBZ0lDQjJZV3dnUFNCMWRHbHNjeTUwY21sdEtHeHBibVV1YzNWaWMzUnlLR2tnS3lBeEtTazdYRzVjYmlBZ0lDQnBaaUFvYTJWNUtTQjdYRzRnSUNBZ0lDQnBaaUFvY0dGeWMyVmtXMnRsZVYwZ0ppWWdhV2R1YjNKbFJIVndiR2xqWVhSbFQyWXVhVzVrWlhoUFppaHJaWGtwSUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0d0bGVTQTlQVDBnSjNObGRDMWpiMjlyYVdVbktTQjdYRzRnSUNBZ0lDQWdJSEJoY25ObFpGdHJaWGxkSUQwZ0tIQmhjbk5sWkZ0clpYbGRJRDhnY0dGeWMyVmtXMnRsZVYwZ09pQmJYU2t1WTI5dVkyRjBLRnQyWVd4ZEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIQmhjbk5sWkZ0clpYbGRJRDBnY0dGeWMyVmtXMnRsZVYwZ1B5QndZWEp6WldSYmEyVjVYU0FySUNjc0lDY2dLeUIyWVd3Z09pQjJZV3c3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnY0dGeWMyVmtPMXh1ZlR0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVMeW9xWEc0Z0tpQlRlVzUwWVdOMGFXTWdjM1ZuWVhJZ1ptOXlJR2x1ZG05cmFXNW5JR0VnWm5WdVkzUnBiMjRnWVc1a0lHVjRjR0Z1WkdsdVp5QmhiaUJoY25KaGVTQm1iM0lnWVhKbmRXMWxiblJ6TGx4dUlDcGNiaUFxSUVOdmJXMXZiaUIxYzJVZ1kyRnpaU0IzYjNWc1pDQmlaU0IwYnlCMWMyVWdZRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzVoY0hCc2VXQXVYRzRnS2x4dUlDb2dJR0JnWUdwelhHNGdLaUFnWm5WdVkzUnBiMjRnWmloNExDQjVMQ0I2S1NCN2ZWeHVJQ29nSUhaaGNpQmhjbWR6SUQwZ1d6RXNJRElzSUROZE8xeHVJQ29nSUdZdVlYQndiSGtvYm5Wc2JDd2dZWEpuY3lrN1hHNGdLaUFnWUdCZ1hHNGdLbHh1SUNvZ1YybDBhQ0JnYzNCeVpXRmtZQ0IwYUdseklHVjRZVzF3YkdVZ1kyRnVJR0psSUhKbExYZHlhWFIwWlc0dVhHNGdLbHh1SUNvZ0lHQmdZR3B6WEc0Z0tpQWdjM0J5WldGa0tHWjFibU4wYVc5dUtIZ3NJSGtzSUhvcElIdDlLU2hiTVN3Z01pd2dNMTBwTzF4dUlDb2dJR0JnWUZ4dUlDcGNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaGJHeGlZV05yWEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlYRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z2MzQnlaV0ZrS0dOaGJHeGlZV05yS1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQjNjbUZ3S0dGeWNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXk1aGNIQnNlU2h1ZFd4c0xDQmhjbklwTzF4dUlDQjlPMXh1ZlR0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUdKcGJtUWdQU0J5WlhGMWFYSmxLQ2N1TDJobGJIQmxjbk12WW1sdVpDY3BPMXh1ZG1GeUlHbHpRblZtWm1WeUlEMGdjbVZ4ZFdseVpTZ25hWE10WW5WbVptVnlKeWs3WEc1Y2JpOHFaMnh2WW1Gc0lIUnZVM1J5YVc1bk9uUnlkV1VxTDF4dVhHNHZMeUIxZEdsc2N5QnBjeUJoSUd4cFluSmhjbmtnYjJZZ1oyVnVaWEpwWXlCb1pXeHdaWElnWm5WdVkzUnBiMjV6SUc1dmJpMXpjR1ZqYVdacFl5QjBieUJoZUdsdmMxeHVYRzUyWVhJZ2RHOVRkSEpwYm1jZ1BTQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bk8xeHVYRzR2S2lwY2JpQXFJRVJsZEdWeWJXbHVaU0JwWmlCaElIWmhiSFZsSUdseklHRnVJRUZ5Y21GNVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhaaGJDQlVhR1VnZG1Gc2RXVWdkRzhnZEdWemRGeHVJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZG1Gc2RXVWdhWE1nWVc0Z1FYSnlZWGtzSUc5MGFHVnlkMmx6WlNCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMEZ5Y21GNUtIWmhiQ2tnZTF4dUlDQnlaWFIxY200Z2RHOVRkSEpwYm1jdVkyRnNiQ2gyWVd3cElEMDlQU0FuVzI5aWFtVmpkQ0JCY25KaGVWMG5PMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFUmxkR1Z5YldsdVpTQnBaaUJoSUhaaGJIVmxJR2x6SUdGdUlFRnljbUY1UW5WbVptVnlYRzRnS2x4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIWmhiQ0JVYUdVZ2RtRnNkV1VnZEc4Z2RHVnpkRnh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OUlGUnlkV1VnYVdZZ2RtRnNkV1VnYVhNZ1lXNGdRWEp5WVhsQ2RXWm1aWElzSUc5MGFHVnlkMmx6WlNCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMEZ5Y21GNVFuVm1abVZ5S0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnZEc5VGRISnBibWN1WTJGc2JDaDJZV3dwSUQwOVBTQW5XMjlpYW1WamRDQkJjbkpoZVVKMVptWmxjbDBuTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVJsZEdWeWJXbHVaU0JwWmlCaElIWmhiSFZsSUdseklHRWdSbTl5YlVSaGRHRmNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2RtRnNJRlJvWlNCMllXeDFaU0IwYnlCMFpYTjBYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1ZISjFaU0JwWmlCMllXeDFaU0JwY3lCaGJpQkdiM0p0UkdGMFlTd2diM1JvWlhKM2FYTmxJR1poYkhObFhHNGdLaTljYm1aMWJtTjBhVzl1SUdselJtOXliVVJoZEdFb2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlBb2RIbHdaVzltSUVadmNtMUVZWFJoSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnSmlZZ0tIWmhiQ0JwYm5OMFlXNWpaVzltSUVadmNtMUVZWFJoS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhJSFpwWlhjZ2IyNGdZVzRnUVhKeVlYbENkV1ptWlhKY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZG1Gc0lGUm9aU0IyWVd4MVpTQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIyWVd4MVpTQnBjeUJoSUhacFpYY2diMjRnWVc0Z1FYSnlZWGxDZFdabVpYSXNJRzkwYUdWeWQybHpaU0JtWVd4elpWeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMwRnljbUY1UW5WbVptVnlWbWxsZHloMllXd3BJSHRjYmlBZ2RtRnlJSEpsYzNWc2REdGNiaUFnYVdZZ0tDaDBlWEJsYjJZZ1FYSnlZWGxDZFdabVpYSWdJVDA5SUNkMWJtUmxabWx1WldRbktTQW1KaUFvUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzS1NrZ2UxeHVJQ0FnSUhKbGMzVnNkQ0E5SUVGeWNtRjVRblZtWm1WeUxtbHpWbWxsZHloMllXd3BPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsYzNWc2RDQTlJQ2gyWVd3cElDWW1JQ2gyWVd3dVluVm1abVZ5S1NBbUppQW9kbUZzTG1KMVptWmxjaUJwYm5OMFlXNWpaVzltSUVGeWNtRjVRblZtWm1WeUtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVJsZEdWeWJXbHVaU0JwWmlCaElIWmhiSFZsSUdseklHRWdVM1J5YVc1blhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhaaGJDQlVhR1VnZG1Gc2RXVWdkRzhnZEdWemRGeHVJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZG1Gc2RXVWdhWE1nWVNCVGRISnBibWNzSUc5MGFHVnlkMmx6WlNCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMU4wY21sdVp5aDJZV3dwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCMllXd2dQVDA5SUNkemRISnBibWNuTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVJsZEdWeWJXbHVaU0JwWmlCaElIWmhiSFZsSUdseklHRWdUblZ0WW1WeVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhaaGJDQlVhR1VnZG1Gc2RXVWdkRzhnZEdWemRGeHVJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZG1Gc2RXVWdhWE1nWVNCT2RXMWlaWElzSUc5MGFHVnlkMmx6WlNCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMDUxYldKbGNpaDJZV3dwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCMllXd2dQVDA5SUNkdWRXMWlaWEluTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVJsZEdWeWJXbHVaU0JwWmlCaElIWmhiSFZsSUdseklIVnVaR1ZtYVc1bFpGeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCMllXd2dWR2hsSUhaaGJIVmxJSFJ2SUhSbGMzUmNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUhSb1pTQjJZV3gxWlNCcGN5QjFibVJsWm1sdVpXUXNJRzkwYUdWeWQybHpaU0JtWVd4elpWeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMxVnVaR1ZtYVc1bFpDaDJZV3dwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCMllXd2dQVDA5SUNkMWJtUmxabWx1WldRbk8xeHVmVnh1WEc0dktpcGNiaUFxSUVSbGRHVnliV2x1WlNCcFppQmhJSFpoYkhWbElHbHpJR0Z1SUU5aWFtVmpkRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjJZV3dnVkdobElIWmhiSFZsSUhSdklIUmxjM1JjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlVjblZsSUdsbUlIWmhiSFZsSUdseklHRnVJRTlpYW1WamRDd2diM1JvWlhKM2FYTmxJR1poYkhObFhHNGdLaTljYm1aMWJtTjBhVzl1SUdselQySnFaV04wS0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnZG1Gc0lDRTlQU0J1ZFd4c0lDWW1JSFI1Y0dWdlppQjJZV3dnUFQwOUlDZHZZbXBsWTNRbk8xeHVmVnh1WEc0dktpcGNiaUFxSUVSbGRHVnliV2x1WlNCcFppQmhJSFpoYkhWbElHbHpJR0VnUkdGMFpWeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCMllXd2dWR2hsSUhaaGJIVmxJSFJ2SUhSbGMzUmNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUhaaGJIVmxJR2x6SUdFZ1JHRjBaU3dnYjNSb1pYSjNhWE5sSUdaaGJITmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpSR0YwWlNoMllXd3BJSHRjYmlBZ2NtVjBkWEp1SUhSdlUzUnlhVzVuTG1OaGJHd29kbUZzS1NBOVBUMGdKMXR2WW1wbFkzUWdSR0YwWlYwbk8xeHVmVnh1WEc0dktpcGNiaUFxSUVSbGRHVnliV2x1WlNCcFppQmhJSFpoYkhWbElHbHpJR0VnUm1sc1pWeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCMllXd2dWR2hsSUhaaGJIVmxJSFJ2SUhSbGMzUmNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUhaaGJIVmxJR2x6SUdFZ1JtbHNaU3dnYjNSb1pYSjNhWE5sSUdaaGJITmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpSbWxzWlNoMllXd3BJSHRjYmlBZ2NtVjBkWEp1SUhSdlUzUnlhVzVuTG1OaGJHd29kbUZzS1NBOVBUMGdKMXR2WW1wbFkzUWdSbWxzWlYwbk8xeHVmVnh1WEc0dktpcGNiaUFxSUVSbGRHVnliV2x1WlNCcFppQmhJSFpoYkhWbElHbHpJR0VnUW14dllseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCMllXd2dWR2hsSUhaaGJIVmxJSFJ2SUhSbGMzUmNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUhaaGJIVmxJR2x6SUdFZ1FteHZZaXdnYjNSb1pYSjNhWE5sSUdaaGJITmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpRbXh2WWloMllXd3BJSHRjYmlBZ2NtVjBkWEp1SUhSdlUzUnlhVzVuTG1OaGJHd29kbUZzS1NBOVBUMGdKMXR2WW1wbFkzUWdRbXh2WWwwbk8xeHVmVnh1WEc0dktpcGNiaUFxSUVSbGRHVnliV2x1WlNCcFppQmhJSFpoYkhWbElHbHpJR0VnUm5WdVkzUnBiMjVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdkbUZzSUZSb1pTQjJZV3gxWlNCMGJ5QjBaWE4wWEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQjJZV3gxWlNCcGN5QmhJRVoxYm1OMGFXOXVMQ0J2ZEdobGNuZHBjMlVnWm1Gc2MyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTkdkVzVqZEdsdmJpaDJZV3dwSUh0Y2JpQWdjbVYwZFhKdUlIUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc0tTQTlQVDBnSjF0dlltcGxZM1FnUm5WdVkzUnBiMjVkSnp0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhJRk4wY21WaGJWeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCMllXd2dWR2hsSUhaaGJIVmxJSFJ2SUhSbGMzUmNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUhaaGJIVmxJR2x6SUdFZ1UzUnlaV0Z0TENCdmRHaGxjbmRwYzJVZ1ptRnNjMlZjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5UZEhKbFlXMG9kbUZzS1NCN1hHNGdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaDJZV3dwSUNZbUlHbHpSblZ1WTNScGIyNG9kbUZzTG5CcGNHVXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFUmxkR1Z5YldsdVpTQnBaaUJoSUhaaGJIVmxJR2x6SUdFZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6SUc5aWFtVmpkRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjJZV3dnVkdobElIWmhiSFZsSUhSdklIUmxjM1JjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlVjblZsSUdsbUlIWmhiSFZsSUdseklHRWdWVkpNVTJWaGNtTm9VR0Z5WVcxeklHOWlhbVZqZEN3Z2IzUm9aWEozYVhObElHWmhiSE5sWEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x6VlZKTVUyVmhjbU5vVUdGeVlXMXpLSFpoYkNrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlGVlNURk5sWVhKamFGQmhjbUZ0Y3lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RtRnNJR2x1YzNSaGJtTmxiMllnVlZKTVUyVmhjbU5vVUdGeVlXMXpPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGUnlhVzBnWlhoalpYTnpJSGRvYVhSbGMzQmhZMlVnYjJabUlIUm9aU0JpWldkcGJtNXBibWNnWVc1a0lHVnVaQ0J2WmlCaElITjBjbWx1WjF4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J6ZEhJZ1ZHaGxJRk4wY21sdVp5QjBieUIwY21sdFhHNGdLaUJBY21WMGRYSnVjeUI3VTNSeWFXNW5mU0JVYUdVZ1UzUnlhVzVuSUdaeVpXVmtJRzltSUdWNFkyVnpjeUIzYUdsMFpYTndZV05sWEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ5YVcwb2MzUnlLU0I3WEc0Z0lISmxkSFZ5YmlCemRISXVjbVZ3YkdGalpTZ3ZYbHhjY3lvdkxDQW5KeWt1Y21Wd2JHRmpaU2d2WEZ4ektpUXZMQ0FuSnlrN1hHNTlYRzVjYmk4cUtseHVJQ29nUkdWMFpYSnRhVzVsSUdsbUlIZGxKM0psSUhKMWJtNXBibWNnYVc0Z1lTQnpkR0Z1WkdGeVpDQmljbTkzYzJWeUlHVnVkbWx5YjI1dFpXNTBYRzRnS2x4dUlDb2dWR2hwY3lCaGJHeHZkM01nWVhocGIzTWdkRzhnY25WdUlHbHVJR0VnZDJWaUlIZHZjbXRsY2l3Z1lXNWtJSEpsWVdOMExXNWhkR2wyWlM1Y2JpQXFJRUp2ZEdnZ1pXNTJhWEp2Ym0xbGJuUnpJSE4xY0hCdmNuUWdXRTFNU0hSMGNGSmxjWFZsYzNRc0lHSjFkQ0J1YjNRZ1puVnNiSGtnYzNSaGJtUmhjbVFnWjJ4dlltRnNjeTVjYmlBcVhHNGdLaUIzWldJZ2QyOXlhMlZ5Y3pwY2JpQXFJQ0IwZVhCbGIyWWdkMmx1Wkc5M0lDMCtJSFZ1WkdWbWFXNWxaRnh1SUNvZ0lIUjVjR1Z2WmlCa2IyTjFiV1Z1ZENBdFBpQjFibVJsWm1sdVpXUmNiaUFxWEc0Z0tpQnlaV0ZqZEMxdVlYUnBkbVU2WEc0Z0tpQWdibUYyYVdkaGRHOXlMbkJ5YjJSMVkzUWdMVDRnSjFKbFlXTjBUbUYwYVhabEoxeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMxTjBZVzVrWVhKa1FuSnZkM05sY2tWdWRpZ3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQnVZWFpwWjJGMGIzSWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JRzVoZG1sbllYUnZjaTV3Y205a2RXTjBJRDA5UFNBblVtVmhZM1JPWVhScGRtVW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlaY2JpQWdJQ0IwZVhCbGIyWWdaRzlqZFcxbGJuUWdJVDA5SUNkMWJtUmxabWx1WldRblhHNGdJQ2s3WEc1OVhHNWNiaThxS2x4dUlDb2dTWFJsY21GMFpTQnZkbVZ5SUdGdUlFRnljbUY1SUc5eUlHRnVJRTlpYW1WamRDQnBiblp2YTJsdVp5QmhJR1oxYm1OMGFXOXVJR1p2Y2lCbFlXTm9JR2wwWlcwdVhHNGdLbHh1SUNvZ1NXWWdZRzlpYW1BZ2FYTWdZVzRnUVhKeVlYa2dZMkZzYkdKaFkyc2dkMmxzYkNCaVpTQmpZV3hzWldRZ2NHRnpjMmx1WjF4dUlDb2dkR2hsSUhaaGJIVmxMQ0JwYm1SbGVDd2dZVzVrSUdOdmJYQnNaWFJsSUdGeWNtRjVJR1p2Y2lCbFlXTm9JR2wwWlcwdVhHNGdLbHh1SUNvZ1NXWWdKMjlpYWljZ2FYTWdZVzRnVDJKcVpXTjBJR05oYkd4aVlXTnJJSGRwYkd3Z1ltVWdZMkZzYkdWa0lIQmhjM05wYm1kY2JpQXFJSFJvWlNCMllXeDFaU3dnYTJWNUxDQmhibVFnWTI5dGNHeGxkR1VnYjJKcVpXTjBJR1p2Y2lCbFlXTm9JSEJ5YjNCbGNuUjVMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZFRnljbUY1ZlNCdlltb2dWR2hsSUc5aWFtVmpkQ0IwYnlCcGRHVnlZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1iaUJVYUdVZ1kyRnNiR0poWTJzZ2RHOGdhVzUyYjJ0bElHWnZjaUJsWVdOb0lHbDBaVzFjYmlBcUwxeHVablZ1WTNScGIyNGdabTl5UldGamFDaHZZbW9zSUdadUtTQjdYRzRnSUM4dklFUnZiaWQwSUdKdmRHaGxjaUJwWmlCdWJ5QjJZV3gxWlNCd2NtOTJhV1JsWkZ4dUlDQnBaaUFvYjJKcUlEMDlQU0J1ZFd4c0lIeDhJSFI1Y0dWdlppQnZZbW9nUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc1Y2JpQWdMeThnUm05eVkyVWdZVzRnWVhKeVlYa2dhV1lnYm05MElHRnNjbVZoWkhrZ2MyOXRaWFJvYVc1bklHbDBaWEpoWW14bFhHNGdJR2xtSUNoMGVYQmxiMllnYjJKcUlDRTlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQzhxWlhOc2FXNTBJRzV2TFhCaGNtRnRMWEpsWVhOemFXZHVPakFxTDF4dUlDQWdJRzlpYWlBOUlGdHZZbXBkTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR2x6UVhKeVlYa29iMkpxS1NrZ2UxeHVJQ0FnSUM4dklFbDBaWEpoZEdVZ2IzWmxjaUJoY25KaGVTQjJZV3gxWlhOY2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diQ0E5SUc5aWFpNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR1p1TG1OaGJHd29iblZzYkN3Z2IySnFXMmxkTENCcExDQnZZbW9wTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCSmRHVnlZWFJsSUc5MlpYSWdiMkpxWldOMElHdGxlWE5jYmlBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2IySnFLU0I3WEc0Z0lDQWdJQ0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHOWlhaXdnYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0JtYmk1allXeHNLRzUxYkd3c0lHOWlhbHRyWlhsZExDQnJaWGtzSUc5aWFpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRV05qWlhCMGN5QjJZWEpoY21keklHVjRjR1ZqZEdsdVp5QmxZV05vSUdGeVozVnRaVzUwSUhSdklHSmxJR0Z1SUc5aWFtVmpkQ3dnZEdobGJseHVJQ29nYVcxdGRYUmhZbXg1SUcxbGNtZGxjeUIwYUdVZ2NISnZjR1Z5ZEdsbGN5QnZaaUJsWVdOb0lHOWlhbVZqZENCaGJtUWdjbVYwZFhKdWN5QnlaWE4xYkhRdVhHNGdLbHh1SUNvZ1YyaGxiaUJ0ZFd4MGFYQnNaU0J2WW1wbFkzUnpJR052Ym5SaGFXNGdkR2hsSUhOaGJXVWdhMlY1SUhSb1pTQnNZWFJsY2lCdlltcGxZM1FnYVc1Y2JpQXFJSFJvWlNCaGNtZDFiV1Z1ZEhNZ2JHbHpkQ0IzYVd4c0lIUmhhMlVnY0hKbFkyVmtaVzVqWlM1Y2JpQXFYRzRnS2lCRmVHRnRjR3hsT2x4dUlDcGNiaUFxSUdCZ1lHcHpYRzRnS2lCMllYSWdjbVZ6ZFd4MElEMGdiV1Z5WjJVb2UyWnZiem9nTVRJemZTd2dlMlp2YnpvZ05EVTJmU2s3WEc0Z0tpQmpiMjV6YjJ4bExteHZaeWh5WlhOMWJIUXVabTl2S1RzZ0x5OGdiM1YwY0hWMGN5QTBOVFpjYmlBcUlHQmdZRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbW94SUU5aWFtVmpkQ0IwYnlCdFpYSm5aVnh1SUNvZ1FISmxkSFZ5Ym5NZ2UwOWlhbVZqZEgwZ1VtVnpkV3gwSUc5bUlHRnNiQ0J0WlhKblpTQndjbTl3WlhKMGFXVnpYRzRnS2k5Y2JtWjFibU4wYVc5dUlHMWxjbWRsS0M4cUlHOWlhakVzSUc5aWFqSXNJRzlpYWpNc0lDNHVMaUFxTHlrZ2UxeHVJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2UzMDdYRzRnSUdaMWJtTjBhVzl1SUdGemMybG5ibFpoYkhWbEtIWmhiQ3dnYTJWNUtTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnlaWE4xYkhSYmEyVjVYU0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlIWmhiQ0E5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lISmxjM1ZzZEZ0clpYbGRJRDBnYldWeVoyVW9jbVZ6ZFd4MFcydGxlVjBzSUhaaGJDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGMzVnNkRnRyWlhsZElEMGdkbUZzTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lHWnZja1ZoWTJnb1lYSm5kVzFsYm5SelcybGRMQ0JoYzNOcFoyNVdZV3gxWlNrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkZlSFJsYm1SeklHOWlhbVZqZENCaElHSjVJRzExZEdGaWJIa2dZV1JrYVc1bklIUnZJR2wwSUhSb1pTQndjbTl3WlhKMGFXVnpJRzltSUc5aWFtVmpkQ0JpTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JoSUZSb1pTQnZZbXBsWTNRZ2RHOGdZbVVnWlhoMFpXNWtaV1JjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCaUlGUm9aU0J2WW1wbFkzUWdkRzhnWTI5d2VTQndjbTl3WlhKMGFXVnpJR1p5YjIxY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjBhR2x6UVhKbklGUm9aU0J2WW1wbFkzUWdkRzhnWW1sdVpDQm1kVzVqZEdsdmJpQjBiMXh1SUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlNCVWFHVWdjbVZ6ZFd4MGFXNW5JSFpoYkhWbElHOW1JRzlpYW1WamRDQmhYRzRnS2k5Y2JtWjFibU4wYVc5dUlHVjRkR1Z1WkNoaExDQmlMQ0IwYUdselFYSm5LU0I3WEc0Z0lHWnZja1ZoWTJnb1lpd2dablZ1WTNScGIyNGdZWE56YVdkdVZtRnNkV1VvZG1Gc0xDQnJaWGtwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjMEZ5WnlBbUppQjBlWEJsYjJZZ2RtRnNJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQmhXMnRsZVYwZ1BTQmlhVzVrS0haaGJDd2dkR2hwYzBGeVp5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdGYmEyVjVYU0E5SUhaaGJEdGNiaUFnSUNCOVhHNGdJSDBwTzF4dUlDQnlaWFIxY200Z1lUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJR2x6UVhKeVlYazZJR2x6UVhKeVlYa3NYRzRnSUdselFYSnlZWGxDZFdabVpYSTZJR2x6UVhKeVlYbENkV1ptWlhJc1hHNGdJR2x6UW5WbVptVnlPaUJwYzBKMVptWmxjaXhjYmlBZ2FYTkdiM0p0UkdGMFlUb2dhWE5HYjNKdFJHRjBZU3hjYmlBZ2FYTkJjbkpoZVVKMVptWmxjbFpwWlhjNklHbHpRWEp5WVhsQ2RXWm1aWEpXYVdWM0xGeHVJQ0JwYzFOMGNtbHVaem9nYVhOVGRISnBibWNzWEc0Z0lHbHpUblZ0WW1WeU9pQnBjMDUxYldKbGNpeGNiaUFnYVhOUFltcGxZM1E2SUdselQySnFaV04wTEZ4dUlDQnBjMVZ1WkdWbWFXNWxaRG9nYVhOVmJtUmxabWx1WldRc1hHNGdJR2x6UkdGMFpUb2dhWE5FWVhSbExGeHVJQ0JwYzBacGJHVTZJR2x6Um1sc1pTeGNiaUFnYVhOQ2JHOWlPaUJwYzBKc2IySXNYRzRnSUdselJuVnVZM1JwYjI0NklHbHpSblZ1WTNScGIyNHNYRzRnSUdselUzUnlaV0Z0T2lCcGMxTjBjbVZoYlN4Y2JpQWdhWE5WVWt4VFpXRnlZMmhRWVhKaGJYTTZJR2x6VlZKTVUyVmhjbU5vVUdGeVlXMXpMRnh1SUNCcGMxTjBZVzVrWVhKa1FuSnZkM05sY2tWdWRqb2dhWE5UZEdGdVpHRnlaRUp5YjNkelpYSkZibllzWEc0Z0lHWnZja1ZoWTJnNklHWnZja1ZoWTJnc1hHNGdJRzFsY21kbE9pQnRaWEpuWlN4Y2JpQWdaWGgwWlc1a09pQmxlSFJsYm1Rc1hHNGdJSFJ5YVcwNklIUnlhVzFjYm4wN1hHNGlMQ0l2S2lGY2JpQXFJRVJsZEdWeWJXbHVaU0JwWmlCaGJpQnZZbXBsWTNRZ2FYTWdZU0JDZFdabVpYSmNiaUFxWEc0Z0tpQkFZWFYwYUc5eUlDQWdSbVZ5YjNOeklFRmliM1ZyYUdGa2FXcGxhQ0E4YUhSMGNITTZMeTltWlhKdmMzTXViM0puUGx4dUlDb2dRR3hwWTJWdWMyVWdJRTFKVkZ4dUlDb3ZYRzVjYmk4dklGUm9aU0JmYVhOQ2RXWm1aWElnWTJobFkyc2dhWE1nWm05eUlGTmhabUZ5YVNBMUxUY2djM1Z3Y0c5eWRDd2dZbVZqWVhWelpTQnBkQ2R6SUcxcGMzTnBibWRjYmk4dklFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdVkyOXVjM1J5ZFdOMGIzSXVJRkpsYlc5MlpTQjBhR2x6SUdWMlpXNTBkV0ZzYkhsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tHOWlhaWtnZTF4dUlDQnlaWFIxY200Z2IySnFJQ0U5SUc1MWJHd2dKaVlnS0dselFuVm1abVZ5S0c5aWFpa2dmSHdnYVhOVGJHOTNRblZtWm1WeUtHOWlhaWtnZkh3Z0lTRnZZbW91WDJselFuVm1abVZ5S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzBKMVptWmxjaUFvYjJKcUtTQjdYRzRnSUhKbGRIVnliaUFoSVc5aWFpNWpiMjV6ZEhKMVkzUnZjaUFtSmlCMGVYQmxiMllnYjJKcUxtTnZibk4wY25WamRHOXlMbWx6UW5WbVptVnlJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXBjMEoxWm1abGNpaHZZbW9wWEc1OVhHNWNiaTh2SUVadmNpQk9iMlJsSUhZd0xqRXdJSE4xY0hCdmNuUXVJRkpsYlc5MlpTQjBhR2x6SUdWMlpXNTBkV0ZzYkhrdVhHNW1kVzVqZEdsdmJpQnBjMU5zYjNkQ2RXWm1aWElnS0c5aWFpa2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JRzlpYWk1eVpXRmtSbXh2WVhSTVJTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQjBlWEJsYjJZZ2IySnFMbk5zYVdObElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHbHpRblZtWm1WeUtHOWlhaTV6YkdsalpTZ3dMQ0F3S1NsY2JuMWNiaUlzSWk4dklITm9hVzBnWm05eUlIVnphVzVuSUhCeWIyTmxjM01nYVc0Z1luSnZkM05sY2x4dWRtRnlJSEJ5YjJObGMzTWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQ5TzF4dVhHNHZMeUJqWVdOb1pXUWdabkp2YlNCM2FHRjBaWFpsY2lCbmJHOWlZV3dnYVhNZ2NISmxjMlZ1ZENCemJ5QjBhR0YwSUhSbGMzUWdjblZ1Ym1WeWN5QjBhR0YwSUhOMGRXSWdhWFJjYmk4dklHUnZiaWQwSUdKeVpXRnJJSFJvYVc1bmN5NGdJRUoxZENCM1pTQnVaV1ZrSUhSdklIZHlZWEFnYVhRZ2FXNGdZU0IwY25rZ1kyRjBZMmdnYVc0Z1kyRnpaU0JwZENCcGMxeHVMeThnZDNKaGNIQmxaQ0JwYmlCemRISnBZM1FnYlc5a1pTQmpiMlJsSUhkb2FXTm9JR1J2WlhOdUozUWdaR1ZtYVc1bElHRnVlU0JuYkc5aVlXeHpMaUFnU1hRbmN5QnBibk5wWkdVZ1lWeHVMeThnWm5WdVkzUnBiMjRnWW1WallYVnpaU0IwY25rdlkyRjBZMmhsY3lCa1pXOXdkR2x0YVhwbElHbHVJR05sY25SaGFXNGdaVzVuYVc1bGN5NWNibHh1ZG1GeUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRN1hHNTJZWElnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwTzF4dVhHNW1kVzVqZEdsdmJpQmtaV1poZFd4MFUyVjBWR2x0YjNWMEtDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmMyVjBWR2x0Wlc5MWRDQm9ZWE1nYm05MElHSmxaVzRnWkdWbWFXNWxaQ2NwTzF4dWZWeHVablZ1WTNScGIyNGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0FvS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RqYkdWaGNsUnBiV1Z2ZFhRZ2FHRnpJRzV2ZENCaVpXVnVJR1JsWm1sdVpXUW5LVHRjYm4xY2JpaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpaWFJVYVcxbGIzVjBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCa1pXWmhkV3gwVTJWMFZHbHRiM1YwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSVFpYUlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWREdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ2ZWeHVmU0FvS1NsY2JtWjFibU4wYVc5dUlISjFibFJwYldWdmRYUW9ablZ1S1NCN1hHNGdJQ0FnYVdZZ0tHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BUMDlJSE5sZEZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OXViM0p0WVd3Z1pXNTJhWEp2YldWdWRITWdhVzRnYzJGdVpTQnphWFIxWVhScGIyNXpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFJVYVcxbGIzVjBLR1oxYml3Z01DazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHbG1JSE5sZEZScGJXVnZkWFFnZDJGemJpZDBJR0YyWVdsc1lXSnNaU0JpZFhRZ2QyRnpJR3hoZEhSbGNpQmtaV1pwYm1Wa1hHNGdJQ0FnYVdZZ0tDaGpZV05vWldSVFpYUlVhVzFsYjNWMElEMDlQU0JrWldaaGRXeDBVMlYwVkdsdGIzVjBJSHg4SUNGallXTm9aV1JUWlhSVWFXMWxiM1YwS1NBbUppQnpaWFJVYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBWR2x0Wlc5MWRDaG1kVzRzSURBcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIzYUdWdUlIZG9aVzRnYzI5dFpXSnZaSGtnYUdGeklITmpjbVYzWldRZ2QybDBhQ0J6WlhSVWFXMWxiM1YwSUdKMWRDQnVieUJKTGtVdUlHMWhaR1J1WlhOelhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwS0daMWJpd2dNQ2s3WEc0Z0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGZG9aVzRnZDJVZ1lYSmxJR2x1SUVrdVJTNGdZblYwSUhSb1pTQnpZM0pwY0hRZ2FHRnpJR0psWlc0Z1pYWmhiR1ZrSUhOdklFa3VSUzRnWkc5bGMyNG5kQ0IwY25WemRDQjBhR1VnWjJ4dlltRnNJRzlpYW1WamRDQjNhR1Z1SUdOaGJHeGxaQ0J1YjNKdFlXeHNlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRk5sZEZScGJXVnZkWFF1WTJGc2JDaHVkV3hzTENCbWRXNHNJREFwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JoY3lCaFltOTJaU0JpZFhRZ2QyaGxiaUJwZENkeklHRWdkbVZ5YzJsdmJpQnZaaUJKTGtVdUlIUm9ZWFFnYlhWemRDQm9ZWFpsSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUdadmNpQW5kR2hwY3ljc0lHaHZjR1oxYkd4NUlHOTFjaUJqYjI1MFpYaDBJR052Y25KbFkzUWdiM1JvWlhKM2FYTmxJR2wwSUhkcGJHd2dkR2h5YjNjZ1lTQm5iRzlpWVd3Z1pYSnliM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwTG1OaGJHd29kR2hwY3l3Z1puVnVMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVYRzU5WEc1bWRXNWpkR2x2YmlCeWRXNURiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLU0I3WEc0Z0lDQWdhV1lnS0dOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOVBUMGdZMnhsWVhKVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZibTl5YldGc0lHVnVkbWx5YjIxbGJuUnpJR2x1SUhOaGJtVWdjMmwwZFdGMGFXOXVjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJR2xtSUdOc1pXRnlWR2x0Wlc5MWRDQjNZWE51SjNRZ1lYWmhhV3hoWW14bElHSjFkQ0IzWVhNZ2JHRjBkR1Z5SUdSbFptbHVaV1JjYmlBZ0lDQnBaaUFvS0dOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOVBUMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0I4ZkNBaFkyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMEtTQW1KaUJqYkdWaGNsUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWTJ4bFlYSlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkb1pXNGdkMmhsYmlCemIyMWxZbTlrZVNCb1lYTWdjMk55WlhkbFpDQjNhWFJvSUhObGRGUnBiV1Z2ZFhRZ1luVjBJRzV2SUVrdVJTNGdiV0ZrWkc1bGMzTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDaHRZWEpyWlhJcE8xeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcGUxeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQjNaU0JoY21VZ2FXNGdTUzVGTGlCaWRYUWdkR2hsSUhOamNtbHdkQ0JvWVhNZ1ltVmxiaUJsZG1Gc1pXUWdjMjhnU1M1RkxpQmtiMlZ6YmlkMElDQjBjblZ6ZENCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCM2FHVnVJR05oYkd4bFpDQnViM0p0WVd4c2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQzVqWVd4c0tHNTFiR3dzSUcxaGNtdGxjaWs3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JoY3lCaFltOTJaU0JpZFhRZ2QyaGxiaUJwZENkeklHRWdkbVZ5YzJsdmJpQnZaaUJKTGtVdUlIUm9ZWFFnYlhWemRDQm9ZWFpsSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUdadmNpQW5kR2hwY3ljc0lHaHZjR1oxYkd4NUlHOTFjaUJqYjI1MFpYaDBJR052Y25KbFkzUWdiM1JvWlhKM2FYTmxJR2wwSUhkcGJHd2dkR2h5YjNjZ1lTQm5iRzlpWVd3Z1pYSnliM0l1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYjIxbElIWmxjbk5wYjI1eklHOW1JRWt1UlM0Z2FHRjJaU0JrYVdabVpYSmxiblFnY25Wc1pYTWdabTl5SUdOc1pXRnlWR2x0Wlc5MWRDQjJjeUJ6WlhSVWFXMWxiM1YwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMExtTmhiR3dvZEdocGN5d2diV0Z5YTJWeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1WEc1Y2JuMWNiblpoY2lCeGRXVjFaU0E5SUZ0ZE8xeHVkbUZ5SUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc1MllYSWdZM1Z5Y21WdWRGRjFaWFZsTzF4dWRtRnlJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNibHh1Wm5WdVkzUnBiMjRnWTJ4bFlXNVZjRTVsZUhSVWFXTnJLQ2tnZTF4dUlDQWdJR2xtSUNnaFpISmhhVzVwYm1jZ2ZId2dJV04xY25KbGJuUlJkV1YxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2FXWWdLR04xY25KbGJuUlJkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2NYVmxkV1VnUFNCamRYSnlaVzUwVVhWbGRXVXVZMjl1WTJGMEtIRjFaWFZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ1pISmhhVzVSZFdWMVpTZ3BPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pISmhhVzVSZFdWMVpTZ3BJSHRjYmlBZ0lDQnBaaUFvWkhKaGFXNXBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnZEdsdFpXOTFkQ0E5SUhKMWJsUnBiV1Z2ZFhRb1kyeGxZVzVWY0U1bGVIUlVhV05yS1R0Y2JpQWdJQ0JrY21GcGJtbHVaeUE5SUhSeWRXVTdYRzVjYmlBZ0lDQjJZWElnYkdWdUlEMGdjWFZsZFdVdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bEtHeGxiaWtnZTF4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVVhWbGRXVWdQU0J4ZFdWMVpUdGNiaUFnSUNBZ0lDQWdjWFZsZFdVZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ3NyY1hWbGRXVkpibVJsZUNBOElHeGxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMWNuSmxiblJSZFdWMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlJkV1YxWlZ0eGRXVjFaVWx1WkdWNFhTNXlkVzRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeGRXVjFaVWx1WkdWNElEMGdMVEU3WEc0Z0lDQWdJQ0FnSUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdZM1Z5Y21WdWRGRjFaWFZsSUQwZ2JuVnNiRHRjYmlBZ0lDQmtjbUZwYm1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUhKMWJrTnNaV0Z5VkdsdFpXOTFkQ2gwYVcxbGIzVjBLVHRjYm4xY2JseHVjSEp2WTJWemN5NXVaWGgwVkdsamF5QTlJR1oxYm1OMGFXOXVJQ2htZFc0cElIdGNiaUFnSUNCMllYSWdZWEpuY3lBOUlHNWxkeUJCY25KaGVTaGhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeE95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNtZHpXMmtnTFNBeFhTQTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J4ZFdWMVpTNXdkWE5vS0c1bGR5QkpkR1Z0S0daMWJpd2dZWEpuY3lrcE8xeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dnUFQwOUlERWdKaVlnSVdSeVlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lISjFibFJwYldWdmRYUW9aSEpoYVc1UmRXVjFaU2s3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVMeThnZGpnZ2JHbHJaWE1nY0hKbFpHbGpkR2xpYkdVZ2IySnFaV04wYzF4dVpuVnVZM1JwYjI0Z1NYUmxiU2htZFc0c0lHRnljbUY1S1NCN1hHNGdJQ0FnZEdocGN5NW1kVzRnUFNCbWRXNDdYRzRnSUNBZ2RHaHBjeTVoY25KaGVTQTlJR0Z5Y21GNU8xeHVmVnh1U1hSbGJTNXdjbTkwYjNSNWNHVXVjblZ1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUm9hWE11Wm5WdUxtRndjR3g1S0c1MWJHd3NJSFJvYVhNdVlYSnlZWGtwTzF4dWZUdGNibkJ5YjJObGMzTXVkR2wwYkdVZ1BTQW5Zbkp2ZDNObGNpYzdYRzV3Y205alpYTnpMbUp5YjNkelpYSWdQU0IwY25WbE8xeHVjSEp2WTJWemN5NWxibllnUFNCN2ZUdGNibkJ5YjJObGMzTXVZWEpuZGlBOUlGdGRPMXh1Y0hKdlkyVnpjeTUyWlhKemFXOXVJRDBnSnljN0lDOHZJR1Z0Y0hSNUlITjBjbWx1WnlCMGJ5QmhkbTlwWkNCeVpXZGxlSEFnYVhOemRXVnpYRzV3Y205alpYTnpMblpsY25OcGIyNXpJRDBnZTMwN1hHNWNibVoxYm1OMGFXOXVJRzV2YjNBb0tTQjdmVnh1WEc1d2NtOWpaWE56TG05dUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdVlXUmtUR2x6ZEdWdVpYSWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXZibU5sSUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011YjJabUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNtVnRiM1psVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV5WlcxdmRtVkJiR3hNYVhOMFpXNWxjbk1nUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTVsYldsMElEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNISmxjR1Z1WkV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y0hKbGNHVnVaRTl1WTJWTWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1Y2JuQnliMk5sYzNNdWJHbHpkR1Z1WlhKeklEMGdablZ1WTNScGIyNGdLRzVoYldVcElIc2djbVYwZFhKdUlGdGRJSDFjYmx4dWNISnZZMlZ6Y3k1aWFXNWthVzVuSUQwZ1puVnVZM1JwYjI0Z0tHNWhiV1VwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0J5YjJObGMzTXVZbWx1WkdsdVp5QnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0p5azdYRzU5TzF4dVhHNXdjbTlqWlhOekxtTjNaQ0E5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlDY3ZKeUI5TzF4dWNISnZZMlZ6Y3k1amFHUnBjaUE5SUdaMWJtTjBhVzl1SUNoa2FYSXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozQnliMk5sYzNNdVkyaGthWElnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ2NwTzF4dWZUdGNibkJ5YjJObGMzTXVkVzFoYzJzZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJREE3SUgwN1hHNGlMQ0oyWVhJZ2JtVjRkRlJwWTJzZ1BTQnlaWEYxYVhKbEtDZHdjbTlqWlhOekwySnliM2R6WlhJdWFuTW5LUzV1WlhoMFZHbGphenRjYm5aaGNpQmhjSEJzZVNBOUlFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pTNWhjSEJzZVR0Y2JuWmhjaUJ6YkdsalpTQTlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlR0Y2JuWmhjaUJwYlcxbFpHbGhkR1ZKWkhNZ1BTQjdmVHRjYm5aaGNpQnVaWGgwU1cxdFpXUnBZWFJsU1dRZ1BTQXdPMXh1WEc0dkx5QkVUMDBnUVZCSmN5d2dabTl5SUdOdmJYQnNaWFJsYm1WemMxeHVYRzVsZUhCdmNuUnpMbk5sZEZScGJXVnZkWFFnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnY21WMGRYSnVJRzVsZHlCVWFXMWxiM1YwS0dGd2NHeDVMbU5oYkd3b2MyVjBWR2x0Wlc5MWRDd2dkMmx1Wkc5M0xDQmhjbWQxYldWdWRITXBMQ0JqYkdWaGNsUnBiV1Z2ZFhRcE8xeHVmVHRjYm1WNGNHOXlkSE11YzJWMFNXNTBaWEoyWVd3Z1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlVhVzFsYjNWMEtHRndjR3g1TG1OaGJHd29jMlYwU1c1MFpYSjJZV3dzSUhkcGJtUnZkeXdnWVhKbmRXMWxiblJ6S1N3Z1kyeGxZWEpKYm5SbGNuWmhiQ2s3WEc1OU8xeHVaWGh3YjNKMGN5NWpiR1ZoY2xScGJXVnZkWFFnUFZ4dVpYaHdiM0owY3k1amJHVmhja2x1ZEdWeWRtRnNJRDBnWm5WdVkzUnBiMjRvZEdsdFpXOTFkQ2tnZXlCMGFXMWxiM1YwTG1Oc2IzTmxLQ2s3SUgwN1hHNWNibVoxYm1OMGFXOXVJRlJwYldWdmRYUW9hV1FzSUdOc1pXRnlSbTRwSUh0Y2JpQWdkR2hwY3k1ZmFXUWdQU0JwWkR0Y2JpQWdkR2hwY3k1ZlkyeGxZWEpHYmlBOUlHTnNaV0Z5Um00N1hHNTlYRzVVYVcxbGIzVjBMbkJ5YjNSdmRIbHdaUzUxYm5KbFppQTlJRlJwYldWdmRYUXVjSEp2ZEc5MGVYQmxMbkpsWmlBOUlHWjFibU4wYVc5dUtDa2dlMzA3WEc1VWFXMWxiM1YwTG5CeWIzUnZkSGx3WlM1amJHOXpaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0IwYUdsekxsOWpiR1ZoY2tadUxtTmhiR3dvZDJsdVpHOTNMQ0IwYUdsekxsOXBaQ2s3WEc1OU8xeHVYRzR2THlCRWIyVnpJRzV2ZENCemRHRnlkQ0IwYUdVZ2RHbHRaU3dnYW5WemRDQnpaWFJ6SUhWd0lIUm9aU0J0WlcxaVpYSnpJRzVsWldSbFpDNWNibVY0Y0c5eWRITXVaVzV5YjJ4c0lEMGdablZ1WTNScGIyNG9hWFJsYlN3Z2JYTmxZM01wSUh0Y2JpQWdZMnhsWVhKVWFXMWxiM1YwS0dsMFpXMHVYMmxrYkdWVWFXMWxiM1YwU1dRcE8xeHVJQ0JwZEdWdExsOXBaR3hsVkdsdFpXOTFkQ0E5SUcxelpXTnpPMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NTFibVZ1Y205c2JDQTlJR1oxYm1OMGFXOXVLR2wwWlcwcElIdGNiaUFnWTJ4bFlYSlVhVzFsYjNWMEtHbDBaVzB1WDJsa2JHVlVhVzFsYjNWMFNXUXBPMXh1SUNCcGRHVnRMbDlwWkd4bFZHbHRaVzkxZENBOUlDMHhPMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NWZkVzV5WldaQlkzUnBkbVVnUFNCbGVIQnZjblJ6TG1GamRHbDJaU0E5SUdaMWJtTjBhVzl1S0dsMFpXMHBJSHRjYmlBZ1kyeGxZWEpVYVcxbGIzVjBLR2wwWlcwdVgybGtiR1ZVYVcxbGIzVjBTV1FwTzF4dVhHNGdJSFpoY2lCdGMyVmpjeUE5SUdsMFpXMHVYMmxrYkdWVWFXMWxiM1YwTzF4dUlDQnBaaUFvYlhObFkzTWdQajBnTUNrZ2UxeHVJQ0FnSUdsMFpXMHVYMmxrYkdWVWFXMWxiM1YwU1dRZ1BTQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJRzl1VkdsdFpXOTFkQ2dwSUh0Y2JpQWdJQ0FnSUdsbUlDaHBkR1Z0TGw5dmJsUnBiV1Z2ZFhRcFhHNGdJQ0FnSUNBZ0lHbDBaVzB1WDI5dVZHbHRaVzkxZENncE8xeHVJQ0FnSUgwc0lHMXpaV056S1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeThnVkdoaGRDZHpJRzV2ZENCb2IzY2dibTlrWlM1cWN5QnBiWEJzWlcxbGJuUnpJR2wwSUdKMWRDQjBhR1VnWlhod2IzTmxaQ0JoY0drZ2FYTWdkR2hsSUhOaGJXVXVYRzVsZUhCdmNuUnpMbk5sZEVsdGJXVmthV0YwWlNBOUlIUjVjR1Z2WmlCelpYUkpiVzFsWkdsaGRHVWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQS9JSE5sZEVsdGJXVmthV0YwWlNBNklHWjFibU4wYVc5dUtHWnVLU0I3WEc0Z0lIWmhjaUJwWkNBOUlHNWxlSFJKYlcxbFpHbGhkR1ZKWkNzck8xeHVJQ0IyWVhJZ1lYSm5jeUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBeUlEOGdabUZzYzJVZ09pQnpiR2xqWlM1allXeHNLR0Z5WjNWdFpXNTBjeXdnTVNrN1hHNWNiaUFnYVcxdFpXUnBZWFJsU1dSelcybGtYU0E5SUhSeWRXVTdYRzVjYmlBZ2JtVjRkRlJwWTJzb1puVnVZM1JwYjI0Z2IyNU9aWGgwVkdsamF5Z3BJSHRjYmlBZ0lDQnBaaUFvYVcxdFpXUnBZWFJsU1dSelcybGtYU2tnZTF4dUlDQWdJQ0FnTHk4Z1ptNHVZMkZzYkNncElHbHpJR1poYzNSbGNpQnpieUIzWlNCdmNIUnBiV2w2WlNCbWIzSWdkR2hsSUdOdmJXMXZiaUIxYzJVdFkyRnpaVnh1SUNBZ0lDQWdMeThnUUhObFpTQm9kSFJ3T2k4dmFuTndaWEptTG1OdmJTOWpZV3hzTFdGd2NHeDVMWE5sWjNWY2JpQWdJQ0FnSUdsbUlDaGhjbWR6S1NCN1hHNGdJQ0FnSUNBZ0lHWnVMbUZ3Y0d4NUtHNTFiR3dzSUdGeVozTXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdabTR1WTJGc2JDaHVkV3hzS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklGQnlaWFpsYm5RZ2FXUnpJR1p5YjIwZ2JHVmhhMmx1WjF4dUlDQWdJQ0FnWlhod2IzSjBjeTVqYkdWaGNrbHRiV1ZrYVdGMFpTaHBaQ2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnYVdRN1hHNTlPMXh1WEc1bGVIQnZjblJ6TG1Oc1pXRnlTVzF0WldScFlYUmxJRDBnZEhsd1pXOW1JR05zWldGeVNXMXRaV1JwWVhSbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QmpiR1ZoY2tsdGJXVmthV0YwWlNBNklHWjFibU4wYVc5dUtHbGtLU0I3WEc0Z0lHUmxiR1YwWlNCcGJXMWxaR2xoZEdWSlpITmJhV1JkTzF4dWZUc2lMQ0l2S2lGY2JpQXFJRloxWlM1cWN5QjJNaTQyTGpFd1hHNGdLaUFvWXlrZ01qQXhOQzB5TURFNUlFVjJZVzRnV1c5MVhHNGdLaUJTWld4bFlYTmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlFeHBZMlZ1YzJVdVhHNGdLaTljYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1THlvZ0lDb3ZYRzVjYm5aaGNpQmxiWEIwZVU5aWFtVmpkQ0E5SUU5aWFtVmpkQzVtY21WbGVtVW9lMzBwTzF4dVhHNHZMeUJVYUdWelpTQm9aV3h3WlhKeklIQnliMlIxWTJVZ1ltVjBkR1Z5SUZaTklHTnZaR1VnYVc0Z1NsTWdaVzVuYVc1bGN5QmtkV1VnZEc4Z2RHaGxhWEpjYmk4dklHVjRjR3hwWTJsMGJtVnpjeUJoYm1RZ1puVnVZM1JwYjI0Z2FXNXNhVzVwYm1jdVhHNW1kVzVqZEdsdmJpQnBjMVZ1WkdWbUlDaDJLU0I3WEc0Z0lISmxkSFZ5YmlCMklEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z2RpQTlQVDBnYm5Wc2JGeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwUmxaaUFvZGlrZ2UxeHVJQ0J5WlhSMWNtNGdkaUFoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFlnSVQwOUlHNTFiR3hjYm4xY2JseHVablZ1WTNScGIyNGdhWE5VY25WbElDaDJLU0I3WEc0Z0lISmxkSFZ5YmlCMklEMDlQU0IwY25WbFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdselJtRnNjMlVnS0hZcElIdGNiaUFnY21WMGRYSnVJSFlnUFQwOUlHWmhiSE5sWEc1OVhHNWNiaThxS2x4dUlDb2dRMmhsWTJzZ2FXWWdkbUZzZFdVZ2FYTWdjSEpwYldsMGFYWmxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMUJ5YVcxcGRHbDJaU0FvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0IwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4WEc0Z0lDQWdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iblZ0WW1WeUp5QjhmRnh1SUNBZ0lDOHZJQ1JtYkc5M0xXUnBjMkZpYkdVdGJHbHVaVnh1SUNBZ0lIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0ozTjViV0p2YkNjZ2ZIeGNiaUFnSUNCMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkaWIyOXNaV0Z1SjF4dUlDQXBYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VYVnBZMnNnYjJKcVpXTjBJR05vWldOcklDMGdkR2hwY3lCcGN5QndjbWx0WVhKcGJIa2dkWE5sWkNCMGJ5QjBaV3hzWEc0Z0tpQlBZbXBsWTNSeklHWnliMjBnY0hKcGJXbDBhWFpsSUhaaGJIVmxjeUIzYUdWdUlIZGxJR3R1YjNjZ2RHaGxJSFpoYkhWbFhHNGdLaUJwY3lCaElFcFRUMDR0WTI5dGNHeHBZVzUwSUhSNWNHVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpUMkpxWldOMElDaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlHOWlhaUFoUFQwZ2JuVnNiQ0FtSmlCMGVYQmxiMllnYjJKcUlEMDlQU0FuYjJKcVpXTjBKMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFZGxkQ0IwYUdVZ2NtRjNJSFI1Y0dVZ2MzUnlhVzVuSUc5bUlHRWdkbUZzZFdVc0lHVXVaeTRzSUZ0dlltcGxZM1FnVDJKcVpXTjBYUzVjYmlBcUwxeHVkbUZ5SUY5MGIxTjBjbWx1WnlBOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jN1hHNWNibVoxYm1OMGFXOXVJSFJ2VW1GM1ZIbHdaU0FvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUY5MGIxTjBjbWx1Wnk1allXeHNLSFpoYkhWbEtTNXpiR2xqWlNnNExDQXRNU2xjYm4xY2JseHVMeW9xWEc0Z0tpQlRkSEpwWTNRZ2IySnFaV04wSUhSNWNHVWdZMmhsWTJzdUlFOXViSGtnY21WMGRYSnVjeUIwY25WbFhHNGdLaUJtYjNJZ2NHeGhhVzRnU21GMllWTmpjbWx3ZENCdlltcGxZM1J6TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzFCc1lXbHVUMkpxWldOMElDaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlGOTBiMU4wY21sdVp5NWpZV3hzS0c5aWFpa2dQVDA5SUNkYmIySnFaV04wSUU5aWFtVmpkRjBuWEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6VW1WblJYaHdJQ2gyS1NCN1hHNGdJSEpsZEhWeWJpQmZkRzlUZEhKcGJtY3VZMkZzYkNoMktTQTlQVDBnSjF0dlltcGxZM1FnVW1WblJYaHdYU2RjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYXlCcFppQjJZV3dnYVhNZ1lTQjJZV3hwWkNCaGNuSmhlU0JwYm1SbGVDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTldZV3hwWkVGeWNtRjVTVzVrWlhnZ0tIWmhiQ2tnZTF4dUlDQjJZWElnYmlBOUlIQmhjbk5sUm14dllYUW9VM1J5YVc1bktIWmhiQ2twTzF4dUlDQnlaWFIxY200Z2JpQStQU0F3SUNZbUlFMWhkR2d1Wm14dmIzSW9iaWtnUFQwOUlHNGdKaVlnYVhOR2FXNXBkR1VvZG1Gc0tWeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMxQnliMjFwYzJVZ0tIWmhiQ2tnZTF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUdselJHVm1LSFpoYkNrZ0ppWmNiaUFnSUNCMGVYQmxiMllnZG1Gc0xuUm9aVzRnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVpjYmlBZ0lDQjBlWEJsYjJZZ2RtRnNMbU5oZEdOb0lEMDlQU0FuWm5WdVkzUnBiMjRuWEc0Z0lDbGNibjFjYmx4dUx5b3FYRzRnS2lCRGIyNTJaWEowSUdFZ2RtRnNkV1VnZEc4Z1lTQnpkSEpwYm1jZ2RHaGhkQ0JwY3lCaFkzUjFZV3hzZVNCeVpXNWtaWEpsWkM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnZEc5VGRISnBibWNnS0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnZG1Gc0lEMDlJRzUxYkd4Y2JpQWdJQ0EvSUNjblhHNGdJQ0FnT2lCQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkNrZ2ZId2dLR2x6VUd4aGFXNVBZbXBsWTNRb2RtRnNLU0FtSmlCMllXd3VkRzlUZEhKcGJtY2dQVDA5SUY5MGIxTjBjbWx1WnlsY2JpQWdJQ0FnSUQ4Z1NsTlBUaTV6ZEhKcGJtZHBabmtvZG1Gc0xDQnVkV3hzTENBeUtWeHVJQ0FnSUNBZ09pQlRkSEpwYm1jb2RtRnNLVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFTnZiblpsY25RZ1lXNGdhVzV3ZFhRZ2RtRnNkV1VnZEc4Z1lTQnVkVzFpWlhJZ1ptOXlJSEJsY25OcGMzUmxibU5sTGx4dUlDb2dTV1lnZEdobElHTnZiblpsY25OcGIyNGdabUZwYkhNc0lISmxkSFZ5YmlCdmNtbG5hVzVoYkNCemRISnBibWN1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ2VG5WdFltVnlJQ2gyWVd3cElIdGNiaUFnZG1GeUlHNGdQU0J3WVhKelpVWnNiMkYwS0haaGJDazdYRzRnSUhKbGRIVnliaUJwYzA1aFRpaHVLU0EvSUhaaGJDQTZJRzVjYm4xY2JseHVMeW9xWEc0Z0tpQk5ZV3RsSUdFZ2JXRndJR0Z1WkNCeVpYUjFjbTRnWVNCbWRXNWpkR2x2YmlCbWIzSWdZMmhsWTJ0cGJtY2dhV1lnWVNCclpYbGNiaUFxSUdseklHbHVJSFJvWVhRZ2JXRndMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnRZV3RsVFdGd0lDaGNiaUFnYzNSeUxGeHVJQ0JsZUhCbFkzUnpURzkzWlhKRFlYTmxYRzRwSUh0Y2JpQWdkbUZ5SUcxaGNDQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lIWmhjaUJzYVhOMElEMGdjM1J5TG5Od2JHbDBLQ2NzSnlrN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdsemRDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJRzFoY0Z0c2FYTjBXMmxkWFNBOUlIUnlkV1U3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1Y0Y0dWamRITk1iM2RsY2tOaGMyVmNiaUFnSUNBL0lHWjFibU4wYVc5dUlDaDJZV3dwSUhzZ2NtVjBkWEp1SUcxaGNGdDJZV3d1ZEc5TWIzZGxja05oYzJVb0tWMDdJSDFjYmlBZ0lDQTZJR1oxYm1OMGFXOXVJQ2gyWVd3cElIc2djbVYwZFhKdUlHMWhjRnQyWVd4ZE95QjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnNnYVdZZ1lTQjBZV2NnYVhNZ1lTQmlkV2xzZEMxcGJpQjBZV2N1WEc0Z0tpOWNiblpoY2lCcGMwSjFhV3gwU1c1VVlXY2dQU0J0WVd0bFRXRndLQ2R6Ykc5MExHTnZiWEJ2Ym1WdWRDY3NJSFJ5ZFdVcE8xeHVYRzR2S2lwY2JpQXFJRU5vWldOcklHbG1JR0Z1SUdGMGRISnBZblYwWlNCcGN5QmhJSEpsYzJWeWRtVmtJR0YwZEhKcFluVjBaUzVjYmlBcUwxeHVkbUZ5SUdselVtVnpaWEoyWldSQmRIUnlhV0oxZEdVZ1BTQnRZV3RsVFdGd0tDZHJaWGtzY21WbUxITnNiM1FzYzJ4dmRDMXpZMjl3WlN4cGN5Y3BPMXh1WEc0dktpcGNiaUFxSUZKbGJXOTJaU0JoYmlCcGRHVnRJR1p5YjIwZ1lXNGdZWEp5WVhrdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGJXOTJaU0FvWVhKeUxDQnBkR1Z0S1NCN1hHNGdJR2xtSUNoaGNuSXViR1Z1WjNSb0tTQjdYRzRnSUNBZ2RtRnlJR2x1WkdWNElEMGdZWEp5TG1sdVpHVjRUMllvYVhSbGJTazdYRzRnSUNBZ2FXWWdLR2x1WkdWNElENGdMVEVwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoY25JdWMzQnNhV05sS0dsdVpHVjRMQ0F4S1Z4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVOb1pXTnJJSGRvWlhSb1pYSWdZVzRnYjJKcVpXTjBJR2hoY3lCMGFHVWdjSEp2Y0dWeWRIa3VYRzRnS2k5Y2JuWmhjaUJvWVhOUGQyNVFjbTl3WlhKMGVTQTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrN1hHNW1kVzVqZEdsdmJpQm9ZWE5QZDI0Z0tHOWlhaXdnYTJWNUtTQjdYRzRnSUhKbGRIVnliaUJvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFpd2dhMlY1S1Z4dWZWeHVYRzR2S2lwY2JpQXFJRU55WldGMFpTQmhJR05oWTJobFpDQjJaWEp6YVc5dUlHOW1JR0VnY0hWeVpTQm1kVzVqZEdsdmJpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kyRmphR1ZrSUNobWJpa2dlMXh1SUNCMllYSWdZMkZqYUdVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMXh1SUNCeVpYUjFjbTRnS0daMWJtTjBhVzl1SUdOaFkyaGxaRVp1SUNoemRISXBJSHRjYmlBZ0lDQjJZWElnYUdsMElEMGdZMkZqYUdWYmMzUnlYVHRjYmlBZ0lDQnlaWFIxY200Z2FHbDBJSHg4SUNoallXTm9aVnR6ZEhKZElEMGdabTRvYzNSeUtTbGNiaUFnZlNsY2JuMWNibHh1THlvcVhHNGdLaUJEWVcxbGJHbDZaU0JoSUdoNWNHaGxiaTFrWld4cGJXbDBaV1FnYzNSeWFXNW5MbHh1SUNvdlhHNTJZWElnWTJGdFpXeHBlbVZTUlNBOUlDOHRLRnhjZHlrdlp6dGNiblpoY2lCallXMWxiR2w2WlNBOUlHTmhZMmhsWkNobWRXNWpkR2x2YmlBb2MzUnlLU0I3WEc0Z0lISmxkSFZ5YmlCemRISXVjbVZ3YkdGalpTaGpZVzFsYkdsNlpWSkZMQ0JtZFc1amRHbHZiaUFvWHl3Z1l5a2dleUJ5WlhSMWNtNGdZeUEvSUdNdWRHOVZjSEJsY2tOaGMyVW9LU0E2SUNjbk95QjlLVnh1ZlNrN1hHNWNiaThxS2x4dUlDb2dRMkZ3YVhSaGJHbDZaU0JoSUhOMGNtbHVaeTVjYmlBcUwxeHVkbUZ5SUdOaGNHbDBZV3hwZW1VZ1BTQmpZV05vWldRb1puVnVZM1JwYjI0Z0tITjBjaWtnZTF4dUlDQnlaWFIxY200Z2MzUnlMbU5vWVhKQmRDZ3dLUzUwYjFWd2NHVnlRMkZ6WlNncElDc2djM1J5TG5Oc2FXTmxLREVwWEc1OUtUdGNibHh1THlvcVhHNGdLaUJJZVhCb1pXNWhkR1VnWVNCallXMWxiRU5oYzJVZ2MzUnlhVzVuTGx4dUlDb3ZYRzUyWVhJZ2FIbHdhR1Z1WVhSbFVrVWdQU0F2WEZ4Q0tGdEJMVnBkS1M5bk8xeHVkbUZ5SUdoNWNHaGxibUYwWlNBOUlHTmhZMmhsWkNobWRXNWpkR2x2YmlBb2MzUnlLU0I3WEc0Z0lISmxkSFZ5YmlCemRISXVjbVZ3YkdGalpTaG9lWEJvWlc1aGRHVlNSU3dnSnkwa01TY3BMblJ2VEc5M1pYSkRZWE5sS0NsY2JuMHBPMXh1WEc0dktpcGNiaUFxSUZOcGJYQnNaU0JpYVc1a0lIQnZiSGxtYVd4c0lHWnZjaUJsYm5acGNtOXViV1Z1ZEhNZ2RHaGhkQ0JrYnlCdWIzUWdjM1Z3Y0c5eWRDQnBkQ3hjYmlBcUlHVXVaeTRzSUZCb1lXNTBiMjFLVXlBeExuZ3VJRlJsWTJodWFXTmhiR3g1TENCM1pTQmtiMjRuZENCdVpXVmtJSFJvYVhNZ1lXNTViVzl5WlZ4dUlDb2djMmx1WTJVZ2JtRjBhWFpsSUdKcGJtUWdhWE1nYm05M0lIQmxjbVp2Y20xaGJuUWdaVzV2ZFdkb0lHbHVJRzF2YzNRZ1luSnZkM05sY25NdVhHNGdLaUJDZFhRZ2NtVnRiM1pwYm1jZ2FYUWdkMjkxYkdRZ2JXVmhiaUJpY21WaGEybHVaeUJqYjJSbElIUm9ZWFFnZDJGeklHRmliR1VnZEc4Z2NuVnVJR2x1WEc0Z0tpQlFhR0Z1ZEc5dFNsTWdNUzU0TENCemJ5QjBhR2x6SUcxMWMzUWdZbVVnYTJWd2RDQm1iM0lnWW1GamEzZGhjbVFnWTI5dGNHRjBhV0pwYkdsMGVTNWNiaUFxTDF4dVhHNHZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdibVY0ZENBcUwxeHVablZ1WTNScGIyNGdjRzlzZVdacGJHeENhVzVrSUNobWJpd2dZM1I0S1NCN1hHNGdJR1oxYm1OMGFXOXVJR0p2ZFc1a1JtNGdLR0VwSUh0Y2JpQWdJQ0IyWVhJZ2JDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdYRzRnSUNBZ2NtVjBkWEp1SUd4Y2JpQWdJQ0FnSUQ4Z2JDQStJREZjYmlBZ0lDQWdJQ0FnUHlCbWJpNWhjSEJzZVNoamRIZ3NJR0Z5WjNWdFpXNTBjeWxjYmlBZ0lDQWdJQ0FnT2lCbWJpNWpZV3hzS0dOMGVDd2dZU2xjYmlBZ0lDQWdJRG9nWm00dVkyRnNiQ2hqZEhncFhHNGdJSDFjYmx4dUlDQmliM1Z1WkVadUxsOXNaVzVuZEdnZ1BTQm1iaTVzWlc1bmRHZzdYRzRnSUhKbGRIVnliaUJpYjNWdVpFWnVYRzU5WEc1Y2JtWjFibU4wYVc5dUlHNWhkR2wyWlVKcGJtUWdLR1p1TENCamRIZ3BJSHRjYmlBZ2NtVjBkWEp1SUdadUxtSnBibVFvWTNSNEtWeHVmVnh1WEc1MllYSWdZbWx1WkNBOUlFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pTNWlhVzVrWEc0Z0lEOGdibUYwYVhabFFtbHVaRnh1SUNBNklIQnZiSGxtYVd4c1FtbHVaRHRjYmx4dUx5b3FYRzRnS2lCRGIyNTJaWEowSUdGdUlFRnljbUY1TFd4cGEyVWdiMkpxWldOMElIUnZJR0VnY21WaGJDQkJjbkpoZVM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnZEc5QmNuSmhlU0FvYkdsemRDd2djM1JoY25RcElIdGNiaUFnYzNSaGNuUWdQU0J6ZEdGeWRDQjhmQ0F3TzF4dUlDQjJZWElnYVNBOUlHeHBjM1F1YkdWdVozUm9JQzBnYzNSaGNuUTdYRzRnSUhaaGNpQnlaWFFnUFNCdVpYY2dRWEp5WVhrb2FTazdYRzRnSUhkb2FXeGxJQ2hwTFMwcElIdGNiaUFnSUNCeVpYUmJhVjBnUFNCc2FYTjBXMmtnS3lCemRHRnlkRjA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsZEZ4dWZWeHVYRzR2S2lwY2JpQXFJRTFwZUNCd2NtOXdaWEowYVdWeklHbHVkRzhnZEdGeVoyVjBJRzlpYW1WamRDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1pYaDBaVzVrSUNoMGJ5d2dYMlp5YjIwcElIdGNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJRjltY205dEtTQjdYRzRnSUNBZ2RHOWJhMlY1WFNBOUlGOW1jbTl0VzJ0bGVWMDdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIUnZYRzU5WEc1Y2JpOHFLbHh1SUNvZ1RXVnlaMlVnWVc0Z1FYSnlZWGtnYjJZZ1QySnFaV04wY3lCcGJuUnZJR0VnYzJsdVoyeGxJRTlpYW1WamRDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2RHOVBZbXBsWTNRZ0tHRnljaWtnZTF4dUlDQjJZWElnY21WeklEMGdlMzA3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZWEp5TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2FXWWdLR0Z5Y2x0cFhTa2dlMXh1SUNBZ0lDQWdaWGgwWlc1a0tISmxjeXdnWVhKeVcybGRLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxjMXh1ZlZ4dVhHNHZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnVieTExYm5WelpXUXRkbUZ5Y3lBcUwxeHVYRzR2S2lwY2JpQXFJRkJsY21admNtMGdibThnYjNCbGNtRjBhVzl1TGx4dUlDb2dVM1IxWW1KcGJtY2dZWEpuY3lCMGJ5QnRZV3RsSUVac2IzY2dhR0Z3Y0hrZ2QybDBhRzkxZENCc1pXRjJhVzVuSUhWelpXeGxjM01nZEhKaGJuTndhV3hsWkNCamIyUmxYRzRnS2lCM2FYUm9JQzR1TG5KbGMzUWdLR2gwZEhCek9pOHZabXh2ZHk1dmNtY3ZZbXh2Wnk4eU1ERTNMekExTHpBM0wxTjBjbWxqZEMxR2RXNWpkR2x2YmkxRFlXeHNMVUZ5YVhSNUx5a3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlHNXZiM0FnS0dFc0lHSXNJR01wSUh0OVhHNWNiaThxS2x4dUlDb2dRV3gzWVhseklISmxkSFZ5YmlCbVlXeHpaUzVjYmlBcUwxeHVkbUZ5SUc1dklEMGdablZ1WTNScGIyNGdLR0VzSUdJc0lHTXBJSHNnY21WMGRYSnVJR1poYkhObE95QjlPMXh1WEc0dktpQmxjMnhwYm5RdFpXNWhZbXhsSUc1dkxYVnVkWE5sWkMxMllYSnpJQ292WEc1Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1SUhSb1pTQnpZVzFsSUhaaGJIVmxMbHh1SUNvdlhHNTJZWElnYVdSbGJuUnBkSGtnUFNCbWRXNWpkR2x2YmlBb1h5a2dleUJ5WlhSMWNtNGdYenNnZlR0Y2JseHVMeW9xWEc0Z0tpQkhaVzVsY21GMFpTQmhJSE4wY21sdVp5QmpiMjUwWVdsdWFXNW5JSE4wWVhScFl5QnJaWGx6SUdaeWIyMGdZMjl0Y0dsc1pYSWdiVzlrZFd4bGN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVnVVM1JoZEdsalMyVjVjeUFvYlc5a2RXeGxjeWtnZTF4dUlDQnlaWFIxY200Z2JXOWtkV3hsY3k1eVpXUjFZMlVvWm5WdVkzUnBiMjRnS0d0bGVYTXNJRzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdhMlY1Y3k1amIyNWpZWFFvYlM1emRHRjBhV05MWlhseklIeDhJRnRkS1Z4dUlDQjlMQ0JiWFNrdWFtOXBiaWduTENjcFhHNTlYRzVjYmk4cUtseHVJQ29nUTJobFkyc2dhV1lnZEhkdklIWmhiSFZsY3lCaGNtVWdiRzl2YzJWc2VTQmxjWFZoYkNBdElIUm9ZWFFnYVhNc1hHNGdLaUJwWmlCMGFHVjVJR0Z5WlNCd2JHRnBiaUJ2WW1wbFkzUnpMQ0JrYnlCMGFHVjVJR2hoZG1VZ2RHaGxJSE5oYldVZ2MyaGhjR1UvWEc0Z0tpOWNibVoxYm1OMGFXOXVJR3h2YjNObFJYRjFZV3dnS0dFc0lHSXBJSHRjYmlBZ2FXWWdLR0VnUFQwOUlHSXBJSHNnY21WMGRYSnVJSFJ5ZFdVZ2ZWeHVJQ0IyWVhJZ2FYTlBZbXBsWTNSQklEMGdhWE5QWW1wbFkzUW9ZU2s3WEc0Z0lIWmhjaUJwYzA5aWFtVmpkRUlnUFNCcGMwOWlhbVZqZENoaUtUdGNiaUFnYVdZZ0tHbHpUMkpxWldOMFFTQW1KaUJwYzA5aWFtVmpkRUlwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2RtRnlJR2x6UVhKeVlYbEJJRDBnUVhKeVlYa3VhWE5CY25KaGVTaGhLVHRjYmlBZ0lDQWdJSFpoY2lCcGMwRnljbUY1UWlBOUlFRnljbUY1TG1selFYSnlZWGtvWWlrN1hHNGdJQ0FnSUNCcFppQW9hWE5CY25KaGVVRWdKaVlnYVhOQmNuSmhlVUlwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdFdWJHVnVaM1JvSUQwOVBTQmlMbXhsYm1kMGFDQW1KaUJoTG1WMlpYSjVLR1oxYm1OMGFXOXVJQ2hsTENCcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR3h2YjNObFJYRjFZV3dvWlN3Z1lsdHBYU2xjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lTQnBibk4wWVc1alpXOW1JRVJoZEdVZ0ppWWdZaUJwYm5OMFlXNWpaVzltSUVSaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0V1WjJWMFZHbHRaU2dwSUQwOVBTQmlMbWRsZEZScGJXVW9LVnh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doYVhOQmNuSmhlVUVnSmlZZ0lXbHpRWEp5WVhsQ0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCclpYbHpRU0E5SUU5aWFtVmpkQzVyWlhsektHRXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2EyVjVjMElnUFNCUFltcGxZM1F1YTJWNWN5aGlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3RsZVhOQkxteGxibWQwYUNBOVBUMGdhMlY1YzBJdWJHVnVaM1JvSUNZbUlHdGxlWE5CTG1WMlpYSjVLR1oxYm1OMGFXOXVJQ2hyWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiRzl2YzJWRmNYVmhiQ2hoVzJ0bGVWMHNJR0piYTJWNVhTbGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMElDb3ZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCcFppQW9JV2x6VDJKcVpXTjBRU0FtSmlBaGFYTlBZbXBsWTNSQ0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZOMGNtbHVaeWhoS1NBOVBUMGdVM1J5YVc1bktHSXBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCU1pYUjFjbTRnZEdobElHWnBjbk4wSUdsdVpHVjRJR0YwSUhkb2FXTm9JR0VnYkc5dmMyVnNlU0JsY1hWaGJDQjJZV3gxWlNCallXNGdZbVZjYmlBcUlHWnZkVzVrSUdsdUlIUm9aU0JoY25KaGVTQW9hV1lnZG1Gc2RXVWdhWE1nWVNCd2JHRnBiaUJ2WW1wbFkzUXNJSFJvWlNCaGNuSmhlU0J0ZFhOMFhHNGdLaUJqYjI1MFlXbHVJR0Z1SUc5aWFtVmpkQ0J2WmlCMGFHVWdjMkZ0WlNCemFHRndaU2tzSUc5eUlDMHhJR2xtSUdsMElHbHpJRzV2ZENCd2NtVnpaVzUwTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJzYjI5elpVbHVaR1Y0VDJZZ0tHRnljaXdnZG1Gc0tTQjdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lYSnlMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnYVdZZ0tHeHZiM05sUlhGMVlXd29ZWEp5VzJsZExDQjJZV3dwS1NCN0lISmxkSFZ5YmlCcElIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z0xURmNibjFjYmx4dUx5b3FYRzRnS2lCRmJuTjFjbVVnWVNCbWRXNWpkR2x2YmlCcGN5QmpZV3hzWldRZ2IyNXNlU0J2Ym1ObExseHVJQ292WEc1bWRXNWpkR2x2YmlCdmJtTmxJQ2htYmlrZ2UxeHVJQ0IyWVhJZ1kyRnNiR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2FXWWdLQ0ZqWVd4c1pXUXBJSHRjYmlBZ0lDQWdJR05oYkd4bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCbWJpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1MllYSWdVMU5TWDBGVVZGSWdQU0FuWkdGMFlTMXpaWEoyWlhJdGNtVnVaR1Z5WldRbk8xeHVYRzUyWVhJZ1FWTlRSVlJmVkZsUVJWTWdQU0JiWEc0Z0lDZGpiMjF3YjI1bGJuUW5MRnh1SUNBblpHbHlaV04wYVhabEp5eGNiaUFnSjJacGJIUmxjaWRjYmwwN1hHNWNiblpoY2lCTVNVWkZRMWxEVEVWZlNFOVBTMU1nUFNCYlhHNGdJQ2RpWldadmNtVkRjbVZoZEdVbkxGeHVJQ0FuWTNKbFlYUmxaQ2NzWEc0Z0lDZGlaV1p2Y21WTmIzVnVkQ2NzWEc0Z0lDZHRiM1Z1ZEdWa0p5eGNiaUFnSjJKbFptOXlaVlZ3WkdGMFpTY3NYRzRnSUNkMWNHUmhkR1ZrSnl4Y2JpQWdKMkpsWm05eVpVUmxjM1J5YjNrbkxGeHVJQ0FuWkdWemRISnZlV1ZrSnl4Y2JpQWdKMkZqZEdsMllYUmxaQ2NzWEc0Z0lDZGtaV0ZqZEdsMllYUmxaQ2NzWEc0Z0lDZGxjbkp2Y2tOaGNIUjFjbVZrSnl4Y2JpQWdKM05sY25abGNsQnlaV1psZEdOb0oxeHVYVHRjYmx4dUx5b2dJQ292WEc1Y2JseHVYRzUyWVhJZ1kyOXVabWxuSUQwZ0tIdGNiaUFnTHlvcVhHNGdJQ0FxSUU5d2RHbHZiaUJ0WlhKblpTQnpkSEpoZEdWbmFXVnpJQ2gxYzJWa0lHbHVJR052Y21VdmRYUnBiQzl2Y0hScGIyNXpLVnh1SUNBZ0tpOWNiaUFnTHk4Z0pHWnNiM2N0WkdsellXSnNaUzFzYVc1bFhHNGdJRzl3ZEdsdmJrMWxjbWRsVTNSeVlYUmxaMmxsY3pvZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1YyaGxkR2hsY2lCMGJ5QnpkWEJ3Y21WemN5QjNZWEp1YVc1bmN5NWNiaUFnSUNvdlhHNGdJSE5wYkdWdWREb2dabUZzYzJVc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZOb2IzY2djSEp2WkhWamRHbHZiaUJ0YjJSbElIUnBjQ0J0WlhOellXZGxJRzl1SUdKdmIzUS9YRzRnSUNBcUwxeHVJQ0J3Y205a2RXTjBhVzl1Vkdsd09pQmNJbVJsZG1Wc2IzQnRaVzUwWENJZ0lUMDlJQ2R3Y205a2RXTjBhVzl1Snl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVjJobGRHaGxjaUIwYnlCbGJtRmliR1VnWkdWMmRHOXZiSE5jYmlBZ0lDb3ZYRzRnSUdSbGRuUnZiMnh6T2lCY0ltUmxkbVZzYjNCdFpXNTBYQ0lnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWMmhsZEdobGNpQjBieUJ5WldOdmNtUWdjR1Z5Wmx4dUlDQWdLaTljYmlBZ2NHVnlabTl5YldGdVkyVTZJR1poYkhObExGeHVYRzRnSUM4cUtseHVJQ0FnS2lCRmNuSnZjaUJvWVc1a2JHVnlJR1p2Y2lCM1lYUmphR1Z5SUdWeWNtOXljMXh1SUNBZ0tpOWNiaUFnWlhKeWIzSklZVzVrYkdWeU9pQnVkV3hzTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJYWVhKdUlHaGhibVJzWlhJZ1ptOXlJSGRoZEdOb1pYSWdkMkZ5Ym5OY2JpQWdJQ292WEc0Z0lIZGhjbTVJWVc1a2JHVnlPaUJ1ZFd4c0xGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSloyNXZjbVVnWTJWeWRHRnBiaUJqZFhOMGIyMGdaV3hsYldWdWRITmNiaUFnSUNvdlhHNGdJR2xuYm05eVpXUkZiR1Z0Wlc1MGN6b2dXMTBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU4xYzNSdmJTQjFjMlZ5SUd0bGVTQmhiR2xoYzJWeklHWnZjaUIyTFc5dVhHNGdJQ0FxTDF4dUlDQXZMeUFrWm14dmR5MWthWE5oWW14bExXeHBibVZjYmlBZ2EyVjVRMjlrWlhNNklFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDa3NYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTm9aV05ySUdsbUlHRWdkR0ZuSUdseklISmxjMlZ5ZG1Wa0lITnZJSFJvWVhRZ2FYUWdZMkZ1Ym05MElHSmxJSEpsWjJsemRHVnlaV1FnWVhNZ1lWeHVJQ0FnS2lCamIyMXdiMjVsYm5RdUlGUm9hWE1nYVhNZ2NHeGhkR1p2Y20wdFpHVndaVzVrWlc1MElHRnVaQ0J0WVhrZ1ltVWdiM1psY25keWFYUjBaVzR1WEc0Z0lDQXFMMXh1SUNCcGMxSmxjMlZ5ZG1Wa1ZHRm5PaUJ1Ynl4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJobFkyc2dhV1lnWVc0Z1lYUjBjbWxpZFhSbElHbHpJSEpsYzJWeWRtVmtJSE52SUhSb1lYUWdhWFFnWTJGdWJtOTBJR0psSUhWelpXUWdZWE1nWVNCamIyMXdiMjVsYm5SY2JpQWdJQ29nY0hKdmNDNGdWR2hwY3lCcGN5QndiR0YwWm05eWJTMWtaWEJsYm1SbGJuUWdZVzVrSUcxaGVTQmlaU0J2ZG1WeWQzSnBkSFJsYmk1Y2JpQWdJQ292WEc0Z0lHbHpVbVZ6WlhKMlpXUkJkSFJ5T2lCdWJ5eGNibHh1SUNBdktpcGNiaUFnSUNvZ1EyaGxZMnNnYVdZZ1lTQjBZV2NnYVhNZ1lXNGdkVzVyYm05M2JpQmxiR1Z0Wlc1MExseHVJQ0FnS2lCUWJHRjBabTl5YlMxa1pYQmxibVJsYm5RdVhHNGdJQ0FxTDF4dUlDQnBjMVZ1YTI1dmQyNUZiR1Z0Wlc1ME9pQnVieXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSMlYwSUhSb1pTQnVZVzFsYzNCaFkyVWdiMllnWVc0Z1pXeGxiV1Z1ZEZ4dUlDQWdLaTljYmlBZ1oyVjBWR0ZuVG1GdFpYTndZV05sT2lCdWIyOXdMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlFZWEp6WlNCMGFHVWdjbVZoYkNCMFlXY2dibUZ0WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUhCc1lYUm1iM0p0TGx4dUlDQWdLaTljYmlBZ2NHRnljMlZRYkdGMFptOXliVlJoWjA1aGJXVTZJR2xrWlc1MGFYUjVMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRhR1ZqYXlCcFppQmhiaUJoZEhSeWFXSjFkR1VnYlhWemRDQmlaU0JpYjNWdVpDQjFjMmx1WnlCd2NtOXdaWEowZVN3Z1pTNW5MaUIyWVd4MVpWeHVJQ0FnS2lCUWJHRjBabTl5YlMxa1pYQmxibVJsYm5RdVhHNGdJQ0FxTDF4dUlDQnRkWE4wVlhObFVISnZjRG9nYm04c1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCbGNtWnZjbTBnZFhCa1lYUmxjeUJoYzNsdVkyaHliMjV2ZFhOc2VTNGdTVzUwWlc1a1pXUWdkRzhnWW1VZ2RYTmxaQ0JpZVNCV2RXVWdWR1Z6ZENCVmRHbHNjMXh1SUNBZ0tpQlVhR2x6SUhkcGJHd2djMmxuYm1sbWFXTmhiblJzZVNCeVpXUjFZMlVnY0dWeVptOXliV0Z1WTJVZ2FXWWdjMlYwSUhSdklHWmhiSE5sTGx4dUlDQWdLaTljYmlBZ1lYTjVibU02SUhSeWRXVXNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFVjRjRzl6WldRZ1ptOXlJR3hsWjJGamVTQnlaV0Z6YjI1elhHNGdJQ0FxTDF4dUlDQmZiR2xtWldONVkyeGxTRzl2YTNNNklFeEpSa1ZEV1VOTVJWOUlUMDlMVTF4dWZTazdYRzVjYmk4cUlDQXFMMXh1WEc0dktpcGNiaUFxSUhWdWFXTnZaR1VnYkdWMGRHVnljeUIxYzJWa0lHWnZjaUJ3WVhKemFXNW5JR2gwYld3Z2RHRm5jeXdnWTI5dGNHOXVaVzUwSUc1aGJXVnpJR0Z1WkNCd2NtOXdaWEowZVNCd1lYUm9jeTVjYmlBcUlIVnphVzVuSUdoMGRIQnpPaTh2ZDNkM0xuY3pMbTl5Wnk5VVVpOW9kRzFzTlRNdmMyVnRZVzUwYVdOekxYTmpjbWx3ZEdsdVp5NW9kRzFzSTNCdmRHVnVkR2xoYkdOMWMzUnZiV1ZzWlcxbGJuUnVZVzFsWEc0Z0tpQnphMmx3Y0dsdVp5QmNYSFV4TURBd01DMWNYSFZGUmtaR1JpQmtkV1VnZEc4Z2FYUWdabkpsWlhwcGJtY2dkWEFnVUdoaGJuUnZiVXBUWEc0Z0tpOWNiblpoY2lCMWJtbGpiMlJsVW1WblJYaHdJRDBnTDJFdGVrRXRXbHhjZFRBd1FqZGNYSFV3TUVNd0xWeGNkVEF3UkRaY1hIVXdNRVE0TFZ4Y2RUQXdSalpjWEhVd01FWTRMVnhjZFRBek4wUmNYSFV3TXpkR0xWeGNkVEZHUmtaY1hIVXlNREJETFZ4Y2RUSXdNRVJjWEhVeU1ETkdMVnhjZFRJd05EQmNYSFV5TURjd0xWeGNkVEl4T0VaY1hIVXlRekF3TFZ4Y2RUSkdSVVpjWEhVek1EQXhMVnhjZFVRM1JrWmNYSFZHT1RBd0xWeGNkVVpFUTBaY1hIVkdSRVl3TFZ4Y2RVWkdSa1F2TzF4dVhHNHZLaXBjYmlBcUlFTm9aV05ySUdsbUlHRWdjM1J5YVc1bklITjBZWEowY3lCM2FYUm9JQ1FnYjNJZ1gxeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMxSmxjMlZ5ZG1Wa0lDaHpkSElwSUh0Y2JpQWdkbUZ5SUdNZ1BTQW9jM1J5SUNzZ0p5Y3BMbU5vWVhKRGIyUmxRWFFvTUNrN1hHNGdJSEpsZEhWeWJpQmpJRDA5UFNBd2VESTBJSHg4SUdNZ1BUMDlJREI0TlVaY2JuMWNibHh1THlvcVhHNGdLaUJFWldacGJtVWdZU0J3Y205d1pYSjBlUzVjYmlBcUwxeHVablZ1WTNScGIyNGdaR1ZtSUNodlltb3NJR3RsZVN3Z2RtRnNMQ0JsYm5WdFpYSmhZbXhsS1NCN1hHNGdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodlltb3NJR3RsZVN3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIyWVd3c1hHNGdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lTRmxiblZ0WlhKaFlteGxMRnh1SUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsTEZ4dUlDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaVnh1SUNCOUtUdGNibjFjYmx4dUx5b3FYRzRnS2lCUVlYSnpaU0J6YVcxd2JHVWdjR0YwYUM1Y2JpQXFMMXh1ZG1GeUlHSmhhV3hTUlNBOUlHNWxkeUJTWldkRmVIQW9LRndpVzE1Y0lpQXJJQ2gxYm1samIyUmxVbVZuUlhod0xuTnZkWEpqWlNrZ0t5QmNJaTRrWDF4Y1hGeGtYVndpS1NrN1hHNW1kVzVqZEdsdmJpQndZWEp6WlZCaGRHZ2dLSEJoZEdncElIdGNiaUFnYVdZZ0tHSmhhV3hTUlM1MFpYTjBLSEJoZEdncEtTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnZG1GeUlITmxaMjFsYm5SeklEMGdjR0YwYUM1emNHeHBkQ2duTGljcE8xeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MyVm5iV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2xtSUNnaGIySnFLU0I3SUhKbGRIVnliaUI5WEc0Z0lDQWdJQ0J2WW1vZ1BTQnZZbXBiYzJWbmJXVnVkSE5iYVYxZE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiMkpxWEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JpOHZJR05oYmlCM1pTQjFjMlVnWDE5d2NtOTBiMTlmUDF4dWRtRnlJR2hoYzFCeWIzUnZJRDBnSjE5ZmNISnZkRzlmWHljZ2FXNGdlMzA3WEc1Y2JpOHZJRUp5YjNkelpYSWdaVzUyYVhKdmJtMWxiblFnYzI1cFptWnBibWRjYm5aaGNpQnBia0p5YjNkelpYSWdQU0IwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSnp0Y2JuWmhjaUJwYmxkbFpYZ2dQU0IwZVhCbGIyWWdWMWhGYm5acGNtOXViV1Z1ZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ0lTRlhXRVZ1ZG1seWIyNXRaVzUwTG5Cc1lYUm1iM0p0TzF4dWRtRnlJSGRsWlhoUWJHRjBabTl5YlNBOUlHbHVWMlZsZUNBbUppQlhXRVZ1ZG1seWIyNXRaVzUwTG5Cc1lYUm1iM0p0TG5SdlRHOTNaWEpEWVhObEtDazdYRzUyWVhJZ1ZVRWdQU0JwYmtKeWIzZHpaWElnSmlZZ2QybHVaRzkzTG01aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RdWRHOU1iM2RsY2tOaGMyVW9LVHRjYm5aaGNpQnBjMGxGSUQwZ1ZVRWdKaVlnTDIxemFXVjhkSEpwWkdWdWRDOHVkR1Z6ZENoVlFTazdYRzUyWVhJZ2FYTkpSVGtnUFNCVlFTQW1KaUJWUVM1cGJtUmxlRTltS0NkdGMybGxJRGt1TUNjcElENGdNRHRjYm5aaGNpQnBjMFZrWjJVZ1BTQlZRU0FtSmlCVlFTNXBibVJsZUU5bUtDZGxaR2RsTHljcElENGdNRHRjYm5aaGNpQnBjMEZ1WkhKdmFXUWdQU0FvVlVFZ0ppWWdWVUV1YVc1a1pYaFBaaWduWVc1a2NtOXBaQ2NwSUQ0Z01Da2dmSHdnS0hkbFpYaFFiR0YwWm05eWJTQTlQVDBnSjJGdVpISnZhV1FuS1R0Y2JuWmhjaUJwYzBsUFV5QTlJQ2hWUVNBbUppQXZhWEJvYjI1bGZHbHdZV1I4YVhCdlpIeHBiM012TG5SbGMzUW9WVUVwS1NCOGZDQW9kMlZsZUZCc1lYUm1iM0p0SUQwOVBTQW5hVzl6SnlrN1hHNTJZWElnYVhORGFISnZiV1VnUFNCVlFTQW1KaUF2WTJoeWIyMWxYRnd2WEZ4a0t5OHVkR1Z6ZENoVlFTa2dKaVlnSVdselJXUm5aVHRjYm5aaGNpQnBjMUJvWVc1MGIyMUtVeUE5SUZWQklDWW1JQzl3YUdGdWRHOXRhbk12TG5SbGMzUW9WVUVwTzF4dWRtRnlJR2x6UmtZZ1BTQlZRU0FtSmlCVlFTNXRZWFJqYUNndlptbHlaV1p2ZUZ4Y0x5aGNYR1FyS1M4cE8xeHVYRzR2THlCR2FYSmxabTk0SUdoaGN5QmhJRndpZDJGMFkyaGNJaUJtZFc1amRHbHZiaUJ2YmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTGk0dVhHNTJZWElnYm1GMGFYWmxWMkYwWTJnZ1BTQW9lMzBwTG5kaGRHTm9PMXh1WEc1MllYSWdjM1Z3Y0c5eWRITlFZWE56YVhabElEMGdabUZzYzJVN1hHNXBaaUFvYVc1Q2NtOTNjMlZ5S1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlHOXdkSE1nUFNCN2ZUdGNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29iM0IwY3l3Z0ozQmhjM05wZG1VbkxDQW9lMXh1SUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlCblpYUWdLQ2tnZTF4dUlDQWdJQ0FnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTDF4dUlDQWdJQ0FnSUNCemRYQndiM0owYzFCaGMzTnBkbVVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBLVHNnTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyWmhZMlZpYjI5ckwyWnNiM2N2YVhOemRXVnpMekk0TlZ4dUlDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZDBaWE4wTFhCaGMzTnBkbVVuTENCdWRXeHNMQ0J2Y0hSektUdGNiaUFnZlNCallYUmphQ0FvWlNrZ2UzMWNibjFjYmx4dUx5OGdkR2hwY3lCdVpXVmtjeUIwYnlCaVpTQnNZWHA1TFdWMllXeGxaQ0JpWldOaGRYTmxJSFoxWlNCdFlYa2dZbVVnY21WeGRXbHlaV1FnWW1WbWIzSmxYRzR2THlCMmRXVXRjMlZ5ZG1WeUxYSmxibVJsY21WeUlHTmhiaUJ6WlhRZ1ZsVkZYMFZPVmx4dWRtRnlJRjlwYzFObGNuWmxjanRjYm5aaGNpQnBjMU5sY25abGNsSmxibVJsY21sdVp5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdhV1lnS0Y5cGMxTmxjblpsY2lBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJQ0FnYVdZZ0tDRnBia0p5YjNkelpYSWdKaVlnSVdsdVYyVmxlQ0FtSmlCMGVYQmxiMllnWjJ4dlltRnNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdMeThnWkdWMFpXTjBJSEJ5WlhObGJtTmxJRzltSUhaMVpTMXpaWEoyWlhJdGNtVnVaR1Z5WlhJZ1lXNWtJR0YyYjJsa1hHNGdJQ0FnSUNBdkx5QlhaV0p3WVdOcklITm9hVzF0YVc1bklIUm9aU0J3Y205alpYTnpYRzRnSUNBZ0lDQmZhWE5UWlhKMlpYSWdQU0JuYkc5aVlXeGJKM0J5YjJObGMzTW5YU0FtSmlCbmJHOWlZV3hiSjNCeWIyTmxjM01uWFM1bGJuWXVWbFZGWDBWT1ZpQTlQVDBnSjNObGNuWmxjaWM3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lGOXBjMU5sY25abGNpQTlJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnWDJselUyVnlkbVZ5WEc1OU8xeHVYRzR2THlCa1pYUmxZM1FnWkdWMmRHOXZiSE5jYm5aaGNpQmtaWFowYjI5c2N5QTlJR2x1UW5KdmQzTmxjaUFtSmlCM2FXNWtiM2N1WDE5V1ZVVmZSRVZXVkU5UFRGTmZSMHhQUWtGTVgwaFBUMHRmWHp0Y2JseHVMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNibVoxYm1OMGFXOXVJR2x6VG1GMGFYWmxJQ2hEZEc5eUtTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdRM1J2Y2lBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlBdmJtRjBhWFpsSUdOdlpHVXZMblJsYzNRb1EzUnZjaTUwYjFOMGNtbHVaeWdwS1Z4dWZWeHVYRzUyWVhJZ2FHRnpVM2x0WW05c0lEMWNiaUFnZEhsd1pXOW1JRk41YldKdmJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdhWE5PWVhScGRtVW9VM2x0WW05c0tTQW1KbHh1SUNCMGVYQmxiMllnVW1WbWJHVmpkQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnYVhOT1lYUnBkbVVvVW1WbWJHVmpkQzV2ZDI1TFpYbHpLVHRjYmx4dWRtRnlJRjlUWlhRN1hHNHZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k4Z0x5OGdKR1pzYjNjdFpHbHpZV0pzWlMxc2FXNWxYRzVwWmlBb2RIbHdaVzltSUZObGRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdhWE5PWVhScGRtVW9VMlYwS1NrZ2UxeHVJQ0F2THlCMWMyVWdibUYwYVhabElGTmxkQ0IzYUdWdUlHRjJZV2xzWVdKc1pTNWNiaUFnWDFObGRDQTlJRk5sZER0Y2JuMGdaV3h6WlNCN1hHNGdJQzh2SUdFZ2JtOXVMWE4wWVc1a1lYSmtJRk5sZENCd2IyeDVabWxzYkNCMGFHRjBJRzl1YkhrZ2QyOXlhM01nZDJsMGFDQndjbWx0YVhScGRtVWdhMlY1Y3k1Y2JpQWdYMU5sZENBOUlDOHFRRjlmVUZWU1JWOWZLaThvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUZObGRDQW9LU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTmxkQ0E5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN1hHNGdJQ0FnZlZ4dUlDQWdJRk5sZEM1d2NtOTBiM1I1Y0dVdWFHRnpJRDBnWm5WdVkzUnBiMjRnYUdGeklDaHJaWGtwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTmxkRnRyWlhsZElEMDlQU0IwY25WbFhHNGdJQ0FnZlR0Y2JpQWdJQ0JUWlhRdWNISnZkRzkwZVhCbExtRmtaQ0E5SUdaMWJtTjBhVzl1SUdGa1pDQW9hMlY1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk5sZEZ0clpYbGRJRDBnZEhKMVpUdGNiaUFnSUNCOU8xeHVJQ0FnSUZObGRDNXdjbTkwYjNSNWNHVXVZMnhsWVhJZ1BTQm1kVzVqZEdsdmJpQmpiR1ZoY2lBb0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRDQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEpsZEhWeWJpQlRaWFE3WEc0Z0lIMG9LU2s3WEc1OVhHNWNiaThxSUNBcUwxeHVYRzUyWVhJZ2QyRnliaUE5SUc1dmIzQTdYRzUyWVhJZ2RHbHdJRDBnYm05dmNEdGNiblpoY2lCblpXNWxjbUYwWlVOdmJYQnZibVZ1ZEZSeVlXTmxJRDBnS0c1dmIzQXBPeUF2THlCM2IzSnJJR0Z5YjNWdVpDQm1iRzkzSUdOb1pXTnJYRzUyWVhJZ1ptOXliV0YwUTI5dGNHOXVaVzUwVG1GdFpTQTlJQ2h1YjI5d0tUdGNibHh1ZTF4dUlDQjJZWElnYUdGelEyOXVjMjlzWlNBOUlIUjVjR1Z2WmlCamIyNXpiMnhsSUNFOVBTQW5kVzVrWldacGJtVmtKenRjYmlBZ2RtRnlJR05zWVhOemFXWjVVa1VnUFNBdktEODZYbnhiTFY5ZEtTaGNYSGNwTDJjN1hHNGdJSFpoY2lCamJHRnpjMmxtZVNBOUlHWjFibU4wYVc5dUlDaHpkSElwSUhzZ2NtVjBkWEp1SUhOMGNseHVJQ0FnSUM1eVpYQnNZV05sS0dOc1lYTnphV1o1VWtVc0lHWjFibU4wYVc5dUlDaGpLU0I3SUhKbGRIVnliaUJqTG5SdlZYQndaWEpEWVhObEtDazdJSDBwWEc0Z0lDQWdMbkpsY0d4aFkyVW9MMXN0WDEwdlp5d2dKeWNwT3lCOU8xeHVYRzRnSUhkaGNtNGdQU0JtZFc1amRHbHZiaUFvYlhObkxDQjJiU2tnZTF4dUlDQWdJSFpoY2lCMGNtRmpaU0E5SUhadElEOGdaMlZ1WlhKaGRHVkRiMjF3YjI1bGJuUlVjbUZqWlNoMmJTa2dPaUFuSnp0Y2JseHVJQ0FnSUdsbUlDaGpiMjVtYVdjdWQyRnlia2hoYm1Sc1pYSXBJSHRjYmlBZ0lDQWdJR052Ym1acFp5NTNZWEp1U0dGdVpHeGxjaTVqWVd4c0tHNTFiR3dzSUcxelp5d2dkbTBzSUhSeVlXTmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2hoYzBOdmJuTnZiR1VnSmlZZ0tDRmpiMjVtYVdjdWMybHNaVzUwS1NrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWdvWENKYlZuVmxJSGRoY201ZE9pQmNJaUFySUcxelp5QXJJSFJ5WVdObEtTazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJSFJwY0NBOUlHWjFibU4wYVc5dUlDaHRjMmNzSUhadEtTQjdYRzRnSUNBZ2FXWWdLR2hoYzBOdmJuTnZiR1VnSmlZZ0tDRmpiMjVtYVdjdWMybHNaVzUwS1NrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRndpVzFaMVpTQjBhWEJkT2lCY0lpQXJJRzF6WnlBcklDaGNiaUFnSUNBZ0lDQWdkbTBnUHlCblpXNWxjbUYwWlVOdmJYQnZibVZ1ZEZSeVlXTmxLSFp0S1NBNklDY25YRzRnSUNBZ0lDQXBLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWm05eWJXRjBRMjl0Y0c5dVpXNTBUbUZ0WlNBOUlHWjFibU4wYVc5dUlDaDJiU3dnYVc1amJIVmtaVVpwYkdVcElIdGNiaUFnSUNCcFppQW9kbTB1SkhKdmIzUWdQVDA5SUhadEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p6eFNiMjkwUGlkY2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUc5d2RHbHZibk1nUFNCMGVYQmxiMllnZG0wZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2RtMHVZMmxrSUNFOUlHNTFiR3hjYmlBZ0lDQWdJRDhnZG0wdWIzQjBhVzl1YzF4dUlDQWdJQ0FnT2lCMmJTNWZhWE5XZFdWY2JpQWdJQ0FnSUNBZ1B5QjJiUzRrYjNCMGFXOXVjeUI4ZkNCMmJTNWpiMjV6ZEhKMVkzUnZjaTV2Y0hScGIyNXpYRzRnSUNBZ0lDQWdJRG9nZG0wN1hHNGdJQ0FnZG1GeUlHNWhiV1VnUFNCdmNIUnBiMjV6TG01aGJXVWdmSHdnYjNCMGFXOXVjeTVmWTI5dGNHOXVaVzUwVkdGbk8xeHVJQ0FnSUhaaGNpQm1hV3hsSUQwZ2IzQjBhVzl1Y3k1ZlgyWnBiR1U3WEc0Z0lDQWdhV1lnS0NGdVlXMWxJQ1ltSUdacGJHVXBJSHRjYmlBZ0lDQWdJSFpoY2lCdFlYUmphQ0E5SUdacGJHVXViV0YwWTJnb0x5aGJYaTljWEZ4Y1hTc3BYRnd1ZG5WbEpDOHBPMXh1SUNBZ0lDQWdibUZ0WlNBOUlHMWhkR05vSUNZbUlHMWhkR05vV3pGZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FvYm1GdFpTQS9JQ2hjSWp4Y0lpQXJJQ2hqYkdGemMybG1lU2h1WVcxbEtTa2dLeUJjSWo1Y0lpa2dPaUJjSWp4QmJtOXVlVzF2ZFhNK1hDSXBJQ3RjYmlBZ0lDQWdJQ2htYVd4bElDWW1JR2x1WTJ4MVpHVkdhV3hsSUNFOVBTQm1ZV3h6WlNBL0lDaGNJaUJoZENCY0lpQXJJR1pwYkdVcElEb2dKeWNwWEc0Z0lDQWdLVnh1SUNCOU8xeHVYRzRnSUhaaGNpQnlaWEJsWVhRZ1BTQm1kVzVqZEdsdmJpQW9jM1J5TENCdUtTQjdYRzRnSUNBZ2RtRnlJSEpsY3lBOUlDY25PMXh1SUNBZ0lIZG9hV3hsSUNodUtTQjdYRzRnSUNBZ0lDQnBaaUFvYmlBbElESWdQVDA5SURFcElIc2djbVZ6SUNzOUlITjBjanNnZlZ4dUlDQWdJQ0FnYVdZZ0tHNGdQaUF4S1NCN0lITjBjaUFyUFNCemRISTdJSDFjYmlBZ0lDQWdJRzRnUGo0OUlERTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhOY2JpQWdmVHRjYmx4dUlDQm5aVzVsY21GMFpVTnZiWEJ2Ym1WdWRGUnlZV05sSUQwZ1puVnVZM1JwYjI0Z0tIWnRLU0I3WEc0Z0lDQWdhV1lnS0hadExsOXBjMVoxWlNBbUppQjJiUzRrY0dGeVpXNTBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2RISmxaU0E5SUZ0ZE8xeHVJQ0FnSUNBZ2RtRnlJR04xY25KbGJuUlNaV04xY25OcGRtVlRaWEYxWlc1alpTQTlJREE3WEc0Z0lDQWdJQ0IzYUdsc1pTQW9kbTBwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJ5WldVdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnNZWE4wSUQwZ2RISmxaVnQwY21WbExteGxibWQwYUNBdElERmRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHNZWE4wTG1OdmJuTjBjblZqZEc5eUlEMDlQU0IyYlM1amIyNXpkSEoxWTNSdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZKbFkzVnljMmwyWlZObGNYVmxibU5sS3lzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyYlNBOUlIWnRMaVJ3WVhKbGJuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlZ4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZM1Z5Y21WdWRGSmxZM1Z5YzJsMlpWTmxjWFZsYm1ObElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpsWlZ0MGNtVmxMbXhsYm1kMGFDQXRJREZkSUQwZ1cyeGhjM1FzSUdOMWNuSmxiblJTWldOMWNuTnBkbVZUWlhGMVpXNWpaVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFVtVmpkWEp6YVhabFUyVnhkV1Z1WTJVZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBjbVZsTG5CMWMyZ29kbTBwTzF4dUlDQWdJQ0FnSUNCMmJTQTlJSFp0TGlSd1lYSmxiblE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMXhjYmx4Y2JtWnZkVzVrSUdsdVhGeHVYRnh1SnlBcklIUnlaV1ZjYmlBZ0lDQWdJQ0FnTG0xaGNDaG1kVzVqZEdsdmJpQW9kbTBzSUdrcElIc2djbVYwZFhKdUlDaGNJbHdpSUNzZ0tHa2dQVDA5SURBZ1B5QW5MUzB0UGlBbklEb2djbVZ3WldGMEtDY2dKeXdnTlNBcklHa2dLaUF5S1NrZ0t5QW9RWEp5WVhrdWFYTkJjbkpoZVNoMmJTbGNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z0tDaG1iM0p0WVhSRGIyMXdiMjVsYm5ST1lXMWxLSFp0V3pCZEtTa2dLeUJjSWk0dUxpQW9YQ0lnS3lBb2RtMWJNVjBwSUNzZ1hDSWdjbVZqZFhKemFYWmxJR05oYkd4ektWd2lLVnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQm1iM0p0WVhSRGIyMXdiMjVsYm5ST1lXMWxLSFp0S1NrcE95QjlLVnh1SUNBZ0lDQWdJQ0F1YW05cGJpZ25YRnh1SnlsY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDaGNJbHhjYmx4Y2JpaG1iM1Z1WkNCcGJpQmNJaUFySUNobWIzSnRZWFJEYjIxd2IyNWxiblJPWVcxbEtIWnRLU2tnS3lCY0lpbGNJaWxjYmlBZ0lDQjlYRzRnSUgwN1hHNTlYRzVjYmk4cUlDQXFMMXh1WEc1MllYSWdkV2xrSUQwZ01EdGNibHh1THlvcVhHNGdLaUJCSUdSbGNDQnBjeUJoYmlCdlluTmxjblpoWW14bElIUm9ZWFFnWTJGdUlHaGhkbVVnYlhWc2RHbHdiR1ZjYmlBcUlHUnBjbVZqZEdsMlpYTWdjM1ZpYzJOeWFXSnBibWNnZEc4Z2FYUXVYRzRnS2k5Y2JuWmhjaUJFWlhBZ1BTQm1kVzVqZEdsdmJpQkVaWEFnS0NrZ2UxeHVJQ0IwYUdsekxtbGtJRDBnZFdsa0t5czdYRzRnSUhSb2FYTXVjM1ZpY3lBOUlGdGRPMXh1ZlR0Y2JseHVSR1Z3TG5CeWIzUnZkSGx3WlM1aFpHUlRkV0lnUFNCbWRXNWpkR2x2YmlCaFpHUlRkV0lnS0hOMVlpa2dlMXh1SUNCMGFHbHpMbk4xWW5NdWNIVnphQ2h6ZFdJcE8xeHVmVHRjYmx4dVJHVndMbkJ5YjNSdmRIbHdaUzV5WlcxdmRtVlRkV0lnUFNCbWRXNWpkR2x2YmlCeVpXMXZkbVZUZFdJZ0tITjFZaWtnZTF4dUlDQnlaVzF2ZG1Vb2RHaHBjeTV6ZFdKekxDQnpkV0lwTzF4dWZUdGNibHh1UkdWd0xuQnliM1J2ZEhsd1pTNWtaWEJsYm1RZ1BTQm1kVzVqZEdsdmJpQmtaWEJsYm1RZ0tDa2dlMXh1SUNCcFppQW9SR1Z3TG5SaGNtZGxkQ2tnZTF4dUlDQWdJRVJsY0M1MFlYSm5aWFF1WVdSa1JHVndLSFJvYVhNcE8xeHVJQ0I5WEc1OU8xeHVYRzVFWlhBdWNISnZkRzkwZVhCbExtNXZkR2xtZVNBOUlHWjFibU4wYVc5dUlHNXZkR2xtZVNBb0tTQjdYRzRnSUM4dklITjBZV0pwYkdsNlpTQjBhR1VnYzNWaWMyTnlhV0psY2lCc2FYTjBJR1pwY25OMFhHNGdJSFpoY2lCemRXSnpJRDBnZEdocGN5NXpkV0p6TG5Oc2FXTmxLQ2s3WEc0Z0lHbG1JQ2doWTI5dVptbG5MbUZ6ZVc1aktTQjdYRzRnSUNBZ0x5OGdjM1ZpY3lCaGNtVnVKM1FnYzI5eWRHVmtJR2x1SUhOamFHVmtkV3hsY2lCcFppQnViM1FnY25WdWJtbHVaeUJoYzNsdVkxeHVJQ0FnSUM4dklIZGxJRzVsWldRZ2RHOGdjMjl5ZENCMGFHVnRJRzV2ZHlCMGJ5QnRZV3RsSUhOMWNtVWdkR2hsZVNCbWFYSmxJR2x1SUdOdmNuSmxZM1JjYmlBZ0lDQXZMeUJ2Y21SbGNseHVJQ0FnSUhOMVluTXVjMjl5ZENobWRXNWpkR2x2YmlBb1lTd2dZaWtnZXlCeVpYUjFjbTRnWVM1cFpDQXRJR0l1YVdRN0lIMHBPMXh1SUNCOVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnYzNWaWN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQnpkV0p6VzJsZExuVndaR0YwWlNncE8xeHVJQ0I5WEc1OU8xeHVYRzR2THlCVWFHVWdZM1Z5Y21WdWRDQjBZWEpuWlhRZ2QyRjBZMmhsY2lCaVpXbHVaeUJsZG1Gc2RXRjBaV1F1WEc0dkx5QlVhR2x6SUdseklHZHNiMkpoYkd4NUlIVnVhWEYxWlNCaVpXTmhkWE5sSUc5dWJIa2diMjVsSUhkaGRHTm9aWEpjYmk4dklHTmhiaUJpWlNCbGRtRnNkV0YwWldRZ1lYUWdZU0IwYVcxbExseHVSR1Z3TG5SaGNtZGxkQ0E5SUc1MWJHdzdYRzUyWVhJZ2RHRnlaMlYwVTNSaFkyc2dQU0JiWFR0Y2JseHVablZ1WTNScGIyNGdjSFZ6YUZSaGNtZGxkQ0FvZEdGeVoyVjBLU0I3WEc0Z0lIUmhjbWRsZEZOMFlXTnJMbkIxYzJnb2RHRnlaMlYwS1R0Y2JpQWdSR1Z3TG5SaGNtZGxkQ0E5SUhSaGNtZGxkRHRjYm4xY2JseHVablZ1WTNScGIyNGdjRzl3VkdGeVoyVjBJQ2dwSUh0Y2JpQWdkR0Z5WjJWMFUzUmhZMnN1Y0c5d0tDazdYRzRnSUVSbGNDNTBZWEpuWlhRZ1BTQjBZWEpuWlhSVGRHRmphMXQwWVhKblpYUlRkR0ZqYXk1c1pXNW5kR2dnTFNBeFhUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJXVG05a1pTQTlJR1oxYm1OMGFXOXVJRlpPYjJSbElDaGNiaUFnZEdGbkxGeHVJQ0JrWVhSaExGeHVJQ0JqYUdsc1pISmxiaXhjYmlBZ2RHVjRkQ3hjYmlBZ1pXeHRMRnh1SUNCamIyNTBaWGgwTEZ4dUlDQmpiMjF3YjI1bGJuUlBjSFJwYjI1ekxGeHVJQ0JoYzNsdVkwWmhZM1J2Y25sY2Jpa2dlMXh1SUNCMGFHbHpMblJoWnlBOUlIUmhaenRjYmlBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdkR2hwY3k1amFHbHNaSEpsYmlBOUlHTm9hV3hrY21WdU8xeHVJQ0IwYUdsekxuUmxlSFFnUFNCMFpYaDBPMXh1SUNCMGFHbHpMbVZzYlNBOUlHVnNiVHRjYmlBZ2RHaHBjeTV1Y3lBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnZEdocGN5NWpiMjUwWlhoMElEMGdZMjl1ZEdWNGREdGNiaUFnZEdocGN5NW1ia052Ym5SbGVIUWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lIUm9hWE11Wm01UGNIUnBiMjV6SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0IwYUdsekxtWnVVMk52Y0dWSlpDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ2RHaHBjeTVyWlhrZ1BTQmtZWFJoSUNZbUlHUmhkR0V1YTJWNU8xeHVJQ0IwYUdsekxtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NZ1BTQmpiMjF3YjI1bGJuUlBjSFJwYjI1ek8xeHVJQ0IwYUdsekxtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElEMGdkVzVrWldacGJtVmtPMXh1SUNCMGFHbHpMbkJoY21WdWRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ2RHaHBjeTV5WVhjZ1BTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1cGMxTjBZWFJwWXlBOUlHWmhiSE5sTzF4dUlDQjBhR2x6TG1selVtOXZkRWx1YzJWeWRDQTlJSFJ5ZFdVN1hHNGdJSFJvYVhNdWFYTkRiMjF0Wlc1MElEMGdabUZzYzJVN1hHNGdJSFJvYVhNdWFYTkRiRzl1WldRZ1BTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1cGMwOXVZMlVnUFNCbVlXeHpaVHRjYmlBZ2RHaHBjeTVoYzNsdVkwWmhZM1J2Y25rZ1BTQmhjM2x1WTBaaFkzUnZjbms3WEc0Z0lIUm9hWE11WVhONWJtTk5aWFJoSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0IwYUdsekxtbHpRWE41Ym1OUWJHRmpaV2h2YkdSbGNpQTlJR1poYkhObE8xeHVmVHRjYmx4dWRtRnlJSEJ5YjNSdmRIbHdaVUZqWTJWemMyOXljeUE5SUhzZ1kyaHBiR1E2SUhzZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbElIMGdmVHRjYmx4dUx5OGdSRVZRVWtWRFFWUkZSRG9nWVd4cFlYTWdabTl5SUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sSUdadmNpQmlZV05yZDJGeVpITWdZMjl0Y0dGMExseHVMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNibkJ5YjNSdmRIbHdaVUZqWTJWemMyOXljeTVqYUdsc1pDNW5aWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhKbGRIVnliaUIwYUdsekxtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObFhHNTlPMXh1WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWdnVms1dlpHVXVjSEp2ZEc5MGVYQmxMQ0J3Y205MGIzUjVjR1ZCWTJObGMzTnZjbk1nS1R0Y2JseHVkbUZ5SUdOeVpXRjBaVVZ0Y0hSNVZrNXZaR1VnUFNCbWRXNWpkR2x2YmlBb2RHVjRkQ2tnZTF4dUlDQnBaaUFvSUhSbGVIUWdQVDA5SUhadmFXUWdNQ0FwSUhSbGVIUWdQU0FuSnp0Y2JseHVJQ0IyWVhJZ2JtOWtaU0E5SUc1bGR5QldUbTlrWlNncE8xeHVJQ0J1YjJSbExuUmxlSFFnUFNCMFpYaDBPMXh1SUNCdWIyUmxMbWx6UTI5dGJXVnVkQ0E5SUhSeWRXVTdYRzRnSUhKbGRIVnliaUJ1YjJSbFhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZVWlhoMFZrNXZaR1VnS0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnYm1WM0lGWk9iMlJsS0hWdVpHVm1hVzVsWkN3Z2RXNWtaV1pwYm1Wa0xDQjFibVJsWm1sdVpXUXNJRk4wY21sdVp5aDJZV3dwS1Z4dWZWeHVYRzR2THlCdmNIUnBiV2w2WldRZ2MyaGhiR3h2ZHlCamJHOXVaVnh1THk4Z2RYTmxaQ0JtYjNJZ2MzUmhkR2xqSUc1dlpHVnpJR0Z1WkNCemJHOTBJRzV2WkdWeklHSmxZMkYxYzJVZ2RHaGxlU0J0WVhrZ1ltVWdjbVYxYzJWa0lHRmpjbTl6YzF4dUx5OGdiWFZzZEdsd2JHVWdjbVZ1WkdWeWN5d2dZMnh2Ym1sdVp5QjBhR1Z0SUdGMmIybGtjeUJsY25KdmNuTWdkMmhsYmlCRVQwMGdiV0Z1YVhCMWJHRjBhVzl1Y3lCeVpXeDVYRzR2THlCdmJpQjBhR1ZwY2lCbGJHMGdjbVZtWlhKbGJtTmxMbHh1Wm5WdVkzUnBiMjRnWTJ4dmJtVldUbTlrWlNBb2RtNXZaR1VwSUh0Y2JpQWdkbUZ5SUdOc2IyNWxaQ0E5SUc1bGR5QldUbTlrWlNoY2JpQWdJQ0IyYm05a1pTNTBZV2NzWEc0Z0lDQWdkbTV2WkdVdVpHRjBZU3hjYmlBZ0lDQXZMeUFqTnprM05WeHVJQ0FnSUM4dklHTnNiMjVsSUdOb2FXeGtjbVZ1SUdGeWNtRjVJSFJ2SUdGMmIybGtJRzExZEdGMGFXNW5JRzl5YVdkcGJtRnNJR2x1SUdOaGMyVWdiMllnWTJ4dmJtbHVaMXh1SUNBZ0lDOHZJR0VnWTJocGJHUXVYRzRnSUNBZ2RtNXZaR1V1WTJocGJHUnlaVzRnSmlZZ2RtNXZaR1V1WTJocGJHUnlaVzR1YzJ4cFkyVW9LU3hjYmlBZ0lDQjJibTlrWlM1MFpYaDBMRnh1SUNBZ0lIWnViMlJsTG1Wc2JTeGNiaUFnSUNCMmJtOWtaUzVqYjI1MFpYaDBMRnh1SUNBZ0lIWnViMlJsTG1OdmJYQnZibVZ1ZEU5d2RHbHZibk1zWEc0Z0lDQWdkbTV2WkdVdVlYTjVibU5HWVdOMGIzSjVYRzRnSUNrN1hHNGdJR05zYjI1bFpDNXVjeUE5SUhadWIyUmxMbTV6TzF4dUlDQmpiRzl1WldRdWFYTlRkR0YwYVdNZ1BTQjJibTlrWlM1cGMxTjBZWFJwWXp0Y2JpQWdZMnh2Ym1Wa0xtdGxlU0E5SUhadWIyUmxMbXRsZVR0Y2JpQWdZMnh2Ym1Wa0xtbHpRMjl0YldWdWRDQTlJSFp1YjJSbExtbHpRMjl0YldWdWREdGNiaUFnWTJ4dmJtVmtMbVp1UTI5dWRHVjRkQ0E5SUhadWIyUmxMbVp1UTI5dWRHVjRkRHRjYmlBZ1kyeHZibVZrTG1adVQzQjBhVzl1Y3lBOUlIWnViMlJsTG1adVQzQjBhVzl1Y3p0Y2JpQWdZMnh2Ym1Wa0xtWnVVMk52Y0dWSlpDQTlJSFp1YjJSbExtWnVVMk52Y0dWSlpEdGNiaUFnWTJ4dmJtVmtMbUZ6ZVc1alRXVjBZU0E5SUhadWIyUmxMbUZ6ZVc1alRXVjBZVHRjYmlBZ1kyeHZibVZrTG1selEyeHZibVZrSUQwZ2RISjFaVHRjYmlBZ2NtVjBkWEp1SUdOc2IyNWxaRnh1ZlZ4dVhHNHZLbHh1SUNvZ2JtOTBJSFI1Y0dVZ1kyaGxZMnRwYm1jZ2RHaHBjeUJtYVd4bElHSmxZMkYxYzJVZ1pteHZkeUJrYjJWemJpZDBJSEJzWVhrZ2QyVnNiQ0IzYVhSb1hHNGdLaUJrZVc1aGJXbGpZV3hzZVNCaFkyTmxjM05wYm1jZ2JXVjBhRzlrY3lCdmJpQkJjbkpoZVNCd2NtOTBiM1I1Y0dWY2JpQXFMMXh1WEc1MllYSWdZWEp5WVhsUWNtOTBieUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaVHRjYm5aaGNpQmhjbkpoZVUxbGRHaHZaSE1nUFNCUFltcGxZM1F1WTNKbFlYUmxLR0Z5Y21GNVVISnZkRzhwTzF4dVhHNTJZWElnYldWMGFHOWtjMVJ2VUdGMFkyZ2dQU0JiWEc0Z0lDZHdkWE5vSnl4Y2JpQWdKM0J2Y0Njc1hHNGdJQ2R6YUdsbWRDY3NYRzRnSUNkMWJuTm9hV1owSnl4Y2JpQWdKM053YkdsalpTY3NYRzRnSUNkemIzSjBKeXhjYmlBZ0ozSmxkbVZ5YzJVblhHNWRPMXh1WEc0dktpcGNiaUFxSUVsdWRHVnlZMlZ3ZENCdGRYUmhkR2x1WnlCdFpYUm9iMlJ6SUdGdVpDQmxiV2wwSUdWMlpXNTBjMXh1SUNvdlhHNXRaWFJvYjJSelZHOVFZWFJqYUM1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNodFpYUm9iMlFwSUh0Y2JpQWdMeThnWTJGamFHVWdiM0pwWjJsdVlXd2diV1YwYUc5a1hHNGdJSFpoY2lCdmNtbG5hVzVoYkNBOUlHRnljbUY1VUhKdmRHOWJiV1YwYUc5a1hUdGNiaUFnWkdWbUtHRnljbUY1VFdWMGFHOWtjeXdnYldWMGFHOWtMQ0JtZFc1amRHbHZiaUJ0ZFhSaGRHOXlJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUZ0ZExDQnNaVzRnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bElDZ2diR1Z1TFMwZ0tTQmhjbWR6V3lCc1pXNGdYU0E5SUdGeVozVnRaVzUwYzFzZ2JHVnVJRjA3WEc1Y2JpQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2IzSnBaMmx1WVd3dVlYQndiSGtvZEdocGN5d2dZWEpuY3lrN1hHNGdJQ0FnZG1GeUlHOWlJRDBnZEdocGN5NWZYMjlpWDE4N1hHNGdJQ0FnZG1GeUlHbHVjMlZ5ZEdWa08xeHVJQ0FnSUhOM2FYUmphQ0FvYldWMGFHOWtLU0I3WEc0Z0lDQWdJQ0JqWVhObElDZHdkWE5vSnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1Z1YzJocFpuUW5PbHh1SUNBZ0lDQWdJQ0JwYm5ObGNuUmxaQ0E5SUdGeVozTTdYRzRnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNCallYTmxJQ2R6Y0d4cFkyVW5PbHh1SUNBZ0lDQWdJQ0JwYm5ObGNuUmxaQ0E5SUdGeVozTXVjMnhwWTJVb01pazdYRzRnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNocGJuTmxjblJsWkNrZ2V5QnZZaTV2WW5ObGNuWmxRWEp5WVhrb2FXNXpaWEowWldRcE95QjlYRzRnSUNBZ0x5OGdibTkwYVdaNUlHTm9ZVzVuWlZ4dUlDQWdJRzlpTG1SbGNDNXViM1JwWm5rb0tUdGNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBYRzRnSUgwcE8xeHVmU2s3WEc1Y2JpOHFJQ0FxTDF4dVhHNTJZWElnWVhKeVlYbExaWGx6SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb1lYSnlZWGxOWlhSb2IyUnpLVHRjYmx4dUx5b3FYRzRnS2lCSmJpQnpiMjFsSUdOaGMyVnpJSGRsSUcxaGVTQjNZVzUwSUhSdklHUnBjMkZpYkdVZ2IySnpaWEoyWVhScGIyNGdhVzV6YVdSbElHRWdZMjl0Y0c5dVpXNTBKM05jYmlBcUlIVndaR0YwWlNCamIyMXdkWFJoZEdsdmJpNWNiaUFxTDF4dWRtRnlJSE5vYjNWc1pFOWljMlZ5ZG1VZ1BTQjBjblZsTzF4dVhHNW1kVzVqZEdsdmJpQjBiMmRuYkdWUFluTmxjblpwYm1jZ0tIWmhiSFZsS1NCN1hHNGdJSE5vYjNWc1pFOWljMlZ5ZG1VZ1BTQjJZV3gxWlR0Y2JuMWNibHh1THlvcVhHNGdLaUJQWW5ObGNuWmxjaUJqYkdGemN5QjBhR0YwSUdseklHRjBkR0ZqYUdWa0lIUnZJR1ZoWTJnZ2IySnpaWEoyWldSY2JpQXFJRzlpYW1WamRDNGdUMjVqWlNCaGRIUmhZMmhsWkN3Z2RHaGxJRzlpYzJWeWRtVnlJR052Ym5abGNuUnpJSFJvWlNCMFlYSm5aWFJjYmlBcUlHOWlhbVZqZENkeklIQnliM0JsY25SNUlHdGxlWE1nYVc1MGJ5Qm5aWFIwWlhJdmMyVjBkR1Z5Y3lCMGFHRjBYRzRnS2lCamIyeHNaV04wSUdSbGNHVnVaR1Z1WTJsbGN5QmhibVFnWkdsemNHRjBZMmdnZFhCa1lYUmxjeTVjYmlBcUwxeHVkbUZ5SUU5aWMyVnlkbVZ5SUQwZ1puVnVZM1JwYjI0Z1QySnpaWEoyWlhJZ0tIWmhiSFZsS1NCN1hHNGdJSFJvYVhNdWRtRnNkV1VnUFNCMllXeDFaVHRjYmlBZ2RHaHBjeTVrWlhBZ1BTQnVaWGNnUkdWd0tDazdYRzRnSUhSb2FYTXVkbTFEYjNWdWRDQTlJREE3WEc0Z0lHUmxaaWgyWVd4MVpTd2dKMTlmYjJKZlh5Y3NJSFJvYVhNcE8xeHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd4MVpTa3BJSHRjYmlBZ0lDQnBaaUFvYUdGelVISnZkRzhwSUh0Y2JpQWdJQ0FnSUhCeWIzUnZRWFZuYldWdWRDaDJZV3gxWlN3Z1lYSnlZWGxOWlhSb2IyUnpLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1kyOXdlVUYxWjIxbGJuUW9kbUZzZFdVc0lHRnljbUY1VFdWMGFHOWtjeXdnWVhKeVlYbExaWGx6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1dlluTmxjblpsUVhKeVlYa29kbUZzZFdVcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUm9hWE11ZDJGc2F5aDJZV3gxWlNrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dWMkZzYXlCMGFISnZkV2RvSUdGc2JDQndjbTl3WlhKMGFXVnpJR0Z1WkNCamIyNTJaWEowSUhSb1pXMGdhVzUwYjF4dUlDb2daMlYwZEdWeUwzTmxkSFJsY25NdUlGUm9hWE1nYldWMGFHOWtJSE5vYjNWc1pDQnZibXg1SUdKbElHTmhiR3hsWkNCM2FHVnVYRzRnS2lCMllXeDFaU0IwZVhCbElHbHpJRTlpYW1WamRDNWNiaUFxTDF4dVQySnpaWEoyWlhJdWNISnZkRzkwZVhCbExuZGhiR3NnUFNCbWRXNWpkR2x2YmlCM1lXeHJJQ2h2WW1vcElIdGNiaUFnZG1GeUlHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHZZbW9wTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3RsZVhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQmtaV1pwYm1WU1pXRmpkR2wyWlNRa01TaHZZbW9zSUd0bGVYTmJhVjBwTzF4dUlDQjlYRzU5TzF4dVhHNHZLaXBjYmlBcUlFOWljMlZ5ZG1VZ1lTQnNhWE4wSUc5bUlFRnljbUY1SUdsMFpXMXpMbHh1SUNvdlhHNVBZbk5sY25abGNpNXdjbTkwYjNSNWNHVXViMkp6WlhKMlpVRnljbUY1SUQwZ1puVnVZM1JwYjI0Z2IySnpaWEoyWlVGeWNtRjVJQ2hwZEdWdGN5a2dlMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlHbDBaVzF6TG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUc5aWMyVnlkbVVvYVhSbGJYTmJhVjBwTzF4dUlDQjlYRzU5TzF4dVhHNHZMeUJvWld4d1pYSnpYRzVjYmk4cUtseHVJQ29nUVhWbmJXVnVkQ0JoSUhSaGNtZGxkQ0JQWW1wbFkzUWdiM0lnUVhKeVlYa2dZbmtnYVc1MFpYSmpaWEIwYVc1blhHNGdLaUIwYUdVZ2NISnZkRzkwZVhCbElHTm9ZV2x1SUhWemFXNW5JRjlmY0hKdmRHOWZYMXh1SUNvdlhHNW1kVzVqZEdsdmJpQndjbTkwYjBGMVoyMWxiblFnS0hSaGNtZGxkQ3dnYzNKaktTQjdYRzRnSUM4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUc1dkxYQnliM1J2SUNvdlhHNGdJSFJoY21kbGRDNWZYM0J5YjNSdlgxOGdQU0J6Y21NN1hHNGdJQzhxSUdWemJHbHVkQzFsYm1GaWJHVWdibTh0Y0hKdmRHOGdLaTljYm4xY2JseHVMeW9xWEc0Z0tpQkJkV2R0Wlc1MElHRWdkR0Z5WjJWMElFOWlhbVZqZENCdmNpQkJjbkpoZVNCaWVTQmtaV1pwYm1sdVoxeHVJQ29nYUdsa1pHVnVJSEJ5YjNCbGNuUnBaWE11WEc0Z0tpOWNiaThxSUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMElDb3ZYRzVtZFc1amRHbHZiaUJqYjNCNVFYVm5iV1Z1ZENBb2RHRnlaMlYwTENCemNtTXNJR3RsZVhNcElIdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCclpYbHpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCclpYa2dQU0JyWlhselcybGRPMXh1SUNBZ0lHUmxaaWgwWVhKblpYUXNJR3RsZVN3Z2MzSmpXMnRsZVYwcE8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRWFIwWlcxd2RDQjBieUJqY21WaGRHVWdZVzRnYjJKelpYSjJaWElnYVc1emRHRnVZMlVnWm05eUlHRWdkbUZzZFdVc1hHNGdLaUJ5WlhSMWNtNXpJSFJvWlNCdVpYY2diMkp6WlhKMlpYSWdhV1lnYzNWalkyVnpjMloxYkd4NUlHOWljMlZ5ZG1Wa0xGeHVJQ29nYjNJZ2RHaGxJR1Y0YVhOMGFXNW5JRzlpYzJWeWRtVnlJR2xtSUhSb1pTQjJZV3gxWlNCaGJISmxZV1I1SUdoaGN5QnZibVV1WEc0Z0tpOWNibVoxYm1OMGFXOXVJRzlpYzJWeWRtVWdLSFpoYkhWbExDQmhjMUp2YjNSRVlYUmhLU0I3WEc0Z0lHbG1JQ2doYVhOUFltcGxZM1FvZG1Gc2RXVXBJSHg4SUhaaGJIVmxJR2x1YzNSaGJtTmxiMllnVms1dlpHVXBJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1SUNCMllYSWdiMkk3WEc0Z0lHbG1JQ2hvWVhOUGQyNG9kbUZzZFdVc0lDZGZYMjlpWDE4bktTQW1KaUIyWVd4MVpTNWZYMjlpWDE4Z2FXNXpkR0Z1WTJWdlppQlBZbk5sY25abGNpa2dlMXh1SUNBZ0lHOWlJRDBnZG1Gc2RXVXVYMTl2WWw5Zk8xeHVJQ0I5SUdWc2MyVWdhV1lnS0Z4dUlDQWdJSE5vYjNWc1pFOWljMlZ5ZG1VZ0ppWmNiaUFnSUNBaGFYTlRaWEoyWlhKU1pXNWtaWEpwYm1jb0tTQW1KbHh1SUNBZ0lDaEJjbkpoZVM1cGMwRnljbUY1S0haaGJIVmxLU0I4ZkNCcGMxQnNZV2x1VDJKcVpXTjBLSFpoYkhWbEtTa2dKaVpjYmlBZ0lDQlBZbXBsWTNRdWFYTkZlSFJsYm5OcFlteGxLSFpoYkhWbEtTQW1KbHh1SUNBZ0lDRjJZV3gxWlM1ZmFYTldkV1ZjYmlBZ0tTQjdYRzRnSUNBZ2IySWdQU0J1WlhjZ1QySnpaWEoyWlhJb2RtRnNkV1VwTzF4dUlDQjlYRzRnSUdsbUlDaGhjMUp2YjNSRVlYUmhJQ1ltSUc5aUtTQjdYRzRnSUNBZ2IySXVkbTFEYjNWdWRDc3JPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnZZbHh1ZlZ4dVhHNHZLaXBjYmlBcUlFUmxabWx1WlNCaElISmxZV04wYVhabElIQnliM0JsY25SNUlHOXVJR0Z1SUU5aWFtVmpkQzVjYmlBcUwxeHVablZ1WTNScGIyNGdaR1ZtYVc1bFVtVmhZM1JwZG1Va0pERWdLRnh1SUNCdlltb3NYRzRnSUd0bGVTeGNiaUFnZG1Gc0xGeHVJQ0JqZFhOMGIyMVRaWFIwWlhJc1hHNGdJSE5vWVd4c2IzZGNiaWtnZTF4dUlDQjJZWElnWkdWd0lEMGdibVYzSUVSbGNDZ3BPMXh1WEc0Z0lIWmhjaUJ3Y205d1pYSjBlU0E5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9iMkpxTENCclpYa3BPMXh1SUNCcFppQW9jSEp2Y0dWeWRIa2dKaVlnY0hKdmNHVnlkSGt1WTI5dVptbG5kWEpoWW14bElEMDlQU0JtWVd4elpTa2dlMXh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzVjYmlBZ0x5OGdZMkYwWlhJZ1ptOXlJSEJ5WlMxa1pXWnBibVZrSUdkbGRIUmxjaTl6WlhSMFpYSnpYRzRnSUhaaGNpQm5aWFIwWlhJZ1BTQndjbTl3WlhKMGVTQW1KaUJ3Y205d1pYSjBlUzVuWlhRN1hHNGdJSFpoY2lCelpYUjBaWElnUFNCd2NtOXdaWEowZVNBbUppQndjbTl3WlhKMGVTNXpaWFE3WEc0Z0lHbG1JQ2dvSVdkbGRIUmxjaUI4ZkNCelpYUjBaWElwSUNZbUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJRElwSUh0Y2JpQWdJQ0IyWVd3Z1BTQnZZbXBiYTJWNVhUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCamFHbHNaRTlpSUQwZ0lYTm9ZV3hzYjNjZ0ppWWdiMkp6WlhKMlpTaDJZV3dwTzF4dUlDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYjJKcUxDQnJaWGtzSUh0Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVJSEpsWVdOMGFYWmxSMlYwZEdWeUlDZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCMllXeDFaU0E5SUdkbGRIUmxjaUEvSUdkbGRIUmxjaTVqWVd4c0tHOWlhaWtnT2lCMllXdzdYRzRnSUNBZ0lDQnBaaUFvUkdWd0xuUmhjbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQmtaWEF1WkdWd1pXNWtLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGphR2xzWkU5aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJocGJHUlBZaTVrWlhBdVpHVndaVzVrS0NrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pYQmxibVJCY25KaGVTaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdWY2JpQWdJQ0I5TEZ4dUlDQWdJSE5sZERvZ1puVnVZM1JwYjI0Z2NtVmhZM1JwZG1WVFpYUjBaWElnS0c1bGQxWmhiQ2tnZTF4dUlDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ1oyVjBkR1Z5SUQ4Z1oyVjBkR1Z5TG1OaGJHd29iMkpxS1NBNklIWmhiRHRjYmlBZ0lDQWdJQzhxSUdWemJHbHVkQzFrYVhOaFlteGxJRzV2TFhObGJHWXRZMjl0Y0dGeVpTQXFMMXh1SUNBZ0lDQWdhV1lnS0c1bGQxWmhiQ0E5UFQwZ2RtRnNkV1VnZkh3Z0tHNWxkMVpoYkNBaFBUMGdibVYzVm1Gc0lDWW1JSFpoYkhWbElDRTlQU0IyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZLaUJsYzJ4cGJuUXRaVzVoWW14bElHNXZMWE5sYkdZdFkyOXRjR0Z5WlNBcUwxeHVJQ0FnSUNBZ2FXWWdLR04xYzNSdmJWTmxkSFJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQmpkWE4wYjIxVFpYUjBaWElvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklDTTNPVGd4T2lCbWIzSWdZV05qWlhOemIzSWdjSEp2Y0dWeWRHbGxjeUIzYVhSb2IzVjBJSE5sZEhSbGNseHVJQ0FnSUNBZ2FXWWdLR2RsZEhSbGNpQW1KaUFoYzJWMGRHVnlLU0I3SUhKbGRIVnliaUI5WEc0Z0lDQWdJQ0JwWmlBb2MyVjBkR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lITmxkSFJsY2k1allXeHNLRzlpYWl3Z2JtVjNWbUZzS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhaaGJDQTlJRzVsZDFaaGJEdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTm9hV3hrVDJJZ1BTQWhjMmhoYkd4dmR5QW1KaUJ2WW5ObGNuWmxLRzVsZDFaaGJDazdYRzRnSUNBZ0lDQmtaWEF1Ym05MGFXWjVLQ2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjFjYmx4dUx5b3FYRzRnS2lCVFpYUWdZU0J3Y205d1pYSjBlU0J2YmlCaGJpQnZZbXBsWTNRdUlFRmtaSE1nZEdobElHNWxkeUJ3Y205d1pYSjBlU0JoYm1SY2JpQXFJSFJ5YVdkblpYSnpJR05vWVc1blpTQnViM1JwWm1sallYUnBiMjRnYVdZZ2RHaGxJSEJ5YjNCbGNuUjVJR1J2WlhOdUozUmNiaUFxSUdGc2NtVmhaSGtnWlhocGMzUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlITmxkQ0FvZEdGeVoyVjBMQ0JyWlhrc0lIWmhiQ2tnZTF4dUlDQnBaaUFvYVhOVmJtUmxaaWgwWVhKblpYUXBJSHg4SUdselVISnBiV2wwYVhabEtIUmhjbWRsZENsY2JpQWdLU0I3WEc0Z0lDQWdkMkZ5Ymlnb1hDSkRZVzV1YjNRZ2MyVjBJSEpsWVdOMGFYWmxJSEJ5YjNCbGNuUjVJRzl1SUhWdVpHVm1hVzVsWkN3Z2JuVnNiQ3dnYjNJZ2NISnBiV2wwYVhabElIWmhiSFZsT2lCY0lpQXJJQ2dvZEdGeVoyVjBLU2twS1R0Y2JpQWdmVnh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoMFlYSm5aWFFwSUNZbUlHbHpWbUZzYVdSQmNuSmhlVWx1WkdWNEtHdGxlU2twSUh0Y2JpQWdJQ0IwWVhKblpYUXViR1Z1WjNSb0lEMGdUV0YwYUM1dFlYZ29kR0Z5WjJWMExteGxibWQwYUN3Z2EyVjVLVHRjYmlBZ0lDQjBZWEpuWlhRdWMzQnNhV05sS0d0bGVTd2dNU3dnZG1Gc0tUdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc1hHNGdJSDFjYmlBZ2FXWWdLR3RsZVNCcGJpQjBZWEpuWlhRZ0ppWWdJU2hyWlhrZ2FXNGdUMkpxWldOMExuQnliM1J2ZEhsd1pTa3BJSHRjYmlBZ0lDQjBZWEpuWlhSYmEyVjVYU0E5SUhaaGJEdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc1hHNGdJSDFjYmlBZ2RtRnlJRzlpSUQwZ0tIUmhjbWRsZENrdVgxOXZZbDlmTzF4dUlDQnBaaUFvZEdGeVoyVjBMbDlwYzFaMVpTQjhmQ0FvYjJJZ0ppWWdiMkl1ZG0xRGIzVnVkQ2twSUh0Y2JpQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0owRjJiMmxrSUdGa1pHbHVaeUJ5WldGamRHbDJaU0J3Y205d1pYSjBhV1Z6SUhSdklHRWdWblZsSUdsdWMzUmhibU5sSUc5eUlHbDBjeUJ5YjI5MElDUmtZWFJoSUNjZ0sxeHVJQ0FnSUNBZ0oyRjBJSEoxYm5ScGJXVWdMU0JrWldOc1lYSmxJR2wwSUhWd1puSnZiblFnYVc0Z2RHaGxJR1JoZEdFZ2IzQjBhVzl1TGlkY2JpQWdJQ0FwTzF4dUlDQWdJSEpsZEhWeWJpQjJZV3hjYmlBZ2ZWeHVJQ0JwWmlBb0lXOWlLU0I3WEc0Z0lDQWdkR0Z5WjJWMFcydGxlVjBnUFNCMllXdzdYRzRnSUNBZ2NtVjBkWEp1SUhaaGJGeHVJQ0I5WEc0Z0lHUmxabWx1WlZKbFlXTjBhWFpsSkNReEtHOWlMblpoYkhWbExDQnJaWGtzSUhaaGJDazdYRzRnSUc5aUxtUmxjQzV1YjNScFpua29LVHRjYmlBZ2NtVjBkWEp1SUhaaGJGeHVmVnh1WEc0dktpcGNiaUFxSUVSbGJHVjBaU0JoSUhCeWIzQmxjblI1SUdGdVpDQjBjbWxuWjJWeUlHTm9ZVzVuWlNCcFppQnVaV05sYzNOaGNua3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlHUmxiQ0FvZEdGeVoyVjBMQ0JyWlhrcElIdGNiaUFnYVdZZ0tHbHpWVzVrWldZb2RHRnlaMlYwS1NCOGZDQnBjMUJ5YVcxcGRHbDJaU2gwWVhKblpYUXBYRzRnSUNrZ2UxeHVJQ0FnSUhkaGNtNG9LRndpUTJGdWJtOTBJR1JsYkdWMFpTQnlaV0ZqZEdsMlpTQndjbTl3WlhKMGVTQnZiaUIxYm1SbFptbHVaV1FzSUc1MWJHd3NJRzl5SUhCeWFXMXBkR2wyWlNCMllXeDFaVG9nWENJZ0t5QW9LSFJoY21kbGRDa3BLU2s3WEc0Z0lIMWNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZEdGeVoyVjBLU0FtSmlCcGMxWmhiR2xrUVhKeVlYbEpibVJsZUNoclpYa3BLU0I3WEc0Z0lDQWdkR0Z5WjJWMExuTndiR2xqWlNoclpYa3NJREVwTzF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lIWmhjaUJ2WWlBOUlDaDBZWEpuWlhRcExsOWZiMkpmWHp0Y2JpQWdhV1lnS0hSaGNtZGxkQzVmYVhOV2RXVWdmSHdnS0c5aUlDWW1JRzlpTG5adFEyOTFiblFwS1NCN1hHNGdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDZEJkbTlwWkNCa1pXeGxkR2x1WnlCd2NtOXdaWEowYVdWeklHOXVJR0VnVm5WbElHbHVjM1JoYm1ObElHOXlJR2wwY3lCeWIyOTBJQ1JrWVhSaElDY2dLMXh1SUNBZ0lDQWdKeTBnYW5WemRDQnpaWFFnYVhRZ2RHOGdiblZzYkM0blhHNGdJQ0FnS1R0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dUlDQnBaaUFvSVdoaGMwOTNiaWgwWVhKblpYUXNJR3RsZVNrcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0JrWld4bGRHVWdkR0Z5WjJWMFcydGxlVjA3WEc0Z0lHbG1JQ2doYjJJcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0J2WWk1a1pYQXVibTkwYVdaNUtDazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyOXNiR1ZqZENCa1pYQmxibVJsYm1OcFpYTWdiMjRnWVhKeVlYa2daV3hsYldWdWRITWdkMmhsYmlCMGFHVWdZWEp5WVhrZ2FYTWdkRzkxWTJobFpDd2djMmx1WTJWY2JpQXFJSGRsSUdOaGJtNXZkQ0JwYm5SbGNtTmxjSFFnWVhKeVlYa2daV3hsYldWdWRDQmhZMk5sYzNNZ2JHbHJaU0J3Y205d1pYSjBlU0JuWlhSMFpYSnpMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmtaWEJsYm1SQmNuSmhlU0FvZG1Gc2RXVXBJSHRjYmlBZ1ptOXlJQ2gyWVhJZ1pTQTlJQ2gyYjJsa0lEQXBMQ0JwSUQwZ01Dd2diQ0E5SUhaaGJIVmxMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJR1VnUFNCMllXeDFaVnRwWFR0Y2JpQWdJQ0JsSUNZbUlHVXVYMTl2WWw5ZklDWW1JR1V1WDE5dllsOWZMbVJsY0M1a1pYQmxibVFvS1R0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hsS1NrZ2UxeHVJQ0FnSUNBZ1pHVndaVzVrUVhKeVlYa29aU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYmk4cUlDQXFMMXh1WEc0dktpcGNiaUFxSUU5d2RHbHZiaUJ2ZG1WeWQzSnBkR2x1WnlCemRISmhkR1ZuYVdWeklHRnlaU0JtZFc1amRHbHZibk1nZEdoaGRDQm9ZVzVrYkdWY2JpQXFJR2h2ZHlCMGJ5QnRaWEpuWlNCaElIQmhjbVZ1ZENCdmNIUnBiMjRnZG1Gc2RXVWdZVzVrSUdFZ1kyaHBiR1FnYjNCMGFXOXVYRzRnS2lCMllXeDFaU0JwYm5SdklIUm9aU0JtYVc1aGJDQjJZV3gxWlM1Y2JpQXFMMXh1ZG1GeUlITjBjbUYwY3lBOUlHTnZibVpwWnk1dmNIUnBiMjVOWlhKblpWTjBjbUYwWldkcFpYTTdYRzVjYmk4cUtseHVJQ29nVDNCMGFXOXVjeUIzYVhSb0lISmxjM1J5YVdOMGFXOXVjMXh1SUNvdlhHNTdYRzRnSUhOMGNtRjBjeTVsYkNBOUlITjBjbUYwY3k1d2NtOXdjMFJoZEdFZ1BTQm1kVzVqZEdsdmJpQW9jR0Z5Wlc1MExDQmphR2xzWkN3Z2RtMHNJR3RsZVNrZ2UxeHVJQ0FnSUdsbUlDZ2hkbTBwSUh0Y2JpQWdJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQWdJRndpYjNCMGFXOXVJRnhjWENKY0lpQXJJR3RsZVNBcklGd2lYRnhjSWlCallXNGdiMjVzZVNCaVpTQjFjMlZrSUdSMWNtbHVaeUJwYm5OMFlXNWpaU0JjSWlBclhHNGdJQ0FnSUNBZ0lDZGpjbVZoZEdsdmJpQjNhWFJvSUhSb1pTQmdibVYzWUNCclpYbDNiM0prTGlkY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmtaV1poZFd4MFUzUnlZWFFvY0dGeVpXNTBMQ0JqYUdsc1pDbGNiaUFnZlR0Y2JuMWNibHh1THlvcVhHNGdLaUJJWld4d1pYSWdkR2hoZENCeVpXTjFjbk5wZG1Wc2VTQnRaWEpuWlhNZ2RIZHZJR1JoZEdFZ2IySnFaV04wY3lCMGIyZGxkR2hsY2k1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYldWeVoyVkVZWFJoSUNoMGJ5d2dabkp2YlNrZ2UxeHVJQ0JwWmlBb0lXWnliMjBwSUhzZ2NtVjBkWEp1SUhSdklIMWNiaUFnZG1GeUlHdGxlU3dnZEc5V1lXd3NJR1p5YjIxV1lXdzdYRzVjYmlBZ2RtRnlJR3RsZVhNZ1BTQm9ZWE5UZVcxaWIyeGNiaUFnSUNBL0lGSmxabXhsWTNRdWIzZHVTMlY1Y3lobWNtOXRLVnh1SUNBZ0lEb2dUMkpxWldOMExtdGxlWE1vWm5KdmJTazdYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnJaWGx6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2EyVjVJRDBnYTJWNWMxdHBYVHRjYmlBZ0lDQXZMeUJwYmlCallYTmxJSFJvWlNCdlltcGxZM1FnYVhNZ1lXeHlaV0ZrZVNCdlluTmxjblpsWkM0dUxseHVJQ0FnSUdsbUlDaHJaWGtnUFQwOUlDZGZYMjlpWDE4bktTQjdJR052Ym5ScGJuVmxJSDFjYmlBZ0lDQjBiMVpoYkNBOUlIUnZXMnRsZVYwN1hHNGdJQ0FnWm5KdmJWWmhiQ0E5SUdaeWIyMWJhMlY1WFR0Y2JpQWdJQ0JwWmlBb0lXaGhjMDkzYmloMGJ5d2dhMlY1S1NrZ2UxeHVJQ0FnSUNBZ2MyVjBLSFJ2TENCclpYa3NJR1p5YjIxV1lXd3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9YRzRnSUNBZ0lDQjBiMVpoYkNBaFBUMGdabkp2YlZaaGJDQW1KbHh1SUNBZ0lDQWdhWE5RYkdGcGJrOWlhbVZqZENoMGIxWmhiQ2tnSmlaY2JpQWdJQ0FnSUdselVHeGhhVzVQWW1wbFkzUW9abkp2YlZaaGJDbGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHMWxjbWRsUkdGMFlTaDBiMVpoYkN3Z1puSnZiVlpoYkNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUIwYjF4dWZWeHVYRzR2S2lwY2JpQXFJRVJoZEdGY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYldWeVoyVkVZWFJoVDNKR2JpQW9YRzRnSUhCaGNtVnVkRlpoYkN4Y2JpQWdZMmhwYkdSV1lXd3NYRzRnSUhadFhHNHBJSHRjYmlBZ2FXWWdLQ0YyYlNrZ2UxeHVJQ0FnSUM4dklHbHVJR0VnVm5WbExtVjRkR1Z1WkNCdFpYSm5aU3dnWW05MGFDQnphRzkxYkdRZ1ltVWdablZ1WTNScGIyNXpYRzRnSUNBZ2FXWWdLQ0ZqYUdsc1pGWmhiQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSEJoY21WdWRGWmhiRnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JWEJoY21WdWRGWmhiQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR05vYVd4a1ZtRnNYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklIZG9aVzRnY0dGeVpXNTBWbUZzSUNZZ1kyaHBiR1JXWVd3Z1lYSmxJR0p2ZEdnZ2NISmxjMlZ1ZEN4Y2JpQWdJQ0F2THlCM1pTQnVaV1ZrSUhSdklISmxkSFZ5YmlCaElHWjFibU4wYVc5dUlIUm9ZWFFnY21WMGRYSnVjeUIwYUdWY2JpQWdJQ0F2THlCdFpYSm5aV1FnY21WemRXeDBJRzltSUdKdmRHZ2dablZ1WTNScGIyNXpMaTR1SUc1dklHNWxaV1FnZEc5Y2JpQWdJQ0F2THlCamFHVmpheUJwWmlCd1lYSmxiblJXWVd3Z2FYTWdZU0JtZFc1amRHbHZiaUJvWlhKbElHSmxZMkYxYzJWY2JpQWdJQ0F2THlCcGRDQm9ZWE1nZEc4Z1ltVWdZU0JtZFc1amRHbHZiaUIwYnlCd1lYTnpJSEJ5WlhacGIzVnpJRzFsY21kbGN5NWNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYldWeVoyVmtSR0YwWVVadUlDZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnRaWEpuWlVSaGRHRW9YRzRnSUNBZ0lDQWdJSFI1Y0dWdlppQmphR2xzWkZaaGJDQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lHTm9hV3hrVm1Gc0xtTmhiR3dvZEdocGN5d2dkR2hwY3lrZ09pQmphR2xzWkZaaGJDeGNiaUFnSUNBZ0lDQWdkSGx3Wlc5bUlIQmhjbVZ1ZEZaaGJDQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lIQmhjbVZ1ZEZaaGJDNWpZV3hzS0hSb2FYTXNJSFJvYVhNcElEb2djR0Z5Wlc1MFZtRnNYRzRnSUNBZ0lDQXBYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCdFpYSm5aV1JKYm5OMFlXNWpaVVJoZEdGR2JpQW9LU0I3WEc0Z0lDQWdJQ0F2THlCcGJuTjBZVzVqWlNCdFpYSm5aVnh1SUNBZ0lDQWdkbUZ5SUdsdWMzUmhibU5sUkdGMFlTQTlJSFI1Y0dWdlppQmphR2xzWkZaaGJDQTlQVDBnSjJaMWJtTjBhVzl1SjF4dUlDQWdJQ0FnSUNBL0lHTm9hV3hrVm1Gc0xtTmhiR3dvZG0wc0lIWnRLVnh1SUNBZ0lDQWdJQ0E2SUdOb2FXeGtWbUZzTzF4dUlDQWdJQ0FnZG1GeUlHUmxabUYxYkhSRVlYUmhJRDBnZEhsd1pXOW1JSEJoY21WdWRGWmhiQ0E5UFQwZ0oyWjFibU4wYVc5dUoxeHVJQ0FnSUNBZ0lDQS9JSEJoY21WdWRGWmhiQzVqWVd4c0tIWnRMQ0IyYlNsY2JpQWdJQ0FnSUNBZ09pQndZWEpsYm5SV1lXdzdYRzRnSUNBZ0lDQnBaaUFvYVc1emRHRnVZMlZFWVhSaEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRaWEpuWlVSaGRHRW9hVzV6ZEdGdVkyVkVZWFJoTENCa1pXWmhkV3gwUkdGMFlTbGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCa1pXWmhkV3gwUkdGMFlWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNXpkSEpoZEhNdVpHRjBZU0E5SUdaMWJtTjBhVzl1SUNoY2JpQWdjR0Z5Wlc1MFZtRnNMRnh1SUNCamFHbHNaRlpoYkN4Y2JpQWdkbTFjYmlrZ2UxeHVJQ0JwWmlBb0lYWnRLU0I3WEc0Z0lDQWdhV1lnS0dOb2FXeGtWbUZzSUNZbUlIUjVjR1Z2WmlCamFHbHNaRlpoYkNBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdKMVJvWlNCY0ltUmhkR0ZjSWlCdmNIUnBiMjRnYzJodmRXeGtJR0psSUdFZ1puVnVZM1JwYjI0Z0p5QXJYRzRnSUNBZ0lDQWdJQ2QwYUdGMElISmxkSFZ5Ym5NZ1lTQndaWEl0YVc1emRHRnVZMlVnZG1Gc2RXVWdhVzRnWTI5dGNHOXVaVzUwSUNjZ0sxeHVJQ0FnSUNBZ0lDQW5aR1ZtYVc1cGRHbHZibk11Snl4Y2JpQWdJQ0FnSUNBZ2RtMWNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQndZWEpsYm5SV1lXeGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzFsY21kbFJHRjBZVTl5Um00b2NHRnlaVzUwVm1Gc0xDQmphR2xzWkZaaGJDbGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnRaWEpuWlVSaGRHRlBja1p1S0hCaGNtVnVkRlpoYkN3Z1kyaHBiR1JXWVd3c0lIWnRLVnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkliMjlyY3lCaGJtUWdjSEp2Y0hNZ1lYSmxJRzFsY21kbFpDQmhjeUJoY25KaGVYTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHMWxjbWRsU0c5dmF5QW9YRzRnSUhCaGNtVnVkRlpoYkN4Y2JpQWdZMmhwYkdSV1lXeGNiaWtnZTF4dUlDQjJZWElnY21WeklEMGdZMmhwYkdSV1lXeGNiaUFnSUNBL0lIQmhjbVZ1ZEZaaGJGeHVJQ0FnSUNBZ1B5QndZWEpsYm5SV1lXd3VZMjl1WTJGMEtHTm9hV3hrVm1Gc0tWeHVJQ0FnSUNBZ09pQkJjbkpoZVM1cGMwRnljbUY1S0dOb2FXeGtWbUZzS1Z4dUlDQWdJQ0FnSUNBL0lHTm9hV3hrVm1Gc1hHNGdJQ0FnSUNBZ0lEb2dXMk5vYVd4a1ZtRnNYVnh1SUNBZ0lEb2djR0Z5Wlc1MFZtRnNPMXh1SUNCeVpYUjFjbTRnY21WelhHNGdJQ0FnUHlCa1pXUjFjR1ZJYjI5cmN5aHlaWE1wWEc0Z0lDQWdPaUJ5WlhOY2JuMWNibHh1Wm5WdVkzUnBiMjRnWkdWa2RYQmxTRzl2YTNNZ0tHaHZiMnR6S1NCN1hHNGdJSFpoY2lCeVpYTWdQU0JiWFR0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JvYjI5cmN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNoeVpYTXVhVzVrWlhoUFppaG9iMjlyYzF0cFhTa2dQVDA5SUMweEtTQjdYRzRnSUNBZ0lDQnlaWE11Y0hWemFDaG9iMjlyYzF0cFhTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTmNibjFjYmx4dVRFbEdSVU5aUTB4RlgwaFBUMHRUTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dodmIyc3BJSHRjYmlBZ2MzUnlZWFJ6VzJodmIydGRJRDBnYldWeVoyVkliMjlyTzF4dWZTazdYRzVjYmk4cUtseHVJQ29nUVhOelpYUnpYRzRnS2x4dUlDb2dWMmhsYmlCaElIWnRJR2x6SUhCeVpYTmxiblFnS0dsdWMzUmhibU5sSUdOeVpXRjBhVzl1S1N3Z2QyVWdibVZsWkNCMGJ5QmtiMXh1SUNvZ1lTQjBhSEpsWlMxM1lYa2diV1Z5WjJVZ1ltVjBkMlZsYmlCamIyNXpkSEoxWTNSdmNpQnZjSFJwYjI1ekxDQnBibk4wWVc1alpWeHVJQ29nYjNCMGFXOXVjeUJoYm1RZ2NHRnlaVzUwSUc5d2RHbHZibk11WEc0Z0tpOWNibVoxYm1OMGFXOXVJRzFsY21kbFFYTnpaWFJ6SUNoY2JpQWdjR0Z5Wlc1MFZtRnNMRnh1SUNCamFHbHNaRlpoYkN4Y2JpQWdkbTBzWEc0Z0lHdGxlVnh1S1NCN1hHNGdJSFpoY2lCeVpYTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtIQmhjbVZ1ZEZaaGJDQjhmQ0J1ZFd4c0tUdGNiaUFnYVdZZ0tHTm9hV3hrVm1Gc0tTQjdYRzRnSUNBZ1lYTnpaWEowVDJKcVpXTjBWSGx3WlNoclpYa3NJR05vYVd4a1ZtRnNMQ0IyYlNrN1hHNGdJQ0FnY21WMGRYSnVJR1Y0ZEdWdVpDaHlaWE1zSUdOb2FXeGtWbUZzS1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJ5WlhOY2JpQWdmVnh1ZlZ4dVhHNUJVMU5GVkY5VVdWQkZVeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2gwZVhCbEtTQjdYRzRnSUhOMGNtRjBjMXQwZVhCbElDc2dKM01uWFNBOUlHMWxjbWRsUVhOelpYUnpPMXh1ZlNrN1hHNWNiaThxS2x4dUlDb2dWMkYwWTJobGNuTXVYRzRnS2x4dUlDb2dWMkYwWTJobGNuTWdhR0Z6YUdWeklITm9iM1ZzWkNCdWIzUWdiM1psY25keWFYUmxJRzl1WlZ4dUlDb2dZVzV2ZEdobGNpd2djMjhnZDJVZ2JXVnlaMlVnZEdobGJTQmhjeUJoY25KaGVYTXVYRzRnS2k5Y2JuTjBjbUYwY3k1M1lYUmphQ0E5SUdaMWJtTjBhVzl1SUNoY2JpQWdjR0Z5Wlc1MFZtRnNMRnh1SUNCamFHbHNaRlpoYkN4Y2JpQWdkbTBzWEc0Z0lHdGxlVnh1S1NCN1hHNGdJQzh2SUhkdmNtc2dZWEp2ZFc1a0lFWnBjbVZtYjNnbmN5QlBZbXBsWTNRdWNISnZkRzkwZVhCbExuZGhkR05vTGk0dVhHNGdJR2xtSUNod1lYSmxiblJXWVd3Z1BUMDlJRzVoZEdsMlpWZGhkR05vS1NCN0lIQmhjbVZ1ZEZaaGJDQTlJSFZ1WkdWbWFXNWxaRHNnZlZ4dUlDQnBaaUFvWTJocGJHUldZV3dnUFQwOUlHNWhkR2wyWlZkaGRHTm9LU0I3SUdOb2FXeGtWbUZzSUQwZ2RXNWtaV1pwYm1Wa095QjlYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9JV05vYVd4a1ZtRnNLU0I3SUhKbGRIVnliaUJQWW1wbFkzUXVZM0psWVhSbEtIQmhjbVZ1ZEZaaGJDQjhmQ0J1ZFd4c0tTQjlYRzRnSUh0Y2JpQWdJQ0JoYzNObGNuUlBZbXBsWTNSVWVYQmxLR3RsZVN3Z1kyaHBiR1JXWVd3c0lIWnRLVHRjYmlBZ2ZWeHVJQ0JwWmlBb0lYQmhjbVZ1ZEZaaGJDa2dleUJ5WlhSMWNtNGdZMmhwYkdSV1lXd2dmVnh1SUNCMllYSWdjbVYwSUQwZ2UzMDdYRzRnSUdWNGRHVnVaQ2h5WlhRc0lIQmhjbVZ1ZEZaaGJDazdYRzRnSUdadmNpQW9kbUZ5SUd0bGVTUXhJR2x1SUdOb2FXeGtWbUZzS1NCN1hHNGdJQ0FnZG1GeUlIQmhjbVZ1ZENBOUlISmxkRnRyWlhra01WMDdYRzRnSUNBZ2RtRnlJR05vYVd4a0lEMGdZMmhwYkdSV1lXeGJhMlY1SkRGZE8xeHVJQ0FnSUdsbUlDaHdZWEpsYm5RZ0ppWWdJVUZ5Y21GNUxtbHpRWEp5WVhrb2NHRnlaVzUwS1NrZ2UxeHVJQ0FnSUNBZ2NHRnlaVzUwSUQwZ1czQmhjbVZ1ZEYwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEZ0clpYa2tNVjBnUFNCd1lYSmxiblJjYmlBZ0lDQWdJRDhnY0dGeVpXNTBMbU52Ym1OaGRDaGphR2xzWkNsY2JpQWdJQ0FnSURvZ1FYSnlZWGt1YVhOQmNuSmhlU2hqYUdsc1pDa2dQeUJqYUdsc1pDQTZJRnRqYUdsc1pGMDdYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxkRnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQlBkR2hsY2lCdlltcGxZM1FnYUdGemFHVnpMbHh1SUNvdlhHNXpkSEpoZEhNdWNISnZjSE1nUFZ4dWMzUnlZWFJ6TG0xbGRHaHZaSE1nUFZ4dWMzUnlZWFJ6TG1sdWFtVmpkQ0E5WEc1emRISmhkSE11WTI5dGNIVjBaV1FnUFNCbWRXNWpkR2x2YmlBb1hHNGdJSEJoY21WdWRGWmhiQ3hjYmlBZ1kyaHBiR1JXWVd3c1hHNGdJSFp0TEZ4dUlDQnJaWGxjYmlrZ2UxeHVJQ0JwWmlBb1kyaHBiR1JXWVd3Z0ppWWdYQ0prWlhabGJHOXdiV1Z1ZEZ3aUlDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnSUNCaGMzTmxjblJQWW1wbFkzUlVlWEJsS0d0bGVTd2dZMmhwYkdSV1lXd3NJSFp0S1R0Y2JpQWdmVnh1SUNCcFppQW9JWEJoY21WdWRGWmhiQ2tnZXlCeVpYUjFjbTRnWTJocGJHUldZV3dnZlZ4dUlDQjJZWElnY21WMElEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ1pYaDBaVzVrS0hKbGRDd2djR0Z5Wlc1MFZtRnNLVHRjYmlBZ2FXWWdLR05vYVd4a1ZtRnNLU0I3SUdWNGRHVnVaQ2h5WlhRc0lHTm9hV3hrVm1Gc0tUc2dmVnh1SUNCeVpYUjFjbTRnY21WMFhHNTlPMXh1YzNSeVlYUnpMbkJ5YjNacFpHVWdQU0J0WlhKblpVUmhkR0ZQY2tadU8xeHVYRzR2S2lwY2JpQXFJRVJsWm1GMWJIUWdjM1J5WVhSbFoza3VYRzRnS2k5Y2JuWmhjaUJrWldaaGRXeDBVM1J5WVhRZ1BTQm1kVzVqZEdsdmJpQW9jR0Z5Wlc1MFZtRnNMQ0JqYUdsc1pGWmhiQ2tnZTF4dUlDQnlaWFIxY200Z1kyaHBiR1JXWVd3Z1BUMDlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lEOGdjR0Z5Wlc1MFZtRnNYRzRnSUNBZ09pQmphR2xzWkZaaGJGeHVmVHRjYmx4dUx5b3FYRzRnS2lCV1lXeHBaR0YwWlNCamIyMXdiMjVsYm5RZ2JtRnRaWE5jYmlBcUwxeHVablZ1WTNScGIyNGdZMmhsWTJ0RGIyMXdiMjVsYm5SeklDaHZjSFJwYjI1ektTQjdYRzRnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ2Y0hScGIyNXpMbU52YlhCdmJtVnVkSE1wSUh0Y2JpQWdJQ0IyWVd4cFpHRjBaVU52YlhCdmJtVnVkRTVoYldVb2EyVjVLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMllXeHBaR0YwWlVOdmJYQnZibVZ1ZEU1aGJXVWdLRzVoYldVcElIdGNiaUFnYVdZZ0tDRnVaWGNnVW1WblJYaHdLQ2hjSWw1YllTMTZRUzFhWFZ0Y1hGeGNMVnhjWEZ3dU1DMDVYMXdpSUNzZ0tIVnVhV052WkdWU1pXZEZlSEF1YzI5MWNtTmxLU0FySUZ3aVhTb2tYQ0lwS1M1MFpYTjBLRzVoYldVcEtTQjdYRzRnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ2RKYm5aaGJHbGtJR052YlhCdmJtVnVkQ0J1WVcxbE9pQmNJaWNnS3lCdVlXMWxJQ3NnSjF3aUxpQkRiMjF3YjI1bGJuUWdibUZ0WlhNZ0p5QXJYRzRnSUNBZ0lDQW5jMmh2ZFd4a0lHTnZibVp2Y20wZ2RHOGdkbUZzYVdRZ1kzVnpkRzl0SUdWc1pXMWxiblFnYm1GdFpTQnBiaUJvZEcxc05TQnpjR1ZqYVdacFkyRjBhVzl1TGlkY2JpQWdJQ0FwTzF4dUlDQjlYRzRnSUdsbUlDaHBjMEoxYVd4MFNXNVVZV2NvYm1GdFpTa2dmSHdnWTI5dVptbG5MbWx6VW1WelpYSjJaV1JVWVdjb2JtRnRaU2twSUh0Y2JpQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0owUnZJRzV2ZENCMWMyVWdZblZwYkhRdGFXNGdiM0lnY21WelpYSjJaV1FnU0ZSTlRDQmxiR1Z0Wlc1MGN5QmhjeUJqYjIxd2IyNWxiblFnSnlBclhHNGdJQ0FnSUNBbmFXUTZJQ2NnS3lCdVlXMWxYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRVZ1YzNWeVpTQmhiR3dnY0hKdmNITWdiM0IwYVc5dUlITjViblJoZUNCaGNtVWdibTl5YldGc2FYcGxaQ0JwYm5SdklIUm9aVnh1SUNvZ1QySnFaV04wTFdKaGMyVmtJR1p2Y20xaGRDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JtOXliV0ZzYVhwbFVISnZjSE1nS0c5d2RHbHZibk1zSUhadEtTQjdYRzRnSUhaaGNpQndjbTl3Y3lBOUlHOXdkR2x2Ym5NdWNISnZjSE03WEc0Z0lHbG1JQ2doY0hKdmNITXBJSHNnY21WMGRYSnVJSDFjYmlBZ2RtRnlJSEpsY3lBOUlIdDlPMXh1SUNCMllYSWdhU3dnZG1Gc0xDQnVZVzFsTzF4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaHdjbTl3Y3lrcElIdGNiaUFnSUNCcElEMGdjSEp2Y0hNdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bElDaHBMUzBwSUh0Y2JpQWdJQ0FnSUhaaGJDQTlJSEJ5YjNCelcybGRPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd3Z1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUc1aGJXVWdQU0JqWVcxbGJHbDZaU2gyWVd3cE8xeHVJQ0FnSUNBZ0lDQnlaWE5iYm1GdFpWMGdQU0I3SUhSNWNHVTZJRzUxYkd3Z2ZUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRvSjNCeWIzQnpJRzExYzNRZ1ltVWdjM1J5YVc1bmN5QjNhR1Z1SUhWemFXNW5JR0Z5Y21GNUlITjViblJoZUM0bktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvYVhOUWJHRnBiazlpYW1WamRDaHdjbTl3Y3lrcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnY0hKdmNITXBJSHRjYmlBZ0lDQWdJSFpoYkNBOUlIQnliM0J6VzJ0bGVWMDdYRzRnSUNBZ0lDQnVZVzFsSUQwZ1kyRnRaV3hwZW1Vb2EyVjVLVHRjYmlBZ0lDQWdJSEpsYzF0dVlXMWxYU0E5SUdselVHeGhhVzVQWW1wbFkzUW9kbUZzS1Z4dUlDQWdJQ0FnSUNBL0lIWmhiRnh1SUNBZ0lDQWdJQ0E2SUhzZ2RIbHdaVG9nZG1Gc0lIMDdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0JjSWtsdWRtRnNhV1FnZG1Gc2RXVWdabTl5SUc5d2RHbHZiaUJjWEZ3aWNISnZjSE5jWEZ3aU9pQmxlSEJsWTNSbFpDQmhiaUJCY25KaGVTQnZjaUJoYmlCUFltcGxZM1FzSUZ3aUlDdGNiaUFnSUNBZ0lGd2lZblYwSUdkdmRDQmNJaUFySUNoMGIxSmhkMVI1Y0dVb2NISnZjSE1wS1NBcklGd2lMbHdpTEZ4dUlDQWdJQ0FnZG0xY2JpQWdJQ0FwTzF4dUlDQjlYRzRnSUc5d2RHbHZibk11Y0hKdmNITWdQU0J5WlhNN1hHNTlYRzVjYmk4cUtseHVJQ29nVG05eWJXRnNhWHBsSUdGc2JDQnBibXBsWTNScGIyNXpJR2x1ZEc4Z1QySnFaV04wTFdKaGMyVmtJR1p2Y20xaGRGeHVJQ292WEc1bWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WSmJtcGxZM1FnS0c5d2RHbHZibk1zSUhadEtTQjdYRzRnSUhaaGNpQnBibXBsWTNRZ1BTQnZjSFJwYjI1ekxtbHVhbVZqZER0Y2JpQWdhV1lnS0NGcGJtcGxZM1FwSUhzZ2NtVjBkWEp1SUgxY2JpQWdkbUZ5SUc1dmNtMWhiR2w2WldRZ1BTQnZjSFJwYjI1ekxtbHVhbVZqZENBOUlIdDlPMXh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNocGJtcGxZM1FwS1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCcGJtcGxZM1F1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lHNXZjbTFoYkdsNlpXUmJhVzVxWldOMFcybGRYU0E5SUhzZ1puSnZiVG9nYVc1cVpXTjBXMmxkSUgwN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLR2x6VUd4aGFXNVBZbXBsWTNRb2FXNXFaV04wS1NrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJwYm1wbFkzUXBJSHRjYmlBZ0lDQWdJSFpoY2lCMllXd2dQU0JwYm1wbFkzUmJhMlY1WFR0Y2JpQWdJQ0FnSUc1dmNtMWhiR2w2WldSYmEyVjVYU0E5SUdselVHeGhhVzVQWW1wbFkzUW9kbUZzS1Z4dUlDQWdJQ0FnSUNBL0lHVjRkR1Z1WkNoN0lHWnliMjA2SUd0bGVTQjlMQ0IyWVd3cFhHNGdJQ0FnSUNBZ0lEb2dleUJtY205dE9pQjJZV3dnZlR0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lGd2lTVzUyWVd4cFpDQjJZV3gxWlNCbWIzSWdiM0IwYVc5dUlGeGNYQ0pwYm1wbFkzUmNYRndpT2lCbGVIQmxZM1JsWkNCaGJpQkJjbkpoZVNCdmNpQmhiaUJQWW1wbFkzUXNJRndpSUN0Y2JpQWdJQ0FnSUZ3aVluVjBJR2R2ZENCY0lpQXJJQ2gwYjFKaGQxUjVjR1VvYVc1cVpXTjBLU2tnS3lCY0lpNWNJaXhjYmlBZ0lDQWdJSFp0WEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUU1dmNtMWhiR2w2WlNCeVlYY2dablZ1WTNScGIyNGdaR2x5WldOMGFYWmxjeUJwYm5SdklHOWlhbVZqZENCbWIzSnRZWFF1WEc0Z0tpOWNibVoxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVVJwY21WamRHbDJaWE1nS0c5d2RHbHZibk1wSUh0Y2JpQWdkbUZ5SUdScGNuTWdQU0J2Y0hScGIyNXpMbVJwY21WamRHbDJaWE03WEc0Z0lHbG1JQ2hrYVhKektTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdScGNuTXBJSHRjYmlBZ0lDQWdJSFpoY2lCa1pXWWtKREVnUFNCa2FYSnpXMnRsZVYwN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHUmxaaVFrTVNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNCa2FYSnpXMnRsZVYwZ1BTQjdJR0pwYm1RNklHUmxaaVFrTVN3Z2RYQmtZWFJsT2lCa1pXWWtKREVnZlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1lYTnpaWEowVDJKcVpXTjBWSGx3WlNBb2JtRnRaU3dnZG1Gc2RXVXNJSFp0S1NCN1hHNGdJR2xtSUNnaGFYTlFiR0ZwYms5aWFtVmpkQ2gyWVd4MVpTa3BJSHRjYmlBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnWENKSmJuWmhiR2xrSUhaaGJIVmxJR1p2Y2lCdmNIUnBiMjRnWEZ4Y0lsd2lJQ3NnYm1GdFpTQXJJRndpWEZ4Y0lqb2daWGh3WldOMFpXUWdZVzRnVDJKcVpXTjBMQ0JjSWlBclhHNGdJQ0FnSUNCY0ltSjFkQ0JuYjNRZ1hDSWdLeUFvZEc5U1lYZFVlWEJsS0haaGJIVmxLU2tnS3lCY0lpNWNJaXhjYmlBZ0lDQWdJSFp0WEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUUxbGNtZGxJSFIzYnlCdmNIUnBiMjRnYjJKcVpXTjBjeUJwYm5SdklHRWdibVYzSUc5dVpTNWNiaUFxSUVOdmNtVWdkWFJwYkdsMGVTQjFjMlZrSUdsdUlHSnZkR2dnYVc1emRHRnVkR2xoZEdsdmJpQmhibVFnYVc1b1pYSnBkR0Z1WTJVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUcxbGNtZGxUM0IwYVc5dWN5QW9YRzRnSUhCaGNtVnVkQ3hjYmlBZ1kyaHBiR1FzWEc0Z0lIWnRYRzRwSUh0Y2JpQWdlMXh1SUNBZ0lHTm9aV05yUTI5dGNHOXVaVzUwY3loamFHbHNaQ2s3WEc0Z0lIMWNibHh1SUNCcFppQW9kSGx3Wlc5bUlHTm9hV3hrSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdZMmhwYkdRZ1BTQmphR2xzWkM1dmNIUnBiMjV6TzF4dUlDQjlYRzVjYmlBZ2JtOXliV0ZzYVhwbFVISnZjSE1vWTJocGJHUXNJSFp0S1R0Y2JpQWdibTl5YldGc2FYcGxTVzVxWldOMEtHTm9hV3hrTENCMmJTazdYRzRnSUc1dmNtMWhiR2w2WlVScGNtVmpkR2wyWlhNb1kyaHBiR1FwTzF4dVhHNGdJQzh2SUVGd2NHeDVJR1Y0ZEdWdVpITWdZVzVrSUcxcGVHbHVjeUJ2YmlCMGFHVWdZMmhwYkdRZ2IzQjBhVzl1Y3l4Y2JpQWdMeThnWW5WMElHOXViSGtnYVdZZ2FYUWdhWE1nWVNCeVlYY2diM0IwYVc5dWN5QnZZbXBsWTNRZ2RHaGhkQ0JwYzI0bmRGeHVJQ0F2THlCMGFHVWdjbVZ6ZFd4MElHOW1JR0Z1YjNSb1pYSWdiV1Z5WjJWUGNIUnBiMjV6SUdOaGJHd3VYRzRnSUM4dklFOXViSGtnYldWeVoyVmtJRzl3ZEdsdmJuTWdhR0Z6SUhSb1pTQmZZbUZ6WlNCd2NtOXdaWEowZVM1Y2JpQWdhV1lnS0NGamFHbHNaQzVmWW1GelpTa2dlMXh1SUNBZ0lHbG1JQ2hqYUdsc1pDNWxlSFJsYm1SektTQjdYRzRnSUNBZ0lDQndZWEpsYm5RZ1BTQnRaWEpuWlU5d2RHbHZibk1vY0dGeVpXNTBMQ0JqYUdsc1pDNWxlSFJsYm1SekxDQjJiU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hqYUdsc1pDNXRhWGhwYm5NcElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdZMmhwYkdRdWJXbDRhVzV6TG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQndZWEpsYm5RZ1BTQnRaWEpuWlU5d2RHbHZibk1vY0dGeVpXNTBMQ0JqYUdsc1pDNXRhWGhwYm5OYmFWMHNJSFp0S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCMllYSWdiM0IwYVc5dWN5QTlJSHQ5TzF4dUlDQjJZWElnYTJWNU8xeHVJQ0JtYjNJZ0tHdGxlU0JwYmlCd1lYSmxiblFwSUh0Y2JpQWdJQ0J0WlhKblpVWnBaV3hrS0d0bGVTazdYRzRnSUgxY2JpQWdabTl5SUNoclpYa2dhVzRnWTJocGJHUXBJSHRjYmlBZ0lDQnBaaUFvSVdoaGMwOTNiaWh3WVhKbGJuUXNJR3RsZVNrcElIdGNiaUFnSUNBZ0lHMWxjbWRsUm1sbGJHUW9hMlY1S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnWm5WdVkzUnBiMjRnYldWeVoyVkdhV1ZzWkNBb2EyVjVLU0I3WEc0Z0lDQWdkbUZ5SUhOMGNtRjBJRDBnYzNSeVlYUnpXMnRsZVYwZ2ZId2daR1ZtWVhWc2RGTjBjbUYwTzF4dUlDQWdJRzl3ZEdsdmJuTmJhMlY1WFNBOUlITjBjbUYwS0hCaGNtVnVkRnRyWlhsZExDQmphR2xzWkZ0clpYbGRMQ0IyYlN3Z2EyVjVLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM0IwYVc5dWMxeHVmVnh1WEc0dktpcGNiaUFxSUZKbGMyOXNkbVVnWVc0Z1lYTnpaWFF1WEc0Z0tpQlVhR2x6SUdaMWJtTjBhVzl1SUdseklIVnpaV1FnWW1WallYVnpaU0JqYUdsc1pDQnBibk4wWVc1alpYTWdibVZsWkNCaFkyTmxjM05jYmlBcUlIUnZJR0Z6YzJWMGN5QmtaV1pwYm1Wa0lHbHVJR2wwY3lCaGJtTmxjM1J2Y2lCamFHRnBiaTVjYmlBcUwxeHVablZ1WTNScGIyNGdjbVZ6YjJ4MlpVRnpjMlYwSUNoY2JpQWdiM0IwYVc5dWN5eGNiaUFnZEhsd1pTeGNiaUFnYVdRc1hHNGdJSGRoY201TmFYTnphVzVuWEc0cElIdGNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUdsbUlDaDBlWEJsYjJZZ2FXUWdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdkbUZ5SUdGemMyVjBjeUE5SUc5d2RHbHZibk5iZEhsd1pWMDdYRzRnSUM4dklHTm9aV05ySUd4dlkyRnNJSEpsWjJsemRISmhkR2x2YmlCMllYSnBZWFJwYjI1eklHWnBjbk4wWEc0Z0lHbG1JQ2hvWVhOUGQyNG9ZWE56WlhSekxDQnBaQ2twSUhzZ2NtVjBkWEp1SUdGemMyVjBjMXRwWkYwZ2ZWeHVJQ0IyWVhJZ1kyRnRaV3hwZW1Wa1NXUWdQU0JqWVcxbGJHbDZaU2hwWkNrN1hHNGdJR2xtSUNob1lYTlBkMjRvWVhOelpYUnpMQ0JqWVcxbGJHbDZaV1JKWkNrcElIc2djbVYwZFhKdUlHRnpjMlYwYzF0allXMWxiR2w2WldSSlpGMGdmVnh1SUNCMllYSWdVR0Z6WTJGc1EyRnpaVWxrSUQwZ1kyRndhWFJoYkdsNlpTaGpZVzFsYkdsNlpXUkpaQ2s3WEc0Z0lHbG1JQ2hvWVhOUGQyNG9ZWE56WlhSekxDQlFZWE5qWVd4RFlYTmxTV1FwS1NCN0lISmxkSFZ5YmlCaGMzTmxkSE5iVUdGelkyRnNRMkZ6WlVsa1hTQjlYRzRnSUM4dklHWmhiR3hpWVdOcklIUnZJSEJ5YjNSdmRIbHdaU0JqYUdGcGJseHVJQ0IyWVhJZ2NtVnpJRDBnWVhOelpYUnpXMmxrWFNCOGZDQmhjM05sZEhOYlkyRnRaV3hwZW1Wa1NXUmRJSHg4SUdGemMyVjBjMXRRWVhOallXeERZWE5sU1dSZE8xeHVJQ0JwWmlBb2QyRnliazFwYzNOcGJtY2dKaVlnSVhKbGN5a2dlMXh1SUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FuUm1GcGJHVmtJSFJ2SUhKbGMyOXNkbVVnSnlBcklIUjVjR1V1YzJ4cFkyVW9NQ3dnTFRFcElDc2dKem9nSnlBcklHbGtMRnh1SUNBZ0lDQWdiM0IwYVc5dWMxeHVJQ0FnSUNrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMxeHVmVnh1WEc0dktpQWdLaTljYmx4dVhHNWNibVoxYm1OMGFXOXVJSFpoYkdsa1lYUmxVSEp2Y0NBb1hHNGdJR3RsZVN4Y2JpQWdjSEp2Y0U5d2RHbHZibk1zWEc0Z0lIQnliM0J6UkdGMFlTeGNiaUFnZG0xY2Jpa2dlMXh1SUNCMllYSWdjSEp2Y0NBOUlIQnliM0JQY0hScGIyNXpXMnRsZVYwN1hHNGdJSFpoY2lCaFluTmxiblFnUFNBaGFHRnpUM2R1S0hCeWIzQnpSR0YwWVN3Z2EyVjVLVHRjYmlBZ2RtRnlJSFpoYkhWbElEMGdjSEp2Y0hORVlYUmhXMnRsZVYwN1hHNGdJQzh2SUdKdmIyeGxZVzRnWTJGemRHbHVaMXh1SUNCMllYSWdZbTl2YkdWaGJrbHVaR1Y0SUQwZ1oyVjBWSGx3WlVsdVpHVjRLRUp2YjJ4bFlXNHNJSEJ5YjNBdWRIbHdaU2s3WEc0Z0lHbG1JQ2hpYjI5c1pXRnVTVzVrWlhnZ1BpQXRNU2tnZTF4dUlDQWdJR2xtSUNoaFluTmxiblFnSmlZZ0lXaGhjMDkzYmlod2NtOXdMQ0FuWkdWbVlYVnNkQ2NwS1NCN1hHNGdJQ0FnSUNCMllXeDFaU0E5SUdaaGJITmxPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kbUZzZFdVZ1BUMDlJQ2NuSUh4OElIWmhiSFZsSUQwOVBTQm9lWEJvWlc1aGRHVW9hMlY1S1NrZ2UxeHVJQ0FnSUNBZ0x5OGdiMjVzZVNCallYTjBJR1Z0Y0hSNUlITjBjbWx1WnlBdklITmhiV1VnYm1GdFpTQjBieUJpYjI5c1pXRnVJR2xtWEc0Z0lDQWdJQ0F2THlCaWIyOXNaV0Z1SUdoaGN5Qm9hV2RvWlhJZ2NISnBiM0pwZEhsY2JpQWdJQ0FnSUhaaGNpQnpkSEpwYm1kSmJtUmxlQ0E5SUdkbGRGUjVjR1ZKYm1SbGVDaFRkSEpwYm1jc0lIQnliM0F1ZEhsd1pTazdYRzRnSUNBZ0lDQnBaaUFvYzNSeWFXNW5TVzVrWlhnZ1BDQXdJSHg4SUdKdmIyeGxZVzVKYm1SbGVDQThJSE4wY21sdVowbHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JpQWdMeThnWTJobFkyc2daR1ZtWVhWc2RDQjJZV3gxWlZ4dUlDQnBaaUFvZG1Gc2RXVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUhaaGJIVmxJRDBnWjJWMFVISnZjRVJsWm1GMWJIUldZV3gxWlNoMmJTd2djSEp2Y0N3Z2EyVjVLVHRjYmlBZ0lDQXZMeUJ6YVc1alpTQjBhR1VnWkdWbVlYVnNkQ0IyWVd4MVpTQnBjeUJoSUdaeVpYTm9JR052Y0hrc1hHNGdJQ0FnTHk4Z2JXRnJaU0J6ZFhKbElIUnZJRzlpYzJWeWRtVWdhWFF1WEc0Z0lDQWdkbUZ5SUhCeVpYWlRhRzkxYkdSUFluTmxjblpsSUQwZ2MyaHZkV3hrVDJKelpYSjJaVHRjYmlBZ0lDQjBiMmRuYkdWUFluTmxjblpwYm1jb2RISjFaU2s3WEc0Z0lDQWdiMkp6WlhKMlpTaDJZV3gxWlNrN1hHNGdJQ0FnZEc5bloyeGxUMkp6WlhKMmFXNW5LSEJ5WlhaVGFHOTFiR1JQWW5ObGNuWmxLVHRjYmlBZ2ZWeHVJQ0I3WEc0Z0lDQWdZWE56WlhKMFVISnZjQ2h3Y205d0xDQnJaWGtzSUhaaGJIVmxMQ0IyYlN3Z1lXSnpaVzUwS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnZG1Gc2RXVmNibjFjYmx4dUx5b3FYRzRnS2lCSFpYUWdkR2hsSUdSbFptRjFiSFFnZG1Gc2RXVWdiMllnWVNCd2NtOXdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJRY205d1JHVm1ZWFZzZEZaaGJIVmxJQ2gyYlN3Z2NISnZjQ3dnYTJWNUtTQjdYRzRnSUM4dklHNXZJR1JsWm1GMWJIUXNJSEpsZEhWeWJpQjFibVJsWm1sdVpXUmNiaUFnYVdZZ0tDRm9ZWE5QZDI0b2NISnZjQ3dnSjJSbFptRjFiSFFuS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1JjYmlBZ2ZWeHVJQ0IyWVhJZ1pHVm1JRDBnY0hKdmNDNWtaV1poZFd4ME8xeHVJQ0F2THlCM1lYSnVJR0ZuWVdsdWMzUWdibTl1TFdaaFkzUnZjbmtnWkdWbVlYVnNkSE1nWm05eUlFOWlhbVZqZENBbUlFRnljbUY1WEc0Z0lHbG1JQ2hwYzA5aWFtVmpkQ2hrWldZcEtTQjdYRzRnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ2RKYm5aaGJHbGtJR1JsWm1GMWJIUWdkbUZzZFdVZ1ptOXlJSEJ5YjNBZ1hDSW5JQ3NnYTJWNUlDc2dKMXdpT2lBbklDdGNiaUFnSUNBZ0lDZFFjbTl3Y3lCM2FYUm9JSFI1Y0dVZ1QySnFaV04wTDBGeWNtRjVJRzExYzNRZ2RYTmxJR0VnWm1GamRHOXllU0JtZFc1amRHbHZiaUFuSUN0Y2JpQWdJQ0FnSUNkMGJ5QnlaWFIxY200Z2RHaGxJR1JsWm1GMWJIUWdkbUZzZFdVdUp5eGNiaUFnSUNBZ0lIWnRYRzRnSUNBZ0tUdGNiaUFnZlZ4dUlDQXZMeUIwYUdVZ2NtRjNJSEJ5YjNBZ2RtRnNkV1VnZDJGeklHRnNjMjhnZFc1a1pXWnBibVZrSUdaeWIyMGdjSEpsZG1sdmRYTWdjbVZ1WkdWeUxGeHVJQ0F2THlCeVpYUjFjbTRnY0hKbGRtbHZkWE1nWkdWbVlYVnNkQ0IyWVd4MVpTQjBieUJoZG05cFpDQjFibTVsWTJWemMyRnllU0IzWVhSamFHVnlJSFJ5YVdkblpYSmNiaUFnYVdZZ0tIWnRJQ1ltSUhadExpUnZjSFJwYjI1ekxuQnliM0J6UkdGMFlTQW1KbHh1SUNBZ0lIWnRMaVJ2Y0hScGIyNXpMbkJ5YjNCelJHRjBZVnRyWlhsZElEMDlQU0IxYm1SbFptbHVaV1FnSmlaY2JpQWdJQ0IyYlM1ZmNISnZjSE5iYTJWNVhTQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMmJTNWZjSEp2Y0hOYmEyVjVYVnh1SUNCOVhHNGdJQzh2SUdOaGJHd2dabUZqZEc5eWVTQm1kVzVqZEdsdmJpQm1iM0lnYm05dUxVWjFibU4wYVc5dUlIUjVjR1Z6WEc0Z0lDOHZJR0VnZG1Gc2RXVWdhWE1nUm5WdVkzUnBiMjRnYVdZZ2FYUnpJSEJ5YjNSdmRIbHdaU0JwY3lCbWRXNWpkR2x2YmlCbGRtVnVJR0ZqY205emN5QmthV1ptWlhKbGJuUWdaWGhsWTNWMGFXOXVJR052Ym5SbGVIUmNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmtaV1lnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnWjJWMFZIbHdaU2h3Y205d0xuUjVjR1VwSUNFOVBTQW5SblZ1WTNScGIyNG5YRzRnSUNBZ1B5QmtaV1l1WTJGc2JDaDJiU2xjYmlBZ0lDQTZJR1JsWmx4dWZWeHVYRzR2S2lwY2JpQXFJRUZ6YzJWeWRDQjNhR1YwYUdWeUlHRWdjSEp2Y0NCcGN5QjJZV3hwWkM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWVhOelpYSjBVSEp2Y0NBb1hHNGdJSEJ5YjNBc1hHNGdJRzVoYldVc1hHNGdJSFpoYkhWbExGeHVJQ0IyYlN4Y2JpQWdZV0p6Wlc1MFhHNHBJSHRjYmlBZ2FXWWdLSEJ5YjNBdWNtVnhkV2x5WldRZ0ppWWdZV0p6Wlc1MEtTQjdYRzRnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ2ROYVhOemFXNW5JSEpsY1hWcGNtVmtJSEJ5YjNBNklGd2lKeUFySUc1aGJXVWdLeUFuWENJbkxGeHVJQ0FnSUNBZ2RtMWNiaUFnSUNBcE8xeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJR2xtSUNoMllXeDFaU0E5UFNCdWRXeHNJQ1ltSUNGd2NtOXdMbkpsY1hWcGNtVmtLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmlBZ2RtRnlJSFI1Y0dVZ1BTQndjbTl3TG5SNWNHVTdYRzRnSUhaaGNpQjJZV3hwWkNBOUlDRjBlWEJsSUh4OElIUjVjR1VnUFQwOUlIUnlkV1U3WEc0Z0lIWmhjaUJsZUhCbFkzUmxaRlI1Y0dWeklEMGdXMTA3WEc0Z0lHbG1JQ2gwZVhCbEtTQjdYRzRnSUNBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtIUjVjR1VwS1NCN1hHNGdJQ0FnSUNCMGVYQmxJRDBnVzNSNWNHVmRPMXh1SUNBZ0lIMWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUjVjR1V1YkdWdVozUm9JQ1ltSUNGMllXeHBaRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnWVhOelpYSjBaV1JVZVhCbElEMGdZWE56WlhKMFZIbHdaU2gyWVd4MVpTd2dkSGx3WlZ0cFhTazdYRzRnSUNBZ0lDQmxlSEJsWTNSbFpGUjVjR1Z6TG5CMWMyZ29ZWE56WlhKMFpXUlVlWEJsTG1WNGNHVmpkR1ZrVkhsd1pTQjhmQ0FuSnlrN1hHNGdJQ0FnSUNCMllXeHBaQ0E5SUdGemMyVnlkR1ZrVkhsd1pTNTJZV3hwWkR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcFppQW9JWFpoYkdsa0tTQjdYRzRnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJR2RsZEVsdWRtRnNhV1JVZVhCbFRXVnpjMkZuWlNodVlXMWxMQ0IyWVd4MVpTd2daWGh3WldOMFpXUlVlWEJsY3lrc1hHNGdJQ0FnSUNCMmJWeHVJQ0FnSUNrN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdkbUZ5SUhaaGJHbGtZWFJ2Y2lBOUlIQnliM0F1ZG1Gc2FXUmhkRzl5TzF4dUlDQnBaaUFvZG1Gc2FXUmhkRzl5S1NCN1hHNGdJQ0FnYVdZZ0tDRjJZV3hwWkdGMGIzSW9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBblNXNTJZV3hwWkNCd2NtOXdPaUJqZFhOMGIyMGdkbUZzYVdSaGRHOXlJR05vWldOcklHWmhhV3hsWkNCbWIzSWdjSEp2Y0NCY0lpY2dLeUJ1WVcxbElDc2dKMXdpTGljc1hHNGdJQ0FnSUNBZ0lIWnRYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzUyWVhJZ2MybHRjR3hsUTJobFkydFNSU0E5SUM5ZUtGTjBjbWx1WjN4T2RXMWlaWEo4UW05dmJHVmhibnhHZFc1amRHbHZibnhUZVcxaWIyd3BKQzg3WEc1Y2JtWjFibU4wYVc5dUlHRnpjMlZ5ZEZSNWNHVWdLSFpoYkhWbExDQjBlWEJsS1NCN1hHNGdJSFpoY2lCMllXeHBaRHRjYmlBZ2RtRnlJR1Y0Y0dWamRHVmtWSGx3WlNBOUlHZGxkRlI1Y0dVb2RIbHdaU2s3WEc0Z0lHbG1JQ2h6YVcxd2JHVkRhR1ZqYTFKRkxuUmxjM1FvWlhod1pXTjBaV1JVZVhCbEtTa2dlMXh1SUNBZ0lIWmhjaUIwSUQwZ2RIbHdaVzltSUhaaGJIVmxPMXh1SUNBZ0lIWmhiR2xrSUQwZ2RDQTlQVDBnWlhod1pXTjBaV1JVZVhCbExuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDQWdMeThnWm05eUlIQnlhVzFwZEdsMlpTQjNjbUZ3Y0dWeUlHOWlhbVZqZEhOY2JpQWdJQ0JwWmlBb0lYWmhiR2xrSUNZbUlIUWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNCMllXeHBaQ0E5SUhaaGJIVmxJR2x1YzNSaGJtTmxiMllnZEhsd1pUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvWlhod1pXTjBaV1JVZVhCbElEMDlQU0FuVDJKcVpXTjBKeWtnZTF4dUlDQWdJSFpoYkdsa0lEMGdhWE5RYkdGcGJrOWlhbVZqZENoMllXeDFaU2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9aWGh3WldOMFpXUlVlWEJsSUQwOVBTQW5RWEp5WVhrbktTQjdYRzRnSUNBZ2RtRnNhV1FnUFNCQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbEtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjJZV3hwWkNBOUlIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ2RIbHdaVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIWmhiR2xrT2lCMllXeHBaQ3hjYmlBZ0lDQmxlSEJsWTNSbFpGUjVjR1U2SUdWNGNHVmpkR1ZrVkhsd1pWeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dWWE5sSUdaMWJtTjBhVzl1SUhOMGNtbHVaeUJ1WVcxbElIUnZJR05vWldOcklHSjFhV3gwTFdsdUlIUjVjR1Z6TEZ4dUlDb2dZbVZqWVhWelpTQmhJSE5wYlhCc1pTQmxjWFZoYkdsMGVTQmphR1ZqYXlCM2FXeHNJR1poYVd3Z2QyaGxiaUJ5ZFc1dWFXNW5YRzRnS2lCaFkzSnZjM01nWkdsbVptVnlaVzUwSUhadGN5QXZJR2xtY21GdFpYTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHZGxkRlI1Y0dVZ0tHWnVLU0I3WEc0Z0lIWmhjaUJ0WVhSamFDQTlJR1p1SUNZbUlHWnVMblJ2VTNSeWFXNW5LQ2t1YldGMFkyZ29MMTVjWEhNcVpuVnVZM1JwYjI0Z0tGeGNkeXNwTHlrN1hHNGdJSEpsZEhWeWJpQnRZWFJqYUNBL0lHMWhkR05vV3pGZElEb2dKeWRjYm4xY2JseHVablZ1WTNScGIyNGdhWE5UWVcxbFZIbHdaU0FvWVN3Z1lpa2dlMXh1SUNCeVpYUjFjbTRnWjJWMFZIbHdaU2hoS1NBOVBUMGdaMlYwVkhsd1pTaGlLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJVZVhCbFNXNWtaWGdnS0hSNWNHVXNJR1Y0Y0dWamRHVmtWSGx3WlhNcElIdGNiaUFnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0dWNGNHVmpkR1ZrVkhsd1pYTXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHbHpVMkZ0WlZSNWNHVW9aWGh3WldOMFpXUlVlWEJsY3l3Z2RIbHdaU2tnUHlBd0lEb2dMVEZjYmlBZ2ZWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diR1Z1SUQwZ1pYaHdaV04wWldSVWVYQmxjeTVzWlc1bmRHZzdJR2tnUENCc1pXNDdJR2tyS3lrZ2UxeHVJQ0FnSUdsbUlDaHBjMU5oYldWVWVYQmxLR1Y0Y0dWamRHVmtWSGx3WlhOYmFWMHNJSFI1Y0dVcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2FWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnTFRGY2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFNXNTJZV3hwWkZSNWNHVk5aWE56WVdkbElDaHVZVzFsTENCMllXeDFaU3dnWlhod1pXTjBaV1JVZVhCbGN5a2dlMXh1SUNCMllYSWdiV1Z6YzJGblpTQTlJRndpU1c1MllXeHBaQ0J3Y205d09pQjBlWEJsSUdOb1pXTnJJR1poYVd4bFpDQm1iM0lnY0hKdmNDQmNYRndpWENJZ0t5QnVZVzFsSUNzZ1hDSmNYRndpTGx3aUlDdGNiaUFnSUNCY0lpQkZlSEJsWTNSbFpDQmNJaUFySUNobGVIQmxZM1JsWkZSNWNHVnpMbTFoY0NoallYQnBkR0ZzYVhwbEtTNXFiMmx1S0Njc0lDY3BLVHRjYmlBZ2RtRnlJR1Y0Y0dWamRHVmtWSGx3WlNBOUlHVjRjR1ZqZEdWa1ZIbHdaWE5iTUYwN1hHNGdJSFpoY2lCeVpXTmxhWFpsWkZSNWNHVWdQU0IwYjFKaGQxUjVjR1VvZG1Gc2RXVXBPMXh1SUNCMllYSWdaWGh3WldOMFpXUldZV3gxWlNBOUlITjBlV3hsVm1Gc2RXVW9kbUZzZFdVc0lHVjRjR1ZqZEdWa1ZIbHdaU2s3WEc0Z0lIWmhjaUJ5WldObGFYWmxaRlpoYkhWbElEMGdjM1I1YkdWV1lXeDFaU2gyWVd4MVpTd2djbVZqWldsMlpXUlVlWEJsS1R0Y2JpQWdMeThnWTJobFkyc2dhV1lnZDJVZ2JtVmxaQ0IwYnlCemNHVmphV1o1SUdWNGNHVmpkR1ZrSUhaaGJIVmxYRzRnSUdsbUlDaGxlSEJsWTNSbFpGUjVjR1Z6TG14bGJtZDBhQ0E5UFQwZ01TQW1KbHh1SUNBZ0lDQWdhWE5GZUhCc2FXTmhZbXhsS0dWNGNHVmpkR1ZrVkhsd1pTa2dKaVpjYmlBZ0lDQWdJQ0ZwYzBKdmIyeGxZVzRvWlhod1pXTjBaV1JVZVhCbExDQnlaV05sYVhabFpGUjVjR1VwS1NCN1hHNGdJQ0FnYldWemMyRm5aU0FyUFNCY0lpQjNhWFJvSUhaaGJIVmxJRndpSUNzZ1pYaHdaV04wWldSV1lXeDFaVHRjYmlBZ2ZWeHVJQ0J0WlhOellXZGxJQ3M5SUZ3aUxDQm5iM1FnWENJZ0t5QnlaV05sYVhabFpGUjVjR1VnS3lCY0lpQmNJanRjYmlBZ0x5OGdZMmhsWTJzZ2FXWWdkMlVnYm1WbFpDQjBieUJ6Y0dWamFXWjVJSEpsWTJWcGRtVmtJSFpoYkhWbFhHNGdJR2xtSUNocGMwVjRjR3hwWTJGaWJHVW9jbVZqWldsMlpXUlVlWEJsS1NrZ2UxeHVJQ0FnSUcxbGMzTmhaMlVnS3owZ1hDSjNhWFJvSUhaaGJIVmxJRndpSUNzZ2NtVmpaV2wyWldSV1lXeDFaU0FySUZ3aUxsd2lPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnRaWE56WVdkbFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhOMGVXeGxWbUZzZFdVZ0tIWmhiSFZsTENCMGVYQmxLU0I3WEc0Z0lHbG1JQ2gwZVhCbElEMDlQU0FuVTNSeWFXNW5KeWtnZTF4dUlDQWdJSEpsZEhWeWJpQW9YQ0pjWEZ3aVhDSWdLeUIyWVd4MVpTQXJJRndpWEZ4Y0lsd2lLVnh1SUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1VnUFQwOUlDZE9kVzFpWlhJbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoY0lsd2lJQ3NnS0U1MWJXSmxjaWgyWVd4MVpTa3BLVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQW9YQ0pjSWlBcklIWmhiSFZsS1Z4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpSWGh3YkdsallXSnNaU0FvZG1Gc2RXVXBJSHRjYmlBZ2RtRnlJR1Y0Y0d4cFkybDBWSGx3WlhNZ1BTQmJKM04wY21sdVp5Y3NJQ2R1ZFcxaVpYSW5MQ0FuWW05dmJHVmhiaWRkTzF4dUlDQnlaWFIxY200Z1pYaHdiR2xqYVhSVWVYQmxjeTV6YjIxbEtHWjFibU4wYVc5dUlDaGxiR1Z0S1NCN0lISmxkSFZ5YmlCMllXeDFaUzUwYjB4dmQyVnlRMkZ6WlNncElEMDlQU0JsYkdWdE95QjlLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMEp2YjJ4bFlXNGdLQ2tnZTF4dUlDQjJZWElnWVhKbmN5QTlJRnRkTENCc1pXNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9PMXh1SUNCM2FHbHNaU0FvSUd4bGJpMHRJQ2tnWVhKbmMxc2diR1Z1SUYwZ1BTQmhjbWQxYldWdWRITmJJR3hsYmlCZE8xeHVYRzRnSUhKbGRIVnliaUJoY21kekxuTnZiV1VvWm5WdVkzUnBiMjRnS0dWc1pXMHBJSHNnY21WMGRYSnVJR1ZzWlcwdWRHOU1iM2RsY2tOaGMyVW9LU0E5UFQwZ0oySnZiMnhsWVc0bk95QjlLVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVablZ1WTNScGIyNGdhR0Z1Wkd4bFJYSnliM0lnS0dWeWNpd2dkbTBzSUdsdVptOHBJSHRjYmlBZ0x5OGdSR1ZoWTNScGRtRjBaU0JrWlhCeklIUnlZV05yYVc1bklIZG9hV3hsSUhCeWIyTmxjM05wYm1jZ1pYSnliM0lnYUdGdVpHeGxjaUIwYnlCaGRtOXBaQ0J3YjNOemFXSnNaU0JwYm1acGJtbDBaU0J5Wlc1a1pYSnBibWN1WEc0Z0lDOHZJRk5sWlRvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzWjFaV3B6TDNaMVpYZ3ZhWE56ZFdWekx6RTFNRFZjYmlBZ2NIVnphRlJoY21kbGRDZ3BPMXh1SUNCMGNua2dlMXh1SUNBZ0lHbG1JQ2gyYlNrZ2UxeHVJQ0FnSUNBZ2RtRnlJR04xY2lBOUlIWnRPMXh1SUNBZ0lDQWdkMmhwYkdVZ0tDaGpkWElnUFNCamRYSXVKSEJoY21WdWRDa3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHaHZiMnR6SUQwZ1kzVnlMaVJ2Y0hScGIyNXpMbVZ5Y205eVEyRndkSFZ5WldRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hvYjI5cmN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2FHOXZhM011YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqWVhCMGRYSmxJRDBnYUc5dmEzTmJhVjB1WTJGc2JDaGpkWElzSUdWeWNpd2dkbTBzSUdsdVptOHBJRDA5UFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOaGNIUjFjbVVwSUhzZ2NtVjBkWEp1SUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJ4dlltRnNTR0Z1Wkd4bFJYSnliM0lvWlN3Z1kzVnlMQ0FuWlhKeWIzSkRZWEIwZFhKbFpDQm9iMjlySnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdkc2IySmhiRWhoYm1Sc1pVVnljbTl5S0dWeWNpd2dkbTBzSUdsdVptOHBPMXh1SUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUhCdmNGUmhjbWRsZENncE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x1ZG05clpWZHBkR2hGY25KdmNraGhibVJzYVc1bklDaGNiaUFnYUdGdVpHeGxjaXhjYmlBZ1kyOXVkR1Y0ZEN4Y2JpQWdZWEpuY3l4Y2JpQWdkbTBzWEc0Z0lHbHVabTljYmlrZ2UxeHVJQ0IyWVhJZ2NtVnpPMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxjeUE5SUdGeVozTWdQeUJvWVc1a2JHVnlMbUZ3Y0d4NUtHTnZiblJsZUhRc0lHRnlaM01wSURvZ2FHRnVaR3hsY2k1allXeHNLR052Ym5SbGVIUXBPMXh1SUNBZ0lHbG1JQ2h5WlhNZ0ppWWdJWEpsY3k1ZmFYTldkV1VnSmlZZ2FYTlFjbTl0YVhObEtISmxjeWtnSmlZZ0lYSmxjeTVmYUdGdVpHeGxaQ2tnZTF4dUlDQWdJQ0FnY21WekxtTmhkR05vS0daMWJtTjBhVzl1SUNobEtTQjdJSEpsZEhWeWJpQm9ZVzVrYkdWRmNuSnZjaWhsTENCMmJTd2dhVzVtYnlBcklGd2lJQ2hRY205dGFYTmxMMkZ6ZVc1aktWd2lLVHNnZlNrN1hHNGdJQ0FnSUNBdkx5QnBjM04xWlNBak9UVXhNVnh1SUNBZ0lDQWdMeThnWVhadmFXUWdZMkYwWTJnZ2RISnBaMmRsY21sdVp5QnRkV3gwYVhCc1pTQjBhVzFsY3lCM2FHVnVJRzVsYzNSbFpDQmpZV3hzYzF4dUlDQWdJQ0FnY21WekxsOW9ZVzVrYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQm9ZVzVrYkdWRmNuSnZjaWhsTENCMmJTd2dhVzVtYnlrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMxeHVmVnh1WEc1bWRXNWpkR2x2YmlCbmJHOWlZV3hJWVc1a2JHVkZjbkp2Y2lBb1pYSnlMQ0IyYlN3Z2FXNW1ieWtnZTF4dUlDQnBaaUFvWTI5dVptbG5MbVZ5Y205eVNHRnVaR3hsY2lrZ2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1kyOXVabWxuTG1WeWNtOXlTR0Z1Wkd4bGNpNWpZV3hzS0c1MWJHd3NJR1Z5Y2l3Z2RtMHNJR2x1Wm04cFhHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0x5OGdhV1lnZEdobElIVnpaWElnYVc1MFpXNTBhVzl1WVd4c2VTQjBhSEp2ZDNNZ2RHaGxJRzl5YVdkcGJtRnNJR1Z5Y205eUlHbHVJSFJvWlNCb1lXNWtiR1Z5TEZ4dUlDQWdJQ0FnTHk4Z1pHOGdibTkwSUd4dlp5QnBkQ0IwZDJsalpWeHVJQ0FnSUNBZ2FXWWdLR1VnSVQwOUlHVnljaWtnZTF4dUlDQWdJQ0FnSUNCc2IyZEZjbkp2Y2lobExDQnVkV3hzTENBblkyOXVabWxuTG1WeWNtOXlTR0Z1Wkd4bGNpY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnNiMmRGY25KdmNpaGxjbklzSUhadExDQnBibVp2S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYkc5blJYSnliM0lnS0dWeWNpd2dkbTBzSUdsdVptOHBJSHRjYmlBZ2UxeHVJQ0FnSUhkaGNtNG9LRndpUlhKeWIzSWdhVzRnWENJZ0t5QnBibVp2SUNzZ1hDSTZJRnhjWENKY0lpQXJJQ2hsY25JdWRHOVRkSEpwYm1jb0tTa2dLeUJjSWx4Y1hDSmNJaWtzSUhadEtUdGNiaUFnZlZ4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0JwWmlBb0tHbHVRbkp2ZDNObGNpQjhmQ0JwYmxkbFpYZ3BJQ1ltSUhSNWNHVnZaaUJqYjI1emIyeGxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWlhKeUtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBhSEp2ZHlCbGNuSmNiaUFnZlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlHbHpWWE5wYm1kTmFXTnliMVJoYzJzZ1BTQm1ZV3h6WlR0Y2JseHVkbUZ5SUdOaGJHeGlZV05yY3lBOUlGdGRPMXh1ZG1GeUlIQmxibVJwYm1jZ1BTQm1ZV3h6WlR0Y2JseHVablZ1WTNScGIyNGdabXgxYzJoRFlXeHNZbUZqYTNNZ0tDa2dlMXh1SUNCd1pXNWthVzVuSUQwZ1ptRnNjMlU3WEc0Z0lIWmhjaUJqYjNCcFpYTWdQU0JqWVd4c1ltRmphM011YzJ4cFkyVW9NQ2s3WEc0Z0lHTmhiR3hpWVdOcmN5NXNaVzVuZEdnZ1BTQXdPMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTnZjR2xsY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lHTnZjR2xsYzF0cFhTZ3BPMXh1SUNCOVhHNTlYRzVjYmk4dklFaGxjbVVnZDJVZ2FHRjJaU0JoYzNsdVl5QmtaV1psY25KcGJtY2dkM0poY0hCbGNuTWdkWE5wYm1jZ2JXbGpjbTkwWVhOcmN5NWNiaTh2SUVsdUlESXVOU0IzWlNCMWMyVmtJQ2h0WVdOeWJ5a2dkR0Z6YTNNZ0tHbHVJR052YldKcGJtRjBhVzl1SUhkcGRHZ2diV2xqY205MFlYTnJjeWt1WEc0dkx5QkliM2RsZG1WeUxDQnBkQ0JvWVhNZ2MzVmlkR3hsSUhCeWIySnNaVzF6SUhkb1pXNGdjM1JoZEdVZ2FYTWdZMmhoYm1kbFpDQnlhV2RvZENCaVpXWnZjbVVnY21Wd1lXbHVkRnh1THk4Z0tHVXVaeTRnSXpZNE1UTXNJRzkxZEMxcGJpQjBjbUZ1YzJsMGFXOXVjeWt1WEc0dkx5QkJiSE52TENCMWMybHVaeUFvYldGamNtOHBJSFJoYzJ0eklHbHVJR1YyWlc1MElHaGhibVJzWlhJZ2QyOTFiR1FnWTJGMWMyVWdjMjl0WlNCM1pXbHlaQ0JpWldoaGRtbHZjbk5jYmk4dklIUm9ZWFFnWTJGdWJtOTBJR0psSUdOcGNtTjFiWFpsYm5SbFpDQW9aUzVuTGlBak56RXdPU3dnSXpjeE5UTXNJQ00zTlRRMkxDQWpOemd6TkN3Z0l6Z3hNRGtwTGx4dUx5OGdVMjhnZDJVZ2JtOTNJSFZ6WlNCdGFXTnliM1JoYzJ0eklHVjJaWEo1ZDJobGNtVXNJR0ZuWVdsdUxseHVMeThnUVNCdFlXcHZjaUJrY21GM1ltRmpheUJ2WmlCMGFHbHpJSFJ5WVdSbGIyWm1JR2x6SUhSb1lYUWdkR2hsY21VZ1lYSmxJSE52YldVZ2MyTmxibUZ5YVc5elhHNHZMeUIzYUdWeVpTQnRhV055YjNSaGMydHpJR2hoZG1VZ2RHOXZJR2hwWjJnZ1lTQndjbWx2Y21sMGVTQmhibVFnWm1seVpTQnBiaUJpWlhSM1pXVnVJSE4xY0hCdmMyVmtiSGxjYmk4dklITmxjWFZsYm5ScFlXd2daWFpsYm5SeklDaGxMbWN1SUNNME5USXhMQ0FqTmpZNU1Dd2dkMmhwWTJnZ2FHRjJaU0IzYjNKcllYSnZkVzVrY3lsY2JpOHZJRzl5SUdWMlpXNGdZbVYwZDJWbGJpQmlkV0ppYkdsdVp5QnZaaUIwYUdVZ2MyRnRaU0JsZG1WdWRDQW9JelkxTmpZcExseHVkbUZ5SUhScGJXVnlSblZ1WXp0Y2JseHVMeThnVkdobElHNWxlSFJVYVdOcklHSmxhR0YyYVc5eUlHeGxkbVZ5WVdkbGN5QjBhR1VnYldsamNtOTBZWE5ySUhGMVpYVmxMQ0IzYUdsamFDQmpZVzRnWW1VZ1lXTmpaWE56WldSY2JpOHZJSFpwWVNCbGFYUm9aWElnYm1GMGFYWmxJRkJ5YjIxcGMyVXVkR2hsYmlCdmNpQk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUxseHVMeThnVFhWMFlYUnBiMjVQWW5ObGNuWmxjaUJvWVhNZ2QybGtaWElnYzNWd2NHOXlkQ3dnYUc5M1pYWmxjaUJwZENCcGN5QnpaWEpwYjNWemJIa2dZblZuWjJWa0lHbHVYRzR2THlCVlNWZGxZbFpwWlhjZ2FXNGdhVTlUSUQ0OUlEa3VNeTR6SUhkb1pXNGdkSEpwWjJkbGNtVmtJR2x1SUhSdmRXTm9JR1YyWlc1MElHaGhibVJzWlhKekxpQkpkRnh1THk4Z1kyOXRjR3hsZEdWc2VTQnpkRzl3Y3lCM2IzSnJhVzVuSUdGbWRHVnlJSFJ5YVdkblpYSnBibWNnWVNCbVpYY2dkR2x0WlhNdUxpNGdjMjhzSUdsbUlHNWhkR2wyWlZ4dUx5OGdVSEp2YldselpTQnBjeUJoZG1GcGJHRmliR1VzSUhkbElIZHBiR3dnZFhObElHbDBPbHh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUXNJQ1JtYkc5M0xXUnBjMkZpYkdVdGJHbHVaU0FxTDF4dWFXWWdLSFI1Y0dWdlppQlFjbTl0YVhObElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQnBjMDVoZEdsMlpTaFFjbTl0YVhObEtTa2dlMXh1SUNCMllYSWdjQ0E5SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTzF4dUlDQjBhVzFsY2taMWJtTWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY0M1MGFHVnVLR1pzZFhOb1EyRnNiR0poWTJ0ektUdGNiaUFnSUNBdkx5QkpiaUJ3Y205aWJHVnRZWFJwWXlCVlNWZGxZbFpwWlhkekxDQlFjbTl0YVhObExuUm9aVzRnWkc5bGMyNG5kQ0JqYjIxd2JHVjBaV3g1SUdKeVpXRnJMQ0JpZFhSY2JpQWdJQ0F2THlCcGRDQmpZVzRnWjJWMElITjBkV05ySUdsdUlHRWdkMlZwY21RZ2MzUmhkR1VnZDJobGNtVWdZMkZzYkdKaFkydHpJR0Z5WlNCd2RYTm9aV1FnYVc1MGJ5QjBhR1ZjYmlBZ0lDQXZMeUJ0YVdOeWIzUmhjMnNnY1hWbGRXVWdZblYwSUhSb1pTQnhkV1YxWlNCcGMyNG5kQ0JpWldsdVp5Qm1iSFZ6YUdWa0xDQjFiblJwYkNCMGFHVWdZbkp2ZDNObGNseHVJQ0FnSUM4dklHNWxaV1J6SUhSdklHUnZJSE52YldVZ2IzUm9aWElnZDI5eWF5d2daUzVuTGlCb1lXNWtiR1VnWVNCMGFXMWxjaTRnVkdobGNtVm1iM0psSUhkbElHTmhibHh1SUNBZ0lDOHZJRndpWm05eVkyVmNJaUIwYUdVZ2JXbGpjbTkwWVhOcklIRjFaWFZsSUhSdklHSmxJR1pzZFhOb1pXUWdZbmtnWVdSa2FXNW5JR0Z1SUdWdGNIUjVJSFJwYldWeUxseHVJQ0FnSUdsbUlDaHBjMGxQVXlrZ2V5QnpaWFJVYVcxbGIzVjBLRzV2YjNBcE95QjlYRzRnSUgwN1hHNGdJR2x6VlhOcGJtZE5hV055YjFSaGMyc2dQU0IwY25WbE8xeHVmU0JsYkhObElHbG1JQ2doYVhOSlJTQW1KaUIwZVhCbGIyWWdUWFYwWVhScGIyNVBZbk5sY25abGNpQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdLRnh1SUNCcGMwNWhkR2wyWlNoTmRYUmhkR2x2Yms5aWMyVnlkbVZ5S1NCOGZGeHVJQ0F2THlCUWFHRnVkRzl0U2xNZ1lXNWtJR2xQVXlBM0xuaGNiaUFnVFhWMFlYUnBiMjVQWW5ObGNuWmxjaTUwYjFOMGNtbHVaeWdwSUQwOVBTQW5XMjlpYW1WamRDQk5kWFJoZEdsdmJrOWljMlZ5ZG1WeVEyOXVjM1J5ZFdOMGIzSmRKMXh1S1NrZ2UxeHVJQ0F2THlCVmMyVWdUWFYwWVhScGIyNVBZbk5sY25abGNpQjNhR1Z5WlNCdVlYUnBkbVVnVUhKdmJXbHpaU0JwY3lCdWIzUWdZWFpoYVd4aFlteGxMRnh1SUNBdkx5QmxMbWN1SUZCb1lXNTBiMjFLVXl3Z2FVOVROeXdnUVc1a2NtOXBaQ0EwTGpSY2JpQWdMeThnS0NNMk5EWTJJRTExZEdGMGFXOXVUMkp6WlhKMlpYSWdhWE1nZFc1eVpXeHBZV0pzWlNCcGJpQkpSVEV4S1Z4dUlDQjJZWElnWTI5MWJuUmxjaUE5SURFN1hHNGdJSFpoY2lCdlluTmxjblpsY2lBOUlHNWxkeUJOZFhSaGRHbHZiazlpYzJWeWRtVnlLR1pzZFhOb1EyRnNiR0poWTJ0ektUdGNiaUFnZG1GeUlIUmxlSFJPYjJSbElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFZHVjRkRTV2WkdVb1UzUnlhVzVuS0dOdmRXNTBaWElwS1R0Y2JpQWdiMkp6WlhKMlpYSXViMkp6WlhKMlpTaDBaWGgwVG05a1pTd2dlMXh1SUNBZ0lHTm9ZWEpoWTNSbGNrUmhkR0U2SUhSeWRXVmNiaUFnZlNrN1hHNGdJSFJwYldWeVJuVnVZeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCamIzVnVkR1Z5SUQwZ0tHTnZkVzUwWlhJZ0t5QXhLU0FsSURJN1hHNGdJQ0FnZEdWNGRFNXZaR1V1WkdGMFlTQTlJRk4wY21sdVp5aGpiM1Z1ZEdWeUtUdGNiaUFnZlR0Y2JpQWdhWE5WYzJsdVowMXBZM0p2VkdGemF5QTlJSFJ5ZFdVN1hHNTlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnpaWFJKYlcxbFpHbGhkR1VnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUdselRtRjBhWFpsS0hObGRFbHRiV1ZrYVdGMFpTa3BJSHRjYmlBZ0x5OGdSbUZzYkdKaFkyc2dkRzhnYzJWMFNXMXRaV1JwWVhSbExseHVJQ0F2THlCVVpXTm9hVzVwWTJGc2JIa2dhWFFnYkdWMlpYSmhaMlZ6SUhSb1pTQW9iV0ZqY204cElIUmhjMnNnY1hWbGRXVXNYRzRnSUM4dklHSjFkQ0JwZENCcGN5QnpkR2xzYkNCaElHSmxkSFJsY2lCamFHOXBZMlVnZEdoaGJpQnpaWFJVYVcxbGIzVjBMbHh1SUNCMGFXMWxja1oxYm1NZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjMlYwU1cxdFpXUnBZWFJsS0dac2RYTm9RMkZzYkdKaFkydHpLVHRjYmlBZ2ZUdGNibjBnWld4elpTQjdYRzRnSUM4dklFWmhiR3hpWVdOcklIUnZJSE5sZEZScGJXVnZkWFF1WEc0Z0lIUnBiV1Z5Um5WdVl5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0J6WlhSVWFXMWxiM1YwS0dac2RYTm9RMkZzYkdKaFkydHpMQ0F3S1R0Y2JpQWdmVHRjYm4xY2JseHVablZ1WTNScGIyNGdibVY0ZEZScFkyc2dLR05pTENCamRIZ3BJSHRjYmlBZ2RtRnlJRjl5WlhOdmJIWmxPMXh1SUNCallXeHNZbUZqYTNNdWNIVnphQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnYVdZZ0tHTmlLU0I3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQmpZaTVqWVd4c0tHTjBlQ2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lHaGhibVJzWlVWeWNtOXlLR1VzSUdOMGVDd2dKMjVsZUhSVWFXTnJKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hmY21WemIyeDJaU2tnZTF4dUlDQWdJQ0FnWDNKbGMyOXNkbVVvWTNSNEtUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dUlDQnBaaUFvSVhCbGJtUnBibWNwSUh0Y2JpQWdJQ0J3Wlc1a2FXNW5JRDBnZEhKMVpUdGNiaUFnSUNCMGFXMWxja1oxYm1Nb0tUdGNiaUFnZlZ4dUlDQXZMeUFrWm14dmR5MWthWE5oWW14bExXeHBibVZjYmlBZ2FXWWdLQ0ZqWWlBbUppQjBlWEJsYjJZZ1VISnZiV2x6WlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVwSUh0Y2JpQWdJQ0FnSUY5eVpYTnZiSFpsSUQwZ2NtVnpiMngyWlR0Y2JpQWdJQ0I5S1Z4dUlDQjlYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNTJZWElnYldGeWF6dGNiblpoY2lCdFpXRnpkWEpsTzF4dVhHNTdYRzRnSUhaaGNpQndaWEptSUQwZ2FXNUNjbTkzYzJWeUlDWW1JSGRwYm1SdmR5NXdaWEptYjNKdFlXNWpaVHRjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292WEc0Z0lHbG1JQ2hjYmlBZ0lDQndaWEptSUNZbVhHNGdJQ0FnY0dWeVppNXRZWEpySUNZbVhHNGdJQ0FnY0dWeVppNXRaV0Z6ZFhKbElDWW1YRzRnSUNBZ2NHVnlaaTVqYkdWaGNrMWhjbXR6SUNZbVhHNGdJQ0FnY0dWeVppNWpiR1ZoY2sxbFlYTjFjbVZ6WEc0Z0lDa2dlMXh1SUNBZ0lHMWhjbXNnUFNCbWRXNWpkR2x2YmlBb2RHRm5LU0I3SUhKbGRIVnliaUJ3WlhKbUxtMWhjbXNvZEdGbktUc2dmVHRjYmlBZ0lDQnRaV0Z6ZFhKbElEMGdablZ1WTNScGIyNGdLRzVoYldVc0lITjBZWEowVkdGbkxDQmxibVJVWVdjcElIdGNiaUFnSUNBZ0lIQmxjbVl1YldWaGMzVnlaU2h1WVcxbExDQnpkR0Z5ZEZSaFp5d2daVzVrVkdGbktUdGNiaUFnSUNBZ0lIQmxjbVl1WTJ4bFlYSk5ZWEpyY3loemRHRnlkRlJoWnlrN1hHNGdJQ0FnSUNCd1pYSm1MbU5zWldGeVRXRnlhM01vWlc1a1ZHRm5LVHRjYmlBZ0lDQWdJQzh2SUhCbGNtWXVZMnhsWVhKTlpXRnpkWEpsY3lodVlXMWxLVnh1SUNBZ0lIMDdYRzRnSUgxY2JuMWNibHh1THlvZ2JtOTBJSFI1Y0dVZ1kyaGxZMnRwYm1jZ2RHaHBjeUJtYVd4bElHSmxZMkYxYzJVZ1pteHZkeUJrYjJWemJpZDBJSEJzWVhrZ2QyVnNiQ0IzYVhSb0lGQnliM2g1SUNvdlhHNWNiblpoY2lCcGJtbDBVSEp2ZUhrN1hHNWNibnRjYmlBZ2RtRnlJR0ZzYkc5M1pXUkhiRzlpWVd4eklEMGdiV0ZyWlUxaGNDaGNiaUFnSUNBblNXNW1hVzVwZEhrc2RXNWtaV1pwYm1Wa0xFNWhUaXhwYzBacGJtbDBaU3hwYzA1aFRpd25JQ3RjYmlBZ0lDQW5jR0Z5YzJWR2JHOWhkQ3h3WVhKelpVbHVkQ3hrWldOdlpHVlZVa2tzWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwTEdWdVkyOWtaVlZTU1N4bGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rc0p5QXJYRzRnSUNBZ0owMWhkR2dzVG5WdFltVnlMRVJoZEdVc1FYSnlZWGtzVDJKcVpXTjBMRUp2YjJ4bFlXNHNVM1J5YVc1bkxGSmxaMFY0Y0N4TllYQXNVMlYwTEVwVFQwNHNTVzUwYkN3bklDdGNiaUFnSUNBbmNtVnhkV2x5WlNjZ0x5OGdabTl5SUZkbFluQmhZMnN2UW5KdmQzTmxjbWxtZVZ4dUlDQXBPMXh1WEc0Z0lIWmhjaUIzWVhKdVRtOXVVSEpsYzJWdWRDQTlJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXNJR3RsZVNrZ2UxeHVJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQmNJbEJ5YjNCbGNuUjVJRzl5SUcxbGRHaHZaQ0JjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENJZ2FYTWdibTkwSUdSbFptbHVaV1FnYjI0Z2RHaGxJR2x1YzNSaGJtTmxJR0oxZENCY0lpQXJYRzRnSUNBZ0lDQW5jbVZtWlhKbGJtTmxaQ0JrZFhKcGJtY2djbVZ1WkdWeUxpQk5ZV3RsSUhOMWNtVWdkR2hoZENCMGFHbHpJSEJ5YjNCbGNuUjVJR2x6SUhKbFlXTjBhWFpsTENBbklDdGNiaUFnSUNBZ0lDZGxhWFJvWlhJZ2FXNGdkR2hsSUdSaGRHRWdiM0IwYVc5dUxDQnZjaUJtYjNJZ1kyeGhjM010WW1GelpXUWdZMjl0Y0c5dVpXNTBjeXdnWW5rZ0p5QXJYRzRnSUNBZ0lDQW5hVzVwZEdsaGJHbDZhVzVuSUhSb1pTQndjbTl3WlhKMGVTNGdKeUFyWEc0Z0lDQWdJQ0FuVTJWbE9pQm9kSFJ3Y3pvdkwzWjFaV3B6TG05eVp5OTJNaTluZFdsa1pTOXlaV0ZqZEdsMmFYUjVMbWgwYld3alJHVmpiR0Z5YVc1bkxWSmxZV04wYVhabExWQnliM0JsY25ScFpYTXVKeXhjYmlBZ0lDQWdJSFJoY21kbGRGeHVJQ0FnSUNrN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUhkaGNtNVNaWE5sY25abFpGQnlaV1pwZUNBOUlHWjFibU4wYVc5dUlDaDBZWEpuWlhRc0lHdGxlU2tnZTF4dUlDQWdJSGRoY200b1hHNGdJQ0FnSUNCY0lsQnliM0JsY25SNUlGeGNYQ0pjSWlBcklHdGxlU0FySUZ3aVhGeGNJaUJ0ZFhOMElHSmxJR0ZqWTJWemMyVmtJSGRwZEdnZ1hGeGNJaVJrWVhSaExsd2lJQ3NnYTJWNUlDc2dYQ0pjWEZ3aUlHSmxZMkYxYzJVZ1hDSWdLMXh1SUNBZ0lDQWdKM0J5YjNCbGNuUnBaWE1nYzNSaGNuUnBibWNnZDJsMGFDQmNJaVJjSWlCdmNpQmNJbDljSWlCaGNtVWdibTkwSUhCeWIzaHBaV1FnYVc0Z2RHaGxJRloxWlNCcGJuTjBZVzVqWlNCMGJ5QW5JQ3RjYmlBZ0lDQWdJQ2R3Y21WMlpXNTBJR052Ym1ac2FXTjBjeUIzYVhSb0lGWjFaU0JwYm5SbGNtNWhiSE1uSUN0Y2JpQWdJQ0FnSUNkVFpXVTZJR2gwZEhCek9pOHZkblZsYW5NdWIzSm5MM1l5TDJGd2FTOGpaR0YwWVNjc1hHNGdJQ0FnSUNCMFlYSm5aWFJjYmlBZ0lDQXBPMXh1SUNCOU8xeHVYRzRnSUhaaGNpQm9ZWE5RY205NGVTQTlYRzRnSUNBZ2RIbHdaVzltSUZCeWIzaDVJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJwYzA1aGRHbDJaU2hRY205NGVTazdYRzVjYmlBZ2FXWWdLR2hoYzFCeWIzaDVLU0I3WEc0Z0lDQWdkbUZ5SUdselFuVnBiSFJKYmsxdlpHbG1hV1Z5SUQwZ2JXRnJaVTFoY0NnbmMzUnZjQ3h3Y21WMlpXNTBMSE5sYkdZc1kzUnliQ3h6YUdsbWRDeGhiSFFzYldWMFlTeGxlR0ZqZENjcE8xeHVJQ0FnSUdOdmJtWnBaeTVyWlhsRGIyUmxjeUE5SUc1bGR5QlFjbTk0ZVNoamIyNW1hV2N1YTJWNVEyOWtaWE1zSUh0Y2JpQWdJQ0FnSUhObGREb2dablZ1WTNScGIyNGdjMlYwSUNoMFlYSm5aWFFzSUd0bGVTd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dselFuVnBiSFJKYmsxdlpHbG1hV1Z5S0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCM1lYSnVLQ2hjSWtGMmIybGtJRzkyWlhKM2NtbDBhVzVuSUdKMWFXeDBMV2x1SUcxdlpHbG1hV1Z5SUdsdUlHTnZibVpwWnk1clpYbERiMlJsY3pvZ0xsd2lJQ3NnYTJWNUtTazdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFcydGxlVjBnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0IyWVhJZ2FHRnpTR0Z1Wkd4bGNpQTlJSHRjYmlBZ0lDQm9ZWE02SUdaMWJtTjBhVzl1SUdoaGN5QW9kR0Z5WjJWMExDQnJaWGtwSUh0Y2JpQWdJQ0FnSUhaaGNpQm9ZWE1nUFNCclpYa2dhVzRnZEdGeVoyVjBPMXh1SUNBZ0lDQWdkbUZ5SUdselFXeHNiM2RsWkNBOUlHRnNiRzkzWldSSGJHOWlZV3h6S0d0bGVTa2dmSHhjYmlBZ0lDQWdJQ0FnS0hSNWNHVnZaaUJyWlhrZ1BUMDlJQ2R6ZEhKcGJtY25JQ1ltSUd0bGVTNWphR0Z5UVhRb01Da2dQVDA5SUNkZkp5QW1KaUFoS0d0bGVTQnBiaUIwWVhKblpYUXVKR1JoZEdFcEtUdGNiaUFnSUNBZ0lHbG1JQ2doYUdGeklDWW1JQ0ZwYzBGc2JHOTNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR3RsZVNCcGJpQjBZWEpuWlhRdUpHUmhkR0VwSUhzZ2QyRnlibEpsYzJWeWRtVmtVSEpsWm1sNEtIUmhjbWRsZEN3Z2EyVjVLVHNnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHNnZDJGeWJrNXZibEJ5WlhObGJuUW9kR0Z5WjJWMExDQnJaWGtwT3lCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYUdGeklIeDhJQ0ZwYzBGc2JHOTNaV1JjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnZG1GeUlHZGxkRWhoYm1Sc1pYSWdQU0I3WEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlCblpYUWdLSFJoY21kbGRDd2dhMlY1S1NCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHdGxlU0E5UFQwZ0ozTjBjbWx1WnljZ0ppWWdJU2hyWlhrZ2FXNGdkR0Z5WjJWMEtTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2EyVjVJR2x1SUhSaGNtZGxkQzRrWkdGMFlTa2dleUIzWVhKdVVtVnpaWEoyWldSUWNtVm1hWGdvZEdGeVoyVjBMQ0JyWlhrcE95QjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2V5QjNZWEp1VG05dVVISmxjMlZ1ZENoMFlYSm5aWFFzSUd0bGVTazdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQjBZWEpuWlhSYmEyVjVYVnh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JwYm1sMFVISnZlSGtnUFNCbWRXNWpkR2x2YmlCcGJtbDBVSEp2ZUhrZ0tIWnRLU0I3WEc0Z0lDQWdhV1lnS0doaGMxQnliM2g1S1NCN1hHNGdJQ0FnSUNBdkx5QmtaWFJsY20xcGJtVWdkMmhwWTJnZ2NISnZlSGtnYUdGdVpHeGxjaUIwYnlCMWMyVmNiaUFnSUNBZ0lIWmhjaUJ2Y0hScGIyNXpJRDBnZG0wdUpHOXdkR2x2Ym5NN1hHNGdJQ0FnSUNCMllYSWdhR0Z1Wkd4bGNuTWdQU0J2Y0hScGIyNXpMbkpsYm1SbGNpQW1KaUJ2Y0hScGIyNXpMbkpsYm1SbGNpNWZkMmwwYUZOMGNtbHdjR1ZrWEc0Z0lDQWdJQ0FnSUQ4Z1oyVjBTR0Z1Wkd4bGNseHVJQ0FnSUNBZ0lDQTZJR2hoYzBoaGJtUnNaWEk3WEc0Z0lDQWdJQ0IyYlM1ZmNtVnVaR1Z5VUhKdmVIa2dQU0J1WlhjZ1VISnZlSGtvZG0wc0lHaGhibVJzWlhKektUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZG0wdVgzSmxibVJsY2xCeWIzaDVJRDBnZG0wN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVkbUZ5SUhObFpXNVBZbXBsWTNSeklEMGdibVYzSUY5VFpYUW9LVHRjYmx4dUx5b3FYRzRnS2lCU1pXTjFjbk5wZG1Wc2VTQjBjbUYyWlhKelpTQmhiaUJ2WW1wbFkzUWdkRzhnWlhadmEyVWdZV3hzSUdOdmJuWmxjblJsWkZ4dUlDb2daMlYwZEdWeWN5d2djMjhnZEdoaGRDQmxkbVZ5ZVNCdVpYTjBaV1FnY0hKdmNHVnlkSGtnYVc1emFXUmxJSFJvWlNCdlltcGxZM1JjYmlBcUlHbHpJR052Ykd4bFkzUmxaQ0JoY3lCaElGd2laR1ZsY0Z3aUlHUmxjR1Z1WkdWdVkza3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlIUnlZWFpsY25ObElDaDJZV3dwSUh0Y2JpQWdYM1J5WVhabGNuTmxLSFpoYkN3Z2MyVmxiazlpYW1WamRITXBPMXh1SUNCelpXVnVUMkpxWldOMGN5NWpiR1ZoY2lncE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCZmRISmhkbVZ5YzJVZ0tIWmhiQ3dnYzJWbGJpa2dlMXh1SUNCMllYSWdhU3dnYTJWNWN6dGNiaUFnZG1GeUlHbHpRU0E5SUVGeWNtRjVMbWx6UVhKeVlYa29kbUZzS1R0Y2JpQWdhV1lnS0NnaGFYTkJJQ1ltSUNGcGMwOWlhbVZqZENoMllXd3BLU0I4ZkNCUFltcGxZM1F1YVhOR2NtOTZaVzRvZG1Gc0tTQjhmQ0IyWVd3Z2FXNXpkR0Z1WTJWdlppQldUbTlrWlNrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJR2xtSUNoMllXd3VYMTl2WWw5ZktTQjdYRzRnSUNBZ2RtRnlJR1JsY0Vsa0lEMGdkbUZzTGw5ZmIySmZYeTVrWlhBdWFXUTdYRzRnSUNBZ2FXWWdLSE5sWlc0dWFHRnpLR1JsY0Vsa0tTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnZlZ4dUlDQWdJSE5sWlc0dVlXUmtLR1JsY0Vsa0tUdGNiaUFnZlZ4dUlDQnBaaUFvYVhOQktTQjdYRzRnSUNBZ2FTQTlJSFpoYkM1c1pXNW5kR2c3WEc0Z0lDQWdkMmhwYkdVZ0tHa3RMU2tnZXlCZmRISmhkbVZ5YzJVb2RtRnNXMmxkTENCelpXVnVLVHNnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loMllXd3BPMXh1SUNBZ0lHa2dQU0JyWlhsekxteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTQW9hUzB0S1NCN0lGOTBjbUYyWlhKelpTaDJZV3hiYTJWNWMxdHBYVjBzSUhObFpXNHBPeUI5WEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJ1YjNKdFlXeHBlbVZGZG1WdWRDQTlJR05oWTJobFpDaG1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0IyWVhJZ2NHRnpjMmwyWlNBOUlHNWhiV1V1WTJoaGNrRjBLREFwSUQwOVBTQW5KaWM3WEc0Z0lHNWhiV1VnUFNCd1lYTnphWFpsSUQ4Z2JtRnRaUzV6YkdsalpTZ3hLU0E2SUc1aGJXVTdYRzRnSUhaaGNpQnZibU5sSkNReElEMGdibUZ0WlM1amFHRnlRWFFvTUNrZ1BUMDlJQ2QrSnpzZ0x5OGdVSEpsWm1sNFpXUWdiR0Z6ZEN3Z1kyaGxZMnRsWkNCbWFYSnpkRnh1SUNCdVlXMWxJRDBnYjI1alpTUWtNU0EvSUc1aGJXVXVjMnhwWTJVb01Ta2dPaUJ1WVcxbE8xeHVJQ0IyWVhJZ1kyRndkSFZ5WlNBOUlHNWhiV1V1WTJoaGNrRjBLREFwSUQwOVBTQW5JU2M3WEc0Z0lHNWhiV1VnUFNCallYQjBkWEpsSUQ4Z2JtRnRaUzV6YkdsalpTZ3hLU0E2SUc1aGJXVTdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdibUZ0WlRvZ2JtRnRaU3hjYmlBZ0lDQnZibU5sT2lCdmJtTmxKQ1F4TEZ4dUlDQWdJR05oY0hSMWNtVTZJR05oY0hSMWNtVXNYRzRnSUNBZ2NHRnpjMmwyWlRvZ2NHRnpjMmwyWlZ4dUlDQjlYRzU5S1R0Y2JseHVablZ1WTNScGIyNGdZM0psWVhSbFJtNUpiblp2YTJWeUlDaG1ibk1zSUhadEtTQjdYRzRnSUdaMWJtTjBhVzl1SUdsdWRtOXJaWElnS0NrZ2UxeHVJQ0FnSUhaaGNpQmhjbWQxYldWdWRITWtNU0E5SUdGeVozVnRaVzUwY3p0Y2JseHVJQ0FnSUhaaGNpQm1ibk1nUFNCcGJuWnZhMlZ5TG1adWN6dGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNobWJuTXBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kyeHZibVZrSUQwZ1ptNXpMbk5zYVdObEtDazdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR05zYjI1bFpDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCcGJuWnZhMlZYYVhSb1JYSnliM0pJWVc1a2JHbHVaeWhqYkc5dVpXUmJhVjBzSUc1MWJHd3NJR0Z5WjNWdFpXNTBjeVF4TENCMmJTd2dYQ0oyTFc5dUlHaGhibVJzWlhKY0lpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklISmxkSFZ5YmlCb1lXNWtiR1Z5SUhKbGRIVnliaUIyWVd4MVpTQm1iM0lnYzJsdVoyeGxJR2hoYm1Sc1pYSnpYRzRnSUNBZ0lDQnlaWFIxY200Z2FXNTJiMnRsVjJsMGFFVnljbTl5U0dGdVpHeHBibWNvWm01ekxDQnVkV3hzTENCaGNtZDFiV1Z1ZEhNc0lIWnRMQ0JjSW5ZdGIyNGdhR0Z1Wkd4bGNsd2lLVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnBiblp2YTJWeUxtWnVjeUE5SUdadWN6dGNiaUFnY21WMGRYSnVJR2x1ZG05clpYSmNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsVEdsemRHVnVaWEp6SUNoY2JpQWdiMjRzWEc0Z0lHOXNaRTl1TEZ4dUlDQmhaR1FzWEc0Z0lISmxiVzkyWlNRa01TeGNiaUFnWTNKbFlYUmxUMjVqWlVoaGJtUnNaWElzWEc0Z0lIWnRYRzRwSUh0Y2JpQWdkbUZ5SUc1aGJXVXNJR1JsWmlRa01Td2dZM1Z5TENCdmJHUXNJR1YyWlc1ME8xeHVJQ0JtYjNJZ0tHNWhiV1VnYVc0Z2IyNHBJSHRjYmlBZ0lDQmtaV1lrSkRFZ1BTQmpkWElnUFNCdmJsdHVZVzFsWFR0Y2JpQWdJQ0J2YkdRZ1BTQnZiR1JQYmx0dVlXMWxYVHRjYmlBZ0lDQmxkbVZ1ZENBOUlHNXZjbTFoYkdsNlpVVjJaVzUwS0c1aGJXVXBPMXh1SUNBZ0lHbG1JQ2hwYzFWdVpHVm1LR04xY2lrcElIdGNiaUFnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUZ3aVNXNTJZV3hwWkNCb1lXNWtiR1Z5SUdadmNpQmxkbVZ1ZENCY1hGd2lYQ0lnS3lBb1pYWmxiblF1Ym1GdFpTa2dLeUJjSWx4Y1hDSTZJR2R2ZENCY0lpQXJJRk4wY21sdVp5aGpkWElwTEZ4dUlDQWdJQ0FnSUNCMmJWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHbHpWVzVrWldZb2IyeGtLU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpWVzVrWldZb1kzVnlMbVp1Y3lrcElIdGNiaUFnSUNBZ0lDQWdZM1Z5SUQwZ2IyNWJibUZ0WlYwZ1BTQmpjbVZoZEdWR2JrbHVkbTlyWlhJb1kzVnlMQ0IyYlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9hWE5VY25WbEtHVjJaVzUwTG05dVkyVXBLU0I3WEc0Z0lDQWdJQ0FnSUdOMWNpQTlJRzl1VzI1aGJXVmRJRDBnWTNKbFlYUmxUMjVqWlVoaGJtUnNaWElvWlhabGJuUXVibUZ0WlN3Z1kzVnlMQ0JsZG1WdWRDNWpZWEIwZFhKbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHRmtaQ2hsZG1WdWRDNXVZVzFsTENCamRYSXNJR1YyWlc1MExtTmhjSFIxY21Vc0lHVjJaVzUwTG5CaGMzTnBkbVVzSUdWMlpXNTBMbkJoY21GdGN5azdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGpkWElnSVQwOUlHOXNaQ2tnZTF4dUlDQWdJQ0FnYjJ4a0xtWnVjeUE5SUdOMWNqdGNiaUFnSUNBZ0lHOXVXMjVoYldWZElEMGdiMnhrTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JtYjNJZ0tHNWhiV1VnYVc0Z2IyeGtUMjRwSUh0Y2JpQWdJQ0JwWmlBb2FYTlZibVJsWmlodmJsdHVZVzFsWFNrcElIdGNiaUFnSUNBZ0lHVjJaVzUwSUQwZ2JtOXliV0ZzYVhwbFJYWmxiblFvYm1GdFpTazdYRzRnSUNBZ0lDQnlaVzF2ZG1Va0pERW9aWFpsYm5RdWJtRnRaU3dnYjJ4a1QyNWJibUZ0WlYwc0lHVjJaVzUwTG1OaGNIUjFjbVVwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z2JXVnlaMlZXVG05a1pVaHZiMnNnS0dSbFppd2dhRzl2YTB0bGVTd2dhRzl2YXlrZ2UxeHVJQ0JwWmlBb1pHVm1JR2x1YzNSaGJtTmxiMllnVms1dlpHVXBJSHRjYmlBZ0lDQmtaV1lnUFNCa1pXWXVaR0YwWVM1b2IyOXJJSHg4SUNoa1pXWXVaR0YwWVM1b2IyOXJJRDBnZTMwcE8xeHVJQ0I5WEc0Z0lIWmhjaUJwYm5admEyVnlPMXh1SUNCMllYSWdiMnhrU0c5dmF5QTlJR1JsWmx0b2IyOXJTMlY1WFR0Y2JseHVJQ0JtZFc1amRHbHZiaUIzY21Gd2NHVmtTRzl2YXlBb0tTQjdYRzRnSUNBZ2FHOXZheTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUM4dklHbHRjRzl5ZEdGdWREb2djbVZ0YjNabElHMWxjbWRsWkNCb2IyOXJJSFJ2SUdWdWMzVnlaU0JwZENkeklHTmhiR3hsWkNCdmJteDVJRzl1WTJWY2JpQWdJQ0F2THlCaGJtUWdjSEpsZG1WdWRDQnRaVzF2Y25rZ2JHVmhhMXh1SUNBZ0lISmxiVzkyWlNocGJuWnZhMlZ5TG1adWN5d2dkM0poY0hCbFpFaHZiMnNwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR2x6Vlc1a1pXWW9iMnhrU0c5dmF5a3BJSHRjYmlBZ0lDQXZMeUJ1YnlCbGVHbHpkR2x1WnlCb2IyOXJYRzRnSUNBZ2FXNTJiMnRsY2lBOUlHTnlaV0YwWlVadVNXNTJiMnRsY2loYmQzSmhjSEJsWkVodmIydGRLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnSUNCcFppQW9hWE5FWldZb2IyeGtTRzl2YXk1bWJuTXBJQ1ltSUdselZISjFaU2h2YkdSSWIyOXJMbTFsY21kbFpDa3BJSHRjYmlBZ0lDQWdJQzh2SUdGc2NtVmhaSGtnWVNCdFpYSm5aV1FnYVc1MmIydGxjbHh1SUNBZ0lDQWdhVzUyYjJ0bGNpQTlJRzlzWkVodmIyczdYRzRnSUNBZ0lDQnBiblp2YTJWeUxtWnVjeTV3ZFhOb0tIZHlZWEJ3WldSSWIyOXJLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdaWGhwYzNScGJtY2djR3hoYVc0Z2FHOXZhMXh1SUNBZ0lDQWdhVzUyYjJ0bGNpQTlJR055WldGMFpVWnVTVzUyYjJ0bGNpaGJiMnhrU0c5dmF5d2dkM0poY0hCbFpFaHZiMnRkS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcGJuWnZhMlZ5TG0xbGNtZGxaQ0E5SUhSeWRXVTdYRzRnSUdSbFpsdG9iMjlyUzJWNVhTQTlJR2x1ZG05clpYSTdYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQmxlSFJ5WVdOMFVISnZjSE5HY205dFZrNXZaR1ZFWVhSaElDaGNiaUFnWkdGMFlTeGNiaUFnUTNSdmNpeGNiaUFnZEdGblhHNHBJSHRjYmlBZ0x5OGdkMlVnWVhKbElHOXViSGtnWlhoMGNtRmpkR2x1WnlCeVlYY2dkbUZzZFdWeklHaGxjbVV1WEc0Z0lDOHZJSFpoYkdsa1lYUnBiMjRnWVc1a0lHUmxabUYxYkhRZ2RtRnNkV1Z6SUdGeVpTQm9ZVzVrYkdWa0lHbHVJSFJvWlNCamFHbHNaRnh1SUNBdkx5QmpiMjF3YjI1bGJuUWdhWFJ6Wld4bUxseHVJQ0IyWVhJZ2NISnZjRTl3ZEdsdmJuTWdQU0JEZEc5eUxtOXdkR2x2Ym5NdWNISnZjSE03WEc0Z0lHbG1JQ2hwYzFWdVpHVm1LSEJ5YjNCUGNIUnBiMjV6S1NrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJSFpoY2lCeVpYTWdQU0I3ZlR0Y2JpQWdkbUZ5SUdGMGRISnpJRDBnWkdGMFlTNWhkSFJ5Y3p0Y2JpQWdkbUZ5SUhCeWIzQnpJRDBnWkdGMFlTNXdjbTl3Y3p0Y2JpQWdhV1lnS0dselJHVm1LR0YwZEhKektTQjhmQ0JwYzBSbFppaHdjbTl3Y3lrcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnY0hKdmNFOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lIWmhjaUJoYkhSTFpYa2dQU0JvZVhCb1pXNWhkR1VvYTJWNUtUdGNiaUFnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUd0bGVVbHVURzkzWlhKRFlYTmxJRDBnYTJWNUxuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0JyWlhrZ0lUMDlJR3RsZVVsdVRHOTNaWEpEWVhObElDWW1YRzRnSUNBZ0lDQWdJQ0FnWVhSMGNuTWdKaVlnYUdGelQzZHVLR0YwZEhKekxDQnJaWGxKYmt4dmQyVnlRMkZ6WlNsY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdsd0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKUWNtOXdJRnhjWENKY0lpQXJJR3RsZVVsdVRHOTNaWEpEWVhObElDc2dYQ0pjWEZ3aUlHbHpJSEJoYzNObFpDQjBieUJqYjIxd2IyNWxiblFnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dadmNtMWhkRU52YlhCdmJtVnVkRTVoYldVb2RHRm5JSHg4SUVOMGIzSXBLU0FySUZ3aUxDQmlkWFFnZEdobElHUmxZMnhoY21Wa0lIQnliM0FnYm1GdFpTQnBjMXdpSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpSUZ4Y1hDSmNJaUFySUd0bGVTQXJJRndpWEZ4Y0lpNGdYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0pPYjNSbElIUm9ZWFFnU0ZSTlRDQmhkSFJ5YVdKMWRHVnpJR0Z5WlNCallYTmxMV2x1YzJWdWMybDBhWFpsSUdGdVpDQmpZVzFsYkVOaGMyVmtJRndpSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpY0hKdmNITWdibVZsWkNCMGJ5QjFjMlVnZEdobGFYSWdhMlZpWVdJdFkyRnpaU0JsY1hWcGRtRnNaVzUwY3lCM2FHVnVJSFZ6YVc1bklHbHVMVVJQVFNCY0lpQXJYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luUmxiWEJzWVhSbGN5NGdXVzkxSUhOb2IzVnNaQ0J3Y205aVlXSnNlU0IxYzJVZ1hGeGNJbHdpSUNzZ1lXeDBTMlY1SUNzZ1hDSmNYRndpSUdsdWMzUmxZV1FnYjJZZ1hGeGNJbHdpSUNzZ2EyVjVJQ3NnWENKY1hGd2lMbHdpWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMmhsWTJ0UWNtOXdLSEpsY3l3Z2NISnZjSE1zSUd0bGVTd2dZV3gwUzJWNUxDQjBjblZsS1NCOGZGeHVJQ0FnSUNBZ1kyaGxZMnRRY205d0tISmxjeXdnWVhSMGNuTXNJR3RsZVN3Z1lXeDBTMlY1TENCbVlXeHpaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE5jYm4xY2JseHVablZ1WTNScGIyNGdZMmhsWTJ0UWNtOXdJQ2hjYmlBZ2NtVnpMRnh1SUNCb1lYTm9MRnh1SUNCclpYa3NYRzRnSUdGc2RFdGxlU3hjYmlBZ2NISmxjMlZ5ZG1WY2Jpa2dlMXh1SUNCcFppQW9hWE5FWldZb2FHRnphQ2twSUh0Y2JpQWdJQ0JwWmlBb2FHRnpUM2R1S0doaGMyZ3NJR3RsZVNrcElIdGNiaUFnSUNBZ0lISmxjMXRyWlhsZElEMGdhR0Z6YUZ0clpYbGRPMXh1SUNBZ0lDQWdhV1lnS0NGd2NtVnpaWEoyWlNrZ2UxeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2FHRnphRnRyWlhsZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHaGhjMDkzYmlob1lYTm9MQ0JoYkhSTFpYa3BLU0I3WEc0Z0lDQWdJQ0J5WlhOYmEyVjVYU0E5SUdoaGMyaGJZV3gwUzJWNVhUdGNiaUFnSUNBZ0lHbG1JQ2doY0hKbGMyVnlkbVVwSUh0Y2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUdoaGMyaGJZV3gwUzJWNVhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVMeThnVkdobElIUmxiWEJzWVhSbElHTnZiWEJwYkdWeUlHRjBkR1Z0Y0hSeklIUnZJRzFwYm1sdGFYcGxJSFJvWlNCdVpXVmtJR1p2Y2lCdWIzSnRZV3hwZW1GMGFXOXVJR0o1WEc0dkx5QnpkR0YwYVdOaGJHeDVJR0Z1WVd4NWVtbHVaeUIwYUdVZ2RHVnRjR3hoZEdVZ1lYUWdZMjl0Y0dsc1pTQjBhVzFsTGx4dUx5OWNiaTh2SUVadmNpQndiR0ZwYmlCSVZFMU1JRzFoY210MWNDd2dibTl5YldGc2FYcGhkR2x2YmlCallXNGdZbVVnWTI5dGNHeGxkR1ZzZVNCemEybHdjR1ZrSUdKbFkyRjFjMlVnZEdobFhHNHZMeUJuWlc1bGNtRjBaV1FnY21WdVpHVnlJR1oxYm1OMGFXOXVJR2x6SUdkMVlYSmhiblJsWldRZ2RHOGdjbVYwZFhKdUlFRnljbUY1UEZaT2IyUmxQaTRnVkdobGNtVWdZWEpsWEc0dkx5QjBkMjhnWTJGelpYTWdkMmhsY21VZ1pYaDBjbUVnYm05eWJXRnNhWHBoZEdsdmJpQnBjeUJ1WldWa1pXUTZYRzVjYmk4dklERXVJRmRvWlc0Z2RHaGxJR05vYVd4a2NtVnVJR052Ym5SaGFXNXpJR052YlhCdmJtVnVkSE1nTFNCaVpXTmhkWE5sSUdFZ1puVnVZM1JwYjI1aGJDQmpiMjF3YjI1bGJuUmNiaTh2SUcxaGVTQnlaWFIxY200Z1lXNGdRWEp5WVhrZ2FXNXpkR1ZoWkNCdlppQmhJSE5wYm1kc1pTQnliMjkwTGlCSmJpQjBhR2x6SUdOaGMyVXNJR3AxYzNRZ1lTQnphVzF3YkdWY2JpOHZJRzV2Y20xaGJHbDZZWFJwYjI0Z2FYTWdibVZsWkdWa0lDMGdhV1lnWVc1NUlHTm9hV3hrSUdseklHRnVJRUZ5Y21GNUxDQjNaU0JtYkdGMGRHVnVJSFJvWlNCM2FHOXNaVnh1THk4Z2RHaHBibWNnZDJsMGFDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdVkyOXVZMkYwTGlCSmRDQnBjeUJuZFdGeVlXNTBaV1ZrSUhSdklHSmxJRzl1YkhrZ01TMXNaWFpsYkNCa1pXVndYRzR2THlCaVpXTmhkWE5sSUdaMWJtTjBhVzl1WVd3Z1kyOXRjRzl1Wlc1MGN5QmhiSEpsWVdSNUlHNXZjbTFoYkdsNlpTQjBhR1ZwY2lCdmQyNGdZMmhwYkdSeVpXNHVYRzVtZFc1amRHbHZiaUJ6YVcxd2JHVk9iM0p0WVd4cGVtVkRhR2xzWkhKbGJpQW9ZMmhwYkdSeVpXNHBJSHRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmphR2xzWkhKbGJpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR05vYVd4a2NtVnVXMmxkS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVqYjI1allYUXVZWEJ3Ykhrb1cxMHNJR05vYVd4a2NtVnVLVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z1kyaHBiR1J5Wlc1Y2JuMWNibHh1THk4Z01pNGdWMmhsYmlCMGFHVWdZMmhwYkdSeVpXNGdZMjl1ZEdGcGJuTWdZMjl1YzNSeWRXTjBjeUIwYUdGMElHRnNkMkY1Y3lCblpXNWxjbUYwWldRZ2JtVnpkR1ZrSUVGeWNtRjVjeXhjYmk4dklHVXVaeTRnUEhSbGJYQnNZWFJsUGl3Z1BITnNiM1ErTENCMkxXWnZjaXdnYjNJZ2QyaGxiaUIwYUdVZ1kyaHBiR1J5Wlc0Z2FYTWdjSEp2ZG1sa1pXUWdZbmtnZFhObGNseHVMeThnZDJsMGFDQm9ZVzVrTFhkeWFYUjBaVzRnY21WdVpHVnlJR1oxYm1OMGFXOXVjeUF2SUVwVFdDNGdTVzRnYzNWamFDQmpZWE5sY3lCaElHWjFiR3dnYm05eWJXRnNhWHBoZEdsdmJseHVMeThnYVhNZ2JtVmxaR1ZrSUhSdklHTmhkR1Z5SUhSdklHRnNiQ0J3YjNOemFXSnNaU0IwZVhCbGN5QnZaaUJqYUdsc1pISmxiaUIyWVd4MVpYTXVYRzVtZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVZEYUdsc1pISmxiaUFvWTJocGJHUnlaVzRwSUh0Y2JpQWdjbVYwZFhKdUlHbHpVSEpwYldsMGFYWmxLR05vYVd4a2NtVnVLVnh1SUNBZ0lEOGdXMk55WldGMFpWUmxlSFJXVG05a1pTaGphR2xzWkhKbGJpbGRYRzRnSUNBZ09pQkJjbkpoZVM1cGMwRnljbUY1S0dOb2FXeGtjbVZ1S1Z4dUlDQWdJQ0FnUHlCdWIzSnRZV3hwZW1WQmNuSmhlVU5vYVd4a2NtVnVLR05vYVd4a2NtVnVLVnh1SUNBZ0lDQWdPaUIxYm1SbFptbHVaV1JjYm4xY2JseHVablZ1WTNScGIyNGdhWE5VWlhoMFRtOWtaU0FvYm05a1pTa2dlMXh1SUNCeVpYUjFjbTRnYVhORVpXWW9ibTlrWlNrZ0ppWWdhWE5FWldZb2JtOWtaUzUwWlhoMEtTQW1KaUJwYzBaaGJITmxLRzV2WkdVdWFYTkRiMjF0Wlc1MEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WQmNuSmhlVU5vYVd4a2NtVnVJQ2hqYUdsc1pISmxiaXdnYm1WemRHVmtTVzVrWlhncElIdGNiaUFnZG1GeUlISmxjeUE5SUZ0ZE8xeHVJQ0IyWVhJZ2FTd2dZeXdnYkdGemRFbHVaR1Y0TENCc1lYTjBPMXh1SUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWTJocGJHUnlaVzR1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCaklEMGdZMmhwYkdSeVpXNWJhVjA3WEc0Z0lDQWdhV1lnS0dselZXNWtaV1lvWXlrZ2ZId2dkSGx3Wlc5bUlHTWdQVDA5SUNkaWIyOXNaV0Z1SnlrZ2V5QmpiMjUwYVc1MVpTQjlYRzRnSUNBZ2JHRnpkRWx1WkdWNElEMGdjbVZ6TG14bGJtZDBhQ0F0SURFN1hHNGdJQ0FnYkdGemRDQTlJSEpsYzF0c1lYTjBTVzVrWlhoZE8xeHVJQ0FnSUM4dklDQnVaWE4wWldSY2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hqS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR011YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQmpJRDBnYm05eWJXRnNhWHBsUVhKeVlYbERhR2xzWkhKbGJpaGpMQ0FvS0c1bGMzUmxaRWx1WkdWNElIeDhJQ2NuS1NBcklGd2lYMXdpSUNzZ2FTa3BPMXh1SUNBZ0lDQWdJQ0F2THlCdFpYSm5aU0JoWkdwaFkyVnVkQ0IwWlhoMElHNXZaR1Z6WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMVJsZUhST2IyUmxLR05iTUYwcElDWW1JR2x6VkdWNGRFNXZaR1VvYkdGemRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTmJiR0Z6ZEVsdVpHVjRYU0E5SUdOeVpXRjBaVlJsZUhSV1RtOWtaU2hzWVhOMExuUmxlSFFnS3lBb1kxc3dYU2t1ZEdWNGRDazdYRzRnSUNBZ0lDQWdJQ0FnWXk1emFHbG1kQ2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxjeTV3ZFhOb0xtRndjR3g1S0hKbGN5d2dZeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hwYzFCeWFXMXBkR2wyWlNoaktTa2dlMXh1SUNBZ0lDQWdhV1lnS0dselZHVjRkRTV2WkdVb2JHRnpkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdiV1Z5WjJVZ1lXUnFZV05sYm5RZ2RHVjRkQ0J1YjJSbGMxeHVJQ0FnSUNBZ0lDQXZMeUIwYUdseklHbHpJRzVsWTJWemMyRnllU0JtYjNJZ1UxTlNJR2g1WkhKaGRHbHZiaUJpWldOaGRYTmxJSFJsZUhRZ2JtOWtaWE1nWVhKbFhHNGdJQ0FnSUNBZ0lDOHZJR1Z6YzJWdWRHbGhiR3g1SUcxbGNtZGxaQ0IzYUdWdUlISmxibVJsY21Wa0lIUnZJRWhVVFV3Z2MzUnlhVzVuYzF4dUlDQWdJQ0FnSUNCeVpYTmJiR0Z6ZEVsdVpHVjRYU0E5SUdOeVpXRjBaVlJsZUhSV1RtOWtaU2hzWVhOMExuUmxlSFFnS3lCaktUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZeUFoUFQwZ0p5Y3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1kyOXVkbVZ5ZENCd2NtbHRhWFJwZG1VZ2RHOGdkbTV2WkdWY2JpQWdJQ0FnSUNBZ2NtVnpMbkIxYzJnb1kzSmxZWFJsVkdWNGRGWk9iMlJsS0dNcEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpWR1Y0ZEU1dlpHVW9ZeWtnSmlZZ2FYTlVaWGgwVG05a1pTaHNZWE4wS1NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ0WlhKblpTQmhaR3BoWTJWdWRDQjBaWGgwSUc1dlpHVnpYRzRnSUNBZ0lDQWdJSEpsYzF0c1lYTjBTVzVrWlhoZElEMGdZM0psWVhSbFZHVjRkRlpPYjJSbEtHeGhjM1F1ZEdWNGRDQXJJR011ZEdWNGRDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJrWldaaGRXeDBJR3RsZVNCbWIzSWdibVZ6ZEdWa0lHRnljbUY1SUdOb2FXeGtjbVZ1SUNoc2FXdGxiSGtnWjJWdVpYSmhkR1ZrSUdKNUlIWXRabTl5S1Z4dUlDQWdJQ0FnSUNCcFppQW9hWE5VY25WbEtHTm9hV3hrY21WdUxsOXBjMVpNYVhOMEtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUdselJHVm1LR011ZEdGbktTQW1KbHh1SUNBZ0lDQWdJQ0FnSUdselZXNWtaV1lvWXk1clpYa3BJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ2FYTkVaV1lvYm1WemRHVmtTVzVrWlhncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWXk1clpYa2dQU0JjSWw5ZmRteHBjM1JjSWlBcklHNWxjM1JsWkVsdVpHVjRJQ3NnWENKZlhDSWdLeUJwSUNzZ1hDSmZYMXdpTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxjeTV3ZFhOb0tHTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQnBibWwwVUhKdmRtbGtaU0FvZG0wcElIdGNiaUFnZG1GeUlIQnliM1pwWkdVZ1BTQjJiUzRrYjNCMGFXOXVjeTV3Y205MmFXUmxPMXh1SUNCcFppQW9jSEp2ZG1sa1pTa2dlMXh1SUNBZ0lIWnRMbDl3Y205MmFXUmxaQ0E5SUhSNWNHVnZaaUJ3Y205MmFXUmxJRDA5UFNBblpuVnVZM1JwYjI0blhHNGdJQ0FnSUNBL0lIQnliM1pwWkdVdVkyRnNiQ2gyYlNsY2JpQWdJQ0FnSURvZ2NISnZkbWxrWlR0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBibWwwU1c1cVpXTjBhVzl1Y3lBb2RtMHBJSHRjYmlBZ2RtRnlJSEpsYzNWc2RDQTlJSEpsYzI5c2RtVkpibXBsWTNRb2RtMHVKRzl3ZEdsdmJuTXVhVzVxWldOMExDQjJiU2s3WEc0Z0lHbG1JQ2h5WlhOMWJIUXBJSHRjYmlBZ0lDQjBiMmRuYkdWUFluTmxjblpwYm1jb1ptRnNjMlVwTzF4dUlDQWdJRTlpYW1WamRDNXJaWGx6S0hKbGMzVnNkQ2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYTJWNUtTQjdYRzRnSUNBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQmtaV1pwYm1WU1pXRmpkR2wyWlNRa01TaDJiU3dnYTJWNUxDQnlaWE4xYkhSYmEyVjVYU3dnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRoY200b1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSWtGMmIybGtJRzExZEdGMGFXNW5JR0Z1SUdsdWFtVmpkR1ZrSUhaaGJIVmxJR1JwY21WamRHeDVJSE5wYm1ObElIUm9aU0JqYUdGdVoyVnpJSGRwYkd3Z1ltVWdYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p2ZG1WeWQzSnBkSFJsYmlCM2FHVnVaWFpsY2lCMGFHVWdjSEp2ZG1sa1pXUWdZMjl0Y0c5dVpXNTBJSEpsTFhKbGJtUmxjbk11SUZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWFXNXFaV04wYVc5dUlHSmxhVzVuSUcxMWRHRjBaV1E2SUZ4Y1hDSmNJaUFySUd0bGVTQXJJRndpWEZ4Y0lsd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtMWNiaUFnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCMGIyZG5iR1ZQWW5ObGNuWnBibWNvZEhKMVpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WemIyeDJaVWx1YW1WamRDQW9hVzVxWldOMExDQjJiU2tnZTF4dUlDQnBaaUFvYVc1cVpXTjBLU0I3WEc0Z0lDQWdMeThnYVc1cVpXTjBJR2x6SURwaGJua2dZbVZqWVhWelpTQm1iRzkzSUdseklHNXZkQ0J6YldGeWRDQmxibTkxWjJnZ2RHOGdabWxuZFhKbElHOTFkQ0JqWVdOb1pXUmNiaUFnSUNCMllYSWdjbVZ6ZFd4MElEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ0lDQjJZWElnYTJWNWN5QTlJR2hoYzFONWJXSnZiRnh1SUNBZ0lDQWdQeUJTWldac1pXTjBMbTkzYmt0bGVYTW9hVzVxWldOMEtWeHVJQ0FnSUNBZ09pQlBZbXBsWTNRdWEyVjVjeWhwYm1wbFkzUXBPMXh1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JyWlhsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2EyVjVJRDBnYTJWNWMxdHBYVHRjYmlBZ0lDQWdJQzh2SUNNMk5UYzBJR2x1SUdOaGMyVWdkR2hsSUdsdWFtVmpkQ0J2WW1wbFkzUWdhWE1nYjJKelpYSjJaV1F1TGk1Y2JpQWdJQ0FnSUdsbUlDaHJaWGtnUFQwOUlDZGZYMjlpWDE4bktTQjdJR052Ym5ScGJuVmxJSDFjYmlBZ0lDQWdJSFpoY2lCd2NtOTJhV1JsUzJWNUlEMGdhVzVxWldOMFcydGxlVjB1Wm5KdmJUdGNiaUFnSUNBZ0lIWmhjaUJ6YjNWeVkyVWdQU0IyYlR0Y2JpQWdJQ0FnSUhkb2FXeGxJQ2h6YjNWeVkyVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITnZkWEpqWlM1ZmNISnZkbWxrWldRZ0ppWWdhR0Z6VDNkdUtITnZkWEpqWlM1ZmNISnZkbWxrWldRc0lIQnliM1pwWkdWTFpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpkV3gwVzJ0bGVWMGdQU0J6YjNWeVkyVXVYM0J5YjNacFpHVmtXM0J5YjNacFpHVkxaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2MyOTFjbU5sSUQwZ2MyOTFjbU5sTGlSd1lYSmxiblE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb0lYTnZkWEpqWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSjJSbFptRjFiSFFuSUdsdUlHbHVhbVZqZEZ0clpYbGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5YjNacFpHVkVaV1poZFd4MElEMGdhVzVxWldOMFcydGxlVjB1WkdWbVlYVnNkRHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJiYTJWNVhTQTlJSFI1Y0dWdlppQndjbTkyYVdSbFJHVm1ZWFZzZENBOVBUMGdKMloxYm1OMGFXOXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ1B5QndjbTkyYVdSbFJHVm1ZWFZzZEM1allXeHNLSFp0S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdPaUJ3Y205MmFXUmxSR1ZtWVhWc2REdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0IzWVhKdUtDaGNJa2x1YW1WamRHbHZiaUJjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENJZ2JtOTBJR1p2ZFc1a1hDSXBMQ0IyYlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2RGeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVjYmx4dUx5b3FYRzRnS2lCU2RXNTBhVzFsSUdobGJIQmxjaUJtYjNJZ2NtVnpiMngyYVc1bklISmhkeUJqYUdsc1pISmxiaUJXVG05a1pYTWdhVzUwYnlCaElITnNiM1FnYjJKcVpXTjBMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnlaWE52YkhabFUyeHZkSE1nS0Z4dUlDQmphR2xzWkhKbGJpeGNiaUFnWTI5dWRHVjRkRnh1S1NCN1hHNGdJR2xtSUNnaFkyaHBiR1J5Wlc0Z2ZId2dJV05vYVd4a2NtVnVMbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCN2ZWeHVJQ0I5WEc0Z0lIWmhjaUJ6Ykc5MGN5QTlJSHQ5TzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR05vYVd4a2NtVnVMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCamFHbHNaQ0E5SUdOb2FXeGtjbVZ1VzJsZE8xeHVJQ0FnSUhaaGNpQmtZWFJoSUQwZ1kyaHBiR1F1WkdGMFlUdGNiaUFnSUNBdkx5QnlaVzF2ZG1VZ2MyeHZkQ0JoZEhSeWFXSjFkR1VnYVdZZ2RHaGxJRzV2WkdVZ2FYTWdjbVZ6YjJ4MlpXUWdZWE1nWVNCV2RXVWdjMnh2ZENCdWIyUmxYRzRnSUNBZ2FXWWdLR1JoZEdFZ0ppWWdaR0YwWVM1aGRIUnljeUFtSmlCa1lYUmhMbUYwZEhKekxuTnNiM1FwSUh0Y2JpQWdJQ0FnSUdSbGJHVjBaU0JrWVhSaExtRjBkSEp6TG5Oc2IzUTdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHNWhiV1ZrSUhOc2IzUnpJSE5vYjNWc1pDQnZibXg1SUdKbElISmxjM0JsWTNSbFpDQnBaaUIwYUdVZ2RtNXZaR1VnZDJGeklISmxibVJsY21Wa0lHbHVJSFJvWlZ4dUlDQWdJQzh2SUhOaGJXVWdZMjl1ZEdWNGRDNWNiaUFnSUNCcFppQW9LR05vYVd4a0xtTnZiblJsZUhRZ1BUMDlJR052Ym5SbGVIUWdmSHdnWTJocGJHUXVabTVEYjI1MFpYaDBJRDA5UFNCamIyNTBaWGgwS1NBbUpseHVJQ0FnSUNBZ1pHRjBZU0FtSmlCa1lYUmhMbk5zYjNRZ0lUMGdiblZzYkZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHNWhiV1VnUFNCa1lYUmhMbk5zYjNRN1hHNGdJQ0FnSUNCMllYSWdjMnh2ZENBOUlDaHpiRzkwYzF0dVlXMWxYU0I4ZkNBb2MyeHZkSE5iYm1GdFpWMGdQU0JiWFNrcE8xeHVJQ0FnSUNBZ2FXWWdLR05vYVd4a0xuUmhaeUE5UFQwZ0ozUmxiWEJzWVhSbEp5a2dlMXh1SUNBZ0lDQWdJQ0J6Ykc5MExuQjFjMmd1WVhCd2JIa29jMnh2ZEN3Z1kyaHBiR1F1WTJocGJHUnlaVzRnZkh3Z1cxMHBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjMnh2ZEM1d2RYTm9LR05vYVd4a0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnS0hOc2IzUnpMbVJsWm1GMWJIUWdmSHdnS0hOc2IzUnpMbVJsWm1GMWJIUWdQU0JiWFNrcExuQjFjMmdvWTJocGJHUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQXZMeUJwWjI1dmNtVWdjMnh2ZEhNZ2RHaGhkQ0JqYjI1MFlXbHVjeUJ2Ym14NUlIZG9hWFJsYzNCaFkyVmNiaUFnWm05eUlDaDJZWElnYm1GdFpTUXhJR2x1SUhOc2IzUnpLU0I3WEc0Z0lDQWdhV1lnS0hOc2IzUnpXMjVoYldVa01WMHVaWFpsY25rb2FYTlhhR2wwWlhOd1lXTmxLU2tnZTF4dUlDQWdJQ0FnWkdWc1pYUmxJSE5zYjNSelcyNWhiV1VrTVYwN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ6Ykc5MGMxeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMxZG9hWFJsYzNCaFkyVWdLRzV2WkdVcElIdGNiaUFnY21WMGRYSnVJQ2h1YjJSbExtbHpRMjl0YldWdWRDQW1KaUFoYm05a1pTNWhjM2x1WTBaaFkzUnZjbmtwSUh4OElHNXZaR1V1ZEdWNGRDQTlQVDBnSnlBblhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WVFkyOXdaV1JUYkc5MGN5QW9YRzRnSUhOc2IzUnpMRnh1SUNCdWIzSnRZV3hUYkc5MGN5eGNiaUFnY0hKbGRsTnNiM1J6WEc0cElIdGNiaUFnZG1GeUlISmxjenRjYmlBZ2RtRnlJR2hoYzA1dmNtMWhiRk5zYjNSeklEMGdUMkpxWldOMExtdGxlWE1vYm05eWJXRnNVMnh2ZEhNcExteGxibWQwYUNBK0lEQTdYRzRnSUhaaGNpQnBjMU4wWVdKc1pTQTlJSE5zYjNSeklEOGdJU0Z6Ykc5MGN5NGtjM1JoWW14bElEb2dJV2hoYzA1dmNtMWhiRk5zYjNSek8xeHVJQ0IyWVhJZ2EyVjVJRDBnYzJ4dmRITWdKaVlnYzJ4dmRITXVKR3RsZVR0Y2JpQWdhV1lnS0NGemJHOTBjeWtnZTF4dUlDQWdJSEpsY3lBOUlIdDlPMXh1SUNCOUlHVnNjMlVnYVdZZ0tITnNiM1J6TGw5dWIzSnRZV3hwZW1Wa0tTQjdYRzRnSUNBZ0x5OGdabUZ6ZENCd1lYUm9JREU2SUdOb2FXeGtJR052YlhCdmJtVnVkQ0J5WlMxeVpXNWtaWElnYjI1c2VTd2djR0Z5Wlc1MElHUnBaQ0J1YjNRZ1kyaGhibWRsWEc0Z0lDQWdjbVYwZFhKdUlITnNiM1J6TGw5dWIzSnRZV3hwZW1Wa1hHNGdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdhWE5UZEdGaWJHVWdKaVpjYmlBZ0lDQndjbVYyVTJ4dmRITWdKaVpjYmlBZ0lDQndjbVYyVTJ4dmRITWdJVDA5SUdWdGNIUjVUMkpxWldOMElDWW1YRzRnSUNBZ2EyVjVJRDA5UFNCd2NtVjJVMnh2ZEhNdUpHdGxlU0FtSmx4dUlDQWdJQ0ZvWVhOT2IzSnRZV3hUYkc5MGN5QW1KbHh1SUNBZ0lDRndjbVYyVTJ4dmRITXVKR2hoYzA1dmNtMWhiRnh1SUNBcElIdGNiaUFnSUNBdkx5Qm1ZWE4wSUhCaGRHZ2dNam9nYzNSaFlteGxJSE5qYjNCbFpDQnpiRzkwY3lCM0x5QnVieUJ1YjNKdFlXd2djMnh2ZEhNZ2RHOGdjSEp2ZUhrc1hHNGdJQ0FnTHk4Z2IyNXNlU0J1WldWa0lIUnZJRzV2Y20xaGJHbDZaU0J2Ym1ObFhHNGdJQ0FnY21WMGRYSnVJSEJ5WlhaVGJHOTBjMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsY3lBOUlIdDlPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHdGxlU1F4SUdsdUlITnNiM1J6S1NCN1hHNGdJQ0FnSUNCcFppQW9jMnh2ZEhOYmEyVjVKREZkSUNZbUlHdGxlU1F4V3pCZElDRTlQU0FuSkNjcElIdGNiaUFnSUNBZ0lDQWdjbVZ6VzJ0bGVTUXhYU0E5SUc1dmNtMWhiR2w2WlZOamIzQmxaRk5zYjNRb2JtOXliV0ZzVTJ4dmRITXNJR3RsZVNReExDQnpiRzkwYzF0clpYa2tNVjBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0F2THlCbGVIQnZjMlVnYm05eWJXRnNJSE5zYjNSeklHOXVJSE5qYjNCbFpGTnNiM1J6WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU1F5SUdsdUlHNXZjbTFoYkZOc2IzUnpLU0I3WEc0Z0lDQWdhV1lnS0NFb2EyVjVKRElnYVc0Z2NtVnpLU2tnZTF4dUlDQWdJQ0FnY21WelcydGxlU1F5WFNBOUlIQnliM2g1VG05eWJXRnNVMnh2ZENodWIzSnRZV3hUYkc5MGN5d2dhMlY1SkRJcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNBdkx5QmhkbTl5YVdGNklITmxaVzF6SUhSdklHMXZZMnNnWVNCdWIyNHRaWGgwWlc1emFXSnNaU0FrYzJOdmNHVmtVMnh2ZEhNZ2IySnFaV04wWEc0Z0lDOHZJR0Z1WkNCM2FHVnVJSFJvWVhRZ2FYTWdjR0Z6YzJWa0lHUnZkMjRnZEdocGN5QjNiM1ZzWkNCallYVnpaU0JoYmlCbGNuSnZjbHh1SUNCcFppQW9jMnh2ZEhNZ0ppWWdUMkpxWldOMExtbHpSWGgwWlc1emFXSnNaU2h6Ykc5MGN5a3BJSHRjYmlBZ0lDQW9jMnh2ZEhNcExsOXViM0p0WVd4cGVtVmtJRDBnY21Wek8xeHVJQ0I5WEc0Z0lHUmxaaWh5WlhNc0lDY2tjM1JoWW14bEp5d2dhWE5UZEdGaWJHVXBPMXh1SUNCa1pXWW9jbVZ6TENBbkpHdGxlU2NzSUd0bGVTazdYRzRnSUdSbFppaHlaWE1zSUNja2FHRnpUbTl5YldGc0p5d2dhR0Z6VG05eWJXRnNVMnh2ZEhNcE8xeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNibVoxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVk5qYjNCbFpGTnNiM1FvYm05eWJXRnNVMnh2ZEhNc0lHdGxlU3dnWm00cElIdGNiaUFnZG1GeUlHNXZjbTFoYkdsNlpXUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZG1GeUlISmxjeUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUHlCbWJpNWhjSEJzZVNodWRXeHNMQ0JoY21kMWJXVnVkSE1wSURvZ1ptNG9lMzBwTzF4dUlDQWdJSEpsY3lBOUlISmxjeUFtSmlCMGVYQmxiMllnY21WeklEMDlQU0FuYjJKcVpXTjBKeUFtSmlBaFFYSnlZWGt1YVhOQmNuSmhlU2h5WlhNcFhHNGdJQ0FnSUNBL0lGdHlaWE5kSUM4dklITnBibWRzWlNCMmJtOWtaVnh1SUNBZ0lDQWdPaUJ1YjNKdFlXeHBlbVZEYUdsc1pISmxiaWh5WlhNcE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhNZ0ppWWdLRnh1SUNBZ0lDQWdjbVZ6TG14bGJtZDBhQ0E5UFQwZ01DQjhmRnh1SUNBZ0lDQWdLSEpsY3k1c1pXNW5kR2dnUFQwOUlERWdKaVlnY21Weld6QmRMbWx6UTI5dGJXVnVkQ2tnTHk4Z0l6azJOVGhjYmlBZ0lDQXBJRDhnZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0E2SUhKbGMxeHVJQ0I5TzF4dUlDQXZMeUIwYUdseklHbHpJR0VnYzJ4dmRDQjFjMmx1WnlCMGFHVWdibVYzSUhZdGMyeHZkQ0J6ZVc1MFlYZ2dkMmwwYUc5MWRDQnpZMjl3WlM0Z1lXeDBhRzkxWjJnZ2FYUWdhWE5jYmlBZ0x5OGdZMjl0Y0dsc1pXUWdZWE1nWVNCelkyOXdaV1FnYzJ4dmRDd2djbVZ1WkdWeUlHWnVJSFZ6WlhKeklIZHZkV3hrSUdWNGNHVmpkQ0JwZENCMGJ5QmlaU0J3Y21WelpXNTBYRzRnSUM4dklHOXVJSFJvYVhNdUpITnNiM1J6SUdKbFkyRjFjMlVnZEdobElIVnpZV2RsSUdseklITmxiV0Z1ZEdsallXeHNlU0JoSUc1dmNtMWhiQ0J6Ykc5MExseHVJQ0JwWmlBb1ptNHVjSEp2ZUhrcElIdGNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ibTl5YldGc1UyeHZkSE1zSUd0bGVTd2dlMXh1SUNBZ0lDQWdaMlYwT2lCdWIzSnRZV3hwZW1Wa0xGeHVJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ1YjNKdFlXeHBlbVZrWEc1OVhHNWNibVoxYm1OMGFXOXVJSEJ5YjNoNVRtOXliV0ZzVTJ4dmRDaHpiRzkwY3l3Z2EyVjVLU0I3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQnpiRzkwYzF0clpYbGRPeUI5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzR2S2lwY2JpQXFJRkoxYm5ScGJXVWdhR1ZzY0dWeUlHWnZjaUJ5Wlc1a1pYSnBibWNnZGkxbWIzSWdiR2x6ZEhNdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGJtUmxja3hwYzNRZ0tGeHVJQ0IyWVd3c1hHNGdJSEpsYm1SbGNseHVLU0I3WEc0Z0lIWmhjaUJ5WlhRc0lHa3NJR3dzSUd0bGVYTXNJR3RsZVR0Y2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29kbUZzS1NCOGZDQjBlWEJsYjJZZ2RtRnNJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUhKbGRDQTlJRzVsZHlCQmNuSmhlU2gyWVd3dWJHVnVaM1JvS1R0Y2JpQWdJQ0JtYjNJZ0tHa2dQU0F3TENCc0lEMGdkbUZzTG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2NtVjBXMmxkSUQwZ2NtVnVaR1Z5S0haaGJGdHBYU3dnYVNrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQjJZV3dnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ2NtVjBJRDBnYm1WM0lFRnljbUY1S0haaGJDazdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUhaaGJEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCeVpYUmJhVjBnUFNCeVpXNWtaWElvYVNBcklERXNJR2twTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDaHBjMDlpYW1WamRDaDJZV3dwS1NCN1hHNGdJQ0FnYVdZZ0tHaGhjMU41YldKdmJDQW1KaUIyWVd4YlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNrZ2UxeHVJQ0FnSUNBZ2NtVjBJRDBnVzEwN1hHNGdJQ0FnSUNCMllYSWdhWFJsY21GMGIzSWdQU0IyWVd4YlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNncE8xeHVJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJR2wwWlhKaGRHOXlMbTVsZUhRb0tUdGNiaUFnSUNBZ0lIZG9hV3hsSUNnaGNtVnpkV3gwTG1SdmJtVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMExuQjFjMmdvY21WdVpHVnlLSEpsYzNWc2RDNTJZV3gxWlN3Z2NtVjBMbXhsYm1kMGFDa3BPMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JwZEdWeVlYUnZjaTV1WlhoMEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loMllXd3BPMXh1SUNBZ0lDQWdjbVYwSUQwZ2JtVjNJRUZ5Y21GNUtHdGxlWE11YkdWdVozUm9LVHRjYmlBZ0lDQWdJR1p2Y2lBb2FTQTlJREFzSUd3Z1BTQnJaWGx6TG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnJaWGtnUFNCclpYbHpXMmxkTzF4dUlDQWdJQ0FnSUNCeVpYUmJhVjBnUFNCeVpXNWtaWElvZG1Gc1cydGxlVjBzSUd0bGVTd2dhU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNGdJR2xtSUNnaGFYTkVaV1lvY21WMEtTa2dlMXh1SUNBZ0lISmxkQ0E5SUZ0ZE8xeHVJQ0I5WEc0Z0lDaHlaWFFwTGw5cGMxWk1hWE4wSUQwZ2RISjFaVHRjYmlBZ2NtVjBkWEp1SUhKbGRGeHVmVnh1WEc0dktpQWdLaTljYmx4dUx5b3FYRzRnS2lCU2RXNTBhVzFsSUdobGJIQmxjaUJtYjNJZ2NtVnVaR1Z5YVc1bklEeHpiRzkwUGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ5Wlc1a1pYSlRiRzkwSUNoY2JpQWdibUZ0WlN4Y2JpQWdabUZzYkdKaFkyc3NYRzRnSUhCeWIzQnpMRnh1SUNCaWFXNWtUMkpxWldOMFhHNHBJSHRjYmlBZ2RtRnlJSE5qYjNCbFpGTnNiM1JHYmlBOUlIUm9hWE11SkhOamIzQmxaRk5zYjNSelcyNWhiV1ZkTzF4dUlDQjJZWElnYm05a1pYTTdYRzRnSUdsbUlDaHpZMjl3WldSVGJHOTBSbTRwSUhzZ0x5OGdjMk52Y0dWa0lITnNiM1JjYmlBZ0lDQndjbTl3Y3lBOUlIQnliM0J6SUh4OElIdDlPMXh1SUNBZ0lHbG1JQ2hpYVc1a1QySnFaV04wS1NCN1hHNGdJQ0FnSUNCcFppQW9JV2x6VDJKcVpXTjBLR0pwYm1SUFltcGxZM1FwS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNBZ0ozTnNiM1FnZGkxaWFXNWtJSGRwZEdodmRYUWdZWEpuZFcxbGJuUWdaWGh3WldOMGN5QmhiaUJQWW1wbFkzUW5MRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEJ5YjNCeklEMGdaWGgwWlc1a0tHVjRkR1Z1WkNoN2ZTd2dZbWx1WkU5aWFtVmpkQ2tzSUhCeWIzQnpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2JtOWtaWE1nUFNCelkyOXdaV1JUYkc5MFJtNG9jSEp2Y0hNcElIeDhJR1poYkd4aVlXTnJPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzV2WkdWeklEMGdkR2hwY3k0a2MyeHZkSE5iYm1GdFpWMGdmSHdnWm1Gc2JHSmhZMnM3WEc0Z0lIMWNibHh1SUNCMllYSWdkR0Z5WjJWMElEMGdjSEp2Y0hNZ0ppWWdjSEp2Y0hNdWMyeHZkRHRjYmlBZ2FXWWdLSFJoY21kbGRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMaVJqY21WaGRHVkZiR1Z0Wlc1MEtDZDBaVzF3YkdGMFpTY3NJSHNnYzJ4dmREb2dkR0Z5WjJWMElIMHNJRzV2WkdWektWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCdWIyUmxjMXh1SUNCOVhHNTlYRzVjYmk4cUlDQXFMMXh1WEc0dktpcGNiaUFxSUZKMWJuUnBiV1VnYUdWc2NHVnlJR1p2Y2lCeVpYTnZiSFpwYm1jZ1ptbHNkR1Z5YzF4dUlDb3ZYRzVtZFc1amRHbHZiaUJ5WlhOdmJIWmxSbWxzZEdWeUlDaHBaQ2tnZTF4dUlDQnlaWFIxY200Z2NtVnpiMngyWlVGemMyVjBLSFJvYVhNdUpHOXdkR2x2Ym5Nc0lDZG1hV3gwWlhKekp5d2dhV1FzSUhSeWRXVXBJSHg4SUdsa1pXNTBhWFI1WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYzB0bGVVNXZkRTFoZEdOb0lDaGxlSEJsWTNRc0lHRmpkSFZoYkNrZ2UxeHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hsZUhCbFkzUXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHVjRjR1ZqZEM1cGJtUmxlRTltS0dGamRIVmhiQ2tnUFQwOUlDMHhYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHVjRjR1ZqZENBaFBUMGdZV04wZFdGc1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQlNkVzUwYVcxbElHaGxiSEJsY2lCbWIzSWdZMmhsWTJ0cGJtY2dhMlY1UTI5a1pYTWdabkp2YlNCamIyNW1hV2N1WEc0Z0tpQmxlSEJ2YzJWa0lHRnpJRloxWlM1d2NtOTBiM1I1Y0dVdVgydGNiaUFxSUhCaGMzTnBibWNnYVc0Z1pYWmxiblJMWlhsT1lXMWxJR0Z6SUd4aGMzUWdZWEpuZFcxbGJuUWdjMlZ3WVhKaGRHVnNlU0JtYjNJZ1ltRmphM2RoY21SeklHTnZiWEJoZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYUdWamEwdGxlVU52WkdWeklDaGNiaUFnWlhabGJuUkxaWGxEYjJSbExGeHVJQ0JyWlhrc1hHNGdJR0oxYVd4MFNXNUxaWGxEYjJSbExGeHVJQ0JsZG1WdWRFdGxlVTVoYldVc1hHNGdJR0oxYVd4MFNXNUxaWGxPWVcxbFhHNHBJSHRjYmlBZ2RtRnlJRzFoY0hCbFpFdGxlVU52WkdVZ1BTQmpiMjVtYVdjdWEyVjVRMjlrWlhOYmEyVjVYU0I4ZkNCaWRXbHNkRWx1UzJWNVEyOWtaVHRjYmlBZ2FXWWdLR0oxYVd4MFNXNUxaWGxPWVcxbElDWW1JR1YyWlc1MFMyVjVUbUZ0WlNBbUppQWhZMjl1Wm1sbkxtdGxlVU52WkdWelcydGxlVjBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdhWE5MWlhsT2IzUk5ZWFJqYUNoaWRXbHNkRWx1UzJWNVRtRnRaU3dnWlhabGJuUkxaWGxPWVcxbEtWeHVJQ0I5SUdWc2MyVWdhV1lnS0cxaGNIQmxaRXRsZVVOdlpHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2FYTkxaWGxPYjNSTllYUmphQ2h0WVhCd1pXUkxaWGxEYjJSbExDQmxkbVZ1ZEV0bGVVTnZaR1VwWEc0Z0lIMGdaV3h6WlNCcFppQW9aWFpsYm5STFpYbE9ZVzFsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR2g1Y0dobGJtRjBaU2hsZG1WdWRFdGxlVTVoYldVcElDRTlQU0JyWlhsY2JpQWdmVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVMeW9xWEc0Z0tpQlNkVzUwYVcxbElHaGxiSEJsY2lCbWIzSWdiV1Z5WjJsdVp5QjJMV0pwYm1ROVhDSnZZbXBsWTNSY0lpQnBiblJ2SUdFZ1ZrNXZaR1VuY3lCa1lYUmhMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlhVzVrVDJKcVpXTjBVSEp2Y0hNZ0tGeHVJQ0JrWVhSaExGeHVJQ0IwWVdjc1hHNGdJSFpoYkhWbExGeHVJQ0JoYzFCeWIzQXNYRzRnSUdselUzbHVZMXh1S1NCN1hHNGdJR2xtSUNoMllXeDFaU2tnZTF4dUlDQWdJR2xtSUNnaGFYTlBZbXBsWTNRb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FuZGkxaWFXNWtJSGRwZEdodmRYUWdZWEpuZFcxbGJuUWdaWGh3WldOMGN5QmhiaUJQWW1wbFkzUWdiM0lnUVhKeVlYa2dkbUZzZFdVbkxGeHVJQ0FnSUNBZ0lDQjBhR2x6WEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQjBiMDlpYW1WamRDaDJZV3gxWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMllYSWdhR0Z6YUR0Y2JpQWdJQ0FnSUhaaGNpQnNiMjl3SUQwZ1puVnVZM1JwYjI0Z0tDQnJaWGtnS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNCclpYa2dQVDA5SUNkamJHRnpjeWNnZkh4Y2JpQWdJQ0FnSUNBZ0lDQnJaWGtnUFQwOUlDZHpkSGxzWlNjZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0JwYzFKbGMyVnlkbVZrUVhSMGNtbGlkWFJsS0d0bGVTbGNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FHRnphQ0E5SUdSaGRHRTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlIUjVjR1VnUFNCa1lYUmhMbUYwZEhKeklDWW1JR1JoZEdFdVlYUjBjbk11ZEhsd1pUdGNiaUFnSUNBZ0lDQWdJQ0JvWVhOb0lEMGdZWE5RY205d0lIeDhJR052Ym1acFp5NXRkWE4wVlhObFVISnZjQ2gwWVdjc0lIUjVjR1VzSUd0bGVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z1pHRjBZUzVrYjIxUWNtOXdjeUI4ZkNBb1pHRjBZUzVrYjIxUWNtOXdjeUE5SUh0OUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCa1lYUmhMbUYwZEhKeklIeDhJQ2hrWVhSaExtRjBkSEp6SUQwZ2UzMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQmpZVzFsYkdsNlpXUkxaWGtnUFNCallXMWxiR2w2WlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FIbHdhR1Z1WVhSbFpFdGxlU0E5SUdoNWNHaGxibUYwWlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTaGpZVzFsYkdsNlpXUkxaWGtnYVc0Z2FHRnphQ2tnSmlZZ0lTaG9lWEJvWlc1aGRHVmtTMlY1SUdsdUlHaGhjMmdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhR0Z6YUZ0clpYbGRJRDBnZG1Gc2RXVmJhMlY1WFR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxTjVibU1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdmJpQTlJR1JoZEdFdWIyNGdmSHdnS0dSaGRHRXViMjRnUFNCN2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJsc29YQ0oxY0dSaGRHVTZYQ0lnS3lCclpYa3BYU0E5SUdaMWJtTjBhVzl1SUNna1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVmJhMlY1WFNBOUlDUmxkbVZ1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdkbUZzZFdVcElHeHZiM0FvSUd0bGVTQXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z1pHRjBZVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVMeW9xWEc0Z0tpQlNkVzUwYVcxbElHaGxiSEJsY2lCbWIzSWdjbVZ1WkdWeWFXNW5JSE4wWVhScFl5QjBjbVZsY3k1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnY21WdVpHVnlVM1JoZEdsaklDaGNiaUFnYVc1a1pYZ3NYRzRnSUdselNXNUdiM0pjYmlrZ2UxeHVJQ0IyWVhJZ1kyRmphR1ZrSUQwZ2RHaHBjeTVmYzNSaGRHbGpWSEpsWlhNZ2ZId2dLSFJvYVhNdVgzTjBZWFJwWTFSeVpXVnpJRDBnVzEwcE8xeHVJQ0IyWVhJZ2RISmxaU0E5SUdOaFkyaGxaRnRwYm1SbGVGMDdYRzRnSUM4dklHbG1JR2hoY3lCaGJISmxZV1I1TFhKbGJtUmxjbVZrSUhOMFlYUnBZeUIwY21WbElHRnVaQ0J1YjNRZ2FXNXphV1JsSUhZdFptOXlMRnh1SUNBdkx5QjNaU0JqWVc0Z2NtVjFjMlVnZEdobElITmhiV1VnZEhKbFpTNWNiaUFnYVdZZ0tIUnlaV1VnSmlZZ0lXbHpTVzVHYjNJcElIdGNiaUFnSUNCeVpYUjFjbTRnZEhKbFpWeHVJQ0I5WEc0Z0lDOHZJRzkwYUdWeWQybHpaU3dnY21WdVpHVnlJR0VnWm5KbGMyZ2dkSEpsWlM1Y2JpQWdkSEpsWlNBOUlHTmhZMmhsWkZ0cGJtUmxlRjBnUFNCMGFHbHpMaVJ2Y0hScGIyNXpMbk4wWVhScFkxSmxibVJsY2tadWMxdHBibVJsZUYwdVkyRnNiQ2hjYmlBZ0lDQjBhR2x6TGw5eVpXNWtaWEpRY205NGVTeGNiaUFnSUNCdWRXeHNMRnh1SUNBZ0lIUm9hWE1nTHk4Z1ptOXlJSEpsYm1SbGNpQm1ibk1nWjJWdVpYSmhkR1ZrSUdadmNpQm1kVzVqZEdsdmJtRnNJR052YlhCdmJtVnVkQ0IwWlcxd2JHRjBaWE5jYmlBZ0tUdGNiaUFnYldGeWExTjBZWFJwWXloMGNtVmxMQ0FvWENKZlgzTjBZWFJwWTE5ZlhDSWdLeUJwYm1SbGVDa3NJR1poYkhObEtUdGNiaUFnY21WMGRYSnVJSFJ5WldWY2JuMWNibHh1THlvcVhHNGdLaUJTZFc1MGFXMWxJR2hsYkhCbGNpQm1iM0lnZGkxdmJtTmxMbHh1SUNvZ1JXWm1aV04wYVhabGJIa2dhWFFnYldWaGJuTWdiV0Z5YTJsdVp5QjBhR1VnYm05a1pTQmhjeUJ6ZEdGMGFXTWdkMmwwYUNCaElIVnVhWEYxWlNCclpYa3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlHMWhjbXRQYm1ObElDaGNiaUFnZEhKbFpTeGNiaUFnYVc1a1pYZ3NYRzRnSUd0bGVWeHVLU0I3WEc0Z0lHMWhjbXRUZEdGMGFXTW9kSEpsWlN3Z0tGd2lYMTl2Ym1ObFgxOWNJaUFySUdsdVpHVjRJQ3NnS0d0bGVTQS9JQ2hjSWw5Y0lpQXJJR3RsZVNrZ09pQmNJbHdpS1Nrc0lIUnlkV1VwTzF4dUlDQnlaWFIxY200Z2RISmxaVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnRZWEpyVTNSaGRHbGpJQ2hjYmlBZ2RISmxaU3hjYmlBZ2EyVjVMRnh1SUNCcGMwOXVZMlZjYmlrZ2UxeHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gwY21WbEtTa2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkSEpsWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdhV1lnS0hSeVpXVmJhVjBnSmlZZ2RIbHdaVzltSUhSeVpXVmJhVjBnSVQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJRzFoY210VGRHRjBhV05PYjJSbEtIUnlaV1ZiYVYwc0lDaHJaWGtnS3lCY0lsOWNJaUFySUdrcExDQnBjMDl1WTJVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdFlYSnJVM1JoZEdsalRtOWtaU2gwY21WbExDQnJaWGtzSUdselQyNWpaU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2JXRnlhMU4wWVhScFkwNXZaR1VnS0c1dlpHVXNJR3RsZVN3Z2FYTlBibU5sS1NCN1hHNGdJRzV2WkdVdWFYTlRkR0YwYVdNZ1BTQjBjblZsTzF4dUlDQnViMlJsTG10bGVTQTlJR3RsZVR0Y2JpQWdibTlrWlM1cGMwOXVZMlVnUFNCcGMwOXVZMlU3WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJpYVc1a1QySnFaV04wVEdsemRHVnVaWEp6SUNoa1lYUmhMQ0IyWVd4MVpTa2dlMXh1SUNCcFppQW9kbUZzZFdVcElIdGNiaUFnSUNCcFppQW9JV2x6VUd4aGFXNVBZbXBsWTNRb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FuZGkxdmJpQjNhWFJvYjNWMElHRnlaM1Z0Wlc1MElHVjRjR1ZqZEhNZ1lXNGdUMkpxWldOMElIWmhiSFZsSnl4Y2JpQWdJQ0FnSUNBZ2RHaHBjMXh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtRnlJRzl1SUQwZ1pHRjBZUzV2YmlBOUlHUmhkR0V1YjI0Z1B5QmxlSFJsYm1Rb2UzMHNJR1JoZEdFdWIyNHBJRG9nZTMwN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVjRhWE4wYVc1bklEMGdiMjViYTJWNVhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5MWNuTWdQU0IyWVd4MVpWdHJaWGxkTzF4dUlDQWdJQ0FnSUNCdmJsdHJaWGxkSUQwZ1pYaHBjM1JwYm1jZ1B5QmJYUzVqYjI1allYUW9aWGhwYzNScGJtY3NJRzkxY25NcElEb2diM1Z5Y3p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1JoZEdGY2JuMWNibHh1THlvZ0lDb3ZYRzVjYm1aMWJtTjBhVzl1SUhKbGMyOXNkbVZUWTI5d1pXUlRiRzkwY3lBb1hHNGdJR1p1Y3l3Z0x5OGdjMlZsSUdac2IzY3ZkbTV2WkdWY2JpQWdjbVZ6TEZ4dUlDQXZMeUIwYUdVZ1ptOXNiRzkzYVc1bklHRnlaU0JoWkdSbFpDQnBiaUF5TGpaY2JpQWdhR0Z6UkhsdVlXMXBZMHRsZVhNc1hHNGdJR052Ym5SbGJuUklZWE5vUzJWNVhHNHBJSHRjYmlBZ2NtVnpJRDBnY21WeklIeDhJSHNnSkhOMFlXSnNaVG9nSVdoaGMwUjVibUZ0YVdOTFpYbHpJSDA3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dabTV6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJSE5zYjNRZ1BTQm1ibk5iYVYwN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYzJ4dmRDa3BJSHRjYmlBZ0lDQWdJSEpsYzI5c2RtVlRZMjl3WldSVGJHOTBjeWh6Ykc5MExDQnlaWE1zSUdoaGMwUjVibUZ0YVdOTFpYbHpLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5zYjNRcElIdGNiaUFnSUNBZ0lDOHZJRzFoY210bGNpQm1iM0lnY21WMlpYSnpaU0J3Y205NGVXbHVaeUIyTFhOc2IzUWdkMmwwYUc5MWRDQnpZMjl3WlNCdmJpQjBhR2x6TGlSemJHOTBjMXh1SUNBZ0lDQWdhV1lnS0hOc2IzUXVjSEp2ZUhrcElIdGNiaUFnSUNBZ0lDQWdjMnh2ZEM1bWJpNXdjbTk0ZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhOYmMyeHZkQzVyWlhsZElEMGdjMnh2ZEM1bWJqdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2FXWWdLR052Ym5SbGJuUklZWE5vUzJWNUtTQjdYRzRnSUNBZ0tISmxjeWt1Skd0bGVTQTlJR052Ym5SbGJuUklZWE5vUzJWNU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTmNibjFjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlHSnBibVJFZVc1aGJXbGpTMlY1Y3lBb1ltRnpaVTlpYWl3Z2RtRnNkV1Z6S1NCN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZG1Gc2RXVnpMbXhsYm1kMGFEc2dhU0FyUFNBeUtTQjdYRzRnSUNBZ2RtRnlJR3RsZVNBOUlIWmhiSFZsYzF0cFhUdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHdGxlU0E5UFQwZ0ozTjBjbWx1WnljZ0ppWWdhMlY1S1NCN1hHNGdJQ0FnSUNCaVlYTmxUMkpxVzNaaGJIVmxjMXRwWFYwZ1BTQjJZV3gxWlhOYmFTQXJJREZkTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYTJWNUlDRTlQU0FuSnlBbUppQnJaWGtnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUM4dklHNTFiR3dnYVhNZ1lTQnpjR1ZwWTJGc0lIWmhiSFZsSUdadmNpQmxlSEJzYVdOcGRHeDVJSEpsYlc5MmFXNW5JR0VnWW1sdVpHbHVaMXh1SUNBZ0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ0tGd2lTVzUyWVd4cFpDQjJZV3gxWlNCbWIzSWdaSGx1WVcxcFl5QmthWEpsWTNScGRtVWdZWEpuZFcxbGJuUWdLR1Y0Y0dWamRHVmtJSE4wY21sdVp5QnZjaUJ1ZFd4c0tUb2dYQ0lnS3lCclpYa3BMRnh1SUNBZ0lDQWdJQ0IwYUdselhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnWW1GelpVOWlhbHh1ZlZ4dVhHNHZMeUJvWld4d1pYSWdkRzhnWkhsdVlXMXBZMkZzYkhrZ1lYQndaVzVrSUcxdlpHbG1hV1Z5SUhKMWJuUnBiV1VnYldGeWEyVnljeUIwYnlCbGRtVnVkQ0J1WVcxbGN5NWNiaTh2SUdWdWMzVnlaU0J2Ym14NUlHRndjR1Z1WkNCM2FHVnVJSFpoYkhWbElHbHpJR0ZzY21WaFpIa2djM1J5YVc1bkxDQnZkR2hsY25kcGMyVWdhWFFnZDJsc2JDQmlaU0JqWVhOMFhHNHZMeUIwYnlCemRISnBibWNnWVc1a0lHTmhkWE5sSUhSb1pTQjBlWEJsSUdOb1pXTnJJSFJ2SUcxcGMzTXVYRzVtZFc1amRHbHZiaUJ3Y21Wd1pXNWtUVzlrYVdacFpYSWdLSFpoYkhWbExDQnplVzFpYjJ3cElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKM04wY21sdVp5Y2dQeUJ6ZVcxaWIyd2dLeUIyWVd4MVpTQTZJSFpoYkhWbFhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCcGJuTjBZV3hzVW1WdVpHVnlTR1ZzY0dWeWN5QW9kR0Z5WjJWMEtTQjdYRzRnSUhSaGNtZGxkQzVmYnlBOUlHMWhjbXRQYm1ObE8xeHVJQ0IwWVhKblpYUXVYMjRnUFNCMGIwNTFiV0psY2p0Y2JpQWdkR0Z5WjJWMExsOXpJRDBnZEc5VGRISnBibWM3WEc0Z0lIUmhjbWRsZEM1ZmJDQTlJSEpsYm1SbGNreHBjM1E3WEc0Z0lIUmhjbWRsZEM1ZmRDQTlJSEpsYm1SbGNsTnNiM1E3WEc0Z0lIUmhjbWRsZEM1ZmNTQTlJR3h2YjNObFJYRjFZV3c3WEc0Z0lIUmhjbWRsZEM1ZmFTQTlJR3h2YjNObFNXNWtaWGhQWmp0Y2JpQWdkR0Z5WjJWMExsOXRJRDBnY21WdVpHVnlVM1JoZEdsak8xeHVJQ0IwWVhKblpYUXVYMllnUFNCeVpYTnZiSFpsUm1sc2RHVnlPMXh1SUNCMFlYSm5aWFF1WDJzZ1BTQmphR1ZqYTB0bGVVTnZaR1Z6TzF4dUlDQjBZWEpuWlhRdVgySWdQU0JpYVc1a1QySnFaV04wVUhKdmNITTdYRzRnSUhSaGNtZGxkQzVmZGlBOUlHTnlaV0YwWlZSbGVIUldUbTlrWlR0Y2JpQWdkR0Z5WjJWMExsOWxJRDBnWTNKbFlYUmxSVzF3ZEhsV1RtOWtaVHRjYmlBZ2RHRnlaMlYwTGw5MUlEMGdjbVZ6YjJ4MlpWTmpiM0JsWkZOc2IzUnpPMXh1SUNCMFlYSm5aWFF1WDJjZ1BTQmlhVzVrVDJKcVpXTjBUR2x6ZEdWdVpYSnpPMXh1SUNCMFlYSm5aWFF1WDJRZ1BTQmlhVzVrUkhsdVlXMXBZMHRsZVhNN1hHNGdJSFJoY21kbGRDNWZjQ0E5SUhCeVpYQmxibVJOYjJScFptbGxjanRjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJRVoxYm1OMGFXOXVZV3hTWlc1a1pYSkRiMjUwWlhoMElDaGNiaUFnWkdGMFlTeGNiaUFnY0hKdmNITXNYRzRnSUdOb2FXeGtjbVZ1TEZ4dUlDQndZWEpsYm5Rc1hHNGdJRU4wYjNKY2Jpa2dlMXh1SUNCMllYSWdkR2hwY3lReElEMGdkR2hwY3p0Y2JseHVJQ0IyWVhJZ2IzQjBhVzl1Y3lBOUlFTjBiM0l1YjNCMGFXOXVjenRjYmlBZ0x5OGdaVzV6ZFhKbElIUm9aU0JqY21WaGRHVkZiR1Z0Wlc1MElHWjFibU4wYVc5dUlHbHVJR1oxYm1OMGFXOXVZV3dnWTI5dGNHOXVaVzUwYzF4dUlDQXZMeUJuWlhSeklHRWdkVzVwY1hWbElHTnZiblJsZUhRZ0xTQjBhR2x6SUdseklHNWxZMlZ6YzJGeWVTQm1iM0lnWTI5eWNtVmpkQ0J1WVcxbFpDQnpiRzkwSUdOb1pXTnJYRzRnSUhaaGNpQmpiMjUwWlhoMFZtMDdYRzRnSUdsbUlDaG9ZWE5QZDI0b2NHRnlaVzUwTENBblgzVnBaQ2NwS1NCN1hHNGdJQ0FnWTI5dWRHVjRkRlp0SUQwZ1QySnFaV04wTG1OeVpXRjBaU2h3WVhKbGJuUXBPMXh1SUNBZ0lDOHZJQ1JtYkc5M0xXUnBjMkZpYkdVdGJHbHVaVnh1SUNBZ0lHTnZiblJsZUhSV2JTNWZiM0pwWjJsdVlXd2dQU0J3WVhKbGJuUTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnZEdobElHTnZiblJsZUhRZ2RtMGdjR0Z6YzJWa0lHbHVJR2x6SUdFZ1puVnVZM1JwYjI1aGJDQmpiMjUwWlhoMElHRnpJSGRsYkd3dVhHNGdJQ0FnTHk4Z2FXNGdkR2hwY3lCallYTmxJSGRsSUhkaGJuUWdkRzhnYldGclpTQnpkWEpsSUhkbElHRnlaU0JoWW14bElIUnZJR2RsZENCaElHaHZiR1FnZEc4Z2RHaGxYRzRnSUNBZ0x5OGdjbVZoYkNCamIyNTBaWGgwSUdsdWMzUmhibU5sTGx4dUlDQWdJR052Ym5SbGVIUldiU0E5SUhCaGNtVnVkRHRjYmlBZ0lDQXZMeUFrWm14dmR5MWthWE5oWW14bExXeHBibVZjYmlBZ0lDQndZWEpsYm5RZ1BTQndZWEpsYm5RdVgyOXlhV2RwYm1Gc08xeHVJQ0I5WEc0Z0lIWmhjaUJwYzBOdmJYQnBiR1ZrSUQwZ2FYTlVjblZsS0c5d2RHbHZibk11WDJOdmJYQnBiR1ZrS1R0Y2JpQWdkbUZ5SUc1bFpXUk9iM0p0WVd4cGVtRjBhVzl1SUQwZ0lXbHpRMjl0Y0dsc1pXUTdYRzVjYmlBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdkR2hwY3k1d2NtOXdjeUE5SUhCeWIzQnpPMXh1SUNCMGFHbHpMbU5vYVd4a2NtVnVJRDBnWTJocGJHUnlaVzQ3WEc0Z0lIUm9hWE11Y0dGeVpXNTBJRDBnY0dGeVpXNTBPMXh1SUNCMGFHbHpMbXhwYzNSbGJtVnljeUE5SUdSaGRHRXViMjRnZkh3Z1pXMXdkSGxQWW1wbFkzUTdYRzRnSUhSb2FYTXVhVzVxWldOMGFXOXVjeUE5SUhKbGMyOXNkbVZKYm1wbFkzUW9iM0IwYVc5dWN5NXBibXBsWTNRc0lIQmhjbVZ1ZENrN1hHNGdJSFJvYVhNdWMyeHZkSE1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekpERXVKSE5zYjNSektTQjdYRzRnSUNBZ0lDQnViM0p0WVd4cGVtVlRZMjl3WldSVGJHOTBjeWhjYmlBZ0lDQWdJQ0FnWkdGMFlTNXpZMjl3WldSVGJHOTBjeXhjYmlBZ0lDQWdJQ0FnZEdocGN5UXhMaVJ6Ykc5MGN5QTlJSEpsYzI5c2RtVlRiRzkwY3loamFHbHNaSEpsYml3Z2NHRnlaVzUwS1Z4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE1rTVM0a2MyeHZkSE5jYmlBZ2ZUdGNibHh1SUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR2hwY3l3Z0ozTmpiM0JsWkZOc2IzUnpKeXdnS0h0Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnWjJWMElDZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnViM0p0WVd4cGVtVlRZMjl3WldSVGJHOTBjeWhrWVhSaExuTmpiM0JsWkZOc2IzUnpMQ0IwYUdsekxuTnNiM1J6S0NrcFhHNGdJQ0FnZlZ4dUlDQjlLU2s3WEc1Y2JpQWdMeThnYzNWd2NHOXlkQ0JtYjNJZ1kyOXRjR2xzWldRZ1puVnVZM1JwYjI1aGJDQjBaVzF3YkdGMFpWeHVJQ0JwWmlBb2FYTkRiMjF3YVd4bFpDa2dlMXh1SUNBZ0lDOHZJR1Y0Y0c5emFXNW5JQ1J2Y0hScGIyNXpJR1p2Y2lCeVpXNWtaWEpUZEdGMGFXTW9LVnh1SUNBZ0lIUm9hWE11Skc5d2RHbHZibk1nUFNCdmNIUnBiMjV6TzF4dUlDQWdJQzh2SUhCeVpTMXlaWE52YkhabElITnNiM1J6SUdadmNpQnlaVzVrWlhKVGJHOTBLQ2xjYmlBZ0lDQjBhR2x6TGlSemJHOTBjeUE5SUhSb2FYTXVjMnh2ZEhNb0tUdGNiaUFnSUNCMGFHbHpMaVJ6WTI5d1pXUlRiRzkwY3lBOUlHNXZjbTFoYkdsNlpWTmpiM0JsWkZOc2IzUnpLR1JoZEdFdWMyTnZjR1ZrVTJ4dmRITXNJSFJvYVhNdUpITnNiM1J6S1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h2Y0hScGIyNXpMbDl6WTI5d1pVbGtLU0I3WEc0Z0lDQWdkR2hwY3k1Zll5QTlJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpMQ0JrS1NCN1hHNGdJQ0FnSUNCMllYSWdkbTV2WkdVZ1BTQmpjbVZoZEdWRmJHVnRaVzUwS0dOdmJuUmxlSFJXYlN3Z1lTd2dZaXdnWXl3Z1pDd2dibVZsWkU1dmNtMWhiR2w2WVhScGIyNHBPMXh1SUNBZ0lDQWdhV1lnS0hadWIyUmxJQ1ltSUNGQmNuSmhlUzVwYzBGeWNtRjVLSFp1YjJSbEtTa2dlMXh1SUNBZ0lDQWdJQ0IyYm05a1pTNW1ibE5qYjNCbFNXUWdQU0J2Y0hScGIyNXpMbDl6WTI5d1pVbGtPMXh1SUNBZ0lDQWdJQ0IyYm05a1pTNW1ia052Ym5SbGVIUWdQU0J3WVhKbGJuUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2RtNXZaR1ZjYmlBZ0lDQjlPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvYVhNdVgyTWdQU0JtZFc1amRHbHZiaUFvWVN3Z1lpd2dZeXdnWkNrZ2V5QnlaWFIxY200Z1kzSmxZWFJsUld4bGJXVnVkQ2hqYjI1MFpYaDBWbTBzSUdFc0lHSXNJR01zSUdRc0lHNWxaV1JPYjNKdFlXeHBlbUYwYVc5dUtUc2dmVHRjYmlBZ2ZWeHVmVnh1WEc1cGJuTjBZV3hzVW1WdVpHVnlTR1ZzY0dWeWN5aEdkVzVqZEdsdmJtRnNVbVZ1WkdWeVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVcE8xeHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVkdkVzVqZEdsdmJtRnNRMjl0Y0c5dVpXNTBJQ2hjYmlBZ1EzUnZjaXhjYmlBZ2NISnZjSE5FWVhSaExGeHVJQ0JrWVhSaExGeHVJQ0JqYjI1MFpYaDBWbTBzWEc0Z0lHTm9hV3hrY21WdVhHNHBJSHRjYmlBZ2RtRnlJRzl3ZEdsdmJuTWdQU0JEZEc5eUxtOXdkR2x2Ym5NN1hHNGdJSFpoY2lCd2NtOXdjeUE5SUh0OU8xeHVJQ0IyWVhJZ2NISnZjRTl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpMbkJ5YjNCek8xeHVJQ0JwWmlBb2FYTkVaV1lvY0hKdmNFOXdkR2x2Ym5NcEtTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhCeWIzQlBjSFJwYjI1ektTQjdYRzRnSUNBZ0lDQndjbTl3YzF0clpYbGRJRDBnZG1Gc2FXUmhkR1ZRY205d0tHdGxlU3dnY0hKdmNFOXdkR2x2Ym5Nc0lIQnliM0J6UkdGMFlTQjhmQ0JsYlhCMGVVOWlhbVZqZENrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhMbUYwZEhKektTa2dleUJ0WlhKblpWQnliM0J6S0hCeWIzQnpMQ0JrWVhSaExtRjBkSEp6S1RzZ2ZWeHVJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhMbkJ5YjNCektTa2dleUJ0WlhKblpWQnliM0J6S0hCeWIzQnpMQ0JrWVhSaExuQnliM0J6S1RzZ2ZWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUhKbGJtUmxja052Ym5SbGVIUWdQU0J1WlhjZ1JuVnVZM1JwYjI1aGJGSmxibVJsY2tOdmJuUmxlSFFvWEc0Z0lDQWdaR0YwWVN4Y2JpQWdJQ0J3Y205d2N5eGNiaUFnSUNCamFHbHNaSEpsYml4Y2JpQWdJQ0JqYjI1MFpYaDBWbTBzWEc0Z0lDQWdRM1J2Y2x4dUlDQXBPMXh1WEc0Z0lIWmhjaUIyYm05a1pTQTlJRzl3ZEdsdmJuTXVjbVZ1WkdWeUxtTmhiR3dvYm5Wc2JDd2djbVZ1WkdWeVEyOXVkR1Y0ZEM1Zll5d2djbVZ1WkdWeVEyOXVkR1Y0ZENrN1hHNWNiaUFnYVdZZ0tIWnViMlJsSUdsdWMzUmhibU5sYjJZZ1ZrNXZaR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMnh2Ym1WQmJtUk5ZWEpyUm5WdVkzUnBiMjVoYkZKbGMzVnNkQ2gyYm05a1pTd2daR0YwWVN3Z2NtVnVaR1Z5UTI5dWRHVjRkQzV3WVhKbGJuUXNJRzl3ZEdsdmJuTXNJSEpsYm1SbGNrTnZiblJsZUhRcFhHNGdJSDBnWld4elpTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDJibTlrWlNrcElIdGNiaUFnSUNCMllYSWdkbTV2WkdWeklEMGdibTl5YldGc2FYcGxRMmhwYkdSeVpXNG9kbTV2WkdVcElIeDhJRnRkTzF4dUlDQWdJSFpoY2lCeVpYTWdQU0J1WlhjZ1FYSnlZWGtvZG01dlpHVnpMbXhsYm1kMGFDazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjJibTlrWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSEpsYzF0cFhTQTlJR05zYjI1bFFXNWtUV0Z5YTBaMWJtTjBhVzl1WVd4U1pYTjFiSFFvZG01dlpHVnpXMmxkTENCa1lYUmhMQ0J5Wlc1a1pYSkRiMjUwWlhoMExuQmhjbVZ1ZEN3Z2IzQjBhVzl1Y3l3Z2NtVnVaR1Z5UTI5dWRHVjRkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTmNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJqYkc5dVpVRnVaRTFoY210R2RXNWpkR2x2Ym1Gc1VtVnpkV3gwSUNoMmJtOWtaU3dnWkdGMFlTd2dZMjl1ZEdWNGRGWnRMQ0J2Y0hScGIyNXpMQ0J5Wlc1a1pYSkRiMjUwWlhoMEtTQjdYRzRnSUM4dklDTTNPREUzSUdOc2IyNWxJRzV2WkdVZ1ltVm1iM0psSUhObGRIUnBibWNnWm01RGIyNTBaWGgwTENCdmRHaGxjbmRwYzJVZ2FXWWdkR2hsSUc1dlpHVWdhWE1nY21WMWMyVmtYRzRnSUM4dklDaGxMbWN1SUdsMElIZGhjeUJtY205dElHRWdZMkZqYUdWa0lHNXZjbTFoYkNCemJHOTBLU0IwYUdVZ1ptNURiMjUwWlhoMElHTmhkWE5sY3lCdVlXMWxaQ0J6Ykc5MGMxeHVJQ0F2THlCMGFHRjBJSE5vYjNWc1pDQnViM1FnWW1VZ2JXRjBZMmhsWkNCMGJ5QnRZWFJqYUM1Y2JpQWdkbUZ5SUdOc2IyNWxJRDBnWTJ4dmJtVldUbTlrWlNoMmJtOWtaU2s3WEc0Z0lHTnNiMjVsTG1adVEyOXVkR1Y0ZENBOUlHTnZiblJsZUhSV2JUdGNiaUFnWTJ4dmJtVXVabTVQY0hScGIyNXpJRDBnYjNCMGFXOXVjenRjYmlBZ2UxeHVJQ0FnSUNoamJHOXVaUzVrWlhaMGIyOXNjMDFsZEdFZ1BTQmpiRzl1WlM1a1pYWjBiMjlzYzAxbGRHRWdmSHdnZTMwcExuSmxibVJsY2tOdmJuUmxlSFFnUFNCeVpXNWtaWEpEYjI1MFpYaDBPMXh1SUNCOVhHNGdJR2xtSUNoa1lYUmhMbk5zYjNRcElIdGNiaUFnSUNBb1kyeHZibVV1WkdGMFlTQjhmQ0FvWTJ4dmJtVXVaR0YwWVNBOUlIdDlLU2t1YzJ4dmRDQTlJR1JoZEdFdWMyeHZkRHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZMnh2Ym1WY2JuMWNibHh1Wm5WdVkzUnBiMjRnYldWeVoyVlFjbTl3Y3lBb2RHOHNJR1p5YjIwcElIdGNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJR1p5YjIwcElIdGNiaUFnSUNCMGIxdGpZVzFsYkdsNlpTaHJaWGtwWFNBOUlHWnliMjFiYTJWNVhUdGNiaUFnZlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1THlvZ0lDb3ZYRzVjYmk4cUlDQXFMMXh1WEc0dktpQWdLaTljYmx4dUx5OGdhVzVzYVc1bElHaHZiMnR6SUhSdklHSmxJR2x1ZG05clpXUWdiMjRnWTI5dGNHOXVaVzUwSUZaT2IyUmxjeUJrZFhKcGJtY2djR0YwWTJoY2JuWmhjaUJqYjIxd2IyNWxiblJXVG05a1pVaHZiMnR6SUQwZ2UxeHVJQ0JwYm1sME9pQm1kVzVqZEdsdmJpQnBibWwwSUNoMmJtOWtaU3dnYUhsa2NtRjBhVzVuS1NCN1hHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlVnSmlaY2JpQWdJQ0FnSUNGMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaUzVmYVhORVpYTjBjbTk1WldRZ0ppWmNiaUFnSUNBZ0lIWnViMlJsTG1SaGRHRXVhMlZsY0VGc2FYWmxYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQXZMeUJyWlhCMExXRnNhWFpsSUdOdmJYQnZibVZ1ZEhNc0lIUnlaV0YwSUdGeklHRWdjR0YwWTJoY2JpQWdJQ0FnSUhaaGNpQnRiM1Z1ZEdWa1RtOWtaU0E5SUhadWIyUmxPeUF2THlCM2IzSnJJR0Z5YjNWdVpDQm1iRzkzWEc0Z0lDQWdJQ0JqYjIxd2IyNWxiblJXVG05a1pVaHZiMnR6TG5CeVpYQmhkR05vS0cxdmRXNTBaV1JPYjJSbExDQnRiM1Z1ZEdWa1RtOWtaU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIWmhjaUJqYUdsc1pDQTlJSFp1YjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElEMGdZM0psWVhSbFEyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJWR2IzSldibTlrWlNoY2JpQWdJQ0FnSUNBZ2RtNXZaR1VzWEc0Z0lDQWdJQ0FnSUdGamRHbDJaVWx1YzNSaGJtTmxYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdZMmhwYkdRdUpHMXZkVzUwS0doNVpISmhkR2x1WnlBL0lIWnViMlJsTG1Wc2JTQTZJSFZ1WkdWbWFXNWxaQ3dnYUhsa2NtRjBhVzVuS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ2NISmxjR0YwWTJnNklHWjFibU4wYVc5dUlIQnlaWEJoZEdOb0lDaHZiR1JXYm05a1pTd2dkbTV2WkdVcElIdGNiaUFnSUNCMllYSWdiM0IwYVc5dWN5QTlJSFp1YjJSbExtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NN1hHNGdJQ0FnZG1GeUlHTm9hV3hrSUQwZ2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlVnUFNCdmJHUldibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlR0Y2JpQWdJQ0IxY0dSaGRHVkRhR2xzWkVOdmJYQnZibVZ1ZENoY2JpQWdJQ0FnSUdOb2FXeGtMRnh1SUNBZ0lDQWdiM0IwYVc5dWN5NXdjbTl3YzBSaGRHRXNJQzh2SUhWd1pHRjBaV1FnY0hKdmNITmNiaUFnSUNBZ0lHOXdkR2x2Ym5NdWJHbHpkR1Z1WlhKekxDQXZMeUIxY0dSaGRHVmtJR3hwYzNSbGJtVnljMXh1SUNBZ0lDQWdkbTV2WkdVc0lDOHZJRzVsZHlCd1lYSmxiblFnZG01dlpHVmNiaUFnSUNBZ0lHOXdkR2x2Ym5NdVkyaHBiR1J5Wlc0Z0x5OGdibVYzSUdOb2FXeGtjbVZ1WEc0Z0lDQWdLVHRjYmlBZ2ZTeGNibHh1SUNCcGJuTmxjblE2SUdaMWJtTjBhVzl1SUdsdWMyVnlkQ0FvZG01dlpHVXBJSHRjYmlBZ0lDQjJZWElnWTI5dWRHVjRkQ0E5SUhadWIyUmxMbU52Ym5SbGVIUTdYRzRnSUNBZ2RtRnlJR052YlhCdmJtVnVkRWx1YzNSaGJtTmxJRDBnZG01dlpHVXVZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVTdYRzRnSUNBZ2FXWWdLQ0ZqYjIxd2IyNWxiblJKYm5OMFlXNWpaUzVmYVhOTmIzVnVkR1ZrS1NCN1hHNGdJQ0FnSUNCamIyMXdiMjVsYm5SSmJuTjBZVzVqWlM1ZmFYTk5iM1Z1ZEdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdOaGJHeEliMjlyS0dOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTENBbmJXOTFiblJsWkNjcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RtNXZaR1V1WkdGMFlTNXJaV1Z3UVd4cGRtVXBJSHRjYmlBZ0lDQWdJR2xtSUNoamIyNTBaWGgwTGw5cGMwMXZkVzUwWldRcElIdGNiaUFnSUNBZ0lDQWdMeThnZG5WbExYSnZkWFJsY2lNeE1qRXlYRzRnSUNBZ0lDQWdJQzh2SUVSMWNtbHVaeUIxY0dSaGRHVnpMQ0JoSUd0bGNIUXRZV3hwZG1VZ1kyOXRjRzl1Wlc1MEozTWdZMmhwYkdRZ1kyOXRjRzl1Wlc1MGN5QnRZWGxjYmlBZ0lDQWdJQ0FnTHk4Z1kyaGhibWRsTENCemJ5QmthWEpsWTNSc2VTQjNZV3hyYVc1bklIUm9aU0IwY21WbElHaGxjbVVnYldGNUlHTmhiR3dnWVdOMGFYWmhkR1ZrSUdodmIydHpYRzRnSUNBZ0lDQWdJQzh2SUc5dUlHbHVZMjl5Y21WamRDQmphR2xzWkhKbGJpNGdTVzV6ZEdWaFpDQjNaU0J3ZFhOb0lIUm9aVzBnYVc1MGJ5QmhJSEYxWlhWbElIZG9hV05vSUhkcGJHeGNiaUFnSUNBZ0lDQWdMeThnWW1VZ2NISnZZMlZ6YzJWa0lHRm1kR1Z5SUhSb1pTQjNhRzlzWlNCd1lYUmphQ0J3Y205alpYTnpJR1Z1WkdWa0xseHVJQ0FnSUNBZ0lDQnhkV1YxWlVGamRHbDJZWFJsWkVOdmJYQnZibVZ1ZENoamIyMXdiMjVsYm5SSmJuTjBZVzVqWlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCaFkzUnBkbUYwWlVOb2FXeGtRMjl0Y0c5dVpXNTBLR052YlhCdmJtVnVkRWx1YzNSaGJtTmxMQ0IwY25WbElDOHFJR1JwY21WamRDQXFMeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUdSbGMzUnliM2s2SUdaMWJtTjBhVzl1SUdSbGMzUnliM2tnS0hadWIyUmxLU0I3WEc0Z0lDQWdkbUZ5SUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sSUQwZ2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlU3WEc0Z0lDQWdhV1lnS0NGamIyMXdiMjVsYm5SSmJuTjBZVzVqWlM1ZmFYTkVaWE4wY205NVpXUXBJSHRjYmlBZ0lDQWdJR2xtSUNnaGRtNXZaR1V1WkdGMFlTNXJaV1Z3UVd4cGRtVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dGNHOXVaVzUwU1c1emRHRnVZMlV1SkdSbGMzUnliM2tvS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdSbFlXTjBhWFpoZEdWRGFHbHNaRU52YlhCdmJtVnVkQ2hqYjIxd2IyNWxiblJKYm5OMFlXNWpaU3dnZEhKMVpTQXZLaUJrYVhKbFkzUWdLaThwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dWRtRnlJR2h2YjJ0elZHOU5aWEpuWlNBOUlFOWlhbVZqZEM1clpYbHpLR052YlhCdmJtVnVkRlpPYjJSbFNHOXZhM01wTzF4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRGIyMXdiMjVsYm5RZ0tGeHVJQ0JEZEc5eUxGeHVJQ0JrWVhSaExGeHVJQ0JqYjI1MFpYaDBMRnh1SUNCamFHbHNaSEpsYml4Y2JpQWdkR0ZuWEc0cElIdGNiaUFnYVdZZ0tHbHpWVzVrWldZb1EzUnZjaWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dVhHNGdJSFpoY2lCaVlYTmxRM1J2Y2lBOUlHTnZiblJsZUhRdUpHOXdkR2x2Ym5NdVgySmhjMlU3WEc1Y2JpQWdMeThnY0d4aGFXNGdiM0IwYVc5dWN5QnZZbXBsWTNRNklIUjFjbTRnYVhRZ2FXNTBieUJoSUdOdmJuTjBjblZqZEc5eVhHNGdJR2xtSUNocGMwOWlhbVZqZENoRGRHOXlLU2tnZTF4dUlDQWdJRU4wYjNJZ1BTQmlZWE5sUTNSdmNpNWxlSFJsYm1Rb1EzUnZjaWs3WEc0Z0lIMWNibHh1SUNBdkx5QnBaaUJoZENCMGFHbHpJSE4wWVdkbElHbDBKM01nYm05MElHRWdZMjl1YzNSeWRXTjBiM0lnYjNJZ1lXNGdZWE41Ym1NZ1kyOXRjRzl1Wlc1MElHWmhZM1J2Y25rc1hHNGdJQzh2SUhKbGFtVmpkQzVjYmlBZ2FXWWdLSFI1Y0dWdlppQkRkRzl5SUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdlMXh1SUNBZ0lDQWdkMkZ5Ymlnb1hDSkpiblpoYkdsa0lFTnZiWEJ2Ym1WdWRDQmtaV1pwYm1sMGFXOXVPaUJjSWlBcklDaFRkSEpwYm1jb1EzUnZjaWtwS1N3Z1kyOXVkR1Y0ZENrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc1Y2JpQWdMeThnWVhONWJtTWdZMjl0Y0c5dVpXNTBYRzRnSUhaaGNpQmhjM2x1WTBaaFkzUnZjbms3WEc0Z0lHbG1JQ2hwYzFWdVpHVm1LRU4wYjNJdVkybGtLU2tnZTF4dUlDQWdJR0Z6ZVc1alJtRmpkRzl5ZVNBOUlFTjBiM0k3WEc0Z0lDQWdRM1J2Y2lBOUlISmxjMjlzZG1WQmMzbHVZME52YlhCdmJtVnVkQ2hoYzNsdVkwWmhZM1J2Y25rc0lHSmhjMlZEZEc5eUtUdGNiaUFnSUNCcFppQW9RM1J2Y2lBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0F2THlCeVpYUjFjbTRnWVNCd2JHRmpaV2h2YkdSbGNpQnViMlJsSUdadmNpQmhjM2x1WXlCamIyMXdiMjVsYm5Rc0lIZG9hV05vSUdseklISmxibVJsY21Wa1hHNGdJQ0FnSUNBdkx5QmhjeUJoSUdOdmJXMWxiblFnYm05a1pTQmlkWFFnY0hKbGMyVnlkbVZ6SUdGc2JDQjBhR1VnY21GM0lHbHVabTl5YldGMGFXOXVJR1p2Y2lCMGFHVWdibTlrWlM1Y2JpQWdJQ0FnSUM4dklIUm9aU0JwYm1admNtMWhkR2x2YmlCM2FXeHNJR0psSUhWelpXUWdabTl5SUdGemVXNWpJSE5sY25abGNpMXlaVzVrWlhKcGJtY2dZVzVrSUdoNVpISmhkR2x2Ymk1Y2JpQWdJQ0FnSUhKbGRIVnliaUJqY21WaGRHVkJjM2x1WTFCc1lXTmxhRzlzWkdWeUtGeHVJQ0FnSUNBZ0lDQmhjM2x1WTBaaFkzUnZjbmtzWEc0Z0lDQWdJQ0FnSUdSaGRHRXNYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUXNYRzRnSUNBZ0lDQWdJR05vYVd4a2NtVnVMRnh1SUNBZ0lDQWdJQ0IwWVdkY2JpQWdJQ0FnSUNsY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCa1lYUmhJRDBnWkdGMFlTQjhmQ0I3ZlR0Y2JseHVJQ0F2THlCeVpYTnZiSFpsSUdOdmJuTjBjblZqZEc5eUlHOXdkR2x2Ym5NZ2FXNGdZMkZ6WlNCbmJHOWlZV3dnYldsNGFXNXpJR0Z5WlNCaGNIQnNhV1ZrSUdGbWRHVnlYRzRnSUM4dklHTnZiWEJ2Ym1WdWRDQmpiMjV6ZEhKMVkzUnZjaUJqY21WaGRHbHZibHh1SUNCeVpYTnZiSFpsUTI5dWMzUnlkV04wYjNKUGNIUnBiMjV6S0VOMGIzSXBPMXh1WEc0Z0lDOHZJSFJ5WVc1elptOXliU0JqYjIxd2IyNWxiblFnZGkxdGIyUmxiQ0JrWVhSaElHbHVkRzhnY0hKdmNITWdKaUJsZG1WdWRITmNiaUFnYVdZZ0tHbHpSR1ZtS0dSaGRHRXViVzlrWld3cEtTQjdYRzRnSUNBZ2RISmhibk5tYjNKdFRXOWtaV3dvUTNSdmNpNXZjSFJwYjI1ekxDQmtZWFJoS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJR1Y0ZEhKaFkzUWdjSEp2Y0hOY2JpQWdkbUZ5SUhCeWIzQnpSR0YwWVNBOUlHVjRkSEpoWTNSUWNtOXdjMFp5YjIxV1RtOWtaVVJoZEdFb1pHRjBZU3dnUTNSdmNpd2dkR0ZuS1R0Y2JseHVJQ0F2THlCbWRXNWpkR2x2Ym1Gc0lHTnZiWEJ2Ym1WdWRGeHVJQ0JwWmlBb2FYTlVjblZsS0VOMGIzSXViM0IwYVc5dWN5NW1kVzVqZEdsdmJtRnNLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWR2RXNWpkR2x2Ym1Gc1EyOXRjRzl1Wlc1MEtFTjBiM0lzSUhCeWIzQnpSR0YwWVN3Z1pHRjBZU3dnWTI5dWRHVjRkQ3dnWTJocGJHUnlaVzRwWEc0Z0lIMWNibHh1SUNBdkx5QmxlSFJ5WVdOMElHeHBjM1JsYm1WeWN5d2djMmx1WTJVZ2RHaGxjMlVnYm1WbFpITWdkRzhnWW1VZ2RISmxZWFJsWkNCaGMxeHVJQ0F2THlCamFHbHNaQ0JqYjIxd2IyNWxiblFnYkdsemRHVnVaWEp6SUdsdWMzUmxZV1FnYjJZZ1JFOU5JR3hwYzNSbGJtVnljMXh1SUNCMllYSWdiR2x6ZEdWdVpYSnpJRDBnWkdGMFlTNXZianRjYmlBZ0x5OGdjbVZ3YkdGalpTQjNhWFJvSUd4cGMzUmxibVZ5Y3lCM2FYUm9JQzV1WVhScGRtVWdiVzlrYVdacFpYSmNiaUFnTHk4Z2MyOGdhWFFnWjJWMGN5QndjbTlqWlhOelpXUWdaSFZ5YVc1bklIQmhjbVZ1ZENCamIyMXdiMjVsYm5RZ2NHRjBZMmd1WEc0Z0lHUmhkR0V1YjI0Z1BTQmtZWFJoTG01aGRHbDJaVTl1TzF4dVhHNGdJR2xtSUNocGMxUnlkV1VvUTNSdmNpNXZjSFJwYjI1ekxtRmljM1J5WVdOMEtTa2dlMXh1SUNBZ0lDOHZJR0ZpYzNSeVlXTjBJR052YlhCdmJtVnVkSE1nWkc4Z2JtOTBJR3RsWlhBZ1lXNTVkR2hwYm1kY2JpQWdJQ0F2THlCdmRHaGxjaUIwYUdGdUlIQnliM0J6SUNZZ2JHbHpkR1Z1WlhKeklDWWdjMnh2ZEZ4dVhHNGdJQ0FnTHk4Z2QyOXlheUJoY205MWJtUWdabXh2ZDF4dUlDQWdJSFpoY2lCemJHOTBJRDBnWkdGMFlTNXpiRzkwTzF4dUlDQWdJR1JoZEdFZ1BTQjdmVHRjYmlBZ0lDQnBaaUFvYzJ4dmRDa2dlMXh1SUNBZ0lDQWdaR0YwWVM1emJHOTBJRDBnYzJ4dmREdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMeUJwYm5OMFlXeHNJR052YlhCdmJtVnVkQ0J0WVc1aFoyVnRaVzUwSUdodmIydHpJRzl1ZEc4Z2RHaGxJSEJzWVdObGFHOXNaR1Z5SUc1dlpHVmNiaUFnYVc1emRHRnNiRU52YlhCdmJtVnVkRWh2YjJ0ektHUmhkR0VwTzF4dVhHNGdJQzh2SUhKbGRIVnliaUJoSUhCc1lXTmxhRzlzWkdWeUlIWnViMlJsWEc0Z0lIWmhjaUJ1WVcxbElEMGdRM1J2Y2k1dmNIUnBiMjV6TG01aGJXVWdmSHdnZEdGbk8xeHVJQ0IyWVhJZ2RtNXZaR1VnUFNCdVpYY2dWazV2WkdVb1hHNGdJQ0FnS0Z3aWRuVmxMV052YlhCdmJtVnVkQzFjSWlBcklDaERkRzl5TG1OcFpDa2dLeUFvYm1GdFpTQS9JQ2hjSWkxY0lpQXJJRzVoYldVcElEb2dKeWNwS1N4Y2JpQWdJQ0JrWVhSaExDQjFibVJsWm1sdVpXUXNJSFZ1WkdWbWFXNWxaQ3dnZFc1a1pXWnBibVZrTENCamIyNTBaWGgwTEZ4dUlDQWdJSHNnUTNSdmNqb2dRM1J2Y2l3Z2NISnZjSE5FWVhSaE9pQndjbTl3YzBSaGRHRXNJR3hwYzNSbGJtVnljem9nYkdsemRHVnVaWEp6TENCMFlXYzZJSFJoWnl3Z1kyaHBiR1J5Wlc0NklHTm9hV3hrY21WdUlIMHNYRzRnSUNBZ1lYTjVibU5HWVdOMGIzSjVYRzRnSUNrN1hHNWNiaUFnY21WMGRYSnVJSFp1YjJSbFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVU52YlhCdmJtVnVkRWx1YzNSaGJtTmxSbTl5Vm01dlpHVWdLRnh1SUNCMmJtOWtaU3dnTHk4Z2QyVWdhMjV2ZHlCcGRDZHpJRTF2ZFc1MFpXUkRiMjF3YjI1bGJuUldUbTlrWlNCaWRYUWdabXh2ZHlCa2IyVnpiaWQwWEc0Z0lIQmhjbVZ1ZENBdkx5QmhZM1JwZG1WSmJuTjBZVzVqWlNCcGJpQnNhV1psWTNsamJHVWdjM1JoZEdWY2Jpa2dlMXh1SUNCMllYSWdiM0IwYVc5dWN5QTlJSHRjYmlBZ0lDQmZhWE5EYjIxd2IyNWxiblE2SUhSeWRXVXNYRzRnSUNBZ1gzQmhjbVZ1ZEZadWIyUmxPaUIyYm05a1pTeGNiaUFnSUNCd1lYSmxiblE2SUhCaGNtVnVkRnh1SUNCOU8xeHVJQ0F2THlCamFHVmpheUJwYm14cGJtVXRkR1Z0Y0d4aGRHVWdjbVZ1WkdWeUlHWjFibU4wYVc5dWMxeHVJQ0IyWVhJZ2FXNXNhVzVsVkdWdGNHeGhkR1VnUFNCMmJtOWtaUzVrWVhSaExtbHViR2x1WlZSbGJYQnNZWFJsTzF4dUlDQnBaaUFvYVhORVpXWW9hVzVzYVc1bFZHVnRjR3hoZEdVcEtTQjdYRzRnSUNBZ2IzQjBhVzl1Y3k1eVpXNWtaWElnUFNCcGJteHBibVZVWlcxd2JHRjBaUzV5Wlc1a1pYSTdYRzRnSUNBZ2IzQjBhVzl1Y3k1emRHRjBhV05TWlc1a1pYSkdibk1nUFNCcGJteHBibVZVWlcxd2JHRjBaUzV6ZEdGMGFXTlNaVzVrWlhKR2JuTTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHNWxkeUIyYm05a1pTNWpiMjF3YjI1bGJuUlBjSFJwYjI1ekxrTjBiM0lvYjNCMGFXOXVjeWxjYm4xY2JseHVablZ1WTNScGIyNGdhVzV6ZEdGc2JFTnZiWEJ2Ym1WdWRFaHZiMnR6SUNoa1lYUmhLU0I3WEc0Z0lIWmhjaUJvYjI5cmN5QTlJR1JoZEdFdWFHOXZheUI4ZkNBb1pHRjBZUzVvYjI5cklEMGdlMzBwTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR2h2YjJ0elZHOU5aWEpuWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lIWmhjaUJyWlhrZ1BTQm9iMjlyYzFSdlRXVnlaMlZiYVYwN1hHNGdJQ0FnZG1GeUlHVjRhWE4wYVc1bklEMGdhRzl2YTNOYmEyVjVYVHRjYmlBZ0lDQjJZWElnZEc5TlpYSm5aU0E5SUdOdmJYQnZibVZ1ZEZaT2IyUmxTRzl2YTNOYmEyVjVYVHRjYmlBZ0lDQnBaaUFvWlhocGMzUnBibWNnSVQwOUlIUnZUV1Z5WjJVZ0ppWWdJU2hsZUdsemRHbHVaeUFtSmlCbGVHbHpkR2x1Wnk1ZmJXVnlaMlZrS1NrZ2UxeHVJQ0FnSUNBZ2FHOXZhM05iYTJWNVhTQTlJR1Y0YVhOMGFXNW5JRDhnYldWeVoyVkliMjlySkRFb2RHOU5aWEpuWlN3Z1pYaHBjM1JwYm1jcElEb2dkRzlOWlhKblpUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdiV1Z5WjJWSWIyOXJKREVnS0dZeExDQm1NaWtnZTF4dUlDQjJZWElnYldWeVoyVmtJRDBnWm5WdVkzUnBiMjRnS0dFc0lHSXBJSHRjYmlBZ0lDQXZMeUJtYkc5M0lHTnZiWEJzWVdsdWN5QmhZbTkxZENCbGVIUnlZU0JoY21keklIZG9hV05vSUdseklIZG9lU0IzWlNCMWMyVWdZVzU1WEc0Z0lDQWdaakVvWVN3Z1lpazdYRzRnSUNBZ1pqSW9ZU3dnWWlrN1hHNGdJSDA3WEc0Z0lHMWxjbWRsWkM1ZmJXVnlaMlZrSUQwZ2RISjFaVHRjYmlBZ2NtVjBkWEp1SUcxbGNtZGxaRnh1ZlZ4dVhHNHZMeUIwY21GdWMyWnZjbTBnWTI5dGNHOXVaVzUwSUhZdGJXOWtaV3dnYVc1bWJ5QW9kbUZzZFdVZ1lXNWtJR05oYkd4aVlXTnJLU0JwYm5SdlhHNHZMeUJ3Y205d0lHRnVaQ0JsZG1WdWRDQm9ZVzVrYkdWeUlISmxjM0JsWTNScGRtVnNlUzVjYm1aMWJtTjBhVzl1SUhSeVlXNXpabTl5YlUxdlpHVnNJQ2h2Y0hScGIyNXpMQ0JrWVhSaEtTQjdYRzRnSUhaaGNpQndjbTl3SUQwZ0tHOXdkR2x2Ym5NdWJXOWtaV3dnSmlZZ2IzQjBhVzl1Y3k1dGIyUmxiQzV3Y205d0tTQjhmQ0FuZG1Gc2RXVW5PMXh1SUNCMllYSWdaWFpsYm5RZ1BTQW9iM0IwYVc5dWN5NXRiMlJsYkNBbUppQnZjSFJwYjI1ekxtMXZaR1ZzTG1WMlpXNTBLU0I4ZkNBbmFXNXdkWFFuWEc0Z0lEc29aR0YwWVM1aGRIUnljeUI4ZkNBb1pHRjBZUzVoZEhSeWN5QTlJSHQ5S1NsYmNISnZjRjBnUFNCa1lYUmhMbTF2WkdWc0xuWmhiSFZsTzF4dUlDQjJZWElnYjI0Z1BTQmtZWFJoTG05dUlIeDhJQ2hrWVhSaExtOXVJRDBnZTMwcE8xeHVJQ0IyWVhJZ1pYaHBjM1JwYm1jZ1BTQnZibHRsZG1WdWRGMDdYRzRnSUhaaGNpQmpZV3hzWW1GamF5QTlJR1JoZEdFdWJXOWtaV3d1WTJGc2JHSmhZMnM3WEc0Z0lHbG1JQ2hwYzBSbFppaGxlR2x6ZEdsdVp5a3BJSHRjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0JCY25KaGVTNXBjMEZ5Y21GNUtHVjRhWE4wYVc1bktWeHVJQ0FnSUNBZ0lDQS9JR1Y0YVhOMGFXNW5MbWx1WkdWNFQyWW9ZMkZzYkdKaFkyc3BJRDA5UFNBdE1WeHVJQ0FnSUNBZ0lDQTZJR1Y0YVhOMGFXNW5JQ0U5UFNCallXeHNZbUZqYTF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnYjI1YlpYWmxiblJkSUQwZ1cyTmhiR3hpWVdOclhTNWpiMjVqWVhRb1pYaHBjM1JwYm1jcE8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdmJsdGxkbVZ1ZEYwZ1BTQmpZV3hzWW1GamF6dGNiaUFnZlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlGTkpUVkJNUlY5T1QxSk5RVXhKV2tVZ1BTQXhPMXh1ZG1GeUlFRk1WMEZaVTE5T1QxSk5RVXhKV2tVZ1BTQXlPMXh1WEc0dkx5QjNjbUZ3Y0dWeUlHWjFibU4wYVc5dUlHWnZjaUJ3Y205MmFXUnBibWNnWVNCdGIzSmxJR1pzWlhocFlteGxJR2x1ZEdWeVptRmpaVnh1THk4Z2QybDBhRzkxZENCblpYUjBhVzVuSUhsbGJHeGxaQ0JoZENCaWVTQm1iRzkzWEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZGYkdWdFpXNTBJQ2hjYmlBZ1kyOXVkR1Y0ZEN4Y2JpQWdkR0ZuTEZ4dUlDQmtZWFJoTEZ4dUlDQmphR2xzWkhKbGJpeGNiaUFnYm05eWJXRnNhWHBoZEdsdmJsUjVjR1VzWEc0Z0lHRnNkMkY1YzA1dmNtMWhiR2w2WlZ4dUtTQjdYRzRnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0dSaGRHRXBJSHg4SUdselVISnBiV2wwYVhabEtHUmhkR0VwS1NCN1hHNGdJQ0FnYm05eWJXRnNhWHBoZEdsdmJsUjVjR1VnUFNCamFHbHNaSEpsYmp0Y2JpQWdJQ0JqYUdsc1pISmxiaUE5SUdSaGRHRTdYRzRnSUNBZ1pHRjBZU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdmVnh1SUNCcFppQW9hWE5VY25WbEtHRnNkMkY1YzA1dmNtMWhiR2w2WlNrcElIdGNiaUFnSUNCdWIzSnRZV3hwZW1GMGFXOXVWSGx3WlNBOUlFRk1WMEZaVTE5T1QxSk5RVXhKV2tVN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUY5amNtVmhkR1ZGYkdWdFpXNTBLR052Ym5SbGVIUXNJSFJoWnl3Z1pHRjBZU3dnWTJocGJHUnlaVzRzSUc1dmNtMWhiR2w2WVhScGIyNVVlWEJsS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmWTNKbFlYUmxSV3hsYldWdWRDQW9YRzRnSUdOdmJuUmxlSFFzWEc0Z0lIUmhaeXhjYmlBZ1pHRjBZU3hjYmlBZ1kyaHBiR1J5Wlc0c1hHNGdJRzV2Y20xaGJHbDZZWFJwYjI1VWVYQmxYRzRwSUh0Y2JpQWdhV1lnS0dselJHVm1LR1JoZEdFcElDWW1JR2x6UkdWbUtDaGtZWFJoS1M1ZlgyOWlYMThwS1NCN1hHNGdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lGd2lRWFp2YVdRZ2RYTnBibWNnYjJKelpYSjJaV1FnWkdGMFlTQnZZbXBsWTNRZ1lYTWdkbTV2WkdVZ1pHRjBZVG9nWENJZ0t5QW9TbE5QVGk1emRISnBibWRwWm5rb1pHRjBZU2twSUNzZ1hDSmNYRzVjSWlBclhHNGdJQ0FnSUNBblFXeDNZWGx6SUdOeVpXRjBaU0JtY21WemFDQjJibTlrWlNCa1lYUmhJRzlpYW1WamRITWdhVzRnWldGamFDQnlaVzVrWlhJaEp5eGNiaUFnSUNBZ0lHTnZiblJsZUhSY2JpQWdJQ0FwTzF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWRmJYQjBlVlpPYjJSbEtDbGNiaUFnZlZ4dUlDQXZMeUJ2WW1wbFkzUWdjM2x1ZEdGNElHbHVJSFl0WW1sdVpGeHVJQ0JwWmlBb2FYTkVaV1lvWkdGMFlTa2dKaVlnYVhORVpXWW9aR0YwWVM1cGN5a3BJSHRjYmlBZ0lDQjBZV2NnUFNCa1lYUmhMbWx6TzF4dUlDQjlYRzRnSUdsbUlDZ2hkR0ZuS1NCN1hHNGdJQ0FnTHk4Z2FXNGdZMkZ6WlNCdlppQmpiMjF3YjI1bGJuUWdPbWx6SUhObGRDQjBieUJtWVd4emVTQjJZV3gxWlZ4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWRmJYQjBlVlpPYjJSbEtDbGNiaUFnZlZ4dUlDQXZMeUIzWVhKdUlHRm5ZV2x1YzNRZ2JtOXVMWEJ5YVcxcGRHbDJaU0JyWlhsY2JpQWdhV1lnS0dselJHVm1LR1JoZEdFcElDWW1JR2x6UkdWbUtHUmhkR0V1YTJWNUtTQW1KaUFoYVhOUWNtbHRhWFJwZG1Vb1pHRjBZUzVyWlhrcFhHNGdJQ2tnZTF4dUlDQWdJSHRjYmlBZ0lDQWdJSGRoY200b1hHNGdJQ0FnSUNBZ0lDZEJkbTlwWkNCMWMybHVaeUJ1YjI0dGNISnBiV2wwYVhabElIWmhiSFZsSUdGeklHdGxlU3dnSnlBclhHNGdJQ0FnSUNBZ0lDZDFjMlVnYzNSeWFXNW5MMjUxYldKbGNpQjJZV3gxWlNCcGJuTjBaV0ZrTGljc1hHNGdJQ0FnSUNBZ0lHTnZiblJsZUhSY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUM4dklITjFjSEJ2Y25RZ2MybHVaMnhsSUdaMWJtTjBhVzl1SUdOb2FXeGtjbVZ1SUdGeklHUmxabUYxYkhRZ2MyTnZjR1ZrSUhOc2IzUmNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWTJocGJHUnlaVzRwSUNZbVhHNGdJQ0FnZEhsd1pXOW1JR05vYVd4a2NtVnVXekJkSUQwOVBTQW5ablZ1WTNScGIyNG5YRzRnSUNrZ2UxeHVJQ0FnSUdSaGRHRWdQU0JrWVhSaElIeDhJSHQ5TzF4dUlDQWdJR1JoZEdFdWMyTnZjR1ZrVTJ4dmRITWdQU0I3SUdSbFptRjFiSFE2SUdOb2FXeGtjbVZ1V3pCZElIMDdYRzRnSUNBZ1kyaHBiR1J5Wlc0dWJHVnVaM1JvSUQwZ01EdGNiaUFnZlZ4dUlDQnBaaUFvYm05eWJXRnNhWHBoZEdsdmJsUjVjR1VnUFQwOUlFRk1WMEZaVTE5T1QxSk5RVXhKV2tVcElIdGNiaUFnSUNCamFHbHNaSEpsYmlBOUlHNXZjbTFoYkdsNlpVTm9hV3hrY21WdUtHTm9hV3hrY21WdUtUdGNiaUFnZlNCbGJITmxJR2xtSUNodWIzSnRZV3hwZW1GMGFXOXVWSGx3WlNBOVBUMGdVMGxOVUV4RlgwNVBVazFCVEVsYVJTa2dlMXh1SUNBZ0lHTm9hV3hrY21WdUlEMGdjMmx0Y0d4bFRtOXliV0ZzYVhwbFEyaHBiR1J5Wlc0b1kyaHBiR1J5Wlc0cE8xeHVJQ0I5WEc0Z0lIWmhjaUIyYm05a1pTd2dibk03WEc0Z0lHbG1JQ2gwZVhCbGIyWWdkR0ZuSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lIWmhjaUJEZEc5eU8xeHVJQ0FnSUc1eklEMGdLR052Ym5SbGVIUXVKSFp1YjJSbElDWW1JR052Ym5SbGVIUXVKSFp1YjJSbExtNXpLU0I4ZkNCamIyNW1hV2N1WjJWMFZHRm5UbUZ0WlhOd1lXTmxLSFJoWnlrN1hHNGdJQ0FnYVdZZ0tHTnZibVpwWnk1cGMxSmxjMlZ5ZG1Wa1ZHRm5LSFJoWnlrcElIdGNiaUFnSUNBZ0lDOHZJSEJzWVhSbWIzSnRJR0oxYVd4MExXbHVJR1ZzWlcxbGJuUnpYRzRnSUNBZ0lDQjJibTlrWlNBOUlHNWxkeUJXVG05a1pTaGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbkxuQmhjbk5sVUd4aGRHWnZjbTFVWVdkT1lXMWxLSFJoWnlrc0lHUmhkR0VzSUdOb2FXeGtjbVZ1TEZ4dUlDQWdJQ0FnSUNCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpDd2dZMjl1ZEdWNGRGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tDZ2haR0YwWVNCOGZDQWhaR0YwWVM1d2NtVXBJQ1ltSUdselJHVm1LRU4wYjNJZ1BTQnlaWE52YkhabFFYTnpaWFFvWTI5dWRHVjRkQzRrYjNCMGFXOXVjeXdnSjJOdmJYQnZibVZ1ZEhNbkxDQjBZV2NwS1NrZ2UxeHVJQ0FnSUNBZ0x5OGdZMjl0Y0c5dVpXNTBYRzRnSUNBZ0lDQjJibTlrWlNBOUlHTnlaV0YwWlVOdmJYQnZibVZ1ZENoRGRHOXlMQ0JrWVhSaExDQmpiMjUwWlhoMExDQmphR2xzWkhKbGJpd2dkR0ZuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdMeThnZFc1cmJtOTNiaUJ2Y2lCMWJteHBjM1JsWkNCdVlXMWxjM0JoWTJWa0lHVnNaVzFsYm5SelhHNGdJQ0FnSUNBdkx5QmphR1ZqYXlCaGRDQnlkVzUwYVcxbElHSmxZMkYxYzJVZ2FYUWdiV0Y1SUdkbGRDQmhjM05wWjI1bFpDQmhJRzVoYldWemNHRmpaU0IzYUdWdUlHbDBjMXh1SUNBZ0lDQWdMeThnY0dGeVpXNTBJRzV2Y20xaGJHbDZaWE1nWTJocGJHUnlaVzVjYmlBZ0lDQWdJSFp1YjJSbElEMGdibVYzSUZaT2IyUmxLRnh1SUNBZ0lDQWdJQ0IwWVdjc0lHUmhkR0VzSUdOb2FXeGtjbVZ1TEZ4dUlDQWdJQ0FnSUNCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpDd2dZMjl1ZEdWNGRGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdaR2x5WldOMElHTnZiWEJ2Ym1WdWRDQnZjSFJwYjI1eklDOGdZMjl1YzNSeWRXTjBiM0pjYmlBZ0lDQjJibTlrWlNBOUlHTnlaV0YwWlVOdmJYQnZibVZ1ZENoMFlXY3NJR1JoZEdFc0lHTnZiblJsZUhRc0lHTm9hV3hrY21WdUtUdGNiaUFnZlZ4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDJibTlrWlNrcElIdGNiaUFnSUNCeVpYUjFjbTRnZG01dlpHVmNiaUFnZlNCbGJITmxJR2xtSUNocGMwUmxaaWgyYm05a1pTa3BJSHRjYmlBZ0lDQnBaaUFvYVhORVpXWW9ibk1wS1NCN0lHRndjR3g1VGxNb2RtNXZaR1VzSUc1ektUc2dmVnh1SUNBZ0lHbG1JQ2hwYzBSbFppaGtZWFJoS1NrZ2V5QnlaV2RwYzNSbGNrUmxaWEJDYVc1a2FXNW5jeWhrWVhSaEtUc2dmVnh1SUNBZ0lISmxkSFZ5YmlCMmJtOWtaVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWRmJYQjBlVlpPYjJSbEtDbGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJoY0hCc2VVNVRJQ2gyYm05a1pTd2dibk1zSUdadmNtTmxLU0I3WEc0Z0lIWnViMlJsTG01eklEMGdibk03WEc0Z0lHbG1JQ2gyYm05a1pTNTBZV2NnUFQwOUlDZG1iM0psYVdkdVQySnFaV04wSnlrZ2UxeHVJQ0FnSUM4dklIVnpaU0JrWldaaGRXeDBJRzVoYldWemNHRmpaU0JwYm5OcFpHVWdabTl5WldsbmJrOWlhbVZqZEZ4dUlDQWdJRzV6SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUdadmNtTmxJRDBnZEhKMVpUdGNiaUFnZlZ4dUlDQnBaaUFvYVhORVpXWW9kbTV2WkdVdVkyaHBiR1J5Wlc0cEtTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQjJibTlrWlM1amFHbHNaSEpsYmk1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJqYUdsc1pDQTlJSFp1YjJSbExtTm9hV3hrY21WdVcybGRPMXh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR05vYVd4a0xuUmhaeWtnSmlZZ0tGeHVJQ0FnSUNBZ0lDQnBjMVZ1WkdWbUtHTm9hV3hrTG01ektTQjhmQ0FvYVhOVWNuVmxLR1p2Y21ObEtTQW1KaUJqYUdsc1pDNTBZV2NnSVQwOUlDZHpkbWNuS1NrcElIdGNiaUFnSUNBZ0lDQWdZWEJ3YkhsT1V5aGphR2xzWkN3Z2JuTXNJR1p2Y21ObEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeThnY21WbUlDTTFNekU0WEc0dkx5QnVaV05sYzNOaGNua2dkRzhnWlc1emRYSmxJSEJoY21WdWRDQnlaUzF5Wlc1a1pYSWdkMmhsYmlCa1pXVndJR0pwYm1ScGJtZHpJR3hwYTJVZ09uTjBlV3hsSUdGdVpGeHVMeThnT21Oc1lYTnpJR0Z5WlNCMWMyVmtJRzl1SUhOc2IzUWdibTlrWlhOY2JtWjFibU4wYVc5dUlISmxaMmx6ZEdWeVJHVmxjRUpwYm1ScGJtZHpJQ2hrWVhSaEtTQjdYRzRnSUdsbUlDaHBjMDlpYW1WamRDaGtZWFJoTG5OMGVXeGxLU2tnZTF4dUlDQWdJSFJ5WVhabGNuTmxLR1JoZEdFdWMzUjViR1VwTzF4dUlDQjlYRzRnSUdsbUlDaHBjMDlpYW1WamRDaGtZWFJoTG1Oc1lYTnpLU2tnZTF4dUlDQWdJSFJ5WVhabGNuTmxLR1JoZEdFdVkyeGhjM01wTzF4dUlDQjlYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQnBibWwwVW1WdVpHVnlJQ2gyYlNrZ2UxeHVJQ0IyYlM1ZmRtNXZaR1VnUFNCdWRXeHNPeUF2THlCMGFHVWdjbTl2ZENCdlppQjBhR1VnWTJocGJHUWdkSEpsWlZ4dUlDQjJiUzVmYzNSaGRHbGpWSEpsWlhNZ1BTQnVkV3hzT3lBdkx5QjJMVzl1WTJVZ1kyRmphR1ZrSUhSeVpXVnpYRzRnSUhaaGNpQnZjSFJwYjI1eklEMGdkbTB1Skc5d2RHbHZibk03WEc0Z0lIWmhjaUJ3WVhKbGJuUldibTlrWlNBOUlIWnRMaVIyYm05a1pTQTlJRzl3ZEdsdmJuTXVYM0JoY21WdWRGWnViMlJsT3lBdkx5QjBhR1VnY0d4aFkyVm9iMnhrWlhJZ2JtOWtaU0JwYmlCd1lYSmxiblFnZEhKbFpWeHVJQ0IyWVhJZ2NtVnVaR1Z5UTI5dWRHVjRkQ0E5SUhCaGNtVnVkRlp1YjJSbElDWW1JSEJoY21WdWRGWnViMlJsTG1OdmJuUmxlSFE3WEc0Z0lIWnRMaVJ6Ykc5MGN5QTlJSEpsYzI5c2RtVlRiRzkwY3lodmNIUnBiMjV6TGw5eVpXNWtaWEpEYUdsc1pISmxiaXdnY21WdVpHVnlRMjl1ZEdWNGRDazdYRzRnSUhadExpUnpZMjl3WldSVGJHOTBjeUE5SUdWdGNIUjVUMkpxWldOME8xeHVJQ0F2THlCaWFXNWtJSFJvWlNCamNtVmhkR1ZGYkdWdFpXNTBJR1p1SUhSdklIUm9hWE1nYVc1emRHRnVZMlZjYmlBZ0x5OGdjMjhnZEdoaGRDQjNaU0JuWlhRZ2NISnZjR1Z5SUhKbGJtUmxjaUJqYjI1MFpYaDBJR2x1YzJsa1pTQnBkQzVjYmlBZ0x5OGdZWEpuY3lCdmNtUmxjam9nZEdGbkxDQmtZWFJoTENCamFHbHNaSEpsYml3Z2JtOXliV0ZzYVhwaGRHbHZibFI1Y0dVc0lHRnNkMkY1YzA1dmNtMWhiR2w2WlZ4dUlDQXZMeUJwYm5SbGNtNWhiQ0IyWlhKemFXOXVJR2x6SUhWelpXUWdZbmtnY21WdVpHVnlJR1oxYm1OMGFXOXVjeUJqYjIxd2FXeGxaQ0JtY205dElIUmxiWEJzWVhSbGMxeHVJQ0IyYlM1Zll5QTlJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpMQ0JrS1NCN0lISmxkSFZ5YmlCamNtVmhkR1ZGYkdWdFpXNTBLSFp0TENCaExDQmlMQ0JqTENCa0xDQm1ZV3h6WlNrN0lIMDdYRzRnSUM4dklHNXZjbTFoYkdsNllYUnBiMjRnYVhNZ1lXeDNZWGx6SUdGd2NHeHBaV1FnWm05eUlIUm9aU0J3ZFdKc2FXTWdkbVZ5YzJsdmJpd2dkWE5sWkNCcGJseHVJQ0F2THlCMWMyVnlMWGR5YVhSMFpXNGdjbVZ1WkdWeUlHWjFibU4wYVc5dWN5NWNiaUFnZG0wdUpHTnlaV0YwWlVWc1pXMWxiblFnUFNCbWRXNWpkR2x2YmlBb1lTd2dZaXdnWXl3Z1pDa2dleUJ5WlhSMWNtNGdZM0psWVhSbFJXeGxiV1Z1ZENoMmJTd2dZU3dnWWl3Z1l5d2daQ3dnZEhKMVpTazdJSDA3WEc1Y2JpQWdMeThnSkdGMGRISnpJQ1lnSkd4cGMzUmxibVZ5Y3lCaGNtVWdaWGh3YjNObFpDQm1iM0lnWldGemFXVnlJRWhQUXlCamNtVmhkR2x2Ymk1Y2JpQWdMeThnZEdobGVTQnVaV1ZrSUhSdklHSmxJSEpsWVdOMGFYWmxJSE52SUhSb1lYUWdTRTlEY3lCMWMybHVaeUIwYUdWdElHRnlaU0JoYkhkaGVYTWdkWEJrWVhSbFpGeHVJQ0IyWVhJZ2NHRnlaVzUwUkdGMFlTQTlJSEJoY21WdWRGWnViMlJsSUNZbUlIQmhjbVZ1ZEZadWIyUmxMbVJoZEdFN1hHNWNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdWc2MyVWdLaTljYmlBZ2UxeHVJQ0FnSUdSbFptbHVaVkpsWVdOMGFYWmxKQ1F4S0hadExDQW5KR0YwZEhKekp5d2djR0Z5Wlc1MFJHRjBZU0FtSmlCd1lYSmxiblJFWVhSaExtRjBkSEp6SUh4OElHVnRjSFI1VDJKcVpXTjBMQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBaGFYTlZjR1JoZEdsdVowTm9hV3hrUTI5dGNHOXVaVzUwSUNZbUlIZGhjbTRvWENJa1lYUjBjbk1nYVhNZ2NtVmhaRzl1YkhrdVhDSXNJSFp0S1R0Y2JpQWdJQ0I5TENCMGNuVmxLVHRjYmlBZ0lDQmtaV1pwYm1WU1pXRmpkR2wyWlNRa01TaDJiU3dnSnlSc2FYTjBaVzVsY25NbkxDQnZjSFJwYjI1ekxsOXdZWEpsYm5STWFYTjBaVzVsY25NZ2ZId2daVzF3ZEhsUFltcGxZM1FzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDRnBjMVZ3WkdGMGFXNW5RMmhwYkdSRGIyMXdiMjVsYm5RZ0ppWWdkMkZ5YmloY0lpUnNhWE4wWlc1bGNuTWdhWE1nY21WaFpHOXViSGt1WENJc0lIWnRLVHRjYmlBZ0lDQjlMQ0IwY25WbEtUdGNiaUFnZlZ4dWZWeHVYRzUyWVhJZ1kzVnljbVZ1ZEZKbGJtUmxjbWx1WjBsdWMzUmhibU5sSUQwZ2JuVnNiRHRjYmx4dVpuVnVZM1JwYjI0Z2NtVnVaR1Z5VFdsNGFXNGdLRloxWlNrZ2UxeHVJQ0F2THlCcGJuTjBZV3hzSUhKMWJuUnBiV1VnWTI5dWRtVnVhV1Z1WTJVZ2FHVnNjR1Z5YzF4dUlDQnBibk4wWVd4c1VtVnVaR1Z5U0dWc2NHVnljeWhXZFdVdWNISnZkRzkwZVhCbEtUdGNibHh1SUNCV2RXVXVjSEp2ZEc5MGVYQmxMaVJ1WlhoMFZHbGpheUE5SUdaMWJtTjBhVzl1SUNobWJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYaDBWR2xqYXlobWJpd2dkR2hwY3lsY2JpQWdmVHRjYmx4dUlDQldkV1V1Y0hKdmRHOTBlWEJsTGw5eVpXNWtaWElnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJSFp0SUQwZ2RHaHBjenRjYmlBZ0lDQjJZWElnY21WbUlEMGdkbTB1Skc5d2RHbHZibk03WEc0Z0lDQWdkbUZ5SUhKbGJtUmxjaUE5SUhKbFppNXlaVzVrWlhJN1hHNGdJQ0FnZG1GeUlGOXdZWEpsYm5SV2JtOWtaU0E5SUhKbFppNWZjR0Z5Wlc1MFZtNXZaR1U3WEc1Y2JpQWdJQ0JwWmlBb1gzQmhjbVZ1ZEZadWIyUmxLU0I3WEc0Z0lDQWdJQ0IyYlM0a2MyTnZjR1ZrVTJ4dmRITWdQU0J1YjNKdFlXeHBlbVZUWTI5d1pXUlRiRzkwY3loY2JpQWdJQ0FnSUNBZ1gzQmhjbVZ1ZEZadWIyUmxMbVJoZEdFdWMyTnZjR1ZrVTJ4dmRITXNYRzRnSUNBZ0lDQWdJSFp0TGlSemJHOTBjeXhjYmlBZ0lDQWdJQ0FnZG0wdUpITmpiM0JsWkZOc2IzUnpYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSE5sZENCd1lYSmxiblFnZG01dlpHVXVJSFJvYVhNZ1lXeHNiM2R6SUhKbGJtUmxjaUJtZFc1amRHbHZibk1nZEc4Z2FHRjJaU0JoWTJObGMzTmNiaUFnSUNBdkx5QjBieUIwYUdVZ1pHRjBZU0J2YmlCMGFHVWdjR3hoWTJWb2IyeGtaWElnYm05a1pTNWNiaUFnSUNCMmJTNGtkbTV2WkdVZ1BTQmZjR0Z5Wlc1MFZtNXZaR1U3WEc0Z0lDQWdMeThnY21WdVpHVnlJSE5sYkdaY2JpQWdJQ0IyWVhJZ2RtNXZaR1U3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUM4dklGUm9aWEpsSjNNZ2JtOGdibVZsWkNCMGJ5QnRZV2x1ZEdGcGJpQmhJSE4wWVdOcklHSmxZMkYxWlhNZ1lXeHNJSEpsYm1SbGNpQm1ibk1nWVhKbElHTmhiR3hsWkZ4dUlDQWdJQ0FnTHk4Z2MyVndZWEpoZEdWc2VTQm1jbTl0SUc5dVpTQmhibTkwYUdWeUxpQk9aWE4wWldRZ1kyOXRjRzl1Wlc1MEozTWdjbVZ1WkdWeUlHWnVjeUJoY21VZ1kyRnNiR1ZrWEc0Z0lDQWdJQ0F2THlCM2FHVnVJSEJoY21WdWRDQmpiMjF3YjI1bGJuUWdhWE1nY0dGMFkyaGxaQzVjYmlBZ0lDQWdJR04xY25KbGJuUlNaVzVrWlhKcGJtZEpibk4wWVc1alpTQTlJSFp0TzF4dUlDQWdJQ0FnZG01dlpHVWdQU0J5Wlc1a1pYSXVZMkZzYkNoMmJTNWZjbVZ1WkdWeVVISnZlSGtzSUhadExpUmpjbVZoZEdWRmJHVnRaVzUwS1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNCb1lXNWtiR1ZGY25KdmNpaGxMQ0IyYlN3Z1hDSnlaVzVrWlhKY0lpazdYRzRnSUNBZ0lDQXZMeUJ5WlhSMWNtNGdaWEp5YjNJZ2NtVnVaR1Z5SUhKbGMzVnNkQ3hjYmlBZ0lDQWdJQzh2SUc5eUlIQnlaWFpwYjNWeklIWnViMlJsSUhSdklIQnlaWFpsYm5RZ2NtVnVaR1Z5SUdWeWNtOXlJR05oZFhOcGJtY2dZbXhoYm1zZ1kyOXRjRzl1Wlc1MFhHNGdJQ0FnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ1pXeHpaU0FxTDF4dUlDQWdJQ0FnYVdZZ0tIWnRMaVJ2Y0hScGIyNXpMbkpsYm1SbGNrVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtNXZaR1VnUFNCMmJTNGtiM0IwYVc5dWN5NXlaVzVrWlhKRmNuSnZjaTVqWVd4c0tIWnRMbDl5Wlc1a1pYSlFjbTk0ZVN3Z2RtMHVKR055WldGMFpVVnNaVzFsYm5Rc0lHVXBPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFJYSnliM0lvWlN3Z2RtMHNJRndpY21WdVpHVnlSWEp5YjNKY0lpazdYRzRnSUNBZ0lDQWdJQ0FnZG01dlpHVWdQU0IyYlM1ZmRtNXZaR1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhadWIyUmxJRDBnZG0wdVgzWnViMlJsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0JqZFhKeVpXNTBVbVZ1WkdWeWFXNW5TVzV6ZEdGdVkyVWdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCcFppQjBhR1VnY21WMGRYSnVaV1FnWVhKeVlYa2dZMjl1ZEdGcGJuTWdiMjVzZVNCaElITnBibWRzWlNCdWIyUmxMQ0JoYkd4dmR5QnBkRnh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtIWnViMlJsS1NBbUppQjJibTlrWlM1c1pXNW5kR2dnUFQwOUlERXBJSHRjYmlBZ0lDQWdJSFp1YjJSbElEMGdkbTV2WkdWYk1GMDdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklISmxkSFZ5YmlCbGJYQjBlU0IyYm05a1pTQnBiaUJqWVhObElIUm9aU0J5Wlc1a1pYSWdablZ1WTNScGIyNGdaWEp5YjNKbFpDQnZkWFJjYmlBZ0lDQnBaaUFvSVNoMmJtOWtaU0JwYm5OMFlXNWpaVzltSUZaT2IyUmxLU2tnZTF4dUlDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZG01dlpHVXBLU0I3WEc0Z0lDQWdJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQWdJQ0FnSjAxMWJIUnBjR3hsSUhKdmIzUWdibTlrWlhNZ2NtVjBkWEp1WldRZ1puSnZiU0J5Wlc1a1pYSWdablZ1WTNScGIyNHVJRkpsYm1SbGNpQm1kVzVqZEdsdmJpQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBbmMyaHZkV3hrSUhKbGRIVnliaUJoSUhOcGJtZHNaU0J5YjI5MElHNXZaR1V1Snl4Y2JpQWdJQ0FnSUNBZ0lDQjJiVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG01dlpHVWdQU0JqY21WaGRHVkZiWEIwZVZaT2IyUmxLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSE5sZENCd1lYSmxiblJjYmlBZ0lDQjJibTlrWlM1d1lYSmxiblFnUFNCZmNHRnlaVzUwVm01dlpHVTdYRzRnSUNBZ2NtVjBkWEp1SUhadWIyUmxYRzRnSUgwN1hHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCbGJuTjFjbVZEZEc5eUlDaGpiMjF3TENCaVlYTmxLU0I3WEc0Z0lHbG1JQ2hjYmlBZ0lDQmpiMjF3TGw5ZlpYTk5iMlIxYkdVZ2ZIeGNiaUFnSUNBb2FHRnpVM2x0WW05c0lDWW1JR052YlhCYlUzbHRZbTlzTG5SdlUzUnlhVzVuVkdGblhTQTlQVDBnSjAxdlpIVnNaU2NwWEc0Z0lDa2dlMXh1SUNBZ0lHTnZiWEFnUFNCamIyMXdMbVJsWm1GMWJIUTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHbHpUMkpxWldOMEtHTnZiWEFwWEc0Z0lDQWdQeUJpWVhObExtVjRkR1Z1WkNoamIyMXdLVnh1SUNBZ0lEb2dZMjl0Y0Z4dWZWeHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVkJjM2x1WTFCc1lXTmxhRzlzWkdWeUlDaGNiaUFnWm1GamRHOXllU3hjYmlBZ1pHRjBZU3hjYmlBZ1kyOXVkR1Y0ZEN4Y2JpQWdZMmhwYkdSeVpXNHNYRzRnSUhSaFoxeHVLU0I3WEc0Z0lIWmhjaUJ1YjJSbElEMGdZM0psWVhSbFJXMXdkSGxXVG05a1pTZ3BPMXh1SUNCdWIyUmxMbUZ6ZVc1alJtRmpkRzl5ZVNBOUlHWmhZM1J2Y25rN1hHNGdJRzV2WkdVdVlYTjVibU5OWlhSaElEMGdleUJrWVhSaE9pQmtZWFJoTENCamIyNTBaWGgwT2lCamIyNTBaWGgwTENCamFHbHNaSEpsYmpvZ1kyaHBiR1J5Wlc0c0lIUmhaem9nZEdGbklIMDdYRzRnSUhKbGRIVnliaUJ1YjJSbFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGMyOXNkbVZCYzNsdVkwTnZiWEJ2Ym1WdWRDQW9YRzRnSUdaaFkzUnZjbmtzWEc0Z0lHSmhjMlZEZEc5eVhHNHBJSHRjYmlBZ2FXWWdLR2x6VkhKMVpTaG1ZV04wYjNKNUxtVnljbTl5S1NBbUppQnBjMFJsWmlobVlXTjBiM0o1TG1WeWNtOXlRMjl0Y0NrcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1GamRHOXllUzVsY25KdmNrTnZiWEJjYmlBZ2ZWeHVYRzRnSUdsbUlDaHBjMFJsWmlobVlXTjBiM0o1TG5KbGMyOXNkbVZrS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtWVdOMGIzSjVMbkpsYzI5c2RtVmtYRzRnSUgxY2JseHVJQ0IyWVhJZ2IzZHVaWElnUFNCamRYSnlaVzUwVW1WdVpHVnlhVzVuU1c1emRHRnVZMlU3WEc0Z0lHbG1JQ2h2ZDI1bGNpQW1KaUJwYzBSbFppaG1ZV04wYjNKNUxtOTNibVZ5Y3lrZ0ppWWdabUZqZEc5eWVTNXZkMjVsY25NdWFXNWtaWGhQWmlodmQyNWxjaWtnUFQwOUlDMHhLU0I3WEc0Z0lDQWdMeThnWVd4eVpXRmtlU0J3Wlc1a2FXNW5YRzRnSUNBZ1ptRmpkRzl5ZVM1dmQyNWxjbk11Y0hWemFDaHZkMjVsY2lrN1hHNGdJSDFjYmx4dUlDQnBaaUFvYVhOVWNuVmxLR1poWTNSdmNua3ViRzloWkdsdVp5a2dKaVlnYVhORVpXWW9abUZqZEc5eWVTNXNiMkZrYVc1blEyOXRjQ2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabUZqZEc5eWVTNXNiMkZrYVc1blEyOXRjRnh1SUNCOVhHNWNiaUFnYVdZZ0tHOTNibVZ5SUNZbUlDRnBjMFJsWmlobVlXTjBiM0o1TG05M2JtVnljeWtwSUh0Y2JpQWdJQ0IyWVhJZ2IzZHVaWEp6SUQwZ1ptRmpkRzl5ZVM1dmQyNWxjbk1nUFNCYmIzZHVaWEpkTzF4dUlDQWdJSFpoY2lCemVXNWpJRDBnZEhKMVpUdGNiaUFnSUNCMllYSWdkR2x0WlhKTWIyRmthVzVuSUQwZ2JuVnNiRHRjYmlBZ0lDQjJZWElnZEdsdFpYSlVhVzFsYjNWMElEMGdiblZzYkZ4dVhHNGdJQ0FnT3lodmQyNWxjaWt1Skc5dUtDZG9iMjlyT21SbGMzUnliM2xsWkNjc0lHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJSEpsYlc5MlpTaHZkMjVsY25Nc0lHOTNibVZ5S1RzZ2ZTazdYRzVjYmlBZ0lDQjJZWElnWm05eVkyVlNaVzVrWlhJZ1BTQm1kVzVqZEdsdmJpQW9jbVZ1WkdWeVEyOXRjR3hsZEdWa0tTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJRzkzYm1WeWN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnS0c5M2JtVnljMXRwWFNrdUpHWnZjbU5sVlhCa1lYUmxLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHlaVzVrWlhKRGIyMXdiR1YwWldRcElIdGNiaUFnSUNBZ0lDQWdiM2R1WlhKekxteGxibWQwYUNBOUlEQTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFXMWxja3h2WVdScGJtY2dJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamJHVmhjbFJwYldWdmRYUW9kR2x0WlhKTWIyRmthVzVuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjBhVzFsY2t4dllXUnBibWNnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhVzFsY2xScGJXVnZkWFFnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdsdFpYSlVhVzFsYjNWMEtUdGNiaUFnSUNBZ0lDQWdJQ0IwYVcxbGNsUnBiV1Z2ZFhRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhaaGNpQnlaWE52YkhabElEMGdiMjVqWlNobWRXNWpkR2x2YmlBb2NtVnpLU0I3WEc0Z0lDQWdJQ0F2THlCallXTm9aU0J5WlhOdmJIWmxaRnh1SUNBZ0lDQWdabUZqZEc5eWVTNXlaWE52YkhabFpDQTlJR1Z1YzNWeVpVTjBiM0lvY21WekxDQmlZWE5sUTNSdmNpazdYRzRnSUNBZ0lDQXZMeUJwYm5admEyVWdZMkZzYkdKaFkydHpJRzl1YkhrZ2FXWWdkR2hwY3lCcGN5QnViM1FnWVNCemVXNWphSEp2Ym05MWN5QnlaWE52YkhabFhHNGdJQ0FnSUNBdkx5QW9ZWE41Ym1NZ2NtVnpiMngyWlhNZ1lYSmxJSE5vYVcxdFpXUWdZWE1nYzNsdVkyaHliMjV2ZFhNZ1pIVnlhVzVuSUZOVFVpbGNiaUFnSUNBZ0lHbG1JQ2doYzNsdVl5a2dlMXh1SUNBZ0lDQWdJQ0JtYjNKalpWSmxibVJsY2loMGNuVmxLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRzkzYm1WeWN5NXNaVzVuZEdnZ1BTQXdPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdkbUZ5SUhKbGFtVmpkQ0E5SUc5dVkyVW9ablZ1WTNScGIyNGdLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUNBZ1hDSkdZV2xzWldRZ2RHOGdjbVZ6YjJ4MlpTQmhjM2x1WXlCamIyMXdiMjVsYm5RNklGd2lJQ3NnS0ZOMGNtbHVaeWhtWVdOMGIzSjVLU2tnSzF4dUlDQWdJQ0FnSUNBb2NtVmhjMjl1SUQ4Z0tGd2lYRnh1VW1WaGMyOXVPaUJjSWlBcklISmxZWE52YmlrZ09pQW5KeWxjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvWm1GamRHOXllUzVsY25KdmNrTnZiWEFwS1NCN1hHNGdJQ0FnSUNBZ0lHWmhZM1J2Y25rdVpYSnliM0lnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JtYjNKalpWSmxibVJsY2loMGNuVmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSFpoY2lCeVpYTWdQU0JtWVdOMGIzSjVLSEpsYzI5c2RtVXNJSEpsYW1WamRDazdYRzVjYmlBZ0lDQnBaaUFvYVhOUFltcGxZM1FvY21WektTa2dlMXh1SUNBZ0lDQWdhV1lnS0dselVISnZiV2x6WlNoeVpYTXBLU0I3WEc0Z0lDQWdJQ0FnSUM4dklDZ3BJRDArSUZCeWIyMXBjMlZjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpWVzVrWldZb1ptRmpkRzl5ZVM1eVpYTnZiSFpsWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhNdWRHaGxiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselVISnZiV2x6WlNoeVpYTXVZMjl0Y0c5dVpXNTBLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYTXVZMjl0Y0c5dVpXNTBMblJvWlc0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVhORVpXWW9jbVZ6TG1WeWNtOXlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHWmhZM1J2Y25rdVpYSnliM0pEYjIxd0lEMGdaVzV6ZFhKbFEzUnZjaWh5WlhNdVpYSnliM0lzSUdKaGMyVkRkRzl5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNocGMwUmxaaWh5WlhNdWJHOWhaR2x1WnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0JtWVdOMGIzSjVMbXh2WVdScGJtZERiMjF3SUQwZ1pXNXpkWEpsUTNSdmNpaHlaWE11Ykc5aFpHbHVaeXdnWW1GelpVTjBiM0lwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhNdVpHVnNZWGtnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWmhZM1J2Y25rdWJHOWhaR2x1WnlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJwYldWeVRHOWhaR2x1WnlBOUlITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbGNreHZZV1JwYm1jZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTlZibVJsWmlobVlXTjBiM0o1TG5KbGMyOXNkbVZrS1NBbUppQnBjMVZ1WkdWbUtHWmhZM1J2Y25rdVpYSnliM0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptRmpkRzl5ZVM1c2IyRmthVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNKalpWSmxibVJsY2lobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJSEpsY3k1a1pXeGhlU0I4ZkNBeU1EQXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNocGMwUmxaaWh5WlhNdWRHbHRaVzkxZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYVcxbGNsUnBiV1Z2ZFhRZ1BTQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJwYldWeVZHbHRaVzkxZENBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOVmJtUmxaaWhtWVdOMGIzSjVMbkpsYzI5c2RtVmtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0owYVcxbGIzVjBJQ2hjSWlBcklDaHlaWE11ZEdsdFpXOTFkQ2tnS3lCY0ltMXpLVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlN3Z2NtVnpMblJwYldWdmRYUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM2x1WXlBOUlHWmhiSE5sTzF4dUlDQWdJQzh2SUhKbGRIVnliaUJwYmlCallYTmxJSEpsYzI5c2RtVmtJSE41Ym1Ob2NtOXViM1Z6YkhsY2JpQWdJQ0J5WlhSMWNtNGdabUZqZEc5eWVTNXNiMkZrYVc1blhHNGdJQ0FnSUNBL0lHWmhZM1J2Y25rdWJHOWhaR2x1WjBOdmJYQmNiaUFnSUNBZ0lEb2dabUZqZEc5eWVTNXlaWE52YkhabFpGeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYzBGemVXNWpVR3hoWTJWb2IyeGtaWElnS0c1dlpHVXBJSHRjYmlBZ2NtVjBkWEp1SUc1dlpHVXVhWE5EYjIxdFpXNTBJQ1ltSUc1dlpHVXVZWE41Ym1OR1lXTjBiM0o1WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJuWlhSR2FYSnpkRU52YlhCdmJtVnVkRU5vYVd4a0lDaGphR2xzWkhKbGJpa2dlMXh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoamFHbHNaSEpsYmlrcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTm9hV3hrY21WdUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1l5QTlJR05vYVd4a2NtVnVXMmxkTzF4dUlDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0dNcElDWW1JQ2hwYzBSbFppaGpMbU52YlhCdmJtVnVkRTl3ZEdsdmJuTXBJSHg4SUdselFYTjVibU5RYkdGalpXaHZiR1JsY2loaktTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05jYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvZ0lDb3ZYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCcGJtbDBSWFpsYm5SeklDaDJiU2tnZTF4dUlDQjJiUzVmWlhabGJuUnpJRDBnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0Y2JpQWdkbTB1WDJoaGMwaHZiMnRGZG1WdWRDQTlJR1poYkhObE8xeHVJQ0F2THlCcGJtbDBJSEJoY21WdWRDQmhkSFJoWTJobFpDQmxkbVZ1ZEhOY2JpQWdkbUZ5SUd4cGMzUmxibVZ5Y3lBOUlIWnRMaVJ2Y0hScGIyNXpMbDl3WVhKbGJuUk1hWE4wWlc1bGNuTTdYRzRnSUdsbUlDaHNhWE4wWlc1bGNuTXBJSHRjYmlBZ0lDQjFjR1JoZEdWRGIyMXdiMjVsYm5STWFYTjBaVzVsY25Nb2RtMHNJR3hwYzNSbGJtVnljeWs3WEc0Z0lIMWNibjFjYmx4dWRtRnlJSFJoY21kbGREdGNibHh1Wm5WdVkzUnBiMjRnWVdSa0lDaGxkbVZ1ZEN3Z1ptNHBJSHRjYmlBZ2RHRnlaMlYwTGlSdmJpaGxkbVZ1ZEN3Z1ptNHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnlaVzF2ZG1Va01TQW9aWFpsYm5Rc0lHWnVLU0I3WEc0Z0lIUmhjbWRsZEM0a2IyWm1LR1YyWlc1MExDQm1iaWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJR055WldGMFpVOXVZMlZJWVc1a2JHVnlJQ2hsZG1WdWRDd2dabTRwSUh0Y2JpQWdkbUZ5SUY5MFlYSm5aWFFnUFNCMFlYSm5aWFE3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCdmJtTmxTR0Z1Wkd4bGNpQW9LU0I3WEc0Z0lDQWdkbUZ5SUhKbGN5QTlJR1p1TG1Gd2NHeDVLRzUxYkd3c0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ2FXWWdLSEpsY3lBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ1gzUmhjbWRsZEM0a2IyWm1LR1YyWlc1MExDQnZibU5sU0dGdVpHeGxjaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhWd1pHRjBaVU52YlhCdmJtVnVkRXhwYzNSbGJtVnljeUFvWEc0Z0lIWnRMRnh1SUNCc2FYTjBaVzVsY25Nc1hHNGdJRzlzWkV4cGMzUmxibVZ5YzF4dUtTQjdYRzRnSUhSaGNtZGxkQ0E5SUhadE8xeHVJQ0IxY0dSaGRHVk1hWE4wWlc1bGNuTW9iR2x6ZEdWdVpYSnpMQ0J2YkdSTWFYTjBaVzVsY25NZ2ZId2dlMzBzSUdGa1pDd2djbVZ0YjNabEpERXNJR055WldGMFpVOXVZMlZJWVc1a2JHVnlMQ0IyYlNrN1hHNGdJSFJoY21kbGRDQTlJSFZ1WkdWbWFXNWxaRHRjYm4xY2JseHVablZ1WTNScGIyNGdaWFpsYm5SelRXbDRhVzRnS0ZaMVpTa2dlMXh1SUNCMllYSWdhRzl2YTFKRklEMGdMMTVvYjI5ck9pODdYRzRnSUZaMVpTNXdjbTkwYjNSNWNHVXVKRzl1SUQwZ1puVnVZM1JwYjI0Z0tHVjJaVzUwTENCbWJpa2dlMXh1SUNBZ0lIWmhjaUIyYlNBOUlIUm9hWE03WEc0Z0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aWFpsYm5RcEtTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR1YyWlc1MExteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IyYlM0a2IyNG9aWFpsYm5SYmFWMHNJR1p1S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdLSFp0TGw5bGRtVnVkSE5iWlhabGJuUmRJSHg4SUNoMmJTNWZaWFpsYm5SelcyVjJaVzUwWFNBOUlGdGRLU2t1Y0hWemFDaG1iaWs3WEc0Z0lDQWdJQ0F2THlCdmNIUnBiV2w2WlNCb2IyOXJPbVYyWlc1MElHTnZjM1FnWW5rZ2RYTnBibWNnWVNCaWIyOXNaV0Z1SUdac1lXY2diV0Z5YTJWa0lHRjBJSEpsWjJsemRISmhkR2x2Ymx4dUlDQWdJQ0FnTHk4Z2FXNXpkR1ZoWkNCdlppQmhJR2hoYzJnZ2JHOXZhM1Z3WEc0Z0lDQWdJQ0JwWmlBb2FHOXZhMUpGTG5SbGMzUW9aWFpsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJSFp0TGw5b1lYTkliMjlyUlhabGJuUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkbTFjYmlBZ2ZUdGNibHh1SUNCV2RXVXVjSEp2ZEc5MGVYQmxMaVJ2Ym1ObElEMGdablZ1WTNScGIyNGdLR1YyWlc1MExDQm1iaWtnZTF4dUlDQWdJSFpoY2lCMmJTQTlJSFJvYVhNN1hHNGdJQ0FnWm5WdVkzUnBiMjRnYjI0Z0tDa2dlMXh1SUNBZ0lDQWdkbTB1Skc5bVppaGxkbVZ1ZEN3Z2IyNHBPMXh1SUNBZ0lDQWdabTR1WVhCd2JIa29kbTBzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZlZ4dUlDQWdJRzl1TG1adUlEMGdabTQ3WEc0Z0lDQWdkbTB1Skc5dUtHVjJaVzUwTENCdmJpazdYRzRnSUNBZ2NtVjBkWEp1SUhadFhHNGdJSDA3WEc1Y2JpQWdWblZsTG5CeWIzUnZkSGx3WlM0a2IyWm1JRDBnWm5WdVkzUnBiMjRnS0dWMlpXNTBMQ0JtYmlrZ2UxeHVJQ0FnSUhaaGNpQjJiU0E5SUhSb2FYTTdYRzRnSUNBZ0x5OGdZV3hzWEc0Z0lDQWdhV1lnS0NGaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCMmJTNWZaWFpsYm5SeklEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjJiVnh1SUNBZ0lIMWNiaUFnSUNBdkx5QmhjbkpoZVNCdlppQmxkbVZ1ZEhOY2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hsZG1WdWRDa3BJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2trTVNBOUlEQXNJR3dnUFNCbGRtVnVkQzVzWlc1bmRHZzdJR2trTVNBOElHdzdJR2trTVNzcktTQjdYRzRnSUNBZ0lDQWdJSFp0TGlSdlptWW9aWFpsYm5SYmFTUXhYU3dnWm00cE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhadFhHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhOd1pXTnBabWxqSUdWMlpXNTBYRzRnSUNBZ2RtRnlJR05pY3lBOUlIWnRMbDlsZG1WdWRITmJaWFpsYm5SZE8xeHVJQ0FnSUdsbUlDZ2hZMkp6S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZG0xY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NGbWJpa2dlMXh1SUNBZ0lDQWdkbTB1WDJWMlpXNTBjMXRsZG1WdWRGMGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhadFhHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhOd1pXTnBabWxqSUdoaGJtUnNaWEpjYmlBZ0lDQjJZWElnWTJJN1hHNGdJQ0FnZG1GeUlHa2dQU0JqWW5NdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bElDaHBMUzBwSUh0Y2JpQWdJQ0FnSUdOaUlEMGdZMkp6VzJsZE8xeHVJQ0FnSUNBZ2FXWWdLR05pSUQwOVBTQm1iaUI4ZkNCallpNW1iaUE5UFQwZ1ptNHBJSHRjYmlBZ0lDQWdJQ0FnWTJKekxuTndiR2xqWlNocExDQXhLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFp0WEc0Z0lIMDdYRzVjYmlBZ1ZuVmxMbkJ5YjNSdmRIbHdaUzRrWlcxcGRDQTlJR1oxYm1OMGFXOXVJQ2hsZG1WdWRDa2dlMXh1SUNBZ0lIWmhjaUIyYlNBOUlIUm9hWE03WEc0Z0lDQWdlMXh1SUNBZ0lDQWdkbUZ5SUd4dmQyVnlRMkZ6WlVWMlpXNTBJRDBnWlhabGJuUXVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdJQ0FnSUdsbUlDaHNiM2RsY2tOaGMyVkZkbVZ1ZENBaFBUMGdaWFpsYm5RZ0ppWWdkbTB1WDJWMlpXNTBjMXRzYjNkbGNrTmhjMlZGZG1WdWRGMHBJSHRjYmlBZ0lDQWdJQ0FnZEdsd0tGeHVJQ0FnSUNBZ0lDQWdJRndpUlhabGJuUWdYRnhjSWx3aUlDc2diRzkzWlhKRFlYTmxSWFpsYm5RZ0t5QmNJbHhjWENJZ2FYTWdaVzFwZEhSbFpDQnBiaUJqYjIxd2IyNWxiblFnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2htYjNKdFlYUkRiMjF3YjI1bGJuUk9ZVzFsS0hadEtTa2dLeUJjSWlCaWRYUWdkR2hsSUdoaGJtUnNaWElnYVhNZ2NtVm5hWE4wWlhKbFpDQm1iM0lnWEZ4Y0lsd2lJQ3NnWlhabGJuUWdLeUJjSWx4Y1hDSXVJRndpSUN0Y2JpQWdJQ0FnSUNBZ0lDQmNJazV2ZEdVZ2RHaGhkQ0JJVkUxTUlHRjBkSEpwWW5WMFpYTWdZWEpsSUdOaGMyVXRhVzV6Wlc1emFYUnBkbVVnWVc1a0lIbHZkU0JqWVc1dWIzUWdkWE5sSUZ3aUlDdGNiaUFnSUNBZ0lDQWdJQ0JjSW5ZdGIyNGdkRzhnYkdsemRHVnVJSFJ2SUdOaGJXVnNRMkZ6WlNCbGRtVnVkSE1nZDJobGJpQjFjMmx1WnlCcGJpMUVUMDBnZEdWdGNHeGhkR1Z6TGlCY0lpQXJYRzRnSUNBZ0lDQWdJQ0FnWENKWmIzVWdjMmh2ZFd4a0lIQnliMkpoWW14NUlIVnpaU0JjWEZ3aVhDSWdLeUFvYUhsd2FHVnVZWFJsS0dWMlpXNTBLU2tnS3lCY0lseGNYQ0lnYVc1emRHVmhaQ0J2WmlCY1hGd2lYQ0lnS3lCbGRtVnVkQ0FySUZ3aVhGeGNJaTVjSWx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ1kySnpJRDBnZG0wdVgyVjJaVzUwYzF0bGRtVnVkRjA3WEc0Z0lDQWdhV1lnS0dOaWN5a2dlMXh1SUNBZ0lDQWdZMkp6SUQwZ1kySnpMbXhsYm1kMGFDQStJREVnUHlCMGIwRnljbUY1S0dOaWN5a2dPaUJqWW5NN1hHNGdJQ0FnSUNCMllYSWdZWEpuY3lBOUlIUnZRWEp5WVhrb1lYSm5kVzFsYm5SekxDQXhLVHRjYmlBZ0lDQWdJSFpoY2lCcGJtWnZJRDBnWENKbGRtVnVkQ0JvWVc1a2JHVnlJR1p2Y2lCY1hGd2lYQ0lnS3lCbGRtVnVkQ0FySUZ3aVhGeGNJbHdpTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCalluTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdsdWRtOXJaVmRwZEdoRmNuSnZja2hoYm1Sc2FXNW5LR05pYzF0cFhTd2dkbTBzSUdGeVozTXNJSFp0TENCcGJtWnZLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhadFhHNGdJSDA3WEc1OVhHNWNiaThxSUNBcUwxeHVYRzUyWVhJZ1lXTjBhWFpsU1c1emRHRnVZMlVnUFNCdWRXeHNPMXh1ZG1GeUlHbHpWWEJrWVhScGJtZERhR2xzWkVOdmJYQnZibVZ1ZENBOUlHWmhiSE5sTzF4dVhHNW1kVzVqZEdsdmJpQnpaWFJCWTNScGRtVkpibk4wWVc1alpTaDJiU2tnZTF4dUlDQjJZWElnY0hKbGRrRmpkR2wyWlVsdWMzUmhibU5sSUQwZ1lXTjBhWFpsU1c1emRHRnVZMlU3WEc0Z0lHRmpkR2wyWlVsdWMzUmhibU5sSUQwZ2RtMDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWVdOMGFYWmxTVzV6ZEdGdVkyVWdQU0J3Y21WMlFXTjBhWFpsU1c1emRHRnVZMlU3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRXhwWm1WamVXTnNaU0FvZG0wcElIdGNiaUFnZG1GeUlHOXdkR2x2Ym5NZ1BTQjJiUzRrYjNCMGFXOXVjenRjYmx4dUlDQXZMeUJzYjJOaGRHVWdabWx5YzNRZ2JtOXVMV0ZpYzNSeVlXTjBJSEJoY21WdWRGeHVJQ0IyWVhJZ2NHRnlaVzUwSUQwZ2IzQjBhVzl1Y3k1d1lYSmxiblE3WEc0Z0lHbG1JQ2h3WVhKbGJuUWdKaVlnSVc5d2RHbHZibk11WVdKemRISmhZM1FwSUh0Y2JpQWdJQ0IzYUdsc1pTQW9jR0Z5Wlc1MExpUnZjSFJwYjI1ekxtRmljM1J5WVdOMElDWW1JSEJoY21WdWRDNGtjR0Z5Wlc1MEtTQjdYRzRnSUNBZ0lDQndZWEpsYm5RZ1BTQndZWEpsYm5RdUpIQmhjbVZ1ZER0Y2JpQWdJQ0I5WEc0Z0lDQWdjR0Z5Wlc1MExpUmphR2xzWkhKbGJpNXdkWE5vS0hadEtUdGNiaUFnZlZ4dVhHNGdJSFp0TGlSd1lYSmxiblFnUFNCd1lYSmxiblE3WEc0Z0lIWnRMaVJ5YjI5MElEMGdjR0Z5Wlc1MElEOGdjR0Z5Wlc1MExpUnliMjkwSURvZ2RtMDdYRzVjYmlBZ2RtMHVKR05vYVd4a2NtVnVJRDBnVzEwN1hHNGdJSFp0TGlSeVpXWnpJRDBnZTMwN1hHNWNiaUFnZG0wdVgzZGhkR05vWlhJZ1BTQnVkV3hzTzF4dUlDQjJiUzVmYVc1aFkzUnBkbVVnUFNCdWRXeHNPMXh1SUNCMmJTNWZaR2x5WldOMFNXNWhZM1JwZG1VZ1BTQm1ZV3h6WlR0Y2JpQWdkbTB1WDJselRXOTFiblJsWkNBOUlHWmhiSE5sTzF4dUlDQjJiUzVmYVhORVpYTjBjbTk1WldRZ1BTQm1ZV3h6WlR0Y2JpQWdkbTB1WDJselFtVnBibWRFWlhOMGNtOTVaV1FnUFNCbVlXeHpaVHRjYm4xY2JseHVablZ1WTNScGIyNGdiR2xtWldONVkyeGxUV2w0YVc0Z0tGWjFaU2tnZTF4dUlDQldkV1V1Y0hKdmRHOTBlWEJsTGw5MWNHUmhkR1VnUFNCbWRXNWpkR2x2YmlBb2RtNXZaR1VzSUdoNVpISmhkR2x1WnlrZ2UxeHVJQ0FnSUhaaGNpQjJiU0E5SUhSb2FYTTdYRzRnSUNBZ2RtRnlJSEJ5WlhaRmJDQTlJSFp0TGlSbGJEdGNiaUFnSUNCMllYSWdjSEpsZGxadWIyUmxJRDBnZG0wdVgzWnViMlJsTzF4dUlDQWdJSFpoY2lCeVpYTjBiM0psUVdOMGFYWmxTVzV6ZEdGdVkyVWdQU0J6WlhSQlkzUnBkbVZKYm5OMFlXNWpaU2gyYlNrN1hHNGdJQ0FnZG0wdVgzWnViMlJsSUQwZ2RtNXZaR1U3WEc0Z0lDQWdMeThnVm5WbExuQnliM1J2ZEhsd1pTNWZYM0JoZEdOb1gxOGdhWE1nYVc1cVpXTjBaV1FnYVc0Z1pXNTBjbmtnY0c5cGJuUnpYRzRnSUNBZ0x5OGdZbUZ6WldRZ2IyNGdkR2hsSUhKbGJtUmxjbWx1WnlCaVlXTnJaVzVrSUhWelpXUXVYRzRnSUNBZ2FXWWdLQ0Z3Y21WMlZtNXZaR1VwSUh0Y2JpQWdJQ0FnSUM4dklHbHVhWFJwWVd3Z2NtVnVaR1Z5WEc0Z0lDQWdJQ0IyYlM0a1pXd2dQU0IyYlM1ZlgzQmhkR05vWDE4b2RtMHVKR1ZzTENCMmJtOWtaU3dnYUhsa2NtRjBhVzVuTENCbVlXeHpaU0F2S2lCeVpXMXZkbVZQYm14NUlDb3ZLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdkWEJrWVhSbGMxeHVJQ0FnSUNBZ2RtMHVKR1ZzSUQwZ2RtMHVYMTl3WVhSamFGOWZLSEJ5WlhaV2JtOWtaU3dnZG01dlpHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYTjBiM0psUVdOMGFYWmxTVzV6ZEdGdVkyVW9LVHRjYmlBZ0lDQXZMeUIxY0dSaGRHVWdYMTkyZFdWZlh5QnlaV1psY21WdVkyVmNiaUFnSUNCcFppQW9jSEpsZGtWc0tTQjdYRzRnSUNBZ0lDQndjbVYyUld3dVgxOTJkV1ZmWHlBOUlHNTFiR3c3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gyYlM0a1pXd3BJSHRjYmlBZ0lDQWdJSFp0TGlSbGJDNWZYM1oxWlY5ZklEMGdkbTA3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJR2xtSUhCaGNtVnVkQ0JwY3lCaGJpQklUME1zSUhWd1pHRjBaU0JwZEhNZ0pHVnNJR0Z6SUhkbGJHeGNiaUFnSUNCcFppQW9kbTB1SkhadWIyUmxJQ1ltSUhadExpUndZWEpsYm5RZ0ppWWdkbTB1SkhadWIyUmxJRDA5UFNCMmJTNGtjR0Z5Wlc1MExsOTJibTlrWlNrZ2UxeHVJQ0FnSUNBZ2RtMHVKSEJoY21WdWRDNGtaV3dnUFNCMmJTNGtaV3c3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSFZ3WkdGMFpXUWdhRzl2YXlCcGN5QmpZV3hzWldRZ1lua2dkR2hsSUhOamFHVmtkV3hsY2lCMGJ5Qmxibk4xY21VZ2RHaGhkQ0JqYUdsc1pISmxiaUJoY21WY2JpQWdJQ0F2THlCMWNHUmhkR1ZrSUdsdUlHRWdjR0Z5Wlc1MEozTWdkWEJrWVhSbFpDQm9iMjlyTGx4dUlDQjlPMXh1WEc0Z0lGWjFaUzV3Y205MGIzUjVjR1V1SkdadmNtTmxWWEJrWVhSbElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCMmJTQTlJSFJvYVhNN1hHNGdJQ0FnYVdZZ0tIWnRMbDkzWVhSamFHVnlLU0I3WEc0Z0lDQWdJQ0IyYlM1ZmQyRjBZMmhsY2k1MWNHUmhkR1VvS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ1ZuVmxMbkJ5YjNSdmRIbHdaUzRrWkdWemRISnZlU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMllYSWdkbTBnUFNCMGFHbHpPMXh1SUNBZ0lHbG1JQ2gyYlM1ZmFYTkNaV2x1WjBSbGMzUnliM2xsWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1SUNBZ0lHTmhiR3hJYjI5cktIWnRMQ0FuWW1WbWIzSmxSR1Z6ZEhKdmVTY3BPMXh1SUNBZ0lIWnRMbDlwYzBKbGFXNW5SR1Z6ZEhKdmVXVmtJRDBnZEhKMVpUdGNiaUFnSUNBdkx5QnlaVzF2ZG1VZ2MyVnNaaUJtY205dElIQmhjbVZ1ZEZ4dUlDQWdJSFpoY2lCd1lYSmxiblFnUFNCMmJTNGtjR0Z5Wlc1ME8xeHVJQ0FnSUdsbUlDaHdZWEpsYm5RZ0ppWWdJWEJoY21WdWRDNWZhWE5DWldsdVowUmxjM1J5YjNsbFpDQW1KaUFoZG0wdUpHOXdkR2x2Ym5NdVlXSnpkSEpoWTNRcElIdGNiaUFnSUNBZ0lISmxiVzkyWlNod1lYSmxiblF1SkdOb2FXeGtjbVZ1TENCMmJTazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklIUmxZWEprYjNkdUlIZGhkR05vWlhKelhHNGdJQ0FnYVdZZ0tIWnRMbDkzWVhSamFHVnlLU0I3WEc0Z0lDQWdJQ0IyYlM1ZmQyRjBZMmhsY2k1MFpXRnlaRzkzYmlncE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2FTQTlJSFp0TGw5M1lYUmphR1Z5Y3k1c1pXNW5kR2c3WEc0Z0lDQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJQ0FnZG0wdVgzZGhkR05vWlhKelcybGRMblJsWVhKa2IzZHVLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSEpsYlc5MlpTQnlaV1psY21WdVkyVWdabkp2YlNCa1lYUmhJRzlpWEc0Z0lDQWdMeThnWm5KdmVtVnVJRzlpYW1WamRDQnRZWGtnYm05MElHaGhkbVVnYjJKelpYSjJaWEl1WEc0Z0lDQWdhV1lnS0hadExsOWtZWFJoTGw5ZmIySmZYeWtnZTF4dUlDQWdJQ0FnZG0wdVgyUmhkR0V1WDE5dllsOWZMblp0UTI5MWJuUXRMVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdZMkZzYkNCMGFHVWdiR0Z6ZENCb2IyOXJMaTR1WEc0Z0lDQWdkbTB1WDJselJHVnpkSEp2ZVdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0F2THlCcGJuWnZhMlVnWkdWemRISnZlU0JvYjI5cmN5QnZiaUJqZFhKeVpXNTBJSEpsYm1SbGNtVmtJSFJ5WldWY2JpQWdJQ0IyYlM1ZlgzQmhkR05vWDE4b2RtMHVYM1p1YjJSbExDQnVkV3hzS1R0Y2JpQWdJQ0F2THlCbWFYSmxJR1JsYzNSeWIzbGxaQ0JvYjI5clhHNGdJQ0FnWTJGc2JFaHZiMnNvZG0wc0lDZGtaWE4wY205NVpXUW5LVHRjYmlBZ0lDQXZMeUIwZFhKdUlHOW1aaUJoYkd3Z2FXNXpkR0Z1WTJVZ2JHbHpkR1Z1WlhKekxseHVJQ0FnSUhadExpUnZabVlvS1R0Y2JpQWdJQ0F2THlCeVpXMXZkbVVnWDE5MmRXVmZYeUJ5WldabGNtVnVZMlZjYmlBZ0lDQnBaaUFvZG0wdUpHVnNLU0I3WEc0Z0lDQWdJQ0IyYlM0a1pXd3VYMTkyZFdWZlh5QTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhKbGJHVmhjMlVnWTJseVkzVnNZWElnY21WbVpYSmxibU5sSUNnak5qYzFPU2xjYmlBZ0lDQnBaaUFvZG0wdUpIWnViMlJsS1NCN1hHNGdJQ0FnSUNCMmJTNGtkbTV2WkdVdWNHRnlaVzUwSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUgwN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUcxdmRXNTBRMjl0Y0c5dVpXNTBJQ2hjYmlBZ2RtMHNYRzRnSUdWc0xGeHVJQ0JvZVdSeVlYUnBibWRjYmlrZ2UxeHVJQ0IyYlM0a1pXd2dQU0JsYkR0Y2JpQWdhV1lnS0NGMmJTNGtiM0IwYVc5dWN5NXlaVzVrWlhJcElIdGNiaUFnSUNCMmJTNGtiM0IwYVc5dWN5NXlaVzVrWlhJZ1BTQmpjbVZoZEdWRmJYQjBlVlpPYjJSbE8xeHVJQ0FnSUh0Y2JpQWdJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNBZ0lDQWdhV1lnS0NoMmJTNGtiM0IwYVc5dWN5NTBaVzF3YkdGMFpTQW1KaUIyYlM0a2IzQjBhVzl1Y3k1MFpXMXdiR0YwWlM1amFHRnlRWFFvTUNrZ0lUMDlJQ2NqSnlrZ2ZIeGNiaUFnSUNBZ0lDQWdkbTB1Skc5d2RHbHZibk11Wld3Z2ZId2daV3dwSUh0Y2JpQWdJQ0FnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnSUNBbldXOTFJR0Z5WlNCMWMybHVaeUIwYUdVZ2NuVnVkR2x0WlMxdmJteDVJR0oxYVd4a0lHOW1JRloxWlNCM2FHVnlaU0IwYUdVZ2RHVnRjR3hoZEdVZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSjJOdmJYQnBiR1Z5SUdseklHNXZkQ0JoZG1GcGJHRmliR1V1SUVWcGRHaGxjaUJ3Y21VdFkyOXRjR2xzWlNCMGFHVWdkR1Z0Y0d4aGRHVnpJR2x1ZEc4Z0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSjNKbGJtUmxjaUJtZFc1amRHbHZibk1zSUc5eUlIVnpaU0IwYUdVZ1kyOXRjR2xzWlhJdGFXNWpiSFZrWldRZ1luVnBiR1F1Snl4Y2JpQWdJQ0FnSUNBZ0lDQjJiVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FuUm1GcGJHVmtJSFJ2SUcxdmRXNTBJR052YlhCdmJtVnVkRG9nZEdWdGNHeGhkR1VnYjNJZ2NtVnVaR1Z5SUdaMWJtTjBhVzl1SUc1dmRDQmtaV1pwYm1Wa0xpY3NYRzRnSUNBZ0lDQWdJQ0FnZG0xY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmlBZ1kyRnNiRWh2YjJzb2RtMHNJQ2RpWldadmNtVk5iM1Z1ZENjcE8xeHVYRzRnSUhaaGNpQjFjR1JoZEdWRGIyMXdiMjVsYm5RN1hHNGdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0JwWmlBb1kyOXVabWxuTG5CbGNtWnZjbTFoYm1ObElDWW1JRzFoY21zcElIdGNiaUFnSUNCMWNHUmhkR1ZEYjIxd2IyNWxiblFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQjJZWElnYm1GdFpTQTlJSFp0TGw5dVlXMWxPMXh1SUNBZ0lDQWdkbUZ5SUdsa0lEMGdkbTB1WDNWcFpEdGNiaUFnSUNBZ0lIWmhjaUJ6ZEdGeWRGUmhaeUE5SUZ3aWRuVmxMWEJsY21ZdGMzUmhjblE2WENJZ0t5QnBaRHRjYmlBZ0lDQWdJSFpoY2lCbGJtUlVZV2NnUFNCY0luWjFaUzF3WlhKbUxXVnVaRHBjSWlBcklHbGtPMXh1WEc0Z0lDQWdJQ0J0WVhKcktITjBZWEowVkdGbktUdGNiaUFnSUNBZ0lIWmhjaUIyYm05a1pTQTlJSFp0TGw5eVpXNWtaWElvS1R0Y2JpQWdJQ0FnSUcxaGNtc29aVzVrVkdGbktUdGNiaUFnSUNBZ0lHMWxZWE4xY21Vb0tGd2lkblZsSUZ3aUlDc2dibUZ0WlNBcklGd2lJSEpsYm1SbGNsd2lLU3dnYzNSaGNuUlVZV2NzSUdWdVpGUmhaeWs3WEc1Y2JpQWdJQ0FnSUcxaGNtc29jM1JoY25SVVlXY3BPMXh1SUNBZ0lDQWdkbTB1WDNWd1pHRjBaU2gyYm05a1pTd2dhSGxrY21GMGFXNW5LVHRjYmlBZ0lDQWdJRzFoY21zb1pXNWtWR0ZuS1R0Y2JpQWdJQ0FnSUcxbFlYTjFjbVVvS0Z3aWRuVmxJRndpSUNzZ2JtRnRaU0FySUZ3aUlIQmhkR05vWENJcExDQnpkR0Z5ZEZSaFp5d2daVzVrVkdGbktUdGNiaUFnSUNCOU8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIVndaR0YwWlVOdmJYQnZibVZ1ZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSFp0TGw5MWNHUmhkR1VvZG0wdVgzSmxibVJsY2lncExDQm9lV1J5WVhScGJtY3BPMXh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0F2THlCM1pTQnpaWFFnZEdocGN5QjBieUIyYlM1ZmQyRjBZMmhsY2lCcGJuTnBaR1VnZEdobElIZGhkR05vWlhJbmN5QmpiMjV6ZEhKMVkzUnZjbHh1SUNBdkx5QnphVzVqWlNCMGFHVWdkMkYwWTJobGNpZHpJR2x1YVhScFlXd2djR0YwWTJnZ2JXRjVJR05oYkd3Z0pHWnZjbU5sVlhCa1lYUmxJQ2hsTG1jdUlHbHVjMmxrWlNCamFHbHNaRnh1SUNBdkx5QmpiMjF3YjI1bGJuUW5jeUJ0YjNWdWRHVmtJR2h2YjJzcExDQjNhR2xqYUNCeVpXeHBaWE1nYjI0Z2RtMHVYM2RoZEdOb1pYSWdZbVZwYm1jZ1lXeHlaV0ZrZVNCa1pXWnBibVZrWEc0Z0lHNWxkeUJYWVhSamFHVnlLSFp0TENCMWNHUmhkR1ZEYjIxd2IyNWxiblFzSUc1dmIzQXNJSHRjYmlBZ0lDQmlaV1p2Y21VNklHWjFibU4wYVc5dUlHSmxabTl5WlNBb0tTQjdYRzRnSUNBZ0lDQnBaaUFvZG0wdVgybHpUVzkxYm5SbFpDQW1KaUFoZG0wdVgybHpSR1Z6ZEhKdmVXVmtLU0I3WEc0Z0lDQWdJQ0FnSUdOaGJHeEliMjlyS0hadExDQW5ZbVZtYjNKbFZYQmtZWFJsSnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlMQ0IwY25WbElDOHFJR2x6VW1WdVpHVnlWMkYwWTJobGNpQXFMeWs3WEc0Z0lHaDVaSEpoZEdsdVp5QTlJR1poYkhObE8xeHVYRzRnSUM4dklHMWhiblZoYkd4NUlHMXZkVzUwWldRZ2FXNXpkR0Z1WTJVc0lHTmhiR3dnYlc5MWJuUmxaQ0J2YmlCelpXeG1YRzRnSUM4dklHMXZkVzUwWldRZ2FYTWdZMkZzYkdWa0lHWnZjaUJ5Wlc1a1pYSXRZM0psWVhSbFpDQmphR2xzWkNCamIyMXdiMjVsYm5SeklHbHVJR2wwY3lCcGJuTmxjblJsWkNCb2IyOXJYRzRnSUdsbUlDaDJiUzRrZG01dlpHVWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lIWnRMbDlwYzAxdmRXNTBaV1FnUFNCMGNuVmxPMXh1SUNBZ0lHTmhiR3hJYjI5cktIWnRMQ0FuYlc5MWJuUmxaQ2NwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUIyYlZ4dWZWeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVkRhR2xzWkVOdmJYQnZibVZ1ZENBb1hHNGdJSFp0TEZ4dUlDQndjbTl3YzBSaGRHRXNYRzRnSUd4cGMzUmxibVZ5Y3l4Y2JpQWdjR0Z5Wlc1MFZtNXZaR1VzWEc0Z0lISmxibVJsY2tOb2FXeGtjbVZ1WEc0cElIdGNiaUFnZTF4dUlDQWdJR2x6VlhCa1lYUnBibWREYUdsc1pFTnZiWEJ2Ym1WdWRDQTlJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQXZMeUJrWlhSbGNtMXBibVVnZDJobGRHaGxjaUJqYjIxd2IyNWxiblFnYUdGeklITnNiM1FnWTJocGJHUnlaVzVjYmlBZ0x5OGdkMlVnYm1WbFpDQjBieUJrYnlCMGFHbHpJR0psWm05eVpTQnZkbVZ5ZDNKcGRHbHVaeUFrYjNCMGFXOXVjeTVmY21WdVpHVnlRMmhwYkdSeVpXNHVYRzVjYmlBZ0x5OGdZMmhsWTJzZ2FXWWdkR2hsY21VZ1lYSmxJR1I1Ym1GdGFXTWdjMk52Y0dWa1UyeHZkSE1nS0doaGJtUXRkM0pwZEhSbGJpQnZjaUJqYjIxd2FXeGxaQ0JpZFhRZ2QybDBhRnh1SUNBdkx5QmtlVzVoYldsaklITnNiM1FnYm1GdFpYTXBMaUJUZEdGMGFXTWdjMk52Y0dWa0lITnNiM1J6SUdOdmJYQnBiR1ZrSUdaeWIyMGdkR1Z0Y0d4aGRHVWdhR0Z6SUhSb1pWeHVJQ0F2THlCY0lpUnpkR0ZpYkdWY0lpQnRZWEpyWlhJdVhHNGdJSFpoY2lCdVpYZFRZMjl3WldSVGJHOTBjeUE5SUhCaGNtVnVkRlp1YjJSbExtUmhkR0V1YzJOdmNHVmtVMnh2ZEhNN1hHNGdJSFpoY2lCdmJHUlRZMjl3WldSVGJHOTBjeUE5SUhadExpUnpZMjl3WldSVGJHOTBjenRjYmlBZ2RtRnlJR2hoYzBSNWJtRnRhV05UWTI5d1pXUlRiRzkwSUQwZ0lTRW9YRzRnSUNBZ0tHNWxkMU5qYjNCbFpGTnNiM1J6SUNZbUlDRnVaWGRUWTI5d1pXUlRiRzkwY3k0a2MzUmhZbXhsS1NCOGZGeHVJQ0FnSUNodmJHUlRZMjl3WldSVGJHOTBjeUFoUFQwZ1pXMXdkSGxQWW1wbFkzUWdKaVlnSVc5c1pGTmpiM0JsWkZOc2IzUnpMaVJ6ZEdGaWJHVXBJSHg4WEc0Z0lDQWdLRzVsZDFOamIzQmxaRk5zYjNSeklDWW1JSFp0TGlSelkyOXdaV1JUYkc5MGN5NGthMlY1SUNFOVBTQnVaWGRUWTI5d1pXUlRiRzkwY3k0a2EyVjVLVnh1SUNBcE8xeHVYRzRnSUM4dklFRnVlU0J6ZEdGMGFXTWdjMnh2ZENCamFHbHNaSEpsYmlCbWNtOXRJSFJvWlNCd1lYSmxiblFnYldGNUlHaGhkbVVnWTJoaGJtZGxaQ0JrZFhKcGJtY2djR0Z5Wlc1MEozTmNiaUFnTHk4Z2RYQmtZWFJsTGlCRWVXNWhiV2xqSUhOamIzQmxaQ0J6Ykc5MGN5QnRZWGtnWVd4emJ5Qm9ZWFpsSUdOb1lXNW5aV1F1SUVsdUlITjFZMmdnWTJGelpYTXNJR0VnWm05eVkyVmtYRzRnSUM4dklIVndaR0YwWlNCcGN5QnVaV05sYzNOaGNua2dkRzhnWlc1emRYSmxJR052Y25KbFkzUnVaWE56TGx4dUlDQjJZWElnYm1WbFpITkdiM0pqWlZWd1pHRjBaU0E5SUNFaEtGeHVJQ0FnSUhKbGJtUmxja05vYVd4a2NtVnVJSHg4SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYUdGeklHNWxkeUJ6ZEdGMGFXTWdjMnh2ZEhOY2JpQWdJQ0IyYlM0a2IzQjBhVzl1Y3k1ZmNtVnVaR1Z5UTJocGJHUnlaVzRnZkh3Z0lDOHZJR2hoY3lCdmJHUWdjM1JoZEdsaklITnNiM1J6WEc0Z0lDQWdhR0Z6UkhsdVlXMXBZMU5qYjNCbFpGTnNiM1JjYmlBZ0tUdGNibHh1SUNCMmJTNGtiM0IwYVc5dWN5NWZjR0Z5Wlc1MFZtNXZaR1VnUFNCd1lYSmxiblJXYm05a1pUdGNiaUFnZG0wdUpIWnViMlJsSUQwZ2NHRnlaVzUwVm01dlpHVTdJQzh2SUhWd1pHRjBaU0IyYlNkeklIQnNZV05sYUc5c1pHVnlJRzV2WkdVZ2QybDBhRzkxZENCeVpTMXlaVzVrWlhKY2JseHVJQ0JwWmlBb2RtMHVYM1p1YjJSbEtTQjdJQzh2SUhWd1pHRjBaU0JqYUdsc1pDQjBjbVZsSjNNZ2NHRnlaVzUwWEc0Z0lDQWdkbTB1WDNadWIyUmxMbkJoY21WdWRDQTlJSEJoY21WdWRGWnViMlJsTzF4dUlDQjlYRzRnSUhadExpUnZjSFJwYjI1ekxsOXlaVzVrWlhKRGFHbHNaSEpsYmlBOUlISmxibVJsY2tOb2FXeGtjbVZ1TzF4dVhHNGdJQzh2SUhWd1pHRjBaU0FrWVhSMGNuTWdZVzVrSUNSc2FYTjBaVzVsY25NZ2FHRnphRnh1SUNBdkx5QjBhR1Z6WlNCaGNtVWdZV3h6YnlCeVpXRmpkR2wyWlNCemJ5QjBhR1Y1SUcxaGVTQjBjbWxuWjJWeUlHTm9hV3hrSUhWd1pHRjBaU0JwWmlCMGFHVWdZMmhwYkdSY2JpQWdMeThnZFhObFpDQjBhR1Z0SUdSMWNtbHVaeUJ5Wlc1a1pYSmNiaUFnZG0wdUpHRjBkSEp6SUQwZ2NHRnlaVzUwVm01dlpHVXVaR0YwWVM1aGRIUnljeUI4ZkNCbGJYQjBlVTlpYW1WamREdGNiaUFnZG0wdUpHeHBjM1JsYm1WeWN5QTlJR3hwYzNSbGJtVnljeUI4ZkNCbGJYQjBlVTlpYW1WamREdGNibHh1SUNBdkx5QjFjR1JoZEdVZ2NISnZjSE5jYmlBZ2FXWWdLSEJ5YjNCelJHRjBZU0FtSmlCMmJTNGtiM0IwYVc5dWN5NXdjbTl3Y3lrZ2UxeHVJQ0FnSUhSdloyZHNaVTlpYzJWeWRtbHVaeWhtWVd4elpTazdYRzRnSUNBZ2RtRnlJSEJ5YjNCeklEMGdkbTB1WDNCeWIzQnpPMXh1SUNBZ0lIWmhjaUJ3Y205d1MyVjVjeUE5SUhadExpUnZjSFJwYjI1ekxsOXdjbTl3UzJWNWN5QjhmQ0JiWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhCeWIzQkxaWGx6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnYTJWNUlEMGdjSEp2Y0V0bGVYTmJhVjA3WEc0Z0lDQWdJQ0IyWVhJZ2NISnZjRTl3ZEdsdmJuTWdQU0IyYlM0a2IzQjBhVzl1Y3k1d2NtOXdjenNnTHk4Z2QzUm1JR1pzYjNjL1hHNGdJQ0FnSUNCd2NtOXdjMXRyWlhsZElEMGdkbUZzYVdSaGRHVlFjbTl3S0d0bGVTd2djSEp2Y0U5d2RHbHZibk1zSUhCeWIzQnpSR0YwWVN3Z2RtMHBPMXh1SUNBZ0lIMWNiaUFnSUNCMGIyZG5iR1ZQWW5ObGNuWnBibWNvZEhKMVpTazdYRzRnSUNBZ0x5OGdhMlZsY0NCaElHTnZjSGtnYjJZZ2NtRjNJSEJ5YjNCelJHRjBZVnh1SUNBZ0lIWnRMaVJ2Y0hScGIyNXpMbkJ5YjNCelJHRjBZU0E5SUhCeWIzQnpSR0YwWVR0Y2JpQWdmVnh1WEc0Z0lDOHZJSFZ3WkdGMFpTQnNhWE4wWlc1bGNuTmNiaUFnYkdsemRHVnVaWEp6SUQwZ2JHbHpkR1Z1WlhKeklIeDhJR1Z0Y0hSNVQySnFaV04wTzF4dUlDQjJZWElnYjJ4a1RHbHpkR1Z1WlhKeklEMGdkbTB1Skc5d2RHbHZibk11WDNCaGNtVnVkRXhwYzNSbGJtVnljenRjYmlBZ2RtMHVKRzl3ZEdsdmJuTXVYM0JoY21WdWRFeHBjM1JsYm1WeWN5QTlJR3hwYzNSbGJtVnljenRjYmlBZ2RYQmtZWFJsUTI5dGNHOXVaVzUwVEdsemRHVnVaWEp6S0hadExDQnNhWE4wWlc1bGNuTXNJRzlzWkV4cGMzUmxibVZ5Y3lrN1hHNWNiaUFnTHk4Z2NtVnpiMngyWlNCemJHOTBjeUFySUdadmNtTmxJSFZ3WkdGMFpTQnBaaUJvWVhNZ1kyaHBiR1J5Wlc1Y2JpQWdhV1lnS0c1bFpXUnpSbTl5WTJWVmNHUmhkR1VwSUh0Y2JpQWdJQ0IyYlM0a2MyeHZkSE1nUFNCeVpYTnZiSFpsVTJ4dmRITW9jbVZ1WkdWeVEyaHBiR1J5Wlc0c0lIQmhjbVZ1ZEZadWIyUmxMbU52Ym5SbGVIUXBPMXh1SUNBZ0lIWnRMaVJtYjNKalpWVndaR0YwWlNncE8xeHVJQ0I5WEc1Y2JpQWdlMXh1SUNBZ0lHbHpWWEJrWVhScGJtZERhR2xzWkVOdmJYQnZibVZ1ZENBOUlHWmhiSE5sTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpTVzVKYm1GamRHbDJaVlJ5WldVZ0tIWnRLU0I3WEc0Z0lIZG9hV3hsSUNoMmJTQW1KaUFvZG0wZ1BTQjJiUzRrY0dGeVpXNTBLU2tnZTF4dUlDQWdJR2xtSUNoMmJTNWZhVzVoWTNScGRtVXBJSHNnY21WMGRYSnVJSFJ5ZFdVZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhZM1JwZG1GMFpVTm9hV3hrUTI5dGNHOXVaVzUwSUNoMmJTd2daR2x5WldOMEtTQjdYRzRnSUdsbUlDaGthWEpsWTNRcElIdGNiaUFnSUNCMmJTNWZaR2x5WldOMFNXNWhZM1JwZG1VZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JwWmlBb2FYTkpia2x1WVdOMGFYWmxWSEpsWlNoMmJTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2gyYlM1ZlpHbHlaV04wU1c1aFkzUnBkbVVwSUh0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dUlDQnBaaUFvZG0wdVgybHVZV04wYVhabElIeDhJSFp0TGw5cGJtRmpkR2wyWlNBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUhadExsOXBibUZqZEdsMlpTQTlJR1poYkhObE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RtMHVKR05vYVd4a2NtVnVMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCaFkzUnBkbUYwWlVOb2FXeGtRMjl0Y0c5dVpXNTBLSFp0TGlSamFHbHNaSEpsYmx0cFhTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdOaGJHeEliMjlyS0hadExDQW5ZV04wYVhaaGRHVmtKeWs3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pHVmhZM1JwZG1GMFpVTm9hV3hrUTI5dGNHOXVaVzUwSUNoMmJTd2daR2x5WldOMEtTQjdYRzRnSUdsbUlDaGthWEpsWTNRcElIdGNiaUFnSUNCMmJTNWZaR2x5WldOMFNXNWhZM1JwZG1VZ1BTQjBjblZsTzF4dUlDQWdJR2xtSUNocGMwbHVTVzVoWTNScGRtVlVjbVZsS0hadEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdsbUlDZ2hkbTB1WDJsdVlXTjBhWFpsS1NCN1hHNGdJQ0FnZG0wdVgybHVZV04wYVhabElEMGdkSEoxWlR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhadExpUmphR2xzWkhKbGJpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnWkdWaFkzUnBkbUYwWlVOb2FXeGtRMjl0Y0c5dVpXNTBLSFp0TGlSamFHbHNaSEpsYmx0cFhTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdOaGJHeEliMjlyS0hadExDQW5aR1ZoWTNScGRtRjBaV1FuS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpZV3hzU0c5dmF5QW9kbTBzSUdodmIyc3BJSHRjYmlBZ0x5OGdJemMxTnpNZ1pHbHpZV0pzWlNCa1pYQWdZMjlzYkdWamRHbHZiaUIzYUdWdUlHbHVkbTlyYVc1bklHeHBabVZqZVdOc1pTQm9iMjlyYzF4dUlDQndkWE5vVkdGeVoyVjBLQ2s3WEc0Z0lIWmhjaUJvWVc1a2JHVnljeUE5SUhadExpUnZjSFJwYjI1elcyaHZiMnRkTzF4dUlDQjJZWElnYVc1bWJ5QTlJR2h2YjJzZ0t5QmNJaUJvYjI5clhDSTdYRzRnSUdsbUlDaG9ZVzVrYkdWeWN5a2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcUlEMGdhR0Z1Wkd4bGNuTXViR1Z1WjNSb095QnBJRHdnYWpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JwYm5admEyVlhhWFJvUlhKeWIzSklZVzVrYkdsdVp5aG9ZVzVrYkdWeWMxdHBYU3dnZG0wc0lHNTFiR3dzSUhadExDQnBibVp2S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnYVdZZ0tIWnRMbDlvWVhOSWIyOXJSWFpsYm5RcElIdGNiaUFnSUNCMmJTNGtaVzFwZENnbmFHOXZhem9uSUNzZ2FHOXZheWs3WEc0Z0lIMWNiaUFnY0c5d1ZHRnlaMlYwS0NrN1hHNTlYRzVjYmk4cUlDQXFMMXh1WEc1MllYSWdUVUZZWDFWUVJFRlVSVjlEVDFWT1ZDQTlJREV3TUR0Y2JseHVkbUZ5SUhGMVpYVmxJRDBnVzEwN1hHNTJZWElnWVdOMGFYWmhkR1ZrUTJocGJHUnlaVzRnUFNCYlhUdGNiblpoY2lCb1lYTWdQU0I3ZlR0Y2JuWmhjaUJqYVhKamRXeGhjaUE5SUh0OU8xeHVkbUZ5SUhkaGFYUnBibWNnUFNCbVlXeHpaVHRjYm5aaGNpQm1iSFZ6YUdsdVp5QTlJR1poYkhObE8xeHVkbUZ5SUdsdVpHVjRJRDBnTUR0Y2JseHVMeW9xWEc0Z0tpQlNaWE5sZENCMGFHVWdjMk5vWldSMWJHVnlKM01nYzNSaGRHVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlISmxjMlYwVTJOb1pXUjFiR1Z5VTNSaGRHVWdLQ2tnZTF4dUlDQnBibVJsZUNBOUlIRjFaWFZsTG14bGJtZDBhQ0E5SUdGamRHbDJZWFJsWkVOb2FXeGtjbVZ1TG14bGJtZDBhQ0E5SURBN1hHNGdJR2hoY3lBOUlIdDlPMXh1SUNCN1hHNGdJQ0FnWTJseVkzVnNZWElnUFNCN2ZUdGNiaUFnZlZ4dUlDQjNZV2wwYVc1bklEMGdabXgxYzJocGJtY2dQU0JtWVd4elpUdGNibjFjYmx4dUx5OGdRWE41Ym1NZ1pXUm5aU0JqWVhObElDTTJOVFkySUhKbGNYVnBjbVZ6SUhOaGRtbHVaeUIwYUdVZ2RHbHRaWE4wWVcxd0lIZG9aVzRnWlhabGJuUWdiR2x6ZEdWdVpYSnpJR0Z5WlZ4dUx5OGdZWFIwWVdOb1pXUXVJRWh2ZDJWMlpYSXNJR05oYkd4cGJtY2djR1Z5Wm05eWJXRnVZMlV1Ym05M0tDa2dhR0Z6SUdFZ2NHVnlaaUJ2ZG1WeWFHVmhaQ0JsYzNCbFkybGhiR3g1WEc0dkx5QnBaaUIwYUdVZ2NHRm5aU0JvWVhNZ2RHaHZkWE5oYm1SeklHOW1JR1YyWlc1MElHeHBjM1JsYm1WeWN5NGdTVzV6ZEdWaFpDd2dkMlVnZEdGclpTQmhJSFJwYldWemRHRnRjRnh1THk4Z1pYWmxjbmtnZEdsdFpTQjBhR1VnYzJOb1pXUjFiR1Z5SUdac2RYTm9aWE1nWVc1a0lIVnpaU0IwYUdGMElHWnZjaUJoYkd3Z1pYWmxiblFnYkdsemRHVnVaWEp6WEc0dkx5QmhkSFJoWTJobFpDQmtkWEpwYm1jZ2RHaGhkQ0JtYkhWemFDNWNiblpoY2lCamRYSnlaVzUwUm14MWMyaFVhVzFsYzNSaGJYQWdQU0F3TzF4dVhHNHZMeUJCYzNsdVl5QmxaR2RsSUdOaGMyVWdabWw0SUhKbGNYVnBjbVZ6SUhOMGIzSnBibWNnWVc0Z1pYWmxiblFnYkdsemRHVnVaWEluY3lCaGRIUmhZMmdnZEdsdFpYTjBZVzF3TGx4dWRtRnlJR2RsZEU1dmR5QTlJRVJoZEdVdWJtOTNPMXh1WEc0dkx5QkVaWFJsY20xcGJtVWdkMmhoZENCbGRtVnVkQ0IwYVcxbGMzUmhiWEFnZEdobElHSnliM2R6WlhJZ2FYTWdkWE5wYm1jdUlFRnVibTk1YVc1bmJIa3NJSFJvWlZ4dUx5OGdkR2x0WlhOMFlXMXdJR05oYmlCbGFYUm9aWElnWW1VZ2FHa3RjbVZ6SUNoeVpXeGhkR2wyWlNCMGJ5QndZV2RsSUd4dllXUXBJRzl5SUd4dmR5MXlaWE5jYmk4dklDaHlaV3hoZEdsMlpTQjBieUJWVGtsWUlHVndiMk5vS1N3Z2MyOGdhVzRnYjNKa1pYSWdkRzhnWTI5dGNHRnlaU0IwYVcxbElIZGxJR2hoZG1VZ2RHOGdkWE5sSUhSb1pWeHVMeThnYzJGdFpTQjBhVzFsYzNSaGJYQWdkSGx3WlNCM2FHVnVJSE5oZG1sdVp5QjBhR1VnWm14MWMyZ2dkR2x0WlhOMFlXMXdMbHh1THk4Z1FXeHNJRWxGSUhabGNuTnBiMjV6SUhWelpTQnNiM2N0Y21WeklHVjJaVzUwSUhScGJXVnpkR0Z0Y0hNc0lHRnVaQ0JvWVhabElIQnliMkpzWlcxaGRHbGpJR05zYjJOclhHNHZMeUJwYlhCc1pXMWxiblJoZEdsdmJuTWdLQ001TmpNeUtWeHVhV1lnS0dsdVFuSnZkM05sY2lBbUppQWhhWE5KUlNrZ2UxeHVJQ0IyWVhJZ2NHVnlabTl5YldGdVkyVWdQU0IzYVc1a2IzY3VjR1Z5Wm05eWJXRnVZMlU3WEc0Z0lHbG1JQ2hjYmlBZ0lDQndaWEptYjNKdFlXNWpaU0FtSmx4dUlDQWdJSFI1Y0dWdlppQndaWEptYjNKdFlXNWpaUzV1YjNjZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlaY2JpQWdJQ0JuWlhST2IzY29LU0ErSUdSdlkzVnRaVzUwTG1OeVpXRjBaVVYyWlc1MEtDZEZkbVZ1ZENjcExuUnBiV1ZUZEdGdGNGeHVJQ0FwSUh0Y2JpQWdJQ0F2THlCcFppQjBhR1VnWlhabGJuUWdkR2x0WlhOMFlXMXdMQ0JoYkhSb2IzVm5hQ0JsZG1Gc2RXRjBaV1FnUVVaVVJWSWdkR2hsSUVSaGRHVXVibTkzS0Nrc0lHbHpYRzRnSUNBZ0x5OGdjMjFoYkd4bGNpQjBhR0Z1SUdsMExDQnBkQ0J0WldGdWN5QjBhR1VnWlhabGJuUWdhWE1nZFhOcGJtY2dZU0JvYVMxeVpYTWdkR2x0WlhOMFlXMXdMRnh1SUNBZ0lDOHZJR0Z1WkNCM1pTQnVaV1ZrSUhSdklIVnpaU0IwYUdVZ2FHa3RjbVZ6SUhabGNuTnBiMjRnWm05eUlHVjJaVzUwSUd4cGMzUmxibVZ5SUhScGJXVnpkR0Z0Y0hNZ1lYTmNiaUFnSUNBdkx5QjNaV3hzTGx4dUlDQWdJR2RsZEU1dmR5QTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUhCbGNtWnZjbTFoYm1ObExtNXZkeWdwT3lCOU8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dSbXgxYzJnZ1ltOTBhQ0J4ZFdWMVpYTWdZVzVrSUhKMWJpQjBhR1VnZDJGMFkyaGxjbk11WEc0Z0tpOWNibVoxYm1OMGFXOXVJR1pzZFhOb1UyTm9aV1IxYkdWeVVYVmxkV1VnS0NrZ2UxeHVJQ0JqZFhKeVpXNTBSbXgxYzJoVWFXMWxjM1JoYlhBZ1BTQm5aWFJPYjNjb0tUdGNiaUFnWm14MWMyaHBibWNnUFNCMGNuVmxPMXh1SUNCMllYSWdkMkYwWTJobGNpd2dhV1E3WEc1Y2JpQWdMeThnVTI5eWRDQnhkV1YxWlNCaVpXWnZjbVVnWm14MWMyZ3VYRzRnSUM4dklGUm9hWE1nWlc1emRYSmxjeUIwYUdGME9seHVJQ0F2THlBeExpQkRiMjF3YjI1bGJuUnpJR0Z5WlNCMWNHUmhkR1ZrSUdaeWIyMGdjR0Z5Wlc1MElIUnZJR05vYVd4a0xpQW9ZbVZqWVhWelpTQndZWEpsYm5RZ2FYTWdZV3gzWVhselhHNGdJQzh2SUNBZ0lHTnlaV0YwWldRZ1ltVm1iM0psSUhSb1pTQmphR2xzWkNsY2JpQWdMeThnTWk0Z1FTQmpiMjF3YjI1bGJuUW5jeUIxYzJWeUlIZGhkR05vWlhKeklHRnlaU0J5ZFc0Z1ltVm1iM0psSUdsMGN5QnlaVzVrWlhJZ2QyRjBZMmhsY2lBb1ltVmpZWFZ6WlZ4dUlDQXZMeUFnSUNCMWMyVnlJSGRoZEdOb1pYSnpJR0Z5WlNCamNtVmhkR1ZrSUdKbFptOXlaU0IwYUdVZ2NtVnVaR1Z5SUhkaGRHTm9aWElwWEc0Z0lDOHZJRE11SUVsbUlHRWdZMjl0Y0c5dVpXNTBJR2x6SUdSbGMzUnliM2xsWkNCa2RYSnBibWNnWVNCd1lYSmxiblFnWTI5dGNHOXVaVzUwSjNNZ2QyRjBZMmhsY2lCeWRXNHNYRzRnSUM4dklDQWdJR2wwY3lCM1lYUmphR1Z5Y3lCallXNGdZbVVnYzJ0cGNIQmxaQzVjYmlBZ2NYVmxkV1V1YzI5eWRDaG1kVzVqZEdsdmJpQW9ZU3dnWWlrZ2V5QnlaWFIxY200Z1lTNXBaQ0F0SUdJdWFXUTdJSDBwTzF4dVhHNGdJQzh2SUdSdklHNXZkQ0JqWVdOb1pTQnNaVzVuZEdnZ1ltVmpZWFZ6WlNCdGIzSmxJSGRoZEdOb1pYSnpJRzFwWjJoMElHSmxJSEIxYzJobFpGeHVJQ0F2THlCaGN5QjNaU0J5ZFc0Z1pYaHBjM1JwYm1jZ2QyRjBZMmhsY25OY2JpQWdabTl5SUNocGJtUmxlQ0E5SURBN0lHbHVaR1Y0SUR3Z2NYVmxkV1V1YkdWdVozUm9PeUJwYm1SbGVDc3JLU0I3WEc0Z0lDQWdkMkYwWTJobGNpQTlJSEYxWlhWbFcybHVaR1Y0WFR0Y2JpQWdJQ0JwWmlBb2QyRjBZMmhsY2k1aVpXWnZjbVVwSUh0Y2JpQWdJQ0FnSUhkaGRHTm9aWEl1WW1WbWIzSmxLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbGtJRDBnZDJGMFkyaGxjaTVwWkR0Y2JpQWdJQ0JvWVhOYmFXUmRJRDBnYm5Wc2JEdGNiaUFnSUNCM1lYUmphR1Z5TG5KMWJpZ3BPMXh1SUNBZ0lDOHZJR2x1SUdSbGRpQmlkV2xzWkN3Z1kyaGxZMnNnWVc1a0lITjBiM0FnWTJseVkzVnNZWElnZFhCa1lYUmxjeTVjYmlBZ0lDQnBaaUFvYUdGelcybGtYU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0JqYVhKamRXeGhjbHRwWkYwZ1BTQW9ZMmx5WTNWc1lYSmJhV1JkSUh4OElEQXBJQ3NnTVR0Y2JpQWdJQ0FnSUdsbUlDaGphWEpqZFd4aGNsdHBaRjBnUGlCTlFWaGZWVkJFUVZSRlgwTlBWVTVVS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNBZ0oxbHZkU0J0WVhrZ2FHRjJaU0JoYmlCcGJtWnBibWwwWlNCMWNHUmhkR1VnYkc5dmNDQW5JQ3NnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkMkYwWTJobGNpNTFjMlZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRDhnS0Z3aWFXNGdkMkYwWTJobGNpQjNhWFJvSUdWNGNISmxjM05wYjI0Z1hGeGNJbHdpSUNzZ0tIZGhkR05vWlhJdVpYaHdjbVZ6YzJsdmJpa2dLeUJjSWx4Y1hDSmNJaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJjSW1sdUlHRWdZMjl0Y0c5dVpXNTBJSEpsYm1SbGNpQm1kVzVqZEdsdmJpNWNJbHh1SUNBZ0lDQWdJQ0FnSUNrc1hHNGdJQ0FnSUNBZ0lDQWdkMkYwWTJobGNpNTJiVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2SUd0bFpYQWdZMjl3YVdWeklHOW1JSEJ2YzNRZ2NYVmxkV1Z6SUdKbFptOXlaU0J5WlhObGRIUnBibWNnYzNSaGRHVmNiaUFnZG1GeUlHRmpkR2wyWVhSbFpGRjFaWFZsSUQwZ1lXTjBhWFpoZEdWa1EyaHBiR1J5Wlc0dWMyeHBZMlVvS1R0Y2JpQWdkbUZ5SUhWd1pHRjBaV1JSZFdWMVpTQTlJSEYxWlhWbExuTnNhV05sS0NrN1hHNWNiaUFnY21WelpYUlRZMmhsWkhWc1pYSlRkR0YwWlNncE8xeHVYRzRnSUM4dklHTmhiR3dnWTI5dGNHOXVaVzUwSUhWd1pHRjBaV1FnWVc1a0lHRmpkR2wyWVhSbFpDQm9iMjlyYzF4dUlDQmpZV3hzUVdOMGFYWmhkR1ZrU0c5dmEzTW9ZV04wYVhaaGRHVmtVWFZsZFdVcE8xeHVJQ0JqWVd4c1ZYQmtZWFJsWkVodmIydHpLSFZ3WkdGMFpXUlJkV1YxWlNrN1hHNWNiaUFnTHk4Z1pHVjJkRzl2YkNCb2IyOXJYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9aR1YyZEc5dmJITWdKaVlnWTI5dVptbG5MbVJsZG5SdmIyeHpLU0I3WEc0Z0lDQWdaR1YyZEc5dmJITXVaVzFwZENnblpteDFjMmduS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpZV3hzVlhCa1lYUmxaRWh2YjJ0eklDaHhkV1YxWlNrZ2UxeHVJQ0IyWVhJZ2FTQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJSFpoY2lCM1lYUmphR1Z5SUQwZ2NYVmxkV1ZiYVYwN1hHNGdJQ0FnZG1GeUlIWnRJRDBnZDJGMFkyaGxjaTUyYlR0Y2JpQWdJQ0JwWmlBb2RtMHVYM2RoZEdOb1pYSWdQVDA5SUhkaGRHTm9aWElnSmlZZ2RtMHVYMmx6VFc5MWJuUmxaQ0FtSmlBaGRtMHVYMmx6UkdWemRISnZlV1ZrS1NCN1hHNGdJQ0FnSUNCallXeHNTRzl2YXloMmJTd2dKM1Z3WkdGMFpXUW5LVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJSZFdWMVpTQmhJR3RsY0hRdFlXeHBkbVVnWTI5dGNHOXVaVzUwSUhSb1lYUWdkMkZ6SUdGamRHbDJZWFJsWkNCa2RYSnBibWNnY0dGMFkyZ3VYRzRnS2lCVWFHVWdjWFZsZFdVZ2QybHNiQ0JpWlNCd2NtOWpaWE56WldRZ1lXWjBaWElnZEdobElHVnVkR2x5WlNCMGNtVmxJR2hoY3lCaVpXVnVJSEJoZEdOb1pXUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlIRjFaWFZsUVdOMGFYWmhkR1ZrUTI5dGNHOXVaVzUwSUNoMmJTa2dlMXh1SUNBdkx5QnpaWFIwYVc1bklGOXBibUZqZEdsMlpTQjBieUJtWVd4elpTQm9aWEpsSUhOdklIUm9ZWFFnWVNCeVpXNWtaWElnWm5WdVkzUnBiMjRnWTJGdVhHNGdJQzh2SUhKbGJIa2diMjRnWTJobFkydHBibWNnZDJobGRHaGxjaUJwZENkeklHbHVJR0Z1SUdsdVlXTjBhWFpsSUhSeVpXVWdLR1V1Wnk0Z2NtOTFkR1Z5TFhacFpYY3BYRzRnSUhadExsOXBibUZqZEdsMlpTQTlJR1poYkhObE8xeHVJQ0JoWTNScGRtRjBaV1JEYUdsc1pISmxiaTV3ZFhOb0tIWnRLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZMkZzYkVGamRHbDJZWFJsWkVodmIydHpJQ2h4ZFdWMVpTa2dlMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIRjFaWFZsTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2NYVmxkV1ZiYVYwdVgybHVZV04wYVhabElEMGdkSEoxWlR0Y2JpQWdJQ0JoWTNScGRtRjBaVU5vYVd4a1EyOXRjRzl1Wlc1MEtIRjFaWFZsVzJsZExDQjBjblZsSUM4cUlIUnlkV1VnS2k4cE8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dVSFZ6YUNCaElIZGhkR05vWlhJZ2FXNTBieUIwYUdVZ2QyRjBZMmhsY2lCeGRXVjFaUzVjYmlBcUlFcHZZbk1nZDJsMGFDQmtkWEJzYVdOaGRHVWdTVVJ6SUhkcGJHd2dZbVVnYzJ0cGNIQmxaQ0IxYm14bGMzTWdhWFFuYzF4dUlDb2djSFZ6YUdWa0lIZG9aVzRnZEdobElIRjFaWFZsSUdseklHSmxhVzVuSUdac2RYTm9aV1F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSEYxWlhWbFYyRjBZMmhsY2lBb2QyRjBZMmhsY2lrZ2UxeHVJQ0IyWVhJZ2FXUWdQU0IzWVhSamFHVnlMbWxrTzF4dUlDQnBaaUFvYUdGelcybGtYU0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdhR0Z6VzJsa1hTQTlJSFJ5ZFdVN1hHNGdJQ0FnYVdZZ0tDRm1iSFZ6YUdsdVp5a2dlMXh1SUNBZ0lDQWdjWFZsZFdVdWNIVnphQ2gzWVhSamFHVnlLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdhV1lnWVd4eVpXRmtlU0JtYkhWemFHbHVaeXdnYzNCc2FXTmxJSFJvWlNCM1lYUmphR1Z5SUdKaGMyVmtJRzl1SUdsMGN5QnBaRnh1SUNBZ0lDQWdMeThnYVdZZ1lXeHlaV0ZrZVNCd1lYTjBJR2wwY3lCcFpDd2dhWFFnZDJsc2JDQmlaU0J5ZFc0Z2JtVjRkQ0JwYlcxbFpHbGhkR1ZzZVM1Y2JpQWdJQ0FnSUhaaGNpQnBJRDBnY1hWbGRXVXViR1Z1WjNSb0lDMGdNVHRjYmlBZ0lDQWdJSGRvYVd4bElDaHBJRDRnYVc1a1pYZ2dKaVlnY1hWbGRXVmJhVjB1YVdRZ1BpQjNZWFJqYUdWeUxtbGtLU0I3WEc0Z0lDQWdJQ0FnSUdrdExUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIRjFaWFZsTG5Od2JHbGpaU2hwSUNzZ01Td2dNQ3dnZDJGMFkyaGxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSEYxWlhWbElIUm9aU0JtYkhWemFGeHVJQ0FnSUdsbUlDZ2hkMkZwZEdsdVp5a2dlMXh1SUNBZ0lDQWdkMkZwZEdsdVp5QTlJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lHbG1JQ2doWTI5dVptbG5MbUZ6ZVc1aktTQjdYRzRnSUNBZ0lDQWdJR1pzZFhOb1UyTm9aV1IxYkdWeVVYVmxkV1VvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J1WlhoMFZHbGpheWhtYkhWemFGTmphR1ZrZFd4bGNsRjFaWFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JseHVYRzUyWVhJZ2RXbGtKRElnUFNBd08xeHVYRzR2S2lwY2JpQXFJRUVnZDJGMFkyaGxjaUJ3WVhKelpYTWdZVzRnWlhod2NtVnpjMmx2Yml3Z1kyOXNiR1ZqZEhNZ1pHVndaVzVrWlc1amFXVnpMRnh1SUNvZ1lXNWtJR1pwY21WeklHTmhiR3hpWVdOcklIZG9aVzRnZEdobElHVjRjSEpsYzNOcGIyNGdkbUZzZFdVZ1kyaGhibWRsY3k1Y2JpQXFJRlJvYVhNZ2FYTWdkWE5sWkNCbWIzSWdZbTkwYUNCMGFHVWdKSGRoZEdOb0tDa2dZWEJwSUdGdVpDQmthWEpsWTNScGRtVnpMbHh1SUNvdlhHNTJZWElnVjJGMFkyaGxjaUE5SUdaMWJtTjBhVzl1SUZkaGRHTm9aWElnS0Z4dUlDQjJiU3hjYmlBZ1pYaHdUM0pHYml4Y2JpQWdZMklzWEc0Z0lHOXdkR2x2Ym5Nc1hHNGdJR2x6VW1WdVpHVnlWMkYwWTJobGNseHVLU0I3WEc0Z0lIUm9hWE11ZG0wZ1BTQjJiVHRjYmlBZ2FXWWdLR2x6VW1WdVpHVnlWMkYwWTJobGNpa2dlMXh1SUNBZ0lIWnRMbDkzWVhSamFHVnlJRDBnZEdocGN6dGNiaUFnZlZ4dUlDQjJiUzVmZDJGMFkyaGxjbk11Y0hWemFDaDBhR2x6S1R0Y2JpQWdMeThnYjNCMGFXOXVjMXh1SUNCcFppQW9iM0IwYVc5dWN5a2dlMXh1SUNBZ0lIUm9hWE11WkdWbGNDQTlJQ0VoYjNCMGFXOXVjeTVrWldWd08xeHVJQ0FnSUhSb2FYTXVkWE5sY2lBOUlDRWhiM0IwYVc5dWN5NTFjMlZ5TzF4dUlDQWdJSFJvYVhNdWJHRjZlU0E5SUNFaGIzQjBhVzl1Y3k1c1lYcDVPMXh1SUNBZ0lIUm9hWE11YzNsdVl5QTlJQ0VoYjNCMGFXOXVjeTV6ZVc1ak8xeHVJQ0FnSUhSb2FYTXVZbVZtYjNKbElEMGdiM0IwYVc5dWN5NWlaV1p2Y21VN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHaHBjeTVrWldWd0lEMGdkR2hwY3k1MWMyVnlJRDBnZEdocGN5NXNZWHA1SUQwZ2RHaHBjeTV6ZVc1aklEMGdabUZzYzJVN1hHNGdJSDFjYmlBZ2RHaHBjeTVqWWlBOUlHTmlPMXh1SUNCMGFHbHpMbWxrSUQwZ0t5dDFhV1FrTWpzZ0x5OGdkV2xrSUdadmNpQmlZWFJqYUdsdVoxeHVJQ0IwYUdsekxtRmpkR2wyWlNBOUlIUnlkV1U3WEc0Z0lIUm9hWE11WkdseWRIa2dQU0IwYUdsekxteGhlbms3SUM4dklHWnZjaUJzWVhwNUlIZGhkR05vWlhKelhHNGdJSFJvYVhNdVpHVndjeUE5SUZ0ZE8xeHVJQ0IwYUdsekxtNWxkMFJsY0hNZ1BTQmJYVHRjYmlBZ2RHaHBjeTVrWlhCSlpITWdQU0J1WlhjZ1gxTmxkQ2dwTzF4dUlDQjBhR2x6TG01bGQwUmxjRWxrY3lBOUlHNWxkeUJmVTJWMEtDazdYRzRnSUhSb2FYTXVaWGh3Y21WemMybHZiaUE5SUdWNGNFOXlSbTR1ZEc5VGRISnBibWNvS1R0Y2JpQWdMeThnY0dGeWMyVWdaWGh3Y21WemMybHZiaUJtYjNJZ1oyVjBkR1Z5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaWGh3VDNKR2JpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhSb2FYTXVaMlYwZEdWeUlEMGdaWGh3VDNKR2JqdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBhR2x6TG1kbGRIUmxjaUE5SUhCaGNuTmxVR0YwYUNobGVIQlBja1p1S1R0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11WjJWMGRHVnlLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtZGxkSFJsY2lBOUlHNXZiM0E3WEc0Z0lDQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0lDQmNJa1poYVd4bFpDQjNZWFJqYUdsdVp5QndZWFJvT2lCY1hGd2lYQ0lnS3lCbGVIQlBja1p1SUNzZ1hDSmNYRndpSUZ3aUlDdGNiaUFnSUNBZ0lDQWdKMWRoZEdOb1pYSWdiMjVzZVNCaFkyTmxjSFJ6SUhOcGJYQnNaU0JrYjNRdFpHVnNhVzFwZEdWa0lIQmhkR2h6TGlBbklDdGNiaUFnSUNBZ0lDQWdKMFp2Y2lCbWRXeHNJR052Ym5SeWIyd3NJSFZ6WlNCaElHWjFibU4wYVc5dUlHbHVjM1JsWVdRdUp5eGNiaUFnSUNBZ0lDQWdkbTFjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSFJvYVhNdWRtRnNkV1VnUFNCMGFHbHpMbXhoZW5sY2JpQWdJQ0EvSUhWdVpHVm1hVzVsWkZ4dUlDQWdJRG9nZEdocGN5NW5aWFFvS1R0Y2JuMDdYRzVjYmk4cUtseHVJQ29nUlhaaGJIVmhkR1VnZEdobElHZGxkSFJsY2l3Z1lXNWtJSEpsTFdOdmJHeGxZM1FnWkdWd1pXNWtaVzVqYVdWekxseHVJQ292WEc1WFlYUmphR1Z5TG5CeWIzUnZkSGx3WlM1blpYUWdQU0JtZFc1amRHbHZiaUJuWlhRZ0tDa2dlMXh1SUNCd2RYTm9WR0Z5WjJWMEtIUm9hWE1wTzF4dUlDQjJZWElnZG1Gc2RXVTdYRzRnSUhaaGNpQjJiU0E5SUhSb2FYTXVkbTA3WEc0Z0lIUnllU0I3WEc0Z0lDQWdkbUZzZFdVZ1BTQjBhR2x6TG1kbGRIUmxjaTVqWVd4c0tIWnRMQ0IyYlNrN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTUxYzJWeUtTQjdYRzRnSUNBZ0lDQm9ZVzVrYkdWRmNuSnZjaWhsTENCMmJTd2dLRndpWjJWMGRHVnlJR1p2Y2lCM1lYUmphR1Z5SUZ4Y1hDSmNJaUFySUNoMGFHbHpMbVY0Y0hKbGMzTnBiMjRwSUNzZ1hDSmNYRndpWENJcEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdoeWIzY2daVnh1SUNBZ0lIMWNiaUFnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0F2THlCY0luUnZkV05vWENJZ1pYWmxjbmtnY0hKdmNHVnlkSGtnYzI4Z2RHaGxlU0JoY21VZ1lXeHNJSFJ5WVdOclpXUWdZWE5jYmlBZ0lDQXZMeUJrWlhCbGJtUmxibU5wWlhNZ1ptOXlJR1JsWlhBZ2QyRjBZMmhwYm1kY2JpQWdJQ0JwWmlBb2RHaHBjeTVrWldWd0tTQjdYRzRnSUNBZ0lDQjBjbUYyWlhKelpTaDJZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEJ2Y0ZSaGNtZGxkQ2dwTzF4dUlDQWdJSFJvYVhNdVkyeGxZVzUxY0VSbGNITW9LVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkbUZzZFdWY2JuMDdYRzVjYmk4cUtseHVJQ29nUVdSa0lHRWdaR1Z3Wlc1a1pXNWplU0IwYnlCMGFHbHpJR1JwY21WamRHbDJaUzVjYmlBcUwxeHVWMkYwWTJobGNpNXdjbTkwYjNSNWNHVXVZV1JrUkdWd0lEMGdablZ1WTNScGIyNGdZV1JrUkdWd0lDaGtaWEFwSUh0Y2JpQWdkbUZ5SUdsa0lEMGdaR1Z3TG1sa08xeHVJQ0JwWmlBb0lYUm9hWE11Ym1WM1JHVndTV1J6TG1oaGN5aHBaQ2twSUh0Y2JpQWdJQ0IwYUdsekxtNWxkMFJsY0Vsa2N5NWhaR1FvYVdRcE8xeHVJQ0FnSUhSb2FYTXVibVYzUkdWd2N5NXdkWE5vS0dSbGNDazdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtUmxjRWxrY3k1b1lYTW9hV1FwS1NCN1hHNGdJQ0FnSUNCa1pYQXVZV1JrVTNWaUtIUm9hWE1wTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCRGJHVmhiaUIxY0NCbWIzSWdaR1Z3Wlc1a1pXNWplU0JqYjJ4c1pXTjBhVzl1TGx4dUlDb3ZYRzVYWVhSamFHVnlMbkJ5YjNSdmRIbHdaUzVqYkdWaGJuVndSR1Z3Y3lBOUlHWjFibU4wYVc5dUlHTnNaV0Z1ZFhCRVpYQnpJQ2dwSUh0Y2JpQWdkbUZ5SUdrZ1BTQjBhR2x6TG1SbGNITXViR1Z1WjNSb08xeHVJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnZG1GeUlHUmxjQ0E5SUhSb2FYTXVaR1Z3YzF0cFhUdGNiaUFnSUNCcFppQW9JWFJvYVhNdWJtVjNSR1Z3U1dSekxtaGhjeWhrWlhBdWFXUXBLU0I3WEc0Z0lDQWdJQ0JrWlhBdWNtVnRiM1psVTNWaUtIUm9hWE1wTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0IyWVhJZ2RHMXdJRDBnZEdocGN5NWtaWEJKWkhNN1hHNGdJSFJvYVhNdVpHVndTV1J6SUQwZ2RHaHBjeTV1WlhkRVpYQkpaSE03WEc0Z0lIUm9hWE11Ym1WM1JHVndTV1J6SUQwZ2RHMXdPMXh1SUNCMGFHbHpMbTVsZDBSbGNFbGtjeTVqYkdWaGNpZ3BPMXh1SUNCMGJYQWdQU0IwYUdsekxtUmxjSE03WEc0Z0lIUm9hWE11WkdWd2N5QTlJSFJvYVhNdWJtVjNSR1Z3Y3p0Y2JpQWdkR2hwY3k1dVpYZEVaWEJ6SUQwZ2RHMXdPMXh1SUNCMGFHbHpMbTVsZDBSbGNITXViR1Z1WjNSb0lEMGdNRHRjYm4wN1hHNWNiaThxS2x4dUlDb2dVM1ZpYzJOeWFXSmxjaUJwYm5SbGNtWmhZMlV1WEc0Z0tpQlhhV3hzSUdKbElHTmhiR3hsWkNCM2FHVnVJR0VnWkdWd1pXNWtaVzVqZVNCamFHRnVaMlZ6TGx4dUlDb3ZYRzVYWVhSamFHVnlMbkJ5YjNSdmRIbHdaUzUxY0dSaGRHVWdQU0JtZFc1amRHbHZiaUIxY0dSaGRHVWdLQ2tnZTF4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0JwWmlBb2RHaHBjeTVzWVhwNUtTQjdYRzRnSUNBZ2RHaHBjeTVrYVhKMGVTQTlJSFJ5ZFdVN1hHNGdJSDBnWld4elpTQnBaaUFvZEdocGN5NXplVzVqS1NCN1hHNGdJQ0FnZEdocGN5NXlkVzRvS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeGRXVjFaVmRoZEdOb1pYSW9kR2hwY3lrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dVMk5vWldSMWJHVnlJR3B2WWlCcGJuUmxjbVpoWTJVdVhHNGdLaUJYYVd4c0lHSmxJR05oYkd4bFpDQmllU0IwYUdVZ2MyTm9aV1IxYkdWeUxseHVJQ292WEc1WFlYUmphR1Z5TG5CeWIzUnZkSGx3WlM1eWRXNGdQU0JtZFc1amRHbHZiaUJ5ZFc0Z0tDa2dlMXh1SUNCcFppQW9kR2hwY3k1aFkzUnBkbVVwSUh0Y2JpQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCMGFHbHpMbWRsZENncE8xeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lIWmhiSFZsSUNFOVBTQjBhR2x6TG5aaGJIVmxJSHg4WEc0Z0lDQWdJQ0F2THlCRVpXVndJSGRoZEdOb1pYSnpJR0Z1WkNCM1lYUmphR1Z5Y3lCdmJpQlBZbXBsWTNRdlFYSnlZWGx6SUhOb2IzVnNaQ0JtYVhKbElHVjJaVzVjYmlBZ0lDQWdJQzh2SUhkb1pXNGdkR2hsSUhaaGJIVmxJR2x6SUhSb1pTQnpZVzFsTENCaVpXTmhkWE5sSUhSb1pTQjJZV3gxWlNCdFlYbGNiaUFnSUNBZ0lDOHZJR2hoZG1VZ2JYVjBZWFJsWkM1Y2JpQWdJQ0FnSUdselQySnFaV04wS0haaGJIVmxLU0I4ZkZ4dUlDQWdJQ0FnZEdocGN5NWtaV1Z3WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0F2THlCelpYUWdibVYzSUhaaGJIVmxYRzRnSUNBZ0lDQjJZWElnYjJ4a1ZtRnNkV1VnUFNCMGFHbHpMblpoYkhWbE8xeHVJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRYTmxjaWtnZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMkl1WTJGc2JDaDBhR2x6TG5adExDQjJZV3gxWlN3Z2IyeGtWbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FHRnVaR3hsUlhKeWIzSW9aU3dnZEdocGN5NTJiU3dnS0Z3aVkyRnNiR0poWTJzZ1ptOXlJSGRoZEdOb1pYSWdYRnhjSWx3aUlDc2dLSFJvYVhNdVpYaHdjbVZ6YzJsdmJpa2dLeUJjSWx4Y1hDSmNJaWtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5pTG1OaGJHd29kR2hwY3k1MmJTd2dkbUZzZFdVc0lHOXNaRlpoYkhWbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dSWFpoYkhWaGRHVWdkR2hsSUhaaGJIVmxJRzltSUhSb1pTQjNZWFJqYUdWeUxseHVJQ29nVkdocGN5QnZibXg1SUdkbGRITWdZMkZzYkdWa0lHWnZjaUJzWVhwNUlIZGhkR05vWlhKekxseHVJQ292WEc1WFlYUmphR1Z5TG5CeWIzUnZkSGx3WlM1bGRtRnNkV0YwWlNBOUlHWjFibU4wYVc5dUlHVjJZV3gxWVhSbElDZ3BJSHRjYmlBZ2RHaHBjeTUyWVd4MVpTQTlJSFJvYVhNdVoyVjBLQ2s3WEc0Z0lIUm9hWE11WkdseWRIa2dQU0JtWVd4elpUdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1JHVndaVzVrSUc5dUlHRnNiQ0JrWlhCeklHTnZiR3hsWTNSbFpDQmllU0IwYUdseklIZGhkR05vWlhJdVhHNGdLaTljYmxkaGRHTm9aWEl1Y0hKdmRHOTBlWEJsTG1SbGNHVnVaQ0E5SUdaMWJtTjBhVzl1SUdSbGNHVnVaQ0FvS1NCN1hHNGdJSFpoY2lCcElEMGdkR2hwY3k1a1pYQnpMbXhsYm1kMGFEdGNiaUFnZDJocGJHVWdLR2t0TFNrZ2UxeHVJQ0FnSUhSb2FYTXVaR1Z3YzF0cFhTNWtaWEJsYm1Rb0tUdGNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJTWlcxdmRtVWdjMlZzWmlCbWNtOXRJR0ZzYkNCa1pYQmxibVJsYm1OcFpYTW5JSE4xWW5OamNtbGlaWElnYkdsemRDNWNiaUFxTDF4dVYyRjBZMmhsY2k1d2NtOTBiM1I1Y0dVdWRHVmhjbVJ2ZDI0Z1BTQm1kVzVqZEdsdmJpQjBaV0Z5Wkc5M2JpQW9LU0I3WEc0Z0lHbG1JQ2gwYUdsekxtRmpkR2wyWlNrZ2UxeHVJQ0FnSUM4dklISmxiVzkyWlNCelpXeG1JR1p5YjIwZ2RtMG5jeUIzWVhSamFHVnlJR3hwYzNSY2JpQWdJQ0F2THlCMGFHbHpJR2x6SUdFZ2MyOXRaWGRvWVhRZ1pYaHdaVzV6YVhabElHOXdaWEpoZEdsdmJpQnpieUIzWlNCemEybHdJR2wwWEc0Z0lDQWdMeThnYVdZZ2RHaGxJSFp0SUdseklHSmxhVzVuSUdSbGMzUnliM2xsWkM1Y2JpQWdJQ0JwWmlBb0lYUm9hWE11ZG0wdVgybHpRbVZwYm1kRVpYTjBjbTk1WldRcElIdGNiaUFnSUNBZ0lISmxiVzkyWlNoMGFHbHpMblp0TGw5M1lYUmphR1Z5Y3l3Z2RHaHBjeWs3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJwSUQwZ2RHaHBjeTVrWlhCekxteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbVJsY0hOYmFWMHVjbVZ0YjNabFUzVmlLSFJvYVhNcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtRmpkR2wyWlNBOUlHWmhiSE5sTzF4dUlDQjlYRzU5TzF4dVhHNHZLaUFnS2k5Y2JseHVkbUZ5SUhOb1lYSmxaRkJ5YjNCbGNuUjVSR1ZtYVc1cGRHbHZiaUE5SUh0Y2JpQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQm5aWFE2SUc1dmIzQXNYRzRnSUhObGREb2dibTl2Y0Z4dWZUdGNibHh1Wm5WdVkzUnBiMjRnY0hKdmVIa2dLSFJoY21kbGRDd2djMjkxY21ObFMyVjVMQ0JyWlhrcElIdGNiaUFnYzJoaGNtVmtVSEp2Y0dWeWRIbEVaV1pwYm1sMGFXOXVMbWRsZENBOUlHWjFibU4wYVc5dUlIQnliM2g1UjJWMGRHVnlJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF0emIzVnlZMlZMWlhsZFcydGxlVjFjYmlBZ2ZUdGNiaUFnYzJoaGNtVmtVSEp2Y0dWeWRIbEVaV1pwYm1sMGFXOXVMbk5sZENBOUlHWjFibU4wYVc5dUlIQnliM2g1VTJWMGRHVnlJQ2gyWVd3cElIdGNiaUFnSUNCMGFHbHpXM052ZFhKalpVdGxlVjFiYTJWNVhTQTlJSFpoYkR0Y2JpQWdmVHRjYmlBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2dhMlY1TENCemFHRnlaV1JRY205d1pYSjBlVVJsWm1sdWFYUnBiMjRwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMFUzUmhkR1VnS0hadEtTQjdYRzRnSUhadExsOTNZWFJqYUdWeWN5QTlJRnRkTzF4dUlDQjJZWElnYjNCMGN5QTlJSFp0TGlSdmNIUnBiMjV6TzF4dUlDQnBaaUFvYjNCMGN5NXdjbTl3Y3lrZ2V5QnBibWwwVUhKdmNITW9kbTBzSUc5d2RITXVjSEp2Y0hNcE95QjlYRzRnSUdsbUlDaHZjSFJ6TG0xbGRHaHZaSE1wSUhzZ2FXNXBkRTFsZEdodlpITW9kbTBzSUc5d2RITXViV1YwYUc5a2N5azdJSDFjYmlBZ2FXWWdLRzl3ZEhNdVpHRjBZU2tnZTF4dUlDQWdJR2x1YVhSRVlYUmhLSFp0S1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdlluTmxjblpsS0hadExsOWtZWFJoSUQwZ2UzMHNJSFJ5ZFdVZ0x5b2dZWE5TYjI5MFJHRjBZU0FxTHlrN1hHNGdJSDFjYmlBZ2FXWWdLRzl3ZEhNdVkyOXRjSFYwWldRcElIc2dhVzVwZEVOdmJYQjFkR1ZrS0hadExDQnZjSFJ6TG1OdmJYQjFkR1ZrS1RzZ2ZWeHVJQ0JwWmlBb2IzQjBjeTUzWVhSamFDQW1KaUJ2Y0hSekxuZGhkR05vSUNFOVBTQnVZWFJwZG1WWFlYUmphQ2tnZTF4dUlDQWdJR2x1YVhSWFlYUmphQ2gyYlN3Z2IzQjBjeTUzWVhSamFDazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1cGRGQnliM0J6SUNoMmJTd2djSEp2Y0hOUGNIUnBiMjV6S1NCN1hHNGdJSFpoY2lCd2NtOXdjMFJoZEdFZ1BTQjJiUzRrYjNCMGFXOXVjeTV3Y205d2MwUmhkR0VnZkh3Z2UzMDdYRzRnSUhaaGNpQndjbTl3Y3lBOUlIWnRMbDl3Y205d2N5QTlJSHQ5TzF4dUlDQXZMeUJqWVdOb1pTQndjbTl3SUd0bGVYTWdjMjhnZEdoaGRDQm1kWFIxY21VZ2NISnZjSE1nZFhCa1lYUmxjeUJqWVc0Z2FYUmxjbUYwWlNCMWMybHVaeUJCY25KaGVWeHVJQ0F2THlCcGJuTjBaV0ZrSUc5bUlHUjVibUZ0YVdNZ2IySnFaV04wSUd0bGVTQmxiblZ0WlhKaGRHbHZiaTVjYmlBZ2RtRnlJR3RsZVhNZ1BTQjJiUzRrYjNCMGFXOXVjeTVmY0hKdmNFdGxlWE1nUFNCYlhUdGNiaUFnZG1GeUlHbHpVbTl2ZENBOUlDRjJiUzRrY0dGeVpXNTBPMXh1SUNBdkx5QnliMjkwSUdsdWMzUmhibU5sSUhCeWIzQnpJSE5vYjNWc1pDQmlaU0JqYjI1MlpYSjBaV1JjYmlBZ2FXWWdLQ0ZwYzFKdmIzUXBJSHRjYmlBZ0lDQjBiMmRuYkdWUFluTmxjblpwYm1jb1ptRnNjMlVwTzF4dUlDQjlYRzRnSUhaaGNpQnNiMjl3SUQwZ1puVnVZM1JwYjI0Z0tDQnJaWGtnS1NCN1hHNGdJQ0FnYTJWNWN5NXdkWE5vS0d0bGVTazdYRzRnSUNBZ2RtRnlJSFpoYkhWbElEMGdkbUZzYVdSaGRHVlFjbTl3S0d0bGVTd2djSEp2Y0hOUGNIUnBiMjV6TENCd2NtOXdjMFJoZEdFc0lIWnRLVHRjYmlBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0FnSUh0Y2JpQWdJQ0FnSUhaaGNpQm9lWEJvWlc1aGRHVmtTMlY1SUQwZ2FIbHdhR1Z1WVhSbEtHdGxlU2s3WEc0Z0lDQWdJQ0JwWmlBb2FYTlNaWE5sY25abFpFRjBkSEpwWW5WMFpTaG9lWEJvWlc1aGRHVmtTMlY1S1NCOGZGeHVJQ0FnSUNBZ0lDQWdJR052Ym1acFp5NXBjMUpsYzJWeWRtVmtRWFIwY2lob2VYQm9aVzVoZEdWa1MyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FnSUNoY0lseGNYQ0pjSWlBcklHaDVjR2hsYm1GMFpXUkxaWGtnS3lCY0lseGNYQ0lnYVhNZ1lTQnlaWE5sY25abFpDQmhkSFJ5YVdKMWRHVWdZVzVrSUdOaGJtNXZkQ0JpWlNCMWMyVmtJR0Z6SUdOdmJYQnZibVZ1ZENCd2NtOXdMbHdpS1N4Y2JpQWdJQ0FnSUNBZ0lDQjJiVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWkdWbWFXNWxVbVZoWTNScGRtVWtKREVvY0hKdmNITXNJR3RsZVN3Z2RtRnNkV1VzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGcGMxSnZiM1FnSmlZZ0lXbHpWWEJrWVhScGJtZERhR2xzWkVOdmJYQnZibVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRoY200b1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSWtGMmIybGtJRzExZEdGMGFXNW5JR0VnY0hKdmNDQmthWEpsWTNSc2VTQnphVzVqWlNCMGFHVWdkbUZzZFdVZ2QybHNiQ0JpWlNCY0lpQXJYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltOTJaWEozY21sMGRHVnVJSGRvWlc1bGRtVnlJSFJvWlNCd1lYSmxiblFnWTI5dGNHOXVaVzUwSUhKbExYSmxibVJsY25NdUlGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lTVzV6ZEdWaFpDd2dkWE5sSUdFZ1pHRjBZU0J2Y2lCamIyMXdkWFJsWkNCd2NtOXdaWEowZVNCaVlYTmxaQ0J2YmlCMGFHVWdjSEp2Y0NkeklGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lkbUZzZFdVdUlGQnliM0FnWW1WcGJtY2diWFYwWVhSbFpEb2dYRnhjSWx3aUlDc2dhMlY1SUNzZ1hDSmNYRndpWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyYlZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJ6ZEdGMGFXTWdjSEp2Y0hNZ1lYSmxJR0ZzY21WaFpIa2djSEp2ZUdsbFpDQnZiaUIwYUdVZ1kyOXRjRzl1Wlc1MEozTWdjSEp2ZEc5MGVYQmxYRzRnSUNBZ0x5OGdaSFZ5YVc1bklGWjFaUzVsZUhSbGJtUW9LUzRnVjJVZ2IyNXNlU0J1WldWa0lIUnZJSEJ5YjNoNUlIQnliM0J6SUdSbFptbHVaV1FnWVhSY2JpQWdJQ0F2THlCcGJuTjBZVzUwYVdGMGFXOXVJR2hsY21VdVhHNGdJQ0FnYVdZZ0tDRW9hMlY1SUdsdUlIWnRLU2tnZTF4dUlDQWdJQ0FnY0hKdmVIa29kbTBzSUZ3aVgzQnliM0J6WENJc0lHdGxlU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ3Y205d2MwOXdkR2x2Ym5NcElHeHZiM0FvSUd0bGVTQXBPMXh1SUNCMGIyZG5iR1ZQWW5ObGNuWnBibWNvZEhKMVpTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJFWVhSaElDaDJiU2tnZTF4dUlDQjJZWElnWkdGMFlTQTlJSFp0TGlSdmNIUnBiMjV6TG1SaGRHRTdYRzRnSUdSaGRHRWdQU0IyYlM1ZlpHRjBZU0E5SUhSNWNHVnZaaUJrWVhSaElEMDlQU0FuWm5WdVkzUnBiMjRuWEc0Z0lDQWdQeUJuWlhSRVlYUmhLR1JoZEdFc0lIWnRLVnh1SUNBZ0lEb2daR0YwWVNCOGZDQjdmVHRjYmlBZ2FXWWdLQ0ZwYzFCc1lXbHVUMkpxWldOMEtHUmhkR0VwS1NCN1hHNGdJQ0FnWkdGMFlTQTlJSHQ5TzF4dUlDQWdJSGRoY200b1hHNGdJQ0FnSUNBblpHRjBZU0JtZFc1amRHbHZibk1nYzJodmRXeGtJSEpsZEhWeWJpQmhiaUJ2WW1wbFkzUTZYRnh1SnlBclhHNGdJQ0FnSUNBbmFIUjBjSE02THk5MmRXVnFjeTV2Y21jdmRqSXZaM1ZwWkdVdlkyOXRjRzl1Wlc1MGN5NW9kRzFzSTJSaGRHRXRUWFZ6ZEMxQ1pTMWhMVVoxYm1OMGFXOXVKeXhjYmlBZ0lDQWdJSFp0WEc0Z0lDQWdLVHRjYmlBZ2ZWeHVJQ0F2THlCd2NtOTRlU0JrWVhSaElHOXVJR2x1YzNSaGJtTmxYRzRnSUhaaGNpQnJaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9aR0YwWVNrN1hHNGdJSFpoY2lCd2NtOXdjeUE5SUhadExpUnZjSFJwYjI1ekxuQnliM0J6TzF4dUlDQjJZWElnYldWMGFHOWtjeUE5SUhadExpUnZjSFJwYjI1ekxtMWxkR2h2WkhNN1hHNGdJSFpoY2lCcElEMGdhMlY1Y3k1c1pXNW5kR2c3WEc0Z0lIZG9hV3hsSUNocExTMHBJSHRjYmlBZ0lDQjJZWElnYTJWNUlEMGdhMlY1YzF0cFhUdGNiaUFnSUNCN1hHNGdJQ0FnSUNCcFppQW9iV1YwYUc5a2N5QW1KaUJvWVhOUGQyNG9iV1YwYUc5a2N5d2dhMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lDaGNJazFsZEdodlpDQmNYRndpWENJZ0t5QnJaWGtnS3lCY0lseGNYQ0lnYUdGeklHRnNjbVZoWkhrZ1ltVmxiaUJrWldacGJtVmtJR0Z6SUdFZ1pHRjBZU0J3Y205d1pYSjBlUzVjSWlrc1hHNGdJQ0FnSUNBZ0lDQWdkbTFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hCeWIzQnpJQ1ltSUdoaGMwOTNiaWh3Y205d2N5d2dhMlY1S1NrZ2UxeHVJQ0FnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnWENKVWFHVWdaR0YwWVNCd2NtOXdaWEowZVNCY1hGd2lYQ0lnS3lCclpYa2dLeUJjSWx4Y1hDSWdhWE1nWVd4eVpXRmtlU0JrWldOc1lYSmxaQ0JoY3lCaElIQnliM0F1SUZ3aUlDdGNiaUFnSUNBZ0lDQWdYQ0pWYzJVZ2NISnZjQ0JrWldaaGRXeDBJSFpoYkhWbElHbHVjM1JsWVdRdVhDSXNYRzRnSUNBZ0lDQWdJSFp0WEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvSVdselVtVnpaWEoyWldRb2EyVjVLU2tnZTF4dUlDQWdJQ0FnY0hKdmVIa29kbTBzSUZ3aVgyUmhkR0ZjSWl3Z2EyVjVLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdMeThnYjJKelpYSjJaU0JrWVhSaFhHNGdJRzlpYzJWeWRtVW9aR0YwWVN3Z2RISjFaU0F2S2lCaGMxSnZiM1JFWVhSaElDb3ZLVHRjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwUkdGMFlTQW9aR0YwWVN3Z2RtMHBJSHRjYmlBZ0x5OGdJemMxTnpNZ1pHbHpZV0pzWlNCa1pYQWdZMjlzYkdWamRHbHZiaUIzYUdWdUlHbHVkbTlyYVc1bklHUmhkR0VnWjJWMGRHVnljMXh1SUNCd2RYTm9WR0Z5WjJWMEtDazdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdSaGRHRXVZMkZzYkNoMmJTd2dkbTBwWEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQm9ZVzVrYkdWRmNuSnZjaWhsTENCMmJTd2dYQ0prWVhSaEtDbGNJaWs3WEc0Z0lDQWdjbVYwZFhKdUlIdDlYRzRnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnY0c5d1ZHRnlaMlYwS0NrN1hHNGdJSDFjYm4xY2JseHVkbUZ5SUdOdmJYQjFkR1ZrVjJGMFkyaGxjazl3ZEdsdmJuTWdQU0I3SUd4aGVuazZJSFJ5ZFdVZ2ZUdGNibHh1Wm5WdVkzUnBiMjRnYVc1cGRFTnZiWEIxZEdWa0lDaDJiU3dnWTI5dGNIVjBaV1FwSUh0Y2JpQWdMeThnSkdac2IzY3RaR2x6WVdKc1pTMXNhVzVsWEc0Z0lIWmhjaUIzWVhSamFHVnljeUE5SUhadExsOWpiMjF3ZFhSbFpGZGhkR05vWlhKeklEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ0x5OGdZMjl0Y0hWMFpXUWdjSEp2Y0dWeWRHbGxjeUJoY21VZ2FuVnpkQ0JuWlhSMFpYSnpJR1IxY21sdVp5QlRVMUpjYmlBZ2RtRnlJR2x6VTFOU0lEMGdhWE5UWlhKMlpYSlNaVzVrWlhKcGJtY29LVHRjYmx4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z1kyOXRjSFYwWldRcElIdGNiaUFnSUNCMllYSWdkWE5sY2tSbFppQTlJR052YlhCMWRHVmtXMnRsZVYwN1hHNGdJQ0FnZG1GeUlHZGxkSFJsY2lBOUlIUjVjR1Z2WmlCMWMyVnlSR1ZtSUQwOVBTQW5ablZ1WTNScGIyNG5JRDhnZFhObGNrUmxaaUE2SUhWelpYSkVaV1l1WjJWME8xeHVJQ0FnSUdsbUlDaG5aWFIwWlhJZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnS0Z3aVIyVjBkR1Z5SUdseklHMXBjM05wYm1jZ1ptOXlJR052YlhCMWRHVmtJSEJ5YjNCbGNuUjVJRnhjWENKY0lpQXJJR3RsZVNBcklGd2lYRnhjSWk1Y0lpa3NYRzRnSUNBZ0lDQWdJSFp0WEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNnaGFYTlRVMUlwSUh0Y2JpQWdJQ0FnSUM4dklHTnlaV0YwWlNCcGJuUmxjbTVoYkNCM1lYUmphR1Z5SUdadmNpQjBhR1VnWTI5dGNIVjBaV1FnY0hKdmNHVnlkSGt1WEc0Z0lDQWdJQ0IzWVhSamFHVnljMXRyWlhsZElEMGdibVYzSUZkaGRHTm9aWElvWEc0Z0lDQWdJQ0FnSUhadExGeHVJQ0FnSUNBZ0lDQm5aWFIwWlhJZ2ZId2dibTl2Y0N4Y2JpQWdJQ0FnSUNBZ2JtOXZjQ3hjYmlBZ0lDQWdJQ0FnWTI5dGNIVjBaV1JYWVhSamFHVnlUM0IwYVc5dWMxeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QmpiMjF3YjI1bGJuUXRaR1ZtYVc1bFpDQmpiMjF3ZFhSbFpDQndjbTl3WlhKMGFXVnpJR0Z5WlNCaGJISmxZV1I1SUdSbFptbHVaV1FnYjI0Z2RHaGxYRzRnSUNBZ0x5OGdZMjl0Y0c5dVpXNTBJSEJ5YjNSdmRIbHdaUzRnVjJVZ2IyNXNlU0J1WldWa0lIUnZJR1JsWm1sdVpTQmpiMjF3ZFhSbFpDQndjbTl3WlhKMGFXVnpJR1JsWm1sdVpXUmNiaUFnSUNBdkx5QmhkQ0JwYm5OMFlXNTBhV0YwYVc5dUlHaGxjbVV1WEc0Z0lDQWdhV1lnS0NFb2EyVjVJR2x1SUhadEtTa2dlMXh1SUNBZ0lDQWdaR1ZtYVc1bFEyOXRjSFYwWldRb2RtMHNJR3RsZVN3Z2RYTmxja1JsWmlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNoclpYa2dhVzRnZG0wdUpHUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ2QyRnliaWdvWENKVWFHVWdZMjl0Y0hWMFpXUWdjSEp2Y0dWeWRIa2dYRnhjSWx3aUlDc2dhMlY1SUNzZ1hDSmNYRndpSUdseklHRnNjbVZoWkhrZ1pHVm1hVzVsWkNCcGJpQmtZWFJoTGx3aUtTd2dkbTBwTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMmJTNGtiM0IwYVc5dWN5NXdjbTl3Y3lBbUppQnJaWGtnYVc0Z2RtMHVKRzl3ZEdsdmJuTXVjSEp2Y0hNcElIdGNiaUFnSUNBZ0lDQWdkMkZ5Ymlnb1hDSlVhR1VnWTI5dGNIVjBaV1FnY0hKdmNHVnlkSGtnWEZ4Y0lsd2lJQ3NnYTJWNUlDc2dYQ0pjWEZ3aUlHbHpJR0ZzY21WaFpIa2daR1ZtYVc1bFpDQmhjeUJoSUhCeWIzQXVYQ0lwTENCMmJTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR1JsWm1sdVpVTnZiWEIxZEdWa0lDaGNiaUFnZEdGeVoyVjBMRnh1SUNCclpYa3NYRzRnSUhWelpYSkVaV1pjYmlrZ2UxeHVJQ0IyWVhJZ2MyaHZkV3hrUTJGamFHVWdQU0FoYVhOVFpYSjJaWEpTWlc1a1pYSnBibWNvS1R0Y2JpQWdhV1lnS0hSNWNHVnZaaUIxYzJWeVJHVm1JRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ2MyaGhjbVZrVUhKdmNHVnlkSGxFWldacGJtbDBhVzl1TG1kbGRDQTlJSE5vYjNWc1pFTmhZMmhsWEc0Z0lDQWdJQ0EvSUdOeVpXRjBaVU52YlhCMWRHVmtSMlYwZEdWeUtHdGxlU2xjYmlBZ0lDQWdJRG9nWTNKbFlYUmxSMlYwZEdWeVNXNTJiMnRsY2loMWMyVnlSR1ZtS1R0Y2JpQWdJQ0J6YUdGeVpXUlFjbTl3WlhKMGVVUmxabWx1YVhScGIyNHVjMlYwSUQwZ2JtOXZjRHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J6YUdGeVpXUlFjbTl3WlhKMGVVUmxabWx1YVhScGIyNHVaMlYwSUQwZ2RYTmxja1JsWmk1blpYUmNiaUFnSUNBZ0lEOGdjMmh2ZFd4a1EyRmphR1VnSmlZZ2RYTmxja1JsWmk1allXTm9aU0FoUFQwZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnUHlCamNtVmhkR1ZEYjIxd2RYUmxaRWRsZEhSbGNpaHJaWGtwWEc0Z0lDQWdJQ0FnSURvZ1kzSmxZWFJsUjJWMGRHVnlTVzUyYjJ0bGNpaDFjMlZ5UkdWbUxtZGxkQ2xjYmlBZ0lDQWdJRG9nYm05dmNEdGNiaUFnSUNCemFHRnlaV1JRY205d1pYSjBlVVJsWm1sdWFYUnBiMjR1YzJWMElEMGdkWE5sY2tSbFppNXpaWFFnZkh3Z2JtOXZjRHRjYmlBZ2ZWeHVJQ0JwWmlBb2MyaGhjbVZrVUhKdmNHVnlkSGxFWldacGJtbDBhVzl1TG5ObGRDQTlQVDBnYm05dmNDa2dlMXh1SUNBZ0lITm9ZWEpsWkZCeWIzQmxjblI1UkdWbWFXNXBkR2x2Ymk1elpYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FvWENKRGIyMXdkWFJsWkNCd2NtOXdaWEowZVNCY1hGd2lYQ0lnS3lCclpYa2dLeUJjSWx4Y1hDSWdkMkZ6SUdGemMybG5ibVZrSUhSdklHSjFkQ0JwZENCb1lYTWdibThnYzJWMGRHVnlMbHdpS1N4Y2JpQWdJQ0FnSUNBZ2RHaHBjMXh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlPMXh1SUNCOVhHNGdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMFlYSm5aWFFzSUd0bGVTd2djMmhoY21Wa1VISnZjR1Z5ZEhsRVpXWnBibWwwYVc5dUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUTI5dGNIVjBaV1JIWlhSMFpYSWdLR3RsZVNrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdZMjl0Y0hWMFpXUkhaWFIwWlhJZ0tDa2dlMXh1SUNBZ0lIWmhjaUIzWVhSamFHVnlJRDBnZEdocGN5NWZZMjl0Y0hWMFpXUlhZWFJqYUdWeWN5QW1KaUIwYUdsekxsOWpiMjF3ZFhSbFpGZGhkR05vWlhKelcydGxlVjA3WEc0Z0lDQWdhV1lnS0hkaGRHTm9aWElwSUh0Y2JpQWdJQ0FnSUdsbUlDaDNZWFJqYUdWeUxtUnBjblI1S1NCN1hHNGdJQ0FnSUNBZ0lIZGhkR05vWlhJdVpYWmhiSFZoZEdVb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2hFWlhBdWRHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lIZGhkR05vWlhJdVpHVndaVzVrS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnZDJGMFkyaGxjaTUyWVd4MVpWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWSFpYUjBaWEpKYm5admEyVnlLR1p1S1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQmpiMjF3ZFhSbFpFZGxkSFJsY2lBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdadUxtTmhiR3dvZEdocGN5d2dkR2hwY3lsY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBibWwwVFdWMGFHOWtjeUFvZG0wc0lHMWxkR2h2WkhNcElIdGNiaUFnZG1GeUlIQnliM0J6SUQwZ2RtMHVKRzl3ZEdsdmJuTXVjSEp2Y0hNN1hHNGdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQnRaWFJvYjJSektTQjdYRzRnSUNBZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnRaWFJvYjJSelcydGxlVjBnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0JjSWsxbGRHaHZaQ0JjWEZ3aVhDSWdLeUJyWlhrZ0t5QmNJbHhjWENJZ2FHRnpJSFI1Y0dVZ1hGeGNJbHdpSUNzZ0tIUjVjR1Z2WmlCdFpYUm9iMlJ6VzJ0bGVWMHBJQ3NnWENKY1hGd2lJR2x1SUhSb1pTQmpiMjF3YjI1bGJuUWdaR1ZtYVc1cGRHbHZiaTRnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJRndpUkdsa0lIbHZkU0J5WldabGNtVnVZMlVnZEdobElHWjFibU4wYVc5dUlHTnZjbkpsWTNSc2VUOWNJaXhjYmlBZ0lDQWdJQ0FnSUNCMmJWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hCeWIzQnpJQ1ltSUdoaGMwOTNiaWh3Y205d2N5d2dhMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lDaGNJazFsZEdodlpDQmNYRndpWENJZ0t5QnJaWGtnS3lCY0lseGNYQ0lnYUdGeklHRnNjbVZoWkhrZ1ltVmxiaUJrWldacGJtVmtJR0Z6SUdFZ2NISnZjQzVjSWlrc1hHNGdJQ0FnSUNBZ0lDQWdkbTFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDZ29hMlY1SUdsdUlIWnRLU0FtSmlCcGMxSmxjMlZ5ZG1Wa0tHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnSUNCY0lrMWxkR2h2WkNCY1hGd2lYQ0lnS3lCclpYa2dLeUJjSWx4Y1hDSWdZMjl1Wm14cFkzUnpJSGRwZEdnZ1lXNGdaWGhwYzNScGJtY2dWblZsSUdsdWMzUmhibU5sSUcxbGRHaHZaQzRnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJRndpUVhadmFXUWdaR1ZtYVc1cGJtY2dZMjl0Y0c5dVpXNTBJRzFsZEdodlpITWdkR2hoZENCemRHRnlkQ0IzYVhSb0lGOGdiM0lnSkM1Y0lseHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCMmJWdHJaWGxkSUQwZ2RIbHdaVzltSUcxbGRHaHZaSE5iYTJWNVhTQWhQVDBnSjJaMWJtTjBhVzl1SnlBL0lHNXZiM0FnT2lCaWFXNWtLRzFsZEdodlpITmJhMlY1WFN3Z2RtMHBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdsdWFYUlhZWFJqYUNBb2RtMHNJSGRoZEdOb0tTQjdYRzRnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUIzWVhSamFDa2dlMXh1SUNBZ0lIWmhjaUJvWVc1a2JHVnlJRDBnZDJGMFkyaGJhMlY1WFR0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hvWVc1a2JHVnlLU2tnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCb1lXNWtiR1Z5TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR055WldGMFpWZGhkR05vWlhJb2RtMHNJR3RsZVN3Z2FHRnVaR3hsY2x0cFhTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdOeVpXRjBaVmRoZEdOb1pYSW9kbTBzSUd0bGVTd2dhR0Z1Wkd4bGNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR055WldGMFpWZGhkR05vWlhJZ0tGeHVJQ0IyYlN4Y2JpQWdaWGh3VDNKR2JpeGNiaUFnYUdGdVpHeGxjaXhjYmlBZ2IzQjBhVzl1YzF4dUtTQjdYRzRnSUdsbUlDaHBjMUJzWVdsdVQySnFaV04wS0doaGJtUnNaWElwS1NCN1hHNGdJQ0FnYjNCMGFXOXVjeUE5SUdoaGJtUnNaWEk3WEc0Z0lDQWdhR0Z1Wkd4bGNpQTlJR2hoYm1Sc1pYSXVhR0Z1Wkd4bGNqdGNiaUFnZlZ4dUlDQnBaaUFvZEhsd1pXOW1JR2hoYm1Sc1pYSWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnYUdGdVpHeGxjaUE5SUhadFcyaGhibVJzWlhKZE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMmJTNGtkMkYwWTJnb1pYaHdUM0pHYml3Z2FHRnVaR3hsY2l3Z2IzQjBhVzl1Y3lsY2JuMWNibHh1Wm5WdVkzUnBiMjRnYzNSaGRHVk5hWGhwYmlBb1ZuVmxLU0I3WEc0Z0lDOHZJR1pzYjNjZ2MyOXRaV2h2ZHlCb1lYTWdjSEp2WW14bGJYTWdkMmwwYUNCa2FYSmxZM1JzZVNCa1pXTnNZWEpsWkNCa1pXWnBibWwwYVc5dUlHOWlhbVZqZEZ4dUlDQXZMeUIzYUdWdUlIVnphVzVuSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTd2djMjhnZDJVZ2FHRjJaU0IwYnlCd2NtOWpaV1IxY21Gc2JIa2dZblZwYkdRZ2RYQmNiaUFnTHk4Z2RHaGxJRzlpYW1WamRDQm9aWEpsTGx4dUlDQjJZWElnWkdGMFlVUmxaaUE5SUh0OU8xeHVJQ0JrWVhSaFJHVm1MbWRsZENBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJSFJvYVhNdVgyUmhkR0VnZlR0Y2JpQWdkbUZ5SUhCeWIzQnpSR1ZtSUQwZ2UzMDdYRzRnSUhCeWIzQnpSR1ZtTG1kbGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjNCeklIMDdYRzRnSUh0Y2JpQWdJQ0JrWVhSaFJHVm1Mbk5sZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSGRoY200b1hHNGdJQ0FnSUNBZ0lDZEJkbTlwWkNCeVpYQnNZV05wYm1jZ2FXNXpkR0Z1WTJVZ2NtOXZkQ0FrWkdGMFlTNGdKeUFyWEc0Z0lDQWdJQ0FnSUNkVmMyVWdibVZ6ZEdWa0lHUmhkR0VnY0hKdmNHVnlkR2xsY3lCcGJuTjBaV0ZrTGljc1hHNGdJQ0FnSUNBZ0lIUm9hWE5jYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQndjbTl3YzBSbFppNXpaWFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQjNZWEp1S0Z3aUpIQnliM0J6SUdseklISmxZV1J2Ym14NUxsd2lMQ0IwYUdsektUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hXZFdVdWNISnZkRzkwZVhCbExDQW5KR1JoZEdFbkxDQmtZWFJoUkdWbUtUdGNiaUFnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtGWjFaUzV3Y205MGIzUjVjR1VzSUNja2NISnZjSE1uTENCd2NtOXdjMFJsWmlrN1hHNWNiaUFnVm5WbExuQnliM1J2ZEhsd1pTNGtjMlYwSUQwZ2MyVjBPMXh1SUNCV2RXVXVjSEp2ZEc5MGVYQmxMaVJrWld4bGRHVWdQU0JrWld3N1hHNWNiaUFnVm5WbExuQnliM1J2ZEhsd1pTNGtkMkYwWTJnZ1BTQm1kVzVqZEdsdmJpQW9YRzRnSUNBZ1pYaHdUM0pHYml4Y2JpQWdJQ0JqWWl4Y2JpQWdJQ0J2Y0hScGIyNXpYRzRnSUNrZ2UxeHVJQ0FnSUhaaGNpQjJiU0E5SUhSb2FYTTdYRzRnSUNBZ2FXWWdLR2x6VUd4aGFXNVBZbXBsWTNRb1kySXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFYyRjBZMmhsY2loMmJTd2daWGh3VDNKR2Jpd2dZMklzSUc5d2RHbHZibk1wWEc0Z0lDQWdmVnh1SUNBZ0lHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dUlDQWdJRzl3ZEdsdmJuTXVkWE5sY2lBOUlIUnlkV1U3WEc0Z0lDQWdkbUZ5SUhkaGRHTm9aWElnUFNCdVpYY2dWMkYwWTJobGNpaDJiU3dnWlhod1QzSkdiaXdnWTJJc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtbHRiV1ZrYVdGMFpTa2dlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kySXVZMkZzYkNoMmJTd2dkMkYwWTJobGNpNTJZV3gxWlNrN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNCb1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2l3Z2RtMHNJQ2hjSW1OaGJHeGlZV05ySUdadmNpQnBiVzFsWkdsaGRHVWdkMkYwWTJobGNpQmNYRndpWENJZ0t5QW9kMkYwWTJobGNpNWxlSEJ5WlhOemFXOXVLU0FySUZ3aVhGeGNJbHdpS1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQjFibmRoZEdOb1JtNGdLQ2tnZTF4dUlDQWdJQ0FnZDJGMFkyaGxjaTUwWldGeVpHOTNiaWdwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUIxYVdRa015QTlJREE3WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJOYVhocGJpQW9WblZsS1NCN1hHNGdJRloxWlM1d2NtOTBiM1I1Y0dVdVgybHVhWFFnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUhaaGNpQjJiU0E5SUhSb2FYTTdYRzRnSUNBZ0x5OGdZU0IxYVdSY2JpQWdJQ0IyYlM1ZmRXbGtJRDBnZFdsa0pETXJLenRjYmx4dUlDQWdJSFpoY2lCemRHRnlkRlJoWnl3Z1pXNWtWR0ZuTzF4dUlDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0FnSUdsbUlDaGpiMjVtYVdjdWNHVnlabTl5YldGdVkyVWdKaVlnYldGeWF5a2dlMXh1SUNBZ0lDQWdjM1JoY25SVVlXY2dQU0JjSW5aMVpTMXdaWEptTFhOMFlYSjBPbHdpSUNzZ0tIWnRMbDkxYVdRcE8xeHVJQ0FnSUNBZ1pXNWtWR0ZuSUQwZ1hDSjJkV1V0Y0dWeVppMWxibVE2WENJZ0t5QW9kbTB1WDNWcFpDazdYRzRnSUNBZ0lDQnRZWEpyS0hOMFlYSjBWR0ZuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCaElHWnNZV2NnZEc4Z1lYWnZhV1FnZEdocGN5QmlaV2x1WnlCdlluTmxjblpsWkZ4dUlDQWdJSFp0TGw5cGMxWjFaU0E5SUhSeWRXVTdYRzRnSUNBZ0x5OGdiV1Z5WjJVZ2IzQjBhVzl1YzF4dUlDQWdJR2xtSUNodmNIUnBiMjV6SUNZbUlHOXdkR2x2Ym5NdVgybHpRMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdJQ0F2THlCdmNIUnBiV2w2WlNCcGJuUmxjbTVoYkNCamIyMXdiMjVsYm5RZ2FXNXpkR0Z1ZEdsaGRHbHZibHh1SUNBZ0lDQWdMeThnYzJsdVkyVWdaSGx1WVcxcFl5QnZjSFJwYjI1eklHMWxjbWRwYm1jZ2FYTWdjSEpsZEhSNUlITnNiM2NzSUdGdVpDQnViMjVsSUc5bUlIUm9aVnh1SUNBZ0lDQWdMeThnYVc1MFpYSnVZV3dnWTI5dGNHOXVaVzUwSUc5d2RHbHZibk1nYm1WbFpITWdjM0JsWTJsaGJDQjBjbVZoZEcxbGJuUXVYRzRnSUNBZ0lDQnBibWwwU1c1MFpYSnVZV3hEYjIxd2IyNWxiblFvZG0wc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IyYlM0a2IzQjBhVzl1Y3lBOUlHMWxjbWRsVDNCMGFXOXVjeWhjYmlBZ0lDQWdJQ0FnY21WemIyeDJaVU52Ym5OMGNuVmpkRzl5VDNCMGFXOXVjeWgyYlM1amIyNXpkSEoxWTNSdmNpa3NYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTWdmSHdnZTMwc1hHNGdJQ0FnSUNBZ0lIWnRYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ1pXeHpaU0FxTDF4dUlDQWdJSHRjYmlBZ0lDQWdJR2x1YVhSUWNtOTRlU2gyYlNrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUdWNGNHOXpaU0J5WldGc0lITmxiR1pjYmlBZ0lDQjJiUzVmYzJWc1ppQTlJSFp0TzF4dUlDQWdJR2x1YVhSTWFXWmxZM2xqYkdVb2RtMHBPMXh1SUNBZ0lHbHVhWFJGZG1WdWRITW9kbTBwTzF4dUlDQWdJR2x1YVhSU1pXNWtaWElvZG0wcE8xeHVJQ0FnSUdOaGJHeEliMjlyS0hadExDQW5ZbVZtYjNKbFEzSmxZWFJsSnlrN1hHNGdJQ0FnYVc1cGRFbHVhbVZqZEdsdmJuTW9kbTBwT3lBdkx5QnlaWE52YkhabElHbHVhbVZqZEdsdmJuTWdZbVZtYjNKbElHUmhkR0V2Y0hKdmNITmNiaUFnSUNCcGJtbDBVM1JoZEdVb2RtMHBPMXh1SUNBZ0lHbHVhWFJRY205MmFXUmxLSFp0S1RzZ0x5OGdjbVZ6YjJ4MlpTQndjbTkyYVdSbElHRm1kR1Z5SUdSaGRHRXZjSEp2Y0hOY2JpQWdJQ0JqWVd4c1NHOXZheWgyYlN3Z0oyTnlaV0YwWldRbktUdGNibHh1SUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJR2xtSUNoamIyNW1hV2N1Y0dWeVptOXliV0Z1WTJVZ0ppWWdiV0Z5YXlrZ2UxeHVJQ0FnSUNBZ2RtMHVYMjVoYldVZ1BTQm1iM0p0WVhSRGIyMXdiMjVsYm5ST1lXMWxLSFp0TENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0J0WVhKcktHVnVaRlJoWnlrN1hHNGdJQ0FnSUNCdFpXRnpkWEpsS0NoY0luWjFaU0JjSWlBcklDaDJiUzVmYm1GdFpTa2dLeUJjSWlCcGJtbDBYQ0lwTENCemRHRnlkRlJoWnl3Z1pXNWtWR0ZuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RtMHVKRzl3ZEdsdmJuTXVaV3dwSUh0Y2JpQWdJQ0FnSUhadExpUnRiM1Z1ZENoMmJTNGtiM0IwYVc5dWN5NWxiQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGJtbDBTVzUwWlhKdVlXeERiMjF3YjI1bGJuUWdLSFp0TENCdmNIUnBiMjV6S1NCN1hHNGdJSFpoY2lCdmNIUnpJRDBnZG0wdUpHOXdkR2x2Ym5NZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0hadExtTnZibk4wY25WamRHOXlMbTl3ZEdsdmJuTXBPMXh1SUNBdkx5QmtiMmx1WnlCMGFHbHpJR0psWTJGMWMyVWdhWFFuY3lCbVlYTjBaWElnZEdoaGJpQmtlVzVoYldsaklHVnVkVzFsY21GMGFXOXVMbHh1SUNCMllYSWdjR0Z5Wlc1MFZtNXZaR1VnUFNCdmNIUnBiMjV6TGw5d1lYSmxiblJXYm05a1pUdGNiaUFnYjNCMGN5NXdZWEpsYm5RZ1BTQnZjSFJwYjI1ekxuQmhjbVZ1ZER0Y2JpQWdiM0IwY3k1ZmNHRnlaVzUwVm01dlpHVWdQU0J3WVhKbGJuUldibTlrWlR0Y2JseHVJQ0IyWVhJZ2RtNXZaR1ZEYjIxd2IyNWxiblJQY0hScGIyNXpJRDBnY0dGeVpXNTBWbTV2WkdVdVkyOXRjRzl1Wlc1MFQzQjBhVzl1Y3p0Y2JpQWdiM0IwY3k1d2NtOXdjMFJoZEdFZ1BTQjJibTlrWlVOdmJYQnZibVZ1ZEU5d2RHbHZibk11Y0hKdmNITkVZWFJoTzF4dUlDQnZjSFJ6TGw5d1lYSmxiblJNYVhOMFpXNWxjbk1nUFNCMmJtOWtaVU52YlhCdmJtVnVkRTl3ZEdsdmJuTXViR2x6ZEdWdVpYSnpPMXh1SUNCdmNIUnpMbDl5Wlc1a1pYSkRhR2xzWkhKbGJpQTlJSFp1YjJSbFEyOXRjRzl1Wlc1MFQzQjBhVzl1Y3k1amFHbHNaSEpsYmp0Y2JpQWdiM0IwY3k1ZlkyOXRjRzl1Wlc1MFZHRm5JRDBnZG01dlpHVkRiMjF3YjI1bGJuUlBjSFJwYjI1ekxuUmhaenRjYmx4dUlDQnBaaUFvYjNCMGFXOXVjeTV5Wlc1a1pYSXBJSHRjYmlBZ0lDQnZjSFJ6TG5KbGJtUmxjaUE5SUc5d2RHbHZibk11Y21WdVpHVnlPMXh1SUNBZ0lHOXdkSE11YzNSaGRHbGpVbVZ1WkdWeVJtNXpJRDBnYjNCMGFXOXVjeTV6ZEdGMGFXTlNaVzVrWlhKR2JuTTdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WemIyeDJaVU52Ym5OMGNuVmpkRzl5VDNCMGFXOXVjeUFvUTNSdmNpa2dlMXh1SUNCMllYSWdiM0IwYVc5dWN5QTlJRU4wYjNJdWIzQjBhVzl1Y3p0Y2JpQWdhV1lnS0VOMGIzSXVjM1Z3WlhJcElIdGNiaUFnSUNCMllYSWdjM1Z3WlhKUGNIUnBiMjV6SUQwZ2NtVnpiMngyWlVOdmJuTjBjblZqZEc5eVQzQjBhVzl1Y3loRGRHOXlMbk4xY0dWeUtUdGNiaUFnSUNCMllYSWdZMkZqYUdWa1UzVndaWEpQY0hScGIyNXpJRDBnUTNSdmNpNXpkWEJsY2s5d2RHbHZibk03WEc0Z0lDQWdhV1lnS0hOMWNHVnlUM0IwYVc5dWN5QWhQVDBnWTJGamFHVmtVM1Z3WlhKUGNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBdkx5QnpkWEJsY2lCdmNIUnBiMjRnWTJoaGJtZGxaQ3hjYmlBZ0lDQWdJQzh2SUc1bFpXUWdkRzhnY21WemIyeDJaU0J1WlhjZ2IzQjBhVzl1Y3k1Y2JpQWdJQ0FnSUVOMGIzSXVjM1Z3WlhKUGNIUnBiMjV6SUQwZ2MzVndaWEpQY0hScGIyNXpPMXh1SUNBZ0lDQWdMeThnWTJobFkyc2dhV1lnZEdobGNtVWdZWEpsSUdGdWVTQnNZWFJsTFcxdlpHbG1hV1ZrTDJGMGRHRmphR1ZrSUc5d2RHbHZibk1nS0NNME9UYzJLVnh1SUNBZ0lDQWdkbUZ5SUcxdlpHbG1hV1ZrVDNCMGFXOXVjeUE5SUhKbGMyOXNkbVZOYjJScFptbGxaRTl3ZEdsdmJuTW9RM1J2Y2lrN1hHNGdJQ0FnSUNBdkx5QjFjR1JoZEdVZ1ltRnpaU0JsZUhSbGJtUWdiM0IwYVc5dWMxeHVJQ0FnSUNBZ2FXWWdLRzF2WkdsbWFXVmtUM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0JsZUhSbGJtUW9RM1J2Y2k1bGVIUmxibVJQY0hScGIyNXpMQ0J0YjJScFptbGxaRTl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiM0IwYVc5dWN5QTlJRU4wYjNJdWIzQjBhVzl1Y3lBOUlHMWxjbWRsVDNCMGFXOXVjeWh6ZFhCbGNrOXdkR2x2Ym5Nc0lFTjBiM0l1WlhoMFpXNWtUM0IwYVc5dWN5azdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTV1WVcxbEtTQjdYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVZMjl0Y0c5dVpXNTBjMXR2Y0hScGIyNXpMbTVoYldWZElEMGdRM1J2Y2p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzl3ZEdsdmJuTmNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnpiMngyWlUxdlpHbG1hV1ZrVDNCMGFXOXVjeUFvUTNSdmNpa2dlMXh1SUNCMllYSWdiVzlrYVdacFpXUTdYRzRnSUhaaGNpQnNZWFJsYzNRZ1BTQkRkRzl5TG05d2RHbHZibk03WEc0Z0lIWmhjaUJ6WldGc1pXUWdQU0JEZEc5eUxuTmxZV3hsWkU5d2RHbHZibk03WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCc1lYUmxjM1FwSUh0Y2JpQWdJQ0JwWmlBb2JHRjBaWE4wVzJ0bGVWMGdJVDA5SUhObFlXeGxaRnRyWlhsZEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVcxdlpHbG1hV1ZrS1NCN0lHMXZaR2xtYVdWa0lEMGdlMzA3SUgxY2JpQWdJQ0FnSUcxdlpHbG1hV1ZrVzJ0bGVWMGdQU0JzWVhSbGMzUmJhMlY1WFR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzF2WkdsbWFXVmtYRzU5WEc1Y2JtWjFibU4wYVc5dUlGWjFaU0FvYjNCMGFXOXVjeWtnZTF4dUlDQnBaaUFvSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnVm5WbEtWeHVJQ0FwSUh0Y2JpQWdJQ0IzWVhKdUtDZFdkV1VnYVhNZ1lTQmpiMjV6ZEhKMVkzUnZjaUJoYm1RZ2MyaHZkV3hrSUdKbElHTmhiR3hsWkNCM2FYUm9JSFJvWlNCZ2JtVjNZQ0JyWlhsM2IzSmtKeWs3WEc0Z0lIMWNiaUFnZEdocGN5NWZhVzVwZENodmNIUnBiMjV6S1R0Y2JuMWNibHh1YVc1cGRFMXBlR2x1S0ZaMVpTazdYRzV6ZEdGMFpVMXBlR2x1S0ZaMVpTazdYRzVsZG1WdWRITk5hWGhwYmloV2RXVXBPMXh1YkdsbVpXTjVZMnhsVFdsNGFXNG9WblZsS1R0Y2JuSmxibVJsY2sxcGVHbHVLRloxWlNrN1hHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1sMFZYTmxJQ2hXZFdVcElIdGNiaUFnVm5WbExuVnpaU0E5SUdaMWJtTjBhVzl1SUNod2JIVm5hVzRwSUh0Y2JpQWdJQ0IyWVhJZ2FXNXpkR0ZzYkdWa1VHeDFaMmx1Y3lBOUlDaDBhR2x6TGw5cGJuTjBZV3hzWldSUWJIVm5hVzV6SUh4OElDaDBhR2x6TGw5cGJuTjBZV3hzWldSUWJIVm5hVzV6SUQwZ1cxMHBLVHRjYmlBZ0lDQnBaaUFvYVc1emRHRnNiR1ZrVUd4MVoybHVjeTVwYm1SbGVFOW1LSEJzZFdkcGJpa2dQaUF0TVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QmhaR1JwZEdsdmJtRnNJSEJoY21GdFpYUmxjbk5jYmlBZ0lDQjJZWElnWVhKbmN5QTlJSFJ2UVhKeVlYa29ZWEpuZFcxbGJuUnpMQ0F4S1R0Y2JpQWdJQ0JoY21kekxuVnVjMmhwWm5Rb2RHaHBjeWs3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ3YkhWbmFXNHVhVzV6ZEdGc2JDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2NHeDFaMmx1TG1sdWMzUmhiR3d1WVhCd2JIa29jR3gxWjJsdUxDQmhjbWR6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ3YkhWbmFXNGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lIQnNkV2RwYmk1aGNIQnNlU2h1ZFd4c0xDQmhjbWR6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhVzV6ZEdGc2JHVmtVR3gxWjJsdWN5NXdkWE5vS0hCc2RXZHBiaWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFJOYVhocGJpUXhJQ2hXZFdVcElIdGNiaUFnVm5WbExtMXBlR2x1SUQwZ1puVnVZM1JwYjI0Z0tHMXBlR2x1S1NCN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdiV1Z5WjJWUGNIUnBiMjV6S0hSb2FYTXViM0IwYVc5dWN5d2diV2w0YVc0cE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDA3WEc1OVhHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1sMFJYaDBaVzVrSUNoV2RXVXBJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFVmhZMmdnYVc1emRHRnVZMlVnWTI5dWMzUnlkV04wYjNJc0lHbHVZMngxWkdsdVp5QldkV1VzSUdoaGN5QmhJSFZ1YVhGMVpWeHVJQ0FnS2lCamFXUXVJRlJvYVhNZ1pXNWhZbXhsY3lCMWN5QjBieUJqY21WaGRHVWdkM0poY0hCbFpDQmNJbU5vYVd4a1hHNGdJQ0FxSUdOdmJuTjBjblZqZEc5eWMxd2lJR1p2Y2lCd2NtOTBiM1I1Y0dGc0lHbHVhR1Z5YVhSaGJtTmxJR0Z1WkNCallXTm9aU0IwYUdWdExseHVJQ0FnS2k5Y2JpQWdWblZsTG1OcFpDQTlJREE3WEc0Z0lIWmhjaUJqYVdRZ1BTQXhPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRiR0Z6Y3lCcGJtaGxjbWwwWVc1alpWeHVJQ0FnS2k5Y2JpQWdWblZsTG1WNGRHVnVaQ0E5SUdaMWJtTjBhVzl1SUNobGVIUmxibVJQY0hScGIyNXpLU0I3WEc0Z0lDQWdaWGgwWlc1a1QzQjBhVzl1Y3lBOUlHVjRkR1Z1WkU5d2RHbHZibk1nZkh3Z2UzMDdYRzRnSUNBZ2RtRnlJRk4xY0dWeUlEMGdkR2hwY3p0Y2JpQWdJQ0IyWVhJZ1UzVndaWEpKWkNBOUlGTjFjR1Z5TG1OcFpEdGNiaUFnSUNCMllYSWdZMkZqYUdWa1EzUnZjbk1nUFNCbGVIUmxibVJQY0hScGIyNXpMbDlEZEc5eUlIeDhJQ2hsZUhSbGJtUlBjSFJwYjI1ekxsOURkRzl5SUQwZ2UzMHBPMXh1SUNBZ0lHbG1JQ2hqWVdOb1pXUkRkRzl5YzF0VGRYQmxja2xrWFNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRU4wYjNKelcxTjFjR1Z5U1dSZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHNWhiV1VnUFNCbGVIUmxibVJQY0hScGIyNXpMbTVoYldVZ2ZId2dVM1Z3WlhJdWIzQjBhVzl1Y3k1dVlXMWxPMXh1SUNBZ0lHbG1JQ2h1WVcxbEtTQjdYRzRnSUNBZ0lDQjJZV3hwWkdGMFpVTnZiWEJ2Ym1WdWRFNWhiV1VvYm1GdFpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJRk4xWWlBOUlHWjFibU4wYVc5dUlGWjFaVU52YlhCdmJtVnVkQ0FvYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZhVzVwZENodmNIUnBiMjV6S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRk4xWWk1d2NtOTBiM1I1Y0dVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0ZOMWNHVnlMbkJ5YjNSdmRIbHdaU2s3WEc0Z0lDQWdVM1ZpTG5CeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSdmNpQTlJRk4xWWp0Y2JpQWdJQ0JUZFdJdVkybGtJRDBnWTJsa0t5czdYRzRnSUNBZ1UzVmlMbTl3ZEdsdmJuTWdQU0J0WlhKblpVOXdkR2x2Ym5Nb1hHNGdJQ0FnSUNCVGRYQmxjaTV2Y0hScGIyNXpMRnh1SUNBZ0lDQWdaWGgwWlc1a1QzQjBhVzl1YzF4dUlDQWdJQ2s3WEc0Z0lDQWdVM1ZpV3lkemRYQmxjaWRkSUQwZ1UzVndaWEk3WEc1Y2JpQWdJQ0F2THlCR2IzSWdjSEp2Y0hNZ1lXNWtJR052YlhCMWRHVmtJSEJ5YjNCbGNuUnBaWE1zSUhkbElHUmxabWx1WlNCMGFHVWdjSEp2ZUhrZ1oyVjBkR1Z5Y3lCdmJseHVJQ0FnSUM4dklIUm9aU0JXZFdVZ2FXNXpkR0Z1WTJWeklHRjBJR1Y0ZEdWdWMybHZiaUIwYVcxbExDQnZiaUIwYUdVZ1pYaDBaVzVrWldRZ2NISnZkRzkwZVhCbExpQlVhR2x6WEc0Z0lDQWdMeThnWVhadmFXUnpJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNCallXeHNjeUJtYjNJZ1pXRmphQ0JwYm5OMFlXNWpaU0JqY21WaGRHVmtMbHh1SUNBZ0lHbG1JQ2hUZFdJdWIzQjBhVzl1Y3k1d2NtOXdjeWtnZTF4dUlDQWdJQ0FnYVc1cGRGQnliM0J6SkRFb1UzVmlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRk4xWWk1dmNIUnBiMjV6TG1OdmJYQjFkR1ZrS1NCN1hHNGdJQ0FnSUNCcGJtbDBRMjl0Y0hWMFpXUWtNU2hUZFdJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHRnNiRzkzSUdaMWNuUm9aWElnWlhoMFpXNXphVzl1TDIxcGVHbHVMM0JzZFdkcGJpQjFjMkZuWlZ4dUlDQWdJRk4xWWk1bGVIUmxibVFnUFNCVGRYQmxjaTVsZUhSbGJtUTdYRzRnSUNBZ1UzVmlMbTFwZUdsdUlEMGdVM1Z3WlhJdWJXbDRhVzQ3WEc0Z0lDQWdVM1ZpTG5WelpTQTlJRk4xY0dWeUxuVnpaVHRjYmx4dUlDQWdJQzh2SUdOeVpXRjBaU0JoYzNObGRDQnlaV2RwYzNSbGNuTXNJSE52SUdWNGRHVnVaR1ZrSUdOc1lYTnpaWE5jYmlBZ0lDQXZMeUJqWVc0Z2FHRjJaU0IwYUdWcGNpQndjbWwyWVhSbElHRnpjMlYwY3lCMGIyOHVYRzRnSUNBZ1FWTlRSVlJmVkZsUVJWTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ1UzVmlXM1I1Y0dWZElEMGdVM1Z3WlhKYmRIbHdaVjA3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdMeThnWlc1aFlteGxJSEpsWTNWeWMybDJaU0J6Wld4bUxXeHZiMnQxY0Z4dUlDQWdJR2xtSUNodVlXMWxLU0I3WEc0Z0lDQWdJQ0JUZFdJdWIzQjBhVzl1Y3k1amIyMXdiMjVsYm5SelcyNWhiV1ZkSUQwZ1UzVmlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR3RsWlhBZ1lTQnlaV1psY21WdVkyVWdkRzhnZEdobElITjFjR1Z5SUc5d2RHbHZibk1nWVhRZ1pYaDBaVzV6YVc5dUlIUnBiV1V1WEc0Z0lDQWdMeThnYkdGMFpYSWdZWFFnYVc1emRHRnVkR2xoZEdsdmJpQjNaU0JqWVc0Z1kyaGxZMnNnYVdZZ1UzVndaWEluY3lCdmNIUnBiMjV6SUdoaGRtVmNiaUFnSUNBdkx5QmlaV1Z1SUhWd1pHRjBaV1F1WEc0Z0lDQWdVM1ZpTG5OMWNHVnlUM0IwYVc5dWN5QTlJRk4xY0dWeUxtOXdkR2x2Ym5NN1hHNGdJQ0FnVTNWaUxtVjRkR1Z1WkU5d2RHbHZibk1nUFNCbGVIUmxibVJQY0hScGIyNXpPMXh1SUNBZ0lGTjFZaTV6WldGc1pXUlBjSFJwYjI1eklEMGdaWGgwWlc1a0tIdDlMQ0JUZFdJdWIzQjBhVzl1Y3lrN1hHNWNiaUFnSUNBdkx5QmpZV05vWlNCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUdOaFkyaGxaRU4wYjNKelcxTjFjR1Z5U1dSZElEMGdVM1ZpTzF4dUlDQWdJSEpsZEhWeWJpQlRkV0pjYmlBZ2ZUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRkJ5YjNCekpERWdLRU52YlhBcElIdGNiaUFnZG1GeUlIQnliM0J6SUQwZ1EyOXRjQzV2Y0hScGIyNXpMbkJ5YjNCek8xeHVJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdjSEp2Y0hNcElIdGNiaUFnSUNCd2NtOTRlU2hEYjIxd0xuQnliM1J2ZEhsd1pTd2dYQ0pmY0hKdmNITmNJaXdnYTJWNUtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1sMFEyOXRjSFYwWldRa01TQW9RMjl0Y0NrZ2UxeHVJQ0IyWVhJZ1kyOXRjSFYwWldRZ1BTQkRiMjF3TG05d2RHbHZibk11WTI5dGNIVjBaV1E3WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCamIyMXdkWFJsWkNrZ2UxeHVJQ0FnSUdSbFptbHVaVU52YlhCMWRHVmtLRU52YlhBdWNISnZkRzkwZVhCbExDQnJaWGtzSUdOdmJYQjFkR1ZrVzJ0bGVWMHBPMXh1SUNCOVhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1bWRXNWpkR2x2YmlCcGJtbDBRWE56WlhSU1pXZHBjM1JsY25NZ0tGWjFaU2tnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbElHRnpjMlYwSUhKbFoybHpkSEpoZEdsdmJpQnRaWFJvYjJSekxseHVJQ0FnS2k5Y2JpQWdRVk5UUlZSZlZGbFFSVk11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZEhsd1pTa2dlMXh1SUNBZ0lGWjFaVnQwZVhCbFhTQTlJR1oxYm1OMGFXOXVJQ2hjYmlBZ0lDQWdJR2xrTEZ4dUlDQWdJQ0FnWkdWbWFXNXBkR2x2Ymx4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRmtaV1pwYm1sMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtOXdkR2x2Ym5OYmRIbHdaU0FySUNkekoxMWJhV1JkWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkamIyMXdiMjVsYm5RbktTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2FXUmhkR1ZEYjIxd2IyNWxiblJPWVcxbEtHbGtLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9kSGx3WlNBOVBUMGdKMk52YlhCdmJtVnVkQ2NnSmlZZ2FYTlFiR0ZwYms5aWFtVmpkQ2hrWldacGJtbDBhVzl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1JsWm1sdWFYUnBiMjR1Ym1GdFpTQTlJR1JsWm1sdWFYUnBiMjR1Ym1GdFpTQjhmQ0JwWkR0Y2JpQWdJQ0FnSUNBZ0lDQmtaV1pwYm1sMGFXOXVJRDBnZEdocGN5NXZjSFJwYjI1ekxsOWlZWE5sTG1WNGRHVnVaQ2hrWldacGJtbDBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnSjJScGNtVmpkR2wyWlNjZ0ppWWdkSGx3Wlc5bUlHUmxabWx1YVhScGIyNGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0JrWldacGJtbDBhVzl1SUQwZ2V5QmlhVzVrT2lCa1pXWnBibWwwYVc5dUxDQjFjR1JoZEdVNklHUmxabWx1YVhScGIyNGdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbTl3ZEdsdmJuTmJkSGx3WlNBcklDZHpKMTFiYVdSZElEMGdaR1ZtYVc1cGRHbHZianRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1JsWm1sdWFYUnBiMjVjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNCOUtUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JseHVYRzVtZFc1amRHbHZiaUJuWlhSRGIyMXdiMjVsYm5ST1lXMWxJQ2h2Y0hSektTQjdYRzRnSUhKbGRIVnliaUJ2Y0hSeklDWW1JQ2h2Y0hSekxrTjBiM0l1YjNCMGFXOXVjeTV1WVcxbElIeDhJRzl3ZEhNdWRHRm5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnRZWFJqYUdWeklDaHdZWFIwWlhKdUxDQnVZVzFsS1NCN1hHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSEJoZEhSbGNtNHBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQmhkSFJsY200dWFXNWtaWGhQWmlodVlXMWxLU0ErSUMweFhHNGdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JSEJoZEhSbGNtNGdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnY21WMGRYSnVJSEJoZEhSbGNtNHVjM0JzYVhRb0p5d25LUzVwYm1SbGVFOW1LRzVoYldVcElENGdMVEZjYmlBZ2ZTQmxiSE5sSUdsbUlDaHBjMUpsWjBWNGNDaHdZWFIwWlhKdUtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCd1lYUjBaWEp1TG5SbGMzUW9ibUZ0WlNsY2JpQWdmVnh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTDF4dUlDQnlaWFIxY200Z1ptRnNjMlZjYm4xY2JseHVablZ1WTNScGIyNGdjSEoxYm1WRFlXTm9aU0FvYTJWbGNFRnNhWFpsU1c1emRHRnVZMlVzSUdacGJIUmxjaWtnZTF4dUlDQjJZWElnWTJGamFHVWdQU0JyWldWd1FXeHBkbVZKYm5OMFlXNWpaUzVqWVdOb1pUdGNiaUFnZG1GeUlHdGxlWE1nUFNCclpXVndRV3hwZG1WSmJuTjBZVzVqWlM1clpYbHpPMXh1SUNCMllYSWdYM1p1YjJSbElEMGdhMlZsY0VGc2FYWmxTVzV6ZEdGdVkyVXVYM1p1YjJSbE8xeHVJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdZMkZqYUdVcElIdGNiaUFnSUNCMllYSWdZMkZqYUdWa1RtOWtaU0E5SUdOaFkyaGxXMnRsZVYwN1hHNGdJQ0FnYVdZZ0tHTmhZMmhsWkU1dlpHVXBJSHRjYmlBZ0lDQWdJSFpoY2lCdVlXMWxJRDBnWjJWMFEyOXRjRzl1Wlc1MFRtRnRaU2hqWVdOb1pXUk9iMlJsTG1OdmJYQnZibVZ1ZEU5d2RHbHZibk1wTzF4dUlDQWdJQ0FnYVdZZ0tHNWhiV1VnSmlZZ0lXWnBiSFJsY2lodVlXMWxLU2tnZTF4dUlDQWdJQ0FnSUNCd2NuVnVaVU5oWTJobFJXNTBjbmtvWTJGamFHVXNJR3RsZVN3Z2EyVjVjeXdnWDNadWIyUmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hKMWJtVkRZV05vWlVWdWRISjVJQ2hjYmlBZ1kyRmphR1VzWEc0Z0lHdGxlU3hjYmlBZ2EyVjVjeXhjYmlBZ1kzVnljbVZ1ZEZ4dUtTQjdYRzRnSUhaaGNpQmpZV05vWldRa0pERWdQU0JqWVdOb1pWdHJaWGxkTzF4dUlDQnBaaUFvWTJGamFHVmtKQ1F4SUNZbUlDZ2hZM1Z5Y21WdWRDQjhmQ0JqWVdOb1pXUWtKREV1ZEdGbklDRTlQU0JqZFhKeVpXNTBMblJoWnlrcElIdGNiaUFnSUNCallXTm9aV1FrSkRFdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVdUpHUmxjM1J5YjNrb0tUdGNiaUFnZlZ4dUlDQmpZV05vWlZ0clpYbGRJRDBnYm5Wc2JEdGNiaUFnY21WdGIzWmxLR3RsZVhNc0lHdGxlU2s3WEc1OVhHNWNiblpoY2lCd1lYUjBaWEp1Vkhsd1pYTWdQU0JiVTNSeWFXNW5MQ0JTWldkRmVIQXNJRUZ5Y21GNVhUdGNibHh1ZG1GeUlFdGxaWEJCYkdsMlpTQTlJSHRjYmlBZ2JtRnRaVG9nSjJ0bFpYQXRZV3hwZG1VbkxGeHVJQ0JoWW5OMGNtRmpkRG9nZEhKMVpTeGNibHh1SUNCd2NtOXdjem9nZTF4dUlDQWdJR2x1WTJ4MVpHVTZJSEJoZEhSbGNtNVVlWEJsY3l4Y2JpQWdJQ0JsZUdOc2RXUmxPaUJ3WVhSMFpYSnVWSGx3WlhNc1hHNGdJQ0FnYldGNE9pQmJVM1J5YVc1bkxDQk9kVzFpWlhKZFhHNGdJSDBzWEc1Y2JpQWdZM0psWVhSbFpEb2dablZ1WTNScGIyNGdZM0psWVhSbFpDQW9LU0I3WEc0Z0lDQWdkR2hwY3k1allXTm9aU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN1hHNGdJQ0FnZEdocGN5NXJaWGx6SUQwZ1cxMDdYRzRnSUgwc1hHNWNiaUFnWkdWemRISnZlV1ZrT2lCbWRXNWpkR2x2YmlCa1pYTjBjbTk1WldRZ0tDa2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCMGFHbHpMbU5oWTJobEtTQjdYRzRnSUNBZ0lDQndjblZ1WlVOaFkyaGxSVzUwY25rb2RHaHBjeTVqWVdOb1pTd2dhMlY1TENCMGFHbHpMbXRsZVhNcE8xeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQnRiM1Z1ZEdWa09pQm1kVzVqZEdsdmJpQnRiM1Z1ZEdWa0lDZ3BJSHRjYmlBZ0lDQjJZWElnZEdocGN5UXhJRDBnZEdocGN6dGNibHh1SUNBZ0lIUm9hWE11SkhkaGRHTm9LQ2RwYm1Oc2RXUmxKeXdnWm5WdVkzUnBiMjRnS0haaGJDa2dlMXh1SUNBZ0lDQWdjSEoxYm1WRFlXTm9aU2gwYUdsekpERXNJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdJSEpsZEhWeWJpQnRZWFJqYUdWektIWmhiQ3dnYm1GdFpTazdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQWdJSFJvYVhNdUpIZGhkR05vS0NkbGVHTnNkV1JsSnl3Z1puVnVZM1JwYjI0Z0tIWmhiQ2tnZTF4dUlDQWdJQ0FnY0hKMWJtVkRZV05vWlNoMGFHbHpKREVzSUdaMWJtTjBhVzl1SUNodVlXMWxLU0I3SUhKbGRIVnliaUFoYldGMFkyaGxjeWgyWVd3c0lHNWhiV1VwT3lCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlN4Y2JseHVJQ0J5Wlc1a1pYSTZJR1oxYm1OMGFXOXVJSEpsYm1SbGNpQW9LU0I3WEc0Z0lDQWdkbUZ5SUhOc2IzUWdQU0IwYUdsekxpUnpiRzkwY3k1a1pXWmhkV3gwTzF4dUlDQWdJSFpoY2lCMmJtOWtaU0E5SUdkbGRFWnBjbk4wUTI5dGNHOXVaVzUwUTJocGJHUW9jMnh2ZENrN1hHNGdJQ0FnZG1GeUlHTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NZ1BTQjJibTlrWlNBbUppQjJibTlrWlM1amIyMXdiMjVsYm5SUGNIUnBiMjV6TzF4dUlDQWdJR2xtSUNoamIyMXdiMjVsYm5SUGNIUnBiMjV6S1NCN1hHNGdJQ0FnSUNBdkx5QmphR1ZqYXlCd1lYUjBaWEp1WEc0Z0lDQWdJQ0IyWVhJZ2JtRnRaU0E5SUdkbGRFTnZiWEJ2Ym1WdWRFNWhiV1VvWTI5dGNHOXVaVzUwVDNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0IyWVhJZ2NtVm1JRDBnZEdocGN6dGNiaUFnSUNBZ0lIWmhjaUJwYm1Oc2RXUmxJRDBnY21WbUxtbHVZMngxWkdVN1hHNGdJQ0FnSUNCMllYSWdaWGhqYkhWa1pTQTlJSEpsWmk1bGVHTnNkV1JsTzF4dUlDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQXZMeUJ1YjNRZ2FXNWpiSFZrWldSY2JpQWdJQ0FnSUNBZ0tHbHVZMngxWkdVZ0ppWWdLQ0Z1WVcxbElIeDhJQ0Z0WVhSamFHVnpLR2x1WTJ4MVpHVXNJRzVoYldVcEtTa2dmSHhjYmlBZ0lDQWdJQ0FnTHk4Z1pYaGpiSFZrWldSY2JpQWdJQ0FnSUNBZ0tHVjRZMngxWkdVZ0ppWWdibUZ0WlNBbUppQnRZWFJqYUdWektHVjRZMngxWkdVc0lHNWhiV1VwS1Z4dUlDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMmJtOWtaVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ2NtVm1KREVnUFNCMGFHbHpPMXh1SUNBZ0lDQWdkbUZ5SUdOaFkyaGxJRDBnY21WbUpERXVZMkZqYUdVN1hHNGdJQ0FnSUNCMllYSWdhMlY1Y3lBOUlISmxaaVF4TG10bGVYTTdYRzRnSUNBZ0lDQjJZWElnYTJWNUlEMGdkbTV2WkdVdWEyVjVJRDA5SUc1MWJHeGNiaUFnSUNBZ0lDQWdMeThnYzJGdFpTQmpiMjV6ZEhKMVkzUnZjaUJ0WVhrZ1oyVjBJSEpsWjJsemRHVnlaV1FnWVhNZ1pHbG1abVZ5Wlc1MElHeHZZMkZzSUdOdmJYQnZibVZ1ZEhOY2JpQWdJQ0FnSUNBZ0x5OGdjMjhnWTJsa0lHRnNiMjVsSUdseklHNXZkQ0JsYm05MVoyZ2dLQ016TWpZNUtWeHVJQ0FnSUNBZ0lDQS9JR052YlhCdmJtVnVkRTl3ZEdsdmJuTXVRM1J2Y2k1amFXUWdLeUFvWTI5dGNHOXVaVzUwVDNCMGFXOXVjeTUwWVdjZ1B5QW9YQ0k2T2x3aUlDc2dLR052YlhCdmJtVnVkRTl3ZEdsdmJuTXVkR0ZuS1NrZ09pQW5KeWxjYmlBZ0lDQWdJQ0FnT2lCMmJtOWtaUzVyWlhrN1hHNGdJQ0FnSUNCcFppQW9ZMkZqYUdWYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNCMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaU0E5SUdOaFkyaGxXMnRsZVYwdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVN1hHNGdJQ0FnSUNBZ0lDOHZJRzFoYTJVZ1kzVnljbVZ1ZENCclpYa2dabkpsYzJobGMzUmNiaUFnSUNBZ0lDQWdjbVZ0YjNabEtHdGxlWE1zSUd0bGVTazdYRzRnSUNBZ0lDQWdJR3RsZVhNdWNIVnphQ2hyWlhrcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZiYTJWNVhTQTlJSFp1YjJSbE8xeHVJQ0FnSUNBZ0lDQnJaWGx6TG5CMWMyZ29hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0x5OGdjSEoxYm1VZ2IyeGtaWE4wSUdWdWRISjVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTFoZUNBbUppQnJaWGx6TG14bGJtZDBhQ0ErSUhCaGNuTmxTVzUwS0hSb2FYTXViV0Y0S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEJ5ZFc1bFEyRmphR1ZGYm5SeWVTaGpZV05vWlN3Z2EyVjVjMXN3WFN3Z2EyVjVjeXdnZEdocGN5NWZkbTV2WkdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFp1YjJSbExtUmhkR0V1YTJWbGNFRnNhWFpsSUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhadWIyUmxJSHg4SUNoemJHOTBJQ1ltSUhOc2IzUmJNRjBwWEc0Z0lIMWNibjA3WEc1Y2JuWmhjaUJpZFdsc2RFbHVRMjl0Y0c5dVpXNTBjeUE5SUh0Y2JpQWdTMlZsY0VGc2FYWmxPaUJMWldWd1FXeHBkbVZjYm4wN1hHNWNiaThxSUNBcUwxeHVYRzVtZFc1amRHbHZiaUJwYm1sMFIyeHZZbUZzUVZCSklDaFdkV1VwSUh0Y2JpQWdMeThnWTI5dVptbG5YRzRnSUhaaGNpQmpiMjVtYVdkRVpXWWdQU0I3ZlR0Y2JpQWdZMjl1Wm1sblJHVm1MbWRsZENBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJR052Ym1acFp6c2dmVHRjYmlBZ2UxeHVJQ0FnSUdOdmJtWnBaMFJsWmk1elpYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCM1lYSnVLRnh1SUNBZ0lDQWdJQ0FuUkc4Z2JtOTBJSEpsY0d4aFkyVWdkR2hsSUZaMVpTNWpiMjVtYVdjZ2IySnFaV04wTENCelpYUWdhVzVrYVhacFpIVmhiQ0JtYVdWc1pITWdhVzV6ZEdWaFpDNG5YRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMDdYRzRnSUgxY2JpQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0ZaMVpTd2dKMk52Ym1acFp5Y3NJR052Ym1acFowUmxaaWs3WEc1Y2JpQWdMeThnWlhod2IzTmxaQ0IxZEdsc0lHMWxkR2h2WkhNdVhHNGdJQzh2SUU1UFZFVTZJSFJvWlhObElHRnlaU0J1YjNRZ1kyOXVjMmxrWlhKbFpDQndZWEowSUc5bUlIUm9aU0J3ZFdKc2FXTWdRVkJKSUMwZ1lYWnZhV1FnY21Wc2VXbHVaeUJ2Ymx4dUlDQXZMeUIwYUdWdElIVnViR1Z6Y3lCNWIzVWdZWEpsSUdGM1lYSmxJRzltSUhSb1pTQnlhWE5yTGx4dUlDQldkV1V1ZFhScGJDQTlJSHRjYmlBZ0lDQjNZWEp1T2lCM1lYSnVMRnh1SUNBZ0lHVjRkR1Z1WkRvZ1pYaDBaVzVrTEZ4dUlDQWdJRzFsY21kbFQzQjBhVzl1Y3pvZ2JXVnlaMlZQY0hScGIyNXpMRnh1SUNBZ0lHUmxabWx1WlZKbFlXTjBhWFpsT2lCa1pXWnBibVZTWldGamRHbDJaU1FrTVZ4dUlDQjlPMXh1WEc0Z0lGWjFaUzV6WlhRZ1BTQnpaWFE3WEc0Z0lGWjFaUzVrWld4bGRHVWdQU0JrWld3N1hHNGdJRloxWlM1dVpYaDBWR2xqYXlBOUlHNWxlSFJVYVdOck8xeHVYRzRnSUM4dklESXVOaUJsZUhCc2FXTnBkQ0J2WW5ObGNuWmhZbXhsSUVGUVNWeHVJQ0JXZFdVdWIySnpaWEoyWVdKc1pTQTlJR1oxYm1OMGFXOXVJQ2h2WW1vcElIdGNiaUFnSUNCdlluTmxjblpsS0c5aWFpazdYRzRnSUNBZ2NtVjBkWEp1SUc5aWFseHVJQ0I5TzF4dVhHNGdJRloxWlM1dmNIUnBiMjV6SUQwZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tUdGNiaUFnUVZOVFJWUmZWRmxRUlZNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2RIbHdaU2tnZTF4dUlDQWdJRloxWlM1dmNIUnBiMjV6VzNSNWNHVWdLeUFuY3lkZElEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ2ZTazdYRzVjYmlBZ0x5OGdkR2hwY3lCcGN5QjFjMlZrSUhSdklHbGtaVzUwYVdaNUlIUm9aU0JjSW1KaGMyVmNJaUJqYjI1emRISjFZM1J2Y2lCMGJ5QmxlSFJsYm1RZ1lXeHNJSEJzWVdsdUxXOWlhbVZqZEZ4dUlDQXZMeUJqYjIxd2IyNWxiblJ6SUhkcGRHZ2dhVzRnVjJWbGVDZHpJRzExYkhScExXbHVjM1JoYm1ObElITmpaVzVoY21sdmN5NWNiaUFnVm5WbExtOXdkR2x2Ym5NdVgySmhjMlVnUFNCV2RXVTdYRzVjYmlBZ1pYaDBaVzVrS0ZaMVpTNXZjSFJwYjI1ekxtTnZiWEJ2Ym1WdWRITXNJR0oxYVd4MFNXNURiMjF3YjI1bGJuUnpLVHRjYmx4dUlDQnBibWwwVlhObEtGWjFaU2s3WEc0Z0lHbHVhWFJOYVhocGJpUXhLRloxWlNrN1hHNGdJR2x1YVhSRmVIUmxibVFvVm5WbEtUdGNiaUFnYVc1cGRFRnpjMlYwVW1WbmFYTjBaWEp6S0ZaMVpTazdYRzU5WEc1Y2JtbHVhWFJIYkc5aVlXeEJVRWtvVm5WbEtUdGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtGWjFaUzV3Y205MGIzUjVjR1VzSUNja2FYTlRaWEoyWlhJbkxDQjdYRzRnSUdkbGREb2dhWE5UWlhKMlpYSlNaVzVrWlhKcGJtZGNibjBwTzF4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVm5WbExuQnliM1J2ZEhsd1pTd2dKeVJ6YzNKRGIyNTBaWGgwSnl3Z2UxeHVJQ0JuWlhRNklHWjFibU4wYVc5dUlHZGxkQ0FvS1NCN1hHNGdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTRrZG01dlpHVWdKaVlnZEdocGN5NGtkbTV2WkdVdWMzTnlRMjl1ZEdWNGRGeHVJQ0I5WEc1OUtUdGNibHh1THk4Z1pYaHdiM05sSUVaMWJtTjBhVzl1WVd4U1pXNWtaWEpEYjI1MFpYaDBJR1p2Y2lCemMzSWdjblZ1ZEdsdFpTQm9aV3h3WlhJZ2FXNXpkR0ZzYkdGMGFXOXVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1ZuVmxMQ0FuUm5WdVkzUnBiMjVoYkZKbGJtUmxja052Ym5SbGVIUW5MQ0I3WEc0Z0lIWmhiSFZsT2lCR2RXNWpkR2x2Ym1Gc1VtVnVaR1Z5UTI5dWRHVjRkRnh1ZlNrN1hHNWNibFoxWlM1MlpYSnphVzl1SUQwZ0p6SXVOaTR4TUNjN1hHNWNiaThxSUNBcUwxeHVYRzR2THlCMGFHVnpaU0JoY21VZ2NtVnpaWEoyWldRZ1ptOXlJSGRsWWlCaVpXTmhkWE5sSUhSb1pYa2dZWEpsSUdScGNtVmpkR3g1SUdOdmJYQnBiR1ZrSUdGM1lYbGNiaTh2SUdSMWNtbHVaeUIwWlcxd2JHRjBaU0JqYjIxd2FXeGhkR2x2Ymx4dWRtRnlJR2x6VW1WelpYSjJaV1JCZEhSeUlEMGdiV0ZyWlUxaGNDZ25jM1I1YkdVc1kyeGhjM01uS1R0Y2JseHVMeThnWVhSMGNtbGlkWFJsY3lCMGFHRjBJSE5vYjNWc1pDQmlaU0IxYzJsdVp5QndjbTl3Y3lCbWIzSWdZbWx1WkdsdVoxeHVkbUZ5SUdGalkyVndkRlpoYkhWbElEMGdiV0ZyWlUxaGNDZ25hVzV3ZFhRc2RHVjRkR0Z5WldFc2IzQjBhVzl1TEhObGJHVmpkQ3h3Y205bmNtVnpjeWNwTzF4dWRtRnlJRzExYzNSVmMyVlFjbTl3SUQwZ1puVnVZM1JwYjI0Z0tIUmhaeXdnZEhsd1pTd2dZWFIwY2lrZ2UxeHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDaGhkSFJ5SUQwOVBTQW5kbUZzZFdVbklDWW1JR0ZqWTJWd2RGWmhiSFZsS0hSaFp5a3BJQ1ltSUhSNWNHVWdJVDA5SUNkaWRYUjBiMjRuSUh4OFhHNGdJQ0FnS0dGMGRISWdQVDA5SUNkelpXeGxZM1JsWkNjZ0ppWWdkR0ZuSUQwOVBTQW5iM0IwYVc5dUp5a2dmSHhjYmlBZ0lDQW9ZWFIwY2lBOVBUMGdKMk5vWldOclpXUW5JQ1ltSUhSaFp5QTlQVDBnSjJsdWNIVjBKeWtnZkh4Y2JpQWdJQ0FvWVhSMGNpQTlQVDBnSjIxMWRHVmtKeUFtSmlCMFlXY2dQVDA5SUNkMmFXUmxieWNwWEc0Z0lDbGNibjA3WEc1Y2JuWmhjaUJwYzBWdWRXMWxjbUYwWldSQmRIUnlJRDBnYldGclpVMWhjQ2duWTI5dWRHVnVkR1ZrYVhSaFlteGxMR1J5WVdkbllXSnNaU3h6Y0dWc2JHTm9aV05ySnlrN1hHNWNiblpoY2lCcGMxWmhiR2xrUTI5dWRHVnVkRVZrYVhSaFlteGxWbUZzZFdVZ1BTQnRZV3RsVFdGd0tDZGxkbVZ1ZEhNc1kyRnlaWFFzZEhsd2FXNW5MSEJzWVdsdWRHVjRkQzF2Ym14NUp5azdYRzVjYm5aaGNpQmpiMjUyWlhKMFJXNTFiV1Z5WVhSbFpGWmhiSFZsSUQwZ1puVnVZM1JwYjI0Z0tHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUdselJtRnNjM2xCZEhSeVZtRnNkV1VvZG1Gc2RXVXBJSHg4SUhaaGJIVmxJRDA5UFNBblptRnNjMlVuWEc0Z0lDQWdQeUFuWm1Gc2MyVW5YRzRnSUNBZ0x5OGdZV3hzYjNjZ1lYSmlhWFJ5WVhKNUlITjBjbWx1WnlCMllXeDFaU0JtYjNJZ1kyOXVkR1Z1ZEdWa2FYUmhZbXhsWEc0Z0lDQWdPaUJyWlhrZ1BUMDlJQ2RqYjI1MFpXNTBaV1JwZEdGaWJHVW5JQ1ltSUdselZtRnNhV1JEYjI1MFpXNTBSV1JwZEdGaWJHVldZV3gxWlNoMllXeDFaU2xjYmlBZ0lDQWdJRDhnZG1Gc2RXVmNiaUFnSUNBZ0lEb2dKM1J5ZFdVblhHNTlPMXh1WEc1MllYSWdhWE5DYjI5c1pXRnVRWFIwY2lBOUlHMWhhMlZOWVhBb1hHNGdJQ2RoYkd4dmQyWjFiR3h6WTNKbFpXNHNZWE41Ym1Nc1lYVjBiMlp2WTNWekxHRjFkRzl3YkdGNUxHTm9aV05yWldRc1kyOXRjR0ZqZEN4amIyNTBjbTlzY3l4a1pXTnNZWEpsTENjZ0sxeHVJQ0FuWkdWbVlYVnNkQ3hrWldaaGRXeDBZMmhsWTJ0bFpDeGtaV1poZFd4MGJYVjBaV1FzWkdWbVlYVnNkSE5sYkdWamRHVmtMR1JsWm1WeUxHUnBjMkZpYkdWa0xDY2dLMXh1SUNBblpXNWhZbXhsWkN4bWIzSnRibTkyWVd4cFpHRjBaU3hvYVdSa1pXNHNhVzVrWlhSbGNtMXBibUYwWlN4cGJtVnlkQ3hwYzIxaGNDeHBkR1Z0YzJOdmNHVXNiRzl2Y0N4dGRXeDBhWEJzWlN3bklDdGNiaUFnSjIxMWRHVmtMRzV2YUhKbFppeHViM0psYzJsNlpTeHViM05vWVdSbExHNXZkbUZzYVdSaGRHVXNibTkzY21Gd0xHOXdaVzRzY0dGMWMyVnZibVY0YVhRc2NtVmhaRzl1Ykhrc0p5QXJYRzRnSUNkeVpYRjFhWEpsWkN4eVpYWmxjbk5sWkN4elkyOXdaV1FzYzJWaGJXeGxjM01zYzJWc1pXTjBaV1FzYzI5eWRHRmliR1VzZEhKaGJuTnNZWFJsTENjZ0sxeHVJQ0FuZEhKMVpYTndaV1ZrTEhSNWNHVnRkWE4wYldGMFkyZ3NkbWx6YVdKc1pTZGNiaWs3WEc1Y2JuWmhjaUI0YkdsdWEwNVRJRDBnSjJoMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZlR3hwYm1zbk8xeHVYRzUyWVhJZ2FYTlliR2x1YXlBOUlHWjFibU4wYVc5dUlDaHVZVzFsS1NCN1hHNGdJSEpsZEhWeWJpQnVZVzFsTG1Ob1lYSkJkQ2cxS1NBOVBUMGdKem9uSUNZbUlHNWhiV1V1YzJ4cFkyVW9NQ3dnTlNrZ1BUMDlJQ2Q0YkdsdWF5ZGNibjA3WEc1Y2JuWmhjaUJuWlhSWWJHbHVhMUJ5YjNBZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0J5WlhSMWNtNGdhWE5ZYkdsdWF5aHVZVzFsS1NBL0lHNWhiV1V1YzJ4cFkyVW9OaXdnYm1GdFpTNXNaVzVuZEdncElEb2dKeWRjYm4wN1hHNWNiblpoY2lCcGMwWmhiSE41UVhSMGNsWmhiSFZsSUQwZ1puVnVZM1JwYjI0Z0tIWmhiQ2tnZTF4dUlDQnlaWFIxY200Z2RtRnNJRDA5SUc1MWJHd2dmSHdnZG1Gc0lEMDlQU0JtWVd4elpWeHVmVHRjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlHZGxia05zWVhOelJtOXlWbTV2WkdVZ0tIWnViMlJsS1NCN1hHNGdJSFpoY2lCa1lYUmhJRDBnZG01dlpHVXVaR0YwWVR0Y2JpQWdkbUZ5SUhCaGNtVnVkRTV2WkdVZ1BTQjJibTlrWlR0Y2JpQWdkbUZ5SUdOb2FXeGtUbTlrWlNBOUlIWnViMlJsTzF4dUlDQjNhR2xzWlNBb2FYTkVaV1lvWTJocGJHUk9iMlJsTG1OdmJYQnZibVZ1ZEVsdWMzUmhibU5sS1NrZ2UxeHVJQ0FnSUdOb2FXeGtUbTlrWlNBOUlHTm9hV3hrVG05a1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTNWZkbTV2WkdVN1hHNGdJQ0FnYVdZZ0tHTm9hV3hrVG05a1pTQW1KaUJqYUdsc1pFNXZaR1V1WkdGMFlTa2dlMXh1SUNBZ0lDQWdaR0YwWVNBOUlHMWxjbWRsUTJ4aGMzTkVZWFJoS0dOb2FXeGtUbTlrWlM1a1lYUmhMQ0JrWVhSaEtUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2QyaHBiR1VnS0dselJHVm1LSEJoY21WdWRFNXZaR1VnUFNCd1lYSmxiblJPYjJSbExuQmhjbVZ1ZENrcElIdGNiaUFnSUNCcFppQW9jR0Z5Wlc1MFRtOWtaU0FtSmlCd1lYSmxiblJPYjJSbExtUmhkR0VwSUh0Y2JpQWdJQ0FnSUdSaGRHRWdQU0J0WlhKblpVTnNZWE56UkdGMFlTaGtZWFJoTENCd1lYSmxiblJPYjJSbExtUmhkR0VwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ1WkdWeVEyeGhjM01vWkdGMFlTNXpkR0YwYVdORGJHRnpjeXdnWkdGMFlTNWpiR0Z6Y3lsY2JuMWNibHh1Wm5WdVkzUnBiMjRnYldWeVoyVkRiR0Z6YzBSaGRHRWdLR05vYVd4a0xDQndZWEpsYm5RcElIdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQnpkR0YwYVdORGJHRnpjem9nWTI5dVkyRjBLR05vYVd4a0xuTjBZWFJwWTBOc1lYTnpMQ0J3WVhKbGJuUXVjM1JoZEdsalEyeGhjM01wTEZ4dUlDQWdJR05zWVhOek9pQnBjMFJsWmloamFHbHNaQzVqYkdGemN5bGNiaUFnSUNBZ0lEOGdXMk5vYVd4a0xtTnNZWE56TENCd1lYSmxiblF1WTJ4aGMzTmRYRzRnSUNBZ0lDQTZJSEJoY21WdWRDNWpiR0Z6YzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxibVJsY2tOc1lYTnpJQ2hjYmlBZ2MzUmhkR2xqUTJ4aGMzTXNYRzRnSUdSNWJtRnRhV05EYkdGemMxeHVLU0I3WEc0Z0lHbG1JQ2hwYzBSbFppaHpkR0YwYVdORGJHRnpjeWtnZkh3Z2FYTkVaV1lvWkhsdVlXMXBZME5zWVhOektTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamIyNWpZWFFvYzNSaGRHbGpRMnhoYzNNc0lITjBjbWx1WjJsbWVVTnNZWE56S0dSNWJtRnRhV05EYkdGemN5a3BYRzRnSUgxY2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnY21WMGRYSnVJQ2NuWEc1OVhHNWNibVoxYm1OMGFXOXVJR052Ym1OaGRDQW9ZU3dnWWlrZ2UxeHVJQ0J5WlhSMWNtNGdZU0EvSUdJZ1B5QW9ZU0FySUNjZ0p5QXJJR0lwSURvZ1lTQTZJQ2hpSUh4OElDY25LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpkSEpwYm1kcFpubERiR0Z6Y3lBb2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29kbUZzZFdVcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOMGNtbHVaMmxtZVVGeWNtRjVLSFpoYkhWbEtWeHVJQ0I5WEc0Z0lHbG1JQ2hwYzA5aWFtVmpkQ2gyWVd4MVpTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2MzUnlhVzVuYVdaNVQySnFaV04wS0haaGJIVmxLVnh1SUNCOVhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbFhHNGdJSDFjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JpQWdjbVYwZFhKdUlDY25YRzU5WEc1Y2JtWjFibU4wYVc5dUlITjBjbWx1WjJsbWVVRnljbUY1SUNoMllXeDFaU2tnZTF4dUlDQjJZWElnY21WeklEMGdKeWM3WEc0Z0lIWmhjaUJ6ZEhKcGJtZHBabWxsWkR0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0IyWVd4MVpTNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvYVhORVpXWW9jM1J5YVc1bmFXWnBaV1FnUFNCemRISnBibWRwWm5sRGJHRnpjeWgyWVd4MVpWdHBYU2twSUNZbUlITjBjbWx1WjJsbWFXVmtJQ0U5UFNBbkp5a2dlMXh1SUNBZ0lDQWdhV1lnS0hKbGN5a2dleUJ5WlhNZ0t6MGdKeUFuT3lCOVhHNGdJQ0FnSUNCeVpYTWdLejBnYzNSeWFXNW5hV1pwWldRN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOY2JuMWNibHh1Wm5WdVkzUnBiMjRnYzNSeWFXNW5hV1o1VDJKcVpXTjBJQ2gyWVd4MVpTa2dlMXh1SUNCMllYSWdjbVZ6SUQwZ0p5YzdYRzRnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUIyWVd4MVpTa2dlMXh1SUNBZ0lHbG1JQ2gyWVd4MVpWdHJaWGxkS1NCN1hHNGdJQ0FnSUNCcFppQW9jbVZ6S1NCN0lISmxjeUFyUFNBbklDYzdJSDFjYmlBZ0lDQWdJSEpsY3lBclBTQnJaWGs3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE5jYm4xY2JseHVMeW9nSUNvdlhHNWNiblpoY2lCdVlXMWxjM0JoWTJWTllYQWdQU0I3WEc0Z0lITjJaem9nSjJoMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSnl4Y2JpQWdiV0YwYURvZ0oyaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6RTVPVGd2VFdGMGFDOU5ZWFJvVFV3blhHNTlPMXh1WEc1MllYSWdhWE5JVkUxTVZHRm5JRDBnYldGclpVMWhjQ2hjYmlBZ0oyaDBiV3dzWW05a2VTeGlZWE5sTEdobFlXUXNiR2x1YXl4dFpYUmhMSE4wZVd4bExIUnBkR3hsTENjZ0sxeHVJQ0FuWVdSa2NtVnpjeXhoY25ScFkyeGxMR0Z6YVdSbExHWnZiM1JsY2l4b1pXRmtaWElzYURFc2FESXNhRE1zYURRc2FEVXNhRFlzYUdkeWIzVndMRzVoZGl4elpXTjBhVzl1TENjZ0sxeHVJQ0FuWkdsMkxHUmtMR1JzTEdSMExHWnBaMk5oY0hScGIyNHNabWxuZFhKbExIQnBZM1IxY21Vc2FISXNhVzFuTEd4cExHMWhhVzRzYjJ3c2NDeHdjbVVzZFd3c0p5QXJYRzRnSUNkaExHSXNZV0ppY2l4aVpHa3NZbVJ2TEdKeUxHTnBkR1VzWTI5a1pTeGtZWFJoTEdSbWJpeGxiU3hwTEd0aVpDeHRZWEpyTEhFc2NuQXNjblFzY25SakxISjFZbmtzSnlBclhHNGdJQ2R6TEhOaGJYQXNjMjFoYkd3c2MzQmhiaXh6ZEhKdmJtY3NjM1ZpTEhOMWNDeDBhVzFsTEhVc2RtRnlMSGRpY2l4aGNtVmhMR0YxWkdsdkxHMWhjQ3gwY21GamF5eDJhV1JsYnl3bklDdGNiaUFnSjJWdFltVmtMRzlpYW1WamRDeHdZWEpoYlN4emIzVnlZMlVzWTJGdWRtRnpMSE5qY21sd2RDeHViM05qY21sd2RDeGtaV3dzYVc1ekxDY2dLMXh1SUNBblkyRndkR2x2Yml4amIyd3NZMjlzWjNKdmRYQXNkR0ZpYkdVc2RHaGxZV1FzZEdKdlpIa3NkR1FzZEdnc2RISXNKeUFyWEc0Z0lDZGlkWFIwYjI0c1pHRjBZV3hwYzNRc1ptbGxiR1J6WlhRc1ptOXliU3hwYm5CMWRDeHNZV0psYkN4c1pXZGxibVFzYldWMFpYSXNiM0IwWjNKdmRYQXNiM0IwYVc5dUxDY2dLMXh1SUNBbmIzVjBjSFYwTEhCeWIyZHlaWE56TEhObGJHVmpkQ3gwWlhoMFlYSmxZU3duSUN0Y2JpQWdKMlJsZEdGcGJITXNaR2xoYkc5bkxHMWxiblVzYldWdWRXbDBaVzBzYzNWdGJXRnllU3duSUN0Y2JpQWdKMk52Ym5SbGJuUXNaV3hsYldWdWRDeHphR0ZrYjNjc2RHVnRjR3hoZEdVc1lteHZZMnR4ZFc5MFpTeHBabkpoYldVc2RHWnZiM1FuWEc0cE8xeHVYRzR2THlCMGFHbHpJRzFoY0NCcGN5QnBiblJsYm5ScGIyNWhiR3g1SUhObGJHVmpkR2wyWlN3Z2IyNXNlU0JqYjNabGNtbHVaeUJUVmtjZ1pXeGxiV1Z1ZEhNZ2RHaGhkQ0J0WVhsY2JpOHZJR052Ym5SaGFXNGdZMmhwYkdRZ1pXeGxiV1Z1ZEhNdVhHNTJZWElnYVhOVFZrY2dQU0J0WVd0bFRXRndLRnh1SUNBbmMzWm5MR0Z1YVcxaGRHVXNZMmx5WTJ4bExHTnNhWEJ3WVhSb0xHTjFjbk52Y2l4a1pXWnpMR1JsYzJNc1pXeHNhWEJ6WlN4bWFXeDBaWElzWm05dWRDMW1ZV05sTENjZ0sxeHVJQ0FuWm05eVpXbG5iazlpYW1WamRDeG5MR2RzZVhCb0xHbHRZV2RsTEd4cGJtVXNiV0Z5YTJWeUxHMWhjMnNzYldsemMybHVaeTFuYkhsd2FDeHdZWFJvTEhCaGRIUmxjbTRzSnlBclhHNGdJQ2R3YjJ4NVoyOXVMSEJ2Ykhsc2FXNWxMSEpsWTNRc2MzZHBkR05vTEhONWJXSnZiQ3gwWlhoMExIUmxlSFJ3WVhSb0xIUnpjR0Z1TEhWelpTeDJhV1YzSnl4Y2JpQWdkSEoxWlZ4dUtUdGNibHh1ZG1GeUlHbHpVSEpsVkdGbklEMGdablZ1WTNScGIyNGdLSFJoWnlrZ2V5QnlaWFIxY200Z2RHRm5JRDA5UFNBbmNISmxKenNnZlR0Y2JseHVkbUZ5SUdselVtVnpaWEoyWldSVVlXY2dQU0JtZFc1amRHbHZiaUFvZEdGbktTQjdYRzRnSUhKbGRIVnliaUJwYzBoVVRVeFVZV2NvZEdGbktTQjhmQ0JwYzFOV1J5aDBZV2NwWEc1OU8xeHVYRzVtZFc1amRHbHZiaUJuWlhSVVlXZE9ZVzFsYzNCaFkyVWdLSFJoWnlrZ2UxeHVJQ0JwWmlBb2FYTlRWa2NvZEdGbktTa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbmMzWm5KMXh1SUNCOVhHNGdJQzh2SUdKaGMybGpJSE4xY0hCdmNuUWdabTl5SUUxaGRHaE5URnh1SUNBdkx5QnViM1JsSUdsMElHUnZaWE51SjNRZ2MzVndjRzl5ZENCdmRHaGxjaUJOWVhSb1RVd2daV3hsYldWdWRITWdZbVZwYm1jZ1kyOXRjRzl1Wlc1MElISnZiM1J6WEc0Z0lHbG1JQ2gwWVdjZ1BUMDlJQ2R0WVhSb0p5a2dlMXh1SUNBZ0lISmxkSFZ5YmlBbmJXRjBhQ2RjYmlBZ2ZWeHVmVnh1WEc1MllYSWdkVzVyYm05M2JrVnNaVzFsYm5SRFlXTm9aU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN1hHNW1kVzVqZEdsdmJpQnBjMVZ1YTI1dmQyNUZiR1Z0Wlc1MElDaDBZV2NwSUh0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJR2xtSUNnaGFXNUNjbTkzYzJWeUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVmNiaUFnZlZ4dUlDQnBaaUFvYVhOU1pYTmxjblpsWkZSaFp5aDBZV2NwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJSDFjYmlBZ2RHRm5JRDBnZEdGbkxuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQnBaaUFvZFc1cmJtOTNia1ZzWlcxbGJuUkRZV05vWlZ0MFlXZGRJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RXNXJibTkzYmtWc1pXMWxiblJEWVdOb1pWdDBZV2RkWEc0Z0lIMWNiaUFnZG1GeUlHVnNJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaDBZV2NwTzF4dUlDQnBaaUFvZEdGbkxtbHVaR1Y0VDJZb0p5MG5LU0ErSUMweEtTQjdYRzRnSUNBZ0x5OGdhSFIwY0RvdkwzTjBZV05yYjNabGNtWnNiM2N1WTI5dEwyRXZNamd5TVRBek5qUXZNVEEzTURJME5GeHVJQ0FnSUhKbGRIVnliaUFvZFc1cmJtOTNia1ZzWlcxbGJuUkRZV05vWlZ0MFlXZGRJRDBnS0Z4dUlDQWdJQ0FnWld3dVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUhkcGJtUnZkeTVJVkUxTVZXNXJibTkzYmtWc1pXMWxiblFnZkh4Y2JpQWdJQ0FnSUdWc0xtTnZibk4wY25WamRHOXlJRDA5UFNCM2FXNWtiM2N1U0ZSTlRFVnNaVzFsYm5SY2JpQWdJQ0FwS1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUFvZFc1cmJtOTNia1ZzWlcxbGJuUkRZV05vWlZ0MFlXZGRJRDBnTDBoVVRVeFZibXR1YjNkdVJXeGxiV1Z1ZEM4dWRHVnpkQ2hsYkM1MGIxTjBjbWx1WnlncEtTbGNiaUFnZlZ4dWZWeHVYRzUyWVhJZ2FYTlVaWGgwU1c1d2RYUlVlWEJsSUQwZ2JXRnJaVTFoY0NnbmRHVjRkQ3h1ZFcxaVpYSXNjR0Z6YzNkdmNtUXNjMlZoY21Ob0xHVnRZV2xzTEhSbGJDeDFjbXduS1R0Y2JseHVMeW9nSUNvdlhHNWNiaThxS2x4dUlDb2dVWFZsY25rZ1lXNGdaV3hsYldWdWRDQnpaV3hsWTNSdmNpQnBaaUJwZENkeklHNXZkQ0JoYmlCbGJHVnRaVzUwSUdGc2NtVmhaSGt1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSEYxWlhKNUlDaGxiQ2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR1ZzSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lIWmhjaUJ6Wld4bFkzUmxaQ0E5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9aV3dwTzF4dUlDQWdJR2xtSUNnaGMyVnNaV04wWldRcElIdGNiaUFnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUNkRFlXNXViM1FnWm1sdVpDQmxiR1Z0Wlc1ME9pQW5JQ3NnWld4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlITmxiR1ZqZEdWa1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWc1hHNGdJSDFjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJR055WldGMFpVVnNaVzFsYm5Ra01TQW9kR0ZuVG1GdFpTd2dkbTV2WkdVcElIdGNiaUFnZG1GeUlHVnNiU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9kR0ZuVG1GdFpTazdYRzRnSUdsbUlDaDBZV2RPWVcxbElDRTlQU0FuYzJWc1pXTjBKeWtnZTF4dUlDQWdJSEpsZEhWeWJpQmxiRzFjYmlBZ2ZWeHVJQ0F2THlCbVlXeHpaU0J2Y2lCdWRXeHNJSGRwYkd3Z2NtVnRiM1psSUhSb1pTQmhkSFJ5YVdKMWRHVWdZblYwSUhWdVpHVm1hVzVsWkNCM2FXeHNJRzV2ZEZ4dUlDQnBaaUFvZG01dlpHVXVaR0YwWVNBbUppQjJibTlrWlM1a1lYUmhMbUYwZEhKeklDWW1JSFp1YjJSbExtUmhkR0V1WVhSMGNuTXViWFZzZEdsd2JHVWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUdWc2JTNXpaWFJCZEhSeWFXSjFkR1VvSjIxMWJIUnBjR3hsSnl3Z0oyMTFiSFJwY0d4bEp5azdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHVnNiVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRmJHVnRaVzUwVGxNZ0tHNWhiV1Z6Y0dGalpTd2dkR0ZuVG1GdFpTa2dlMXh1SUNCeVpYUjFjbTRnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRFNVRLRzVoYldWemNHRmpaVTFoY0Z0dVlXMWxjM0JoWTJWZExDQjBZV2RPWVcxbEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZVWlhoMFRtOWtaU0FvZEdWNGRDa2dlMXh1SUNCeVpYUjFjbTRnWkc5amRXMWxiblF1WTNKbFlYUmxWR1Y0ZEU1dlpHVW9kR1Y0ZENsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMjl0YldWdWRDQW9kR1Y0ZENrZ2UxeHVJQ0J5WlhSMWNtNGdaRzlqZFcxbGJuUXVZM0psWVhSbFEyOXRiV1Z1ZENoMFpYaDBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBibk5sY25SQ1pXWnZjbVVnS0hCaGNtVnVkRTV2WkdVc0lHNWxkMDV2WkdVc0lISmxabVZ5Wlc1alpVNXZaR1VwSUh0Y2JpQWdjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb2JtVjNUbTlrWlN3Z2NtVm1aWEpsYm1ObFRtOWtaU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYlc5MlpVTm9hV3hrSUNodWIyUmxMQ0JqYUdsc1pDa2dlMXh1SUNCdWIyUmxMbkpsYlc5MlpVTm9hV3hrS0dOb2FXeGtLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZWEJ3Wlc1a1EyaHBiR1FnS0c1dlpHVXNJR05vYVd4a0tTQjdYRzRnSUc1dlpHVXVZWEJ3Wlc1a1EyaHBiR1FvWTJocGJHUXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndZWEpsYm5ST2IyUmxJQ2h1YjJSbEtTQjdYRzRnSUhKbGRIVnliaUJ1YjJSbExuQmhjbVZ1ZEU1dlpHVmNibjFjYmx4dVpuVnVZM1JwYjI0Z2JtVjRkRk5wWW14cGJtY2dLRzV2WkdVcElIdGNiaUFnY21WMGRYSnVJRzV2WkdVdWJtVjRkRk5wWW14cGJtZGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RHRm5UbUZ0WlNBb2JtOWtaU2tnZTF4dUlDQnlaWFIxY200Z2JtOWtaUzUwWVdkT1lXMWxYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmxkRlJsZUhSRGIyNTBaVzUwSUNodWIyUmxMQ0IwWlhoMEtTQjdYRzRnSUc1dlpHVXVkR1Y0ZEVOdmJuUmxiblFnUFNCMFpYaDBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnpaWFJUZEhsc1pWTmpiM0JsSUNodWIyUmxMQ0J6WTI5d1pVbGtLU0I3WEc0Z0lHNXZaR1V1YzJWMFFYUjBjbWxpZFhSbEtITmpiM0JsU1dRc0lDY25LVHRjYm4xY2JseHVkbUZ5SUc1dlpHVlBjSE1nUFNBdktpTmZYMUJWVWtWZlh5b3ZUMkpxWldOMExtWnlaV1Y2WlNoN1hHNGdJR055WldGMFpVVnNaVzFsYm5RNklHTnlaV0YwWlVWc1pXMWxiblFrTVN4Y2JpQWdZM0psWVhSbFJXeGxiV1Z1ZEU1VE9pQmpjbVZoZEdWRmJHVnRaVzUwVGxNc1hHNGdJR055WldGMFpWUmxlSFJPYjJSbE9pQmpjbVZoZEdWVVpYaDBUbTlrWlN4Y2JpQWdZM0psWVhSbFEyOXRiV1Z1ZERvZ1kzSmxZWFJsUTI5dGJXVnVkQ3hjYmlBZ2FXNXpaWEowUW1WbWIzSmxPaUJwYm5ObGNuUkNaV1p2Y21Vc1hHNGdJSEpsYlc5MlpVTm9hV3hrT2lCeVpXMXZkbVZEYUdsc1pDeGNiaUFnWVhCd1pXNWtRMmhwYkdRNklHRndjR1Z1WkVOb2FXeGtMRnh1SUNCd1lYSmxiblJPYjJSbE9pQndZWEpsYm5ST2IyUmxMRnh1SUNCdVpYaDBVMmxpYkdsdVp6b2dibVY0ZEZOcFlteHBibWNzWEc0Z0lIUmhaMDVoYldVNklIUmhaMDVoYldVc1hHNGdJSE5sZEZSbGVIUkRiMjUwWlc1ME9pQnpaWFJVWlhoMFEyOXVkR1Z1ZEN4Y2JpQWdjMlYwVTNSNWJHVlRZMjl3WlRvZ2MyVjBVM1I1YkdWVFkyOXdaVnh1ZlNrN1hHNWNiaThxSUNBcUwxeHVYRzUyWVhJZ2NtVm1JRDBnZTF4dUlDQmpjbVZoZEdVNklHWjFibU4wYVc5dUlHTnlaV0YwWlNBb1h5d2dkbTV2WkdVcElIdGNiaUFnSUNCeVpXZHBjM1JsY2xKbFppaDJibTlrWlNrN1hHNGdJSDBzWEc0Z0lIVndaR0YwWlRvZ1puVnVZM1JwYjI0Z2RYQmtZWFJsSUNodmJHUldibTlrWlN3Z2RtNXZaR1VwSUh0Y2JpQWdJQ0JwWmlBb2IyeGtWbTV2WkdVdVpHRjBZUzV5WldZZ0lUMDlJSFp1YjJSbExtUmhkR0V1Y21WbUtTQjdYRzRnSUNBZ0lDQnlaV2RwYzNSbGNsSmxaaWh2YkdSV2JtOWtaU3dnZEhKMVpTazdYRzRnSUNBZ0lDQnlaV2RwYzNSbGNsSmxaaWgyYm05a1pTazdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dUlDQmtaWE4wY205NU9pQm1kVzVqZEdsdmJpQmtaWE4wY205NUlDaDJibTlrWlNrZ2UxeHVJQ0FnSUhKbFoybHpkR1Z5VW1WbUtIWnViMlJsTENCMGNuVmxLVHRjYmlBZ2ZWeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z2NtVm5hWE4wWlhKU1pXWWdLSFp1YjJSbExDQnBjMUpsYlc5MllXd3BJSHRjYmlBZ2RtRnlJR3RsZVNBOUlIWnViMlJsTG1SaGRHRXVjbVZtTzF4dUlDQnBaaUFvSVdselJHVm1LR3RsZVNrcElIc2djbVYwZFhKdUlIMWNibHh1SUNCMllYSWdkbTBnUFNCMmJtOWtaUzVqYjI1MFpYaDBPMXh1SUNCMllYSWdjbVZtSUQwZ2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlVnZkh3Z2RtNXZaR1V1Wld4dE8xeHVJQ0IyWVhJZ2NtVm1jeUE5SUhadExpUnlaV1p6TzF4dUlDQnBaaUFvYVhOU1pXMXZkbUZzS1NCN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvY21WbWMxdHJaWGxkS1NrZ2UxeHVJQ0FnSUNBZ2NtVnRiM1psS0hKbFpuTmJhMlY1WFN3Z2NtVm1LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsWm5OYmEyVjVYU0E5UFQwZ2NtVm1LU0I3WEc0Z0lDQWdJQ0J5WldaelcydGxlVjBnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaDJibTlrWlM1a1lYUmhMbkpsWmtsdVJtOXlLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvY21WbWMxdHJaWGxkS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaV1p6VzJ0bGVWMGdQU0JiY21WbVhUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZtYzF0clpYbGRMbWx1WkdWNFQyWW9jbVZtS1NBOElEQXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z0pHWnNiM2N0WkdsellXSnNaUzFzYVc1bFhHNGdJQ0FnSUNBZ0lISmxabk5iYTJWNVhTNXdkWE5vS0hKbFppazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbFpuTmJhMlY1WFNBOUlISmxaanRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJXYVhKMGRXRnNJRVJQVFNCd1lYUmphR2x1WnlCaGJHZHZjbWwwYUcwZ1ltRnpaV1FnYjI0Z1UyNWhZbUprYjIwZ1lubGNiaUFxSUZOcGJXOXVJRVp5YVdseklGWnBibVIxYlNBb1FIQmhiR1JsY0dsdVpDbGNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdUR2xqWlc1elpWeHVJQ29nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNCaGJHUmxjR2x1WkM5emJtRmlZbVJ2YlM5aWJHOWlMMjFoYzNSbGNpOU1TVU5GVGxORlhHNGdLbHh1SUNvZ2JXOWthV1pwWldRZ1lua2dSWFpoYmlCWmIzVWdLRUI1ZVhnNU9UQTRNRE1wWEc0Z0tseHVJQ29nVG05MElIUjVjR1V0WTJobFkydHBibWNnZEdocGN5QmlaV05oZFhObElIUm9hWE1nWm1sc1pTQnBjeUJ3WlhKbUxXTnlhWFJwWTJGc0lHRnVaQ0IwYUdVZ1kyOXpkRnh1SUNvZ2IyWWdiV0ZyYVc1bklHWnNiM2NnZFc1a1pYSnpkR0Z1WkNCcGRDQnBjeUJ1YjNRZ2QyOXlkR2dnYVhRdVhHNGdLaTljYmx4dWRtRnlJR1Z0Y0hSNVRtOWtaU0E5SUc1bGR5QldUbTlrWlNnbkp5d2dlMzBzSUZ0ZEtUdGNibHh1ZG1GeUlHaHZiMnR6SUQwZ1d5ZGpjbVZoZEdVbkxDQW5ZV04wYVhaaGRHVW5MQ0FuZFhCa1lYUmxKeXdnSjNKbGJXOTJaU2NzSUNka1pYTjBjbTk1SjEwN1hHNWNibVoxYm1OMGFXOXVJSE5oYldWV2JtOWtaU0FvWVN3Z1lpa2dlMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJR0V1YTJWNUlEMDlQU0JpTG10bGVTQW1KaUFvWEc0Z0lDQWdJQ0FvWEc0Z0lDQWdJQ0FnSUdFdWRHRm5JRDA5UFNCaUxuUmhaeUFtSmx4dUlDQWdJQ0FnSUNCaExtbHpRMjl0YldWdWRDQTlQVDBnWWk1cGMwTnZiVzFsYm5RZ0ppWmNiaUFnSUNBZ0lDQWdhWE5FWldZb1lTNWtZWFJoS1NBOVBUMGdhWE5FWldZb1lpNWtZWFJoS1NBbUpseHVJQ0FnSUNBZ0lDQnpZVzFsU1c1d2RYUlVlWEJsS0dFc0lHSXBYRzRnSUNBZ0lDQXBJSHg4SUNoY2JpQWdJQ0FnSUNBZ2FYTlVjblZsS0dFdWFYTkJjM2x1WTFCc1lXTmxhRzlzWkdWeUtTQW1KbHh1SUNBZ0lDQWdJQ0JoTG1GemVXNWpSbUZqZEc5eWVTQTlQVDBnWWk1aGMzbHVZMFpoWTNSdmNua2dKaVpjYmlBZ0lDQWdJQ0FnYVhOVmJtUmxaaWhpTG1GemVXNWpSbUZqZEc5eWVTNWxjbkp2Y2lsY2JpQWdJQ0FnSUNsY2JpQWdJQ0FwWEc0Z0lDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyRnRaVWx1Y0hWMFZIbHdaU0FvWVN3Z1lpa2dlMXh1SUNCcFppQW9ZUzUwWVdjZ0lUMDlJQ2RwYm5CMWRDY3BJSHNnY21WMGRYSnVJSFJ5ZFdVZ2ZWeHVJQ0IyWVhJZ2FUdGNiaUFnZG1GeUlIUjVjR1ZCSUQwZ2FYTkVaV1lvYVNBOUlHRXVaR0YwWVNrZ0ppWWdhWE5FWldZb2FTQTlJR2t1WVhSMGNuTXBJQ1ltSUdrdWRIbHdaVHRjYmlBZ2RtRnlJSFI1Y0dWQ0lEMGdhWE5FWldZb2FTQTlJR0l1WkdGMFlTa2dKaVlnYVhORVpXWW9hU0E5SUdrdVlYUjBjbk1wSUNZbUlHa3VkSGx3WlR0Y2JpQWdjbVYwZFhKdUlIUjVjR1ZCSUQwOVBTQjBlWEJsUWlCOGZDQnBjMVJsZUhSSmJuQjFkRlI1Y0dVb2RIbHdaVUVwSUNZbUlHbHpWR1Y0ZEVsdWNIVjBWSGx3WlNoMGVYQmxRaWxjYm4xY2JseHVablZ1WTNScGIyNGdZM0psWVhSbFMyVjVWRzlQYkdSSlpIZ2dLR05vYVd4a2NtVnVMQ0JpWldkcGJrbGtlQ3dnWlc1a1NXUjRLU0I3WEc0Z0lIWmhjaUJwTENCclpYazdYRzRnSUhaaGNpQnRZWEFnUFNCN2ZUdGNiaUFnWm05eUlDaHBJRDBnWW1WbmFXNUpaSGc3SUdrZ1BEMGdaVzVrU1dSNE95QXJLMmtwSUh0Y2JpQWdJQ0JyWlhrZ1BTQmphR2xzWkhKbGJsdHBYUzVyWlhrN1hHNGdJQ0FnYVdZZ0tHbHpSR1ZtS0d0bGVTa3BJSHNnYldGd1cydGxlVjBnUFNCcE95QjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlHMWhjRnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWUVlYUmphRVoxYm1OMGFXOXVJQ2hpWVdOclpXNWtLU0I3WEc0Z0lIWmhjaUJwTENCcU8xeHVJQ0IyWVhJZ1kySnpJRDBnZTMwN1hHNWNiaUFnZG1GeUlHMXZaSFZzWlhNZ1BTQmlZV05yWlc1a0xtMXZaSFZzWlhNN1hHNGdJSFpoY2lCdWIyUmxUM0J6SUQwZ1ltRmphMlZ1WkM1dWIyUmxUM0J6TzF4dVhHNGdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQm9iMjlyY3k1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lHTmljMXRvYjI5cmMxdHBYVjBnUFNCYlhUdGNiaUFnSUNCbWIzSWdLR29nUFNBd095QnFJRHdnYlc5a2RXeGxjeTVzWlc1bmRHZzdJQ3NyYWlrZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHMXZaSFZzWlhOYmFsMWJhRzl2YTNOYmFWMWRLU2tnZTF4dUlDQWdJQ0FnSUNCalluTmJhRzl2YTNOYmFWMWRMbkIxYzJnb2JXOWtkV3hsYzF0cVhWdG9iMjlyYzF0cFhWMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR1Z0Y0hSNVRtOWtaVUYwSUNobGJHMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRlpPYjJSbEtHNXZaR1ZQY0hNdWRHRm5UbUZ0WlNobGJHMHBMblJ2VEc5M1pYSkRZWE5sS0Nrc0lIdDlMQ0JiWFN3Z2RXNWtaV1pwYm1Wa0xDQmxiRzBwWEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCamNtVmhkR1ZTYlVOaUlDaGphR2xzWkVWc2JTd2diR2x6ZEdWdVpYSnpLU0I3WEc0Z0lDQWdablZ1WTNScGIyNGdjbVZ0YjNabEpDUXhJQ2dwSUh0Y2JpQWdJQ0FnSUdsbUlDZ3RMWEpsYlc5MlpTUWtNUzVzYVhOMFpXNWxjbk1nUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnY21WdGIzWmxUbTlrWlNoamFHbHNaRVZzYlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsYlc5MlpTUWtNUzVzYVhOMFpXNWxjbk1nUFNCc2FYTjBaVzVsY25NN1hHNGdJQ0FnY21WMGRYSnVJSEpsYlc5MlpTUWtNVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnY21WdGIzWmxUbTlrWlNBb1pXd3BJSHRjYmlBZ0lDQjJZWElnY0dGeVpXNTBJRDBnYm05a1pVOXdjeTV3WVhKbGJuUk9iMlJsS0dWc0tUdGNiaUFnSUNBdkx5QmxiR1Z0Wlc1MElHMWhlU0JvWVhabElHRnNjbVZoWkhrZ1ltVmxiaUJ5WlcxdmRtVmtJR1IxWlNCMGJ5QjJMV2gwYld3Z0x5QjJMWFJsZUhSY2JpQWdJQ0JwWmlBb2FYTkVaV1lvY0dGeVpXNTBLU2tnZTF4dUlDQWdJQ0FnYm05a1pVOXdjeTV5WlcxdmRtVkRhR2xzWkNod1lYSmxiblFzSUdWc0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQnBjMVZ1YTI1dmQyNUZiR1Z0Wlc1MEpDUXhJQ2gyYm05a1pTd2dhVzVXVUhKbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNGcGJsWlFjbVVnSmlaY2JpQWdJQ0FnSUNGMmJtOWtaUzV1Y3lBbUpseHVJQ0FnSUNBZ0lTaGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbkxtbG5ibTl5WldSRmJHVnRaVzUwY3k1c1pXNW5kR2dnSmlaY2JpQWdJQ0FnSUNBZ1kyOXVabWxuTG1sbmJtOXlaV1JGYkdWdFpXNTBjeTV6YjIxbEtHWjFibU4wYVc5dUlDaHBaMjV2Y21VcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWE5TWldkRmVIQW9hV2R1YjNKbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCcFoyNXZjbVV1ZEdWemRDaDJibTlrWlM1MFlXY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBNklHbG5ibTl5WlNBOVBUMGdkbTV2WkdVdWRHRm5YRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FwSUNZbVhHNGdJQ0FnSUNCamIyNW1hV2N1YVhOVmJtdHViM2R1Uld4bGJXVnVkQ2gyYm05a1pTNTBZV2NwWEc0Z0lDQWdLVnh1SUNCOVhHNWNiaUFnZG1GeUlHTnlaV0YwYVc1blJXeHRTVzVXVUhKbElEMGdNRHRjYmx4dUlDQm1kVzVqZEdsdmJpQmpjbVZoZEdWRmJHMGdLRnh1SUNBZ0lIWnViMlJsTEZ4dUlDQWdJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU3hjYmlBZ0lDQndZWEpsYm5SRmJHMHNYRzRnSUNBZ2NtVm1SV3h0TEZ4dUlDQWdJRzVsYzNSbFpDeGNiaUFnSUNCdmQyNWxja0Z5Y21GNUxGeHVJQ0FnSUdsdVpHVjRYRzRnSUNrZ2UxeHVJQ0FnSUdsbUlDaHBjMFJsWmloMmJtOWtaUzVsYkcwcElDWW1JR2x6UkdWbUtHOTNibVZ5UVhKeVlYa3BLU0I3WEc0Z0lDQWdJQ0F2THlCVWFHbHpJSFp1YjJSbElIZGhjeUIxYzJWa0lHbHVJR0VnY0hKbGRtbHZkWE1nY21WdVpHVnlJVnh1SUNBZ0lDQWdMeThnYm05M0lHbDBKM01nZFhObFpDQmhjeUJoSUc1bGR5QnViMlJsTENCdmRtVnlkM0pwZEdsdVp5QnBkSE1nWld4dElIZHZkV3hrSUdOaGRYTmxYRzRnSUNBZ0lDQXZMeUJ3YjNSbGJuUnBZV3dnY0dGMFkyZ2daWEp5YjNKeklHUnZkMjRnZEdobElISnZZV1FnZDJobGJpQnBkQ2R6SUhWelpXUWdZWE1nWVc0Z2FXNXpaWEowYVc5dVhHNGdJQ0FnSUNBdkx5QnlaV1psY21WdVkyVWdibTlrWlM0Z1NXNXpkR1ZoWkN3Z2QyVWdZMnh2Ym1VZ2RHaGxJRzV2WkdVZ2IyNHRaR1Z0WVc1a0lHSmxabTl5WlNCamNtVmhkR2x1WjF4dUlDQWdJQ0FnTHk4Z1lYTnpiMk5wWVhSbFpDQkVUMDBnWld4bGJXVnVkQ0JtYjNJZ2FYUXVYRzRnSUNBZ0lDQjJibTlrWlNBOUlHOTNibVZ5UVhKeVlYbGJhVzVrWlhoZElEMGdZMnh2Ym1WV1RtOWtaU2gyYm05a1pTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtNXZaR1V1YVhOU2IyOTBTVzV6WlhKMElEMGdJVzVsYzNSbFpEc2dMeThnWm05eUlIUnlZVzV6YVhScGIyNGdaVzUwWlhJZ1kyaGxZMnRjYmlBZ0lDQnBaaUFvWTNKbFlYUmxRMjl0Y0c5dVpXNTBLSFp1YjJSbExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXNJSEJoY21WdWRFVnNiU3dnY21WbVJXeHRLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR1JoZEdFZ1BTQjJibTlrWlM1a1lYUmhPMXh1SUNBZ0lIWmhjaUJqYUdsc1pISmxiaUE5SUhadWIyUmxMbU5vYVd4a2NtVnVPMXh1SUNBZ0lIWmhjaUIwWVdjZ1BTQjJibTlrWlM1MFlXYzdYRzRnSUNBZ2FXWWdLR2x6UkdWbUtIUmhaeWtwSUh0Y2JpQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JoZEdFZ0ppWWdaR0YwWVM1d2NtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamNtVmhkR2x1WjBWc2JVbHVWbEJ5WlNzck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNocGMxVnVhMjV2ZDI1RmJHVnRaVzUwSkNReEtIWnViMlJsTENCamNtVmhkR2x1WjBWc2JVbHVWbEJ5WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjFWdWEyNXZkMjRnWTNWemRHOXRJR1ZzWlcxbGJuUTZJRHduSUNzZ2RHRm5JQ3NnSno0Z0xTQmthV1FnZVc5MUlDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0ozSmxaMmx6ZEdWeUlIUm9aU0JqYjIxd2IyNWxiblFnWTI5eWNtVmpkR3g1UHlCR2IzSWdjbVZqZFhKemFYWmxJR052YlhCdmJtVnVkSE1zSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSjIxaGEyVWdjM1Z5WlNCMGJ5QndjbTkyYVdSbElIUm9aU0JjSW01aGJXVmNJaUJ2Y0hScGIyNHVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnViMlJsTG1OdmJuUmxlSFJjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFp1YjJSbExtVnNiU0E5SUhadWIyUmxMbTV6WEc0Z0lDQWdJQ0FnSUQ4Z2JtOWtaVTl3Y3k1amNtVmhkR1ZGYkdWdFpXNTBUbE1vZG01dlpHVXVibk1zSUhSaFp5bGNiaUFnSUNBZ0lDQWdPaUJ1YjJSbFQzQnpMbU55WldGMFpVVnNaVzFsYm5Rb2RHRm5MQ0IyYm05a1pTazdYRzRnSUNBZ0lDQnpaWFJUWTI5d1pTaDJibTlrWlNrN1hHNWNiaUFnSUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNCamNtVmhkR1ZEYUdsc1pISmxiaWgyYm05a1pTd2dZMmhwYkdSeVpXNHNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbHVkbTlyWlVOeVpXRjBaVWh2YjJ0ektIWnViMlJsTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2x1YzJWeWRDaHdZWEpsYm5SRmJHMHNJSFp1YjJSbExtVnNiU3dnY21WbVJXeHRLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHUmhkR0VnSmlZZ1pHRjBZUzV3Y21VcElIdGNiaUFnSUNBZ0lDQWdZM0psWVhScGJtZEZiRzFKYmxaUWNtVXRMVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x6VkhKMVpTaDJibTlrWlM1cGMwTnZiVzFsYm5RcEtTQjdYRzRnSUNBZ0lDQjJibTlrWlM1bGJHMGdQU0J1YjJSbFQzQnpMbU55WldGMFpVTnZiVzFsYm5Rb2RtNXZaR1V1ZEdWNGRDazdYRzRnSUNBZ0lDQnBibk5sY25Rb2NHRnlaVzUwUld4dExDQjJibTlrWlM1bGJHMHNJSEpsWmtWc2JTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhadWIyUmxMbVZzYlNBOUlHNXZaR1ZQY0hNdVkzSmxZWFJsVkdWNGRFNXZaR1VvZG01dlpHVXVkR1Y0ZENrN1hHNGdJQ0FnSUNCcGJuTmxjblFvY0dGeVpXNTBSV3h0TENCMmJtOWtaUzVsYkcwc0lISmxaa1ZzYlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1kzSmxZWFJsUTI5dGNHOXVaVzUwSUNoMmJtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsTENCd1lYSmxiblJGYkcwc0lISmxaa1ZzYlNrZ2UxeHVJQ0FnSUhaaGNpQnBJRDBnZG01dlpHVXVaR0YwWVR0Y2JpQWdJQ0JwWmlBb2FYTkVaV1lvYVNrcElIdGNiaUFnSUNBZ0lIWmhjaUJwYzFKbFlXTjBhWFpoZEdWa0lEMGdhWE5FWldZb2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlVwSUNZbUlHa3VhMlZsY0VGc2FYWmxPMXh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR2tnUFNCcExtaHZiMnNwSUNZbUlHbHpSR1ZtS0drZ1BTQnBMbWx1YVhRcEtTQjdYRzRnSUNBZ0lDQWdJR2tvZG01dlpHVXNJR1poYkhObElDOHFJR2g1WkhKaGRHbHVaeUFxTHlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QmhablJsY2lCallXeHNhVzVuSUhSb1pTQnBibWwwSUdodmIyc3NJR2xtSUhSb1pTQjJibTlrWlNCcGN5QmhJR05vYVd4a0lHTnZiWEJ2Ym1WdWRGeHVJQ0FnSUNBZ0x5OGdhWFFnYzJodmRXeGtKM1psSUdOeVpXRjBaV1FnWVNCamFHbHNaQ0JwYm5OMFlXNWpaU0JoYm1RZ2JXOTFiblJsWkNCcGRDNGdkR2hsSUdOb2FXeGtYRzRnSUNBZ0lDQXZMeUJqYjIxd2IyNWxiblFnWVd4emJ5Qm9ZWE1nYzJWMElIUm9aU0J3YkdGalpXaHZiR1JsY2lCMmJtOWtaU2R6SUdWc2JTNWNiaUFnSUNBZ0lDOHZJR2x1SUhSb1lYUWdZMkZ6WlNCM1pTQmpZVzRnYW5WemRDQnlaWFIxY200Z2RHaGxJR1ZzWlcxbGJuUWdZVzVrSUdKbElHUnZibVV1WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvZG01dlpHVXVZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVXBLU0I3WEc0Z0lDQWdJQ0FnSUdsdWFYUkRiMjF3YjI1bGJuUW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQWdJR2x1YzJWeWRDaHdZWEpsYm5SRmJHMHNJSFp1YjJSbExtVnNiU3dnY21WbVJXeHRLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpWSEoxWlNocGMxSmxZV04wYVhaaGRHVmtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxZV04wYVhaaGRHVkRiMjF3YjI1bGJuUW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2djR0Z5Wlc1MFJXeHRMQ0J5WldaRmJHMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2FXNXBkRU52YlhCdmJtVnVkQ0FvZG01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2tnZTF4dUlDQWdJR2xtSUNocGMwUmxaaWgyYm05a1pTNWtZWFJoTG5CbGJtUnBibWRKYm5ObGNuUXBLU0I3WEc0Z0lDQWdJQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1V1Y0hWemFDNWhjSEJzZVNocGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lIWnViMlJsTG1SaGRHRXVjR1Z1WkdsdVowbHVjMlZ5ZENrN1hHNGdJQ0FnSUNCMmJtOWtaUzVrWVhSaExuQmxibVJwYm1kSmJuTmxjblFnUFNCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCMmJtOWtaUzVsYkcwZ1BTQjJibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlM0a1pXdzdYRzRnSUNBZ2FXWWdLR2x6VUdGMFkyaGhZbXhsS0hadWIyUmxLU2tnZTF4dUlDQWdJQ0FnYVc1MmIydGxRM0psWVhSbFNHOXZhM01vZG01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2s3WEc0Z0lDQWdJQ0J6WlhSVFkyOXdaU2gyYm05a1pTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklHVnRjSFI1SUdOdmJYQnZibVZ1ZENCeWIyOTBMbHh1SUNBZ0lDQWdMeThnYzJ0cGNDQmhiR3dnWld4bGJXVnVkQzF5Wld4aGRHVmtJRzF2WkhWc1pYTWdaWGhqWlhCMElHWnZjaUJ5WldZZ0tDTXpORFUxS1Z4dUlDQWdJQ0FnY21WbmFYTjBaWEpTWldZb2RtNXZaR1VwTzF4dUlDQWdJQ0FnTHk4Z2JXRnJaU0J6ZFhKbElIUnZJR2x1ZG05clpTQjBhR1VnYVc1elpYSjBJR2h2YjJ0Y2JpQWdJQ0FnSUdsdWMyVnlkR1ZrVm01dlpHVlJkV1YxWlM1d2RYTm9LSFp1YjJSbEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQnlaV0ZqZEdsMllYUmxRMjl0Y0c5dVpXNTBJQ2gyYm05a1pTd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0J3WVhKbGJuUkZiRzBzSUhKbFprVnNiU2tnZTF4dUlDQWdJSFpoY2lCcE8xeHVJQ0FnSUM4dklHaGhZMnNnWm05eUlDTTBNek01T2lCaElISmxZV04wYVhaaGRHVmtJR052YlhCdmJtVnVkQ0IzYVhSb0lHbHVibVZ5SUhSeVlXNXphWFJwYjI1Y2JpQWdJQ0F2THlCa2IyVnpJRzV2ZENCMGNtbG5aMlZ5SUdKbFkyRjFjMlVnZEdobElHbHVibVZ5SUc1dlpHVW5jeUJqY21WaGRHVmtJR2h2YjJ0eklHRnlaU0J1YjNRZ1kyRnNiR1ZrWEc0Z0lDQWdMeThnWVdkaGFXNHVJRWwwSjNNZ2JtOTBJR2xrWldGc0lIUnZJR2x1ZG05c2RtVWdiVzlrZFd4bExYTndaV05wWm1saklHeHZaMmxqSUdsdUlHaGxjbVVnWW5WMFhHNGdJQ0FnTHk4Z2RHaGxjbVVnWkc5bGMyNG5kQ0J6WldWdElIUnZJR0psSUdFZ1ltVjBkR1Z5SUhkaGVTQjBieUJrYnlCcGRDNWNiaUFnSUNCMllYSWdhVzV1WlhKT2IyUmxJRDBnZG01dlpHVTdYRzRnSUNBZ2QyaHBiR1VnS0dsdWJtVnlUbTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ2FXNXVaWEpPYjJSbElEMGdhVzV1WlhKT2IyUmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxMbDkyYm05a1pUdGNiaUFnSUNBZ0lHbG1JQ2hwYzBSbFppaHBJRDBnYVc1dVpYSk9iMlJsTG1SaGRHRXBJQ1ltSUdselJHVm1LR2tnUFNCcExuUnlZVzV6YVhScGIyNHBLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0JqWW5NdVlXTjBhWFpoZEdVdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnSUNCalluTXVZV04wYVhaaGRHVmJhVjBvWlcxd2RIbE9iMlJsTENCcGJtNWxjazV2WkdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaUzV3ZFhOb0tHbHVibVZ5VG05a1pTazdYRzRnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhWdWJHbHJaU0JoSUc1bGQyeDVJR055WldGMFpXUWdZMjl0Y0c5dVpXNTBMRnh1SUNBZ0lDOHZJR0VnY21WaFkzUnBkbUYwWldRZ2EyVmxjQzFoYkdsMlpTQmpiMjF3YjI1bGJuUWdaRzlsYzI0bmRDQnBibk5sY25RZ2FYUnpaV3htWEc0Z0lDQWdhVzV6WlhKMEtIQmhjbVZ1ZEVWc2JTd2dkbTV2WkdVdVpXeHRMQ0J5WldaRmJHMHBPMXh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYVc1elpYSjBJQ2h3WVhKbGJuUXNJR1ZzYlN3Z2NtVm1KQ1F4S1NCN1hHNGdJQ0FnYVdZZ0tHbHpSR1ZtS0hCaGNtVnVkQ2twSUh0Y2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmloeVpXWWtKREVwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbFQzQnpMbkJoY21WdWRFNXZaR1VvY21WbUpDUXhLU0E5UFQwZ2NHRnlaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdibTlrWlU5d2N5NXBibk5sY25SQ1pXWnZjbVVvY0dGeVpXNTBMQ0JsYkcwc0lISmxaaVFrTVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHNXZaR1ZQY0hNdVlYQndaVzVrUTJocGJHUW9jR0Z5Wlc1MExDQmxiRzBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdOeVpXRjBaVU5vYVd4a2NtVnVJQ2gyYm05a1pTd2dZMmhwYkdSeVpXNHNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2tnZTF4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR05vYVd4a2NtVnVLU2tnZTF4dUlDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNCamFHVmphMFIxY0d4cFkyRjBaVXRsZVhNb1kyaHBiR1J5Wlc0cE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmphR2xzWkhKbGJpNXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJQ0FnSUNCamNtVmhkR1ZGYkcwb1kyaHBiR1J5Wlc1YmFWMHNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU3dnZG01dlpHVXVaV3h0TENCdWRXeHNMQ0IwY25WbExDQmphR2xzWkhKbGJpd2dhU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hwYzFCeWFXMXBkR2wyWlNoMmJtOWtaUzUwWlhoMEtTa2dlMXh1SUNBZ0lDQWdibTlrWlU5d2N5NWhjSEJsYm1SRGFHbHNaQ2gyYm05a1pTNWxiRzBzSUc1dlpHVlBjSE11WTNKbFlYUmxWR1Y0ZEU1dlpHVW9VM1J5YVc1bktIWnViMlJsTG5SbGVIUXBLU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYVhOUVlYUmphR0ZpYkdVZ0tIWnViMlJsS1NCN1hHNGdJQ0FnZDJocGJHVWdLSFp1YjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObEtTQjdYRzRnSUNBZ0lDQjJibTlrWlNBOUlIWnViMlJsTG1OdmJYQnZibVZ1ZEVsdWMzUmhibU5sTGw5MmJtOWtaVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdselJHVm1LSFp1YjJSbExuUmhaeWxjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdsdWRtOXJaVU55WldGMFpVaHZiMnR6SUNoMmJtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsS1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNReElEMGdNRHNnYVNReElEd2dZMkp6TG1OeVpXRjBaUzVzWlc1bmRHZzdJQ3NyYVNReEtTQjdYRzRnSUNBZ0lDQmpZbk11WTNKbFlYUmxXMmtrTVYwb1pXMXdkSGxPYjJSbExDQjJibTlrWlNrN1hHNGdJQ0FnZlZ4dUlDQWdJR2tnUFNCMmJtOWtaUzVrWVhSaExtaHZiMnM3SUM4dklGSmxkWE5sSUhaaGNtbGhZbXhsWEc0Z0lDQWdhV1lnS0dselJHVm1LR2twS1NCN1hHNGdJQ0FnSUNCcFppQW9hWE5FWldZb2FTNWpjbVZoZEdVcEtTQjdJR2t1WTNKbFlYUmxLR1Z0Y0hSNVRtOWtaU3dnZG01dlpHVXBPeUI5WEc0Z0lDQWdJQ0JwWmlBb2FYTkVaV1lvYVM1cGJuTmxjblFwS1NCN0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTNXdkWE5vS0hadWIyUmxLVHNnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dklITmxkQ0J6WTI5d1pTQnBaQ0JoZEhSeWFXSjFkR1VnWm05eUlITmpiM0JsWkNCRFUxTXVYRzRnSUM4dklIUm9hWE1nYVhNZ2FXMXdiR1Z0Wlc1MFpXUWdZWE1nWVNCemNHVmphV0ZzSUdOaGMyVWdkRzhnWVhadmFXUWdkR2hsSUc5MlpYSm9aV0ZrWEc0Z0lDOHZJRzltSUdkdmFXNW5JSFJvY205MVoyZ2dkR2hsSUc1dmNtMWhiQ0JoZEhSeWFXSjFkR1VnY0dGMFkyaHBibWNnY0hKdlkyVnpjeTVjYmlBZ1puVnVZM1JwYjI0Z2MyVjBVMk52Y0dVZ0tIWnViMlJsS1NCN1hHNGdJQ0FnZG1GeUlHazdYRzRnSUNBZ2FXWWdLR2x6UkdWbUtHa2dQU0IyYm05a1pTNW1ibE5qYjNCbFNXUXBLU0I3WEc0Z0lDQWdJQ0J1YjJSbFQzQnpMbk5sZEZOMGVXeGxVMk52Y0dVb2RtNXZaR1V1Wld4dExDQnBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtRnlJR0Z1WTJWemRHOXlJRDBnZG01dlpHVTdYRzRnSUNBZ0lDQjNhR2xzWlNBb1lXNWpaWE4wYjNJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dselJHVm1LR2tnUFNCaGJtTmxjM1J2Y2k1amIyNTBaWGgwS1NBbUppQnBjMFJsWmlocElEMGdhUzRrYjNCMGFXOXVjeTVmYzJOdmNHVkpaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnViMlJsVDNCekxuTmxkRk4wZVd4bFUyTnZjR1VvZG01dlpHVXVaV3h0TENCcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JoYm1ObGMzUnZjaUE5SUdGdVkyVnpkRzl5TG5CaGNtVnVkRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdabTl5SUhOc2IzUWdZMjl1ZEdWdWRDQjBhR1Y1SUhOb2IzVnNaQ0JoYkhOdklHZGxkQ0IwYUdVZ2MyTnZjR1ZKWkNCbWNtOXRJSFJvWlNCb2IzTjBJR2x1YzNSaGJtTmxMbHh1SUNBZ0lHbG1JQ2hwYzBSbFppaHBJRDBnWVdOMGFYWmxTVzV6ZEdGdVkyVXBJQ1ltWEc0Z0lDQWdJQ0JwSUNFOVBTQjJibTlrWlM1amIyNTBaWGgwSUNZbVhHNGdJQ0FnSUNCcElDRTlQU0IyYm05a1pTNW1ia052Ym5SbGVIUWdKaVpjYmlBZ0lDQWdJR2x6UkdWbUtHa2dQU0JwTGlSdmNIUnBiMjV6TGw5elkyOXdaVWxrS1Z4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnYm05a1pVOXdjeTV6WlhSVGRIbHNaVk5qYjNCbEtIWnViMlJsTG1Wc2JTd2dhU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnWVdSa1ZtNXZaR1Z6SUNod1lYSmxiblJGYkcwc0lISmxaa1ZzYlN3Z2RtNXZaR1Z6TENCemRHRnlkRWxrZUN3Z1pXNWtTV1I0TENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVcElIdGNiaUFnSUNCbWIzSWdLRHNnYzNSaGNuUkpaSGdnUEQwZ1pXNWtTV1I0T3lBckszTjBZWEowU1dSNEtTQjdYRzRnSUNBZ0lDQmpjbVZoZEdWRmJHMG9kbTV2WkdWelczTjBZWEowU1dSNFhTd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0J3WVhKbGJuUkZiRzBzSUhKbFprVnNiU3dnWm1Gc2MyVXNJSFp1YjJSbGN5d2djM1JoY25SSlpIZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJR2x1ZG05clpVUmxjM1J5YjNsSWIyOXJJQ2gyYm05a1pTa2dlMXh1SUNBZ0lIWmhjaUJwTENCcU8xeHVJQ0FnSUhaaGNpQmtZWFJoSUQwZ2RtNXZaR1V1WkdGMFlUdGNiaUFnSUNCcFppQW9hWE5FWldZb1pHRjBZU2twSUh0Y2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmlocElEMGdaR0YwWVM1b2IyOXJLU0FtSmlCcGMwUmxaaWhwSUQwZ2FTNWtaWE4wY205NUtTa2dleUJwS0hadWIyUmxLVHNnZlZ4dUlDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJR05pY3k1a1pYTjBjbTk1TG14bGJtZDBhRHNnS3l0cEtTQjdJR05pY3k1a1pYTjBjbTk1VzJsZEtIWnViMlJsS1RzZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2FYTkVaV1lvYVNBOUlIWnViMlJsTG1Ob2FXeGtjbVZ1S1NrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2hxSUQwZ01Ec2dhaUE4SUhadWIyUmxMbU5vYVd4a2NtVnVMbXhsYm1kMGFEc2dLeXRxS1NCN1hHNGdJQ0FnSUNBZ0lHbHVkbTlyWlVSbGMzUnliM2xJYjI5cktIWnViMlJsTG1Ob2FXeGtjbVZ1VzJwZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQnlaVzF2ZG1WV2JtOWtaWE1nS0hCaGNtVnVkRVZzYlN3Z2RtNXZaR1Z6TENCemRHRnlkRWxrZUN3Z1pXNWtTV1I0S1NCN1hHNGdJQ0FnWm05eUlDZzdJSE4wWVhKMFNXUjRJRHc5SUdWdVpFbGtlRHNnS3l0emRHRnlkRWxrZUNrZ2UxeHVJQ0FnSUNBZ2RtRnlJR05vSUQwZ2RtNXZaR1Z6VzNOMFlYSjBTV1I0WFR0Y2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmloamFDa3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0dOb0xuUmhaeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaVzF2ZG1WQmJtUkpiblp2YTJWU1pXMXZkbVZJYjI5cktHTm9LVHRjYmlBZ0lDQWdJQ0FnSUNCcGJuWnZhMlZFWlhOMGNtOTVTRzl2YXloamFDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdJQzh2SUZSbGVIUWdibTlrWlZ4dUlDQWdJQ0FnSUNBZ0lISmxiVzkyWlU1dlpHVW9ZMmd1Wld4dEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEpsYlc5MlpVRnVaRWx1ZG05clpWSmxiVzkyWlVodmIyc2dLSFp1YjJSbExDQnliU2tnZTF4dUlDQWdJR2xtSUNocGMwUmxaaWh5YlNrZ2ZId2dhWE5FWldZb2RtNXZaR1V1WkdGMFlTa3BJSHRjYmlBZ0lDQWdJSFpoY2lCcE8xeHVJQ0FnSUNBZ2RtRnlJR3hwYzNSbGJtVnljeUE5SUdOaWN5NXlaVzF2ZG1VdWJHVnVaM1JvSUNzZ01UdGNiaUFnSUNBZ0lHbG1JQ2hwYzBSbFppaHliU2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmhJSEpsWTNWeWMybDJaV3g1SUhCaGMzTmxaQ0JrYjNkdUlISnRJR05oYkd4aVlXTnJYRzRnSUNBZ0lDQWdJQzh2SUdsdVkzSmxZWE5sSUhSb1pTQnNhWE4wWlc1bGNuTWdZMjkxYm5SY2JpQWdJQ0FnSUNBZ2NtMHViR2x6ZEdWdVpYSnpJQ3M5SUd4cGMzUmxibVZ5Y3p0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUM4dklHUnBjbVZqZEd4NUlISmxiVzkyYVc1blhHNGdJQ0FnSUNBZ0lISnRJRDBnWTNKbFlYUmxVbTFEWWloMmJtOWtaUzVsYkcwc0lHeHBjM1JsYm1WeWN5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZMeUJ5WldOMWNuTnBkbVZzZVNCcGJuWnZhMlVnYUc5dmEzTWdiMjRnWTJocGJHUWdZMjl0Y0c5dVpXNTBJSEp2YjNRZ2JtOWtaVnh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR2tnUFNCMmJtOWtaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaU2tnSmlZZ2FYTkVaV1lvYVNBOUlHa3VYM1p1YjJSbEtTQW1KaUJwYzBSbFppaHBMbVJoZEdFcEtTQjdYRzRnSUNBZ0lDQWdJSEpsYlc5MlpVRnVaRWx1ZG05clpWSmxiVzkyWlVodmIyc29hU3dnY20wcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUdOaWN5NXlaVzF2ZG1VdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnWTJKekxuSmxiVzkyWlZ0cFhTaDJibTlrWlN3Z2NtMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR2tnUFNCMmJtOWtaUzVrWVhSaExtaHZiMnNwSUNZbUlHbHpSR1ZtS0drZ1BTQnBMbkpsYlc5MlpTa3BJSHRjYmlBZ0lDQWdJQ0FnYVNoMmJtOWtaU3dnY20wcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtMG9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVnRiM1psVG05a1pTaDJibTlrWlM1bGJHMHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSFZ3WkdGMFpVTm9hV3hrY21WdUlDaHdZWEpsYm5SRmJHMHNJRzlzWkVOb0xDQnVaWGREYUN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbExDQnlaVzF2ZG1WUGJteDVLU0I3WEc0Z0lDQWdkbUZ5SUc5c1pGTjBZWEowU1dSNElEMGdNRHRjYmlBZ0lDQjJZWElnYm1WM1UzUmhjblJKWkhnZ1BTQXdPMXh1SUNBZ0lIWmhjaUJ2YkdSRmJtUkpaSGdnUFNCdmJHUkRhQzVzWlc1bmRHZ2dMU0F4TzF4dUlDQWdJSFpoY2lCdmJHUlRkR0Z5ZEZadWIyUmxJRDBnYjJ4a1EyaGJNRjA3WEc0Z0lDQWdkbUZ5SUc5c1pFVnVaRlp1YjJSbElEMGdiMnhrUTJoYmIyeGtSVzVrU1dSNFhUdGNiaUFnSUNCMllYSWdibVYzUlc1a1NXUjRJRDBnYm1WM1EyZ3ViR1Z1WjNSb0lDMGdNVHRjYmlBZ0lDQjJZWElnYm1WM1UzUmhjblJXYm05a1pTQTlJRzVsZDBOb1d6QmRPMXh1SUNBZ0lIWmhjaUJ1WlhkRmJtUldibTlrWlNBOUlHNWxkME5vVzI1bGQwVnVaRWxrZUYwN1hHNGdJQ0FnZG1GeUlHOXNaRXRsZVZSdlNXUjRMQ0JwWkhoSmJrOXNaQ3dnZG01dlpHVlViMDF2ZG1Vc0lISmxaa1ZzYlR0Y2JseHVJQ0FnSUM4dklISmxiVzkyWlU5dWJIa2dhWE1nWVNCemNHVmphV0ZzSUdac1lXY2dkWE5sWkNCdmJteDVJR0o1SUR4MGNtRnVjMmwwYVc5dUxXZHliM1Z3UGx4dUlDQWdJQzh2SUhSdklHVnVjM1Z5WlNCeVpXMXZkbVZrSUdWc1pXMWxiblJ6SUhOMFlYa2dhVzRnWTI5eWNtVmpkQ0J5Wld4aGRHbDJaU0J3YjNOcGRHbHZibk5jYmlBZ0lDQXZMeUJrZFhKcGJtY2diR1ZoZG1sdVp5QjBjbUZ1YzJsMGFXOXVjMXh1SUNBZ0lIWmhjaUJqWVc1TmIzWmxJRDBnSVhKbGJXOTJaVTl1YkhrN1hHNWNiaUFnSUNCN1hHNGdJQ0FnSUNCamFHVmphMFIxY0d4cFkyRjBaVXRsZVhNb2JtVjNRMmdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSGRvYVd4bElDaHZiR1JUZEdGeWRFbGtlQ0E4UFNCdmJHUkZibVJKWkhnZ0ppWWdibVYzVTNSaGNuUkpaSGdnUEQwZ2JtVjNSVzVrU1dSNEtTQjdYRzRnSUNBZ0lDQnBaaUFvYVhOVmJtUmxaaWh2YkdSVGRHRnlkRlp1YjJSbEtTa2dlMXh1SUNBZ0lDQWdJQ0J2YkdSVGRHRnlkRlp1YjJSbElEMGdiMnhrUTJoYkt5dHZiR1JUZEdGeWRFbGtlRjA3SUM4dklGWnViMlJsSUdoaGN5QmlaV1Z1SUcxdmRtVmtJR3hsWm5SY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTlZibVJsWmlodmJHUkZibVJXYm05a1pTa3BJSHRjYmlBZ0lDQWdJQ0FnYjJ4a1JXNWtWbTV2WkdVZ1BTQnZiR1JEYUZzdExXOXNaRVZ1WkVsa2VGMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5oYldWV2JtOWtaU2h2YkdSVGRHRnlkRlp1YjJSbExDQnVaWGRUZEdGeWRGWnViMlJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQndZWFJqYUZadWIyUmxLRzlzWkZOMFlYSjBWbTV2WkdVc0lHNWxkMU4wWVhKMFZtNXZaR1VzSUdsdWMyVnlkR1ZrVm01dlpHVlJkV1YxWlN3Z2JtVjNRMmdzSUc1bGQxTjBZWEowU1dSNEtUdGNiaUFnSUNBZ0lDQWdiMnhrVTNSaGNuUldibTlrWlNBOUlHOXNaRU5vV3lzcmIyeGtVM1JoY25SSlpIaGRPMXh1SUNBZ0lDQWdJQ0J1WlhkVGRHRnlkRlp1YjJSbElEMGdibVYzUTJoYkt5dHVaWGRUZEdGeWRFbGtlRjA3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOaGJXVldibTlrWlNodmJHUkZibVJXYm05a1pTd2dibVYzUlc1a1ZtNXZaR1VwS1NCN1hHNGdJQ0FnSUNBZ0lIQmhkR05vVm01dlpHVW9iMnhrUlc1a1ZtNXZaR1VzSUc1bGQwVnVaRlp1YjJSbExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXNJRzVsZDBOb0xDQnVaWGRGYm1SSlpIZ3BPMXh1SUNBZ0lDQWdJQ0J2YkdSRmJtUldibTlrWlNBOUlHOXNaRU5vV3kwdGIyeGtSVzVrU1dSNFhUdGNiaUFnSUNBZ0lDQWdibVYzUlc1a1ZtNXZaR1VnUFNCdVpYZERhRnN0TFc1bGQwVnVaRWxrZUYwN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITmhiV1ZXYm05a1pTaHZiR1JUZEdGeWRGWnViMlJsTENCdVpYZEZibVJXYm05a1pTa3BJSHNnTHk4Z1ZtNXZaR1VnYlc5MlpXUWdjbWxuYUhSY2JpQWdJQ0FnSUNBZ2NHRjBZMmhXYm05a1pTaHZiR1JUZEdGeWRGWnViMlJsTENCdVpYZEZibVJXYm05a1pTd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0J1WlhkRGFDd2dibVYzUlc1a1NXUjRLVHRjYmlBZ0lDQWdJQ0FnWTJGdVRXOTJaU0FtSmlCdWIyUmxUM0J6TG1sdWMyVnlkRUpsWm05eVpTaHdZWEpsYm5SRmJHMHNJRzlzWkZOMFlYSjBWbTV2WkdVdVpXeHRMQ0J1YjJSbFQzQnpMbTVsZUhSVGFXSnNhVzVuS0c5c1pFVnVaRlp1YjJSbExtVnNiU2twTzF4dUlDQWdJQ0FnSUNCdmJHUlRkR0Z5ZEZadWIyUmxJRDBnYjJ4a1EyaGJLeXR2YkdSVGRHRnlkRWxrZUYwN1hHNGdJQ0FnSUNBZ0lHNWxkMFZ1WkZadWIyUmxJRDBnYm1WM1EyaGJMUzF1WlhkRmJtUkpaSGhkTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoellXMWxWbTV2WkdVb2IyeGtSVzVrVm01dlpHVXNJRzVsZDFOMFlYSjBWbTV2WkdVcEtTQjdJQzh2SUZadWIyUmxJRzF2ZG1Wa0lHeGxablJjYmlBZ0lDQWdJQ0FnY0dGMFkyaFdibTlrWlNodmJHUkZibVJXYm05a1pTd2dibVYzVTNSaGNuUldibTlrWlN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbExDQnVaWGREYUN3Z2JtVjNVM1JoY25SSlpIZ3BPMXh1SUNBZ0lDQWdJQ0JqWVc1TmIzWmxJQ1ltSUc1dlpHVlBjSE11YVc1elpYSjBRbVZtYjNKbEtIQmhjbVZ1ZEVWc2JTd2diMnhrUlc1a1ZtNXZaR1V1Wld4dExDQnZiR1JUZEdGeWRGWnViMlJsTG1Wc2JTazdYRzRnSUNBZ0lDQWdJRzlzWkVWdVpGWnViMlJsSUQwZ2IyeGtRMmhiTFMxdmJHUkZibVJKWkhoZE8xeHVJQ0FnSUNBZ0lDQnVaWGRUZEdGeWRGWnViMlJsSUQwZ2JtVjNRMmhiS3l0dVpYZFRkR0Z5ZEVsa2VGMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOVmJtUmxaaWh2YkdSTFpYbFViMGxrZUNrcElIc2diMnhrUzJWNVZHOUpaSGdnUFNCamNtVmhkR1ZMWlhsVWIwOXNaRWxrZUNodmJHUkRhQ3dnYjJ4a1UzUmhjblJKWkhnc0lHOXNaRVZ1WkVsa2VDazdJSDFjYmlBZ0lDQWdJQ0FnYVdSNFNXNVBiR1FnUFNCcGMwUmxaaWh1WlhkVGRHRnlkRlp1YjJSbExtdGxlU2xjYmlBZ0lDQWdJQ0FnSUNBL0lHOXNaRXRsZVZSdlNXUjRXMjVsZDFOMFlYSjBWbTV2WkdVdWEyVjVYVnh1SUNBZ0lDQWdJQ0FnSURvZ1ptbHVaRWxrZUVsdVQyeGtLRzVsZDFOMFlYSjBWbTV2WkdVc0lHOXNaRU5vTENCdmJHUlRkR0Z5ZEVsa2VDd2diMnhrUlc1a1NXUjRLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpWVzVrWldZb2FXUjRTVzVQYkdRcEtTQjdJQzh2SUU1bGR5QmxiR1Z0Wlc1MFhHNGdJQ0FnSUNBZ0lDQWdZM0psWVhSbFJXeHRLRzVsZDFOMFlYSjBWbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2djR0Z5Wlc1MFJXeHRMQ0J2YkdSVGRHRnlkRlp1YjJSbExtVnNiU3dnWm1Gc2MyVXNJRzVsZDBOb0xDQnVaWGRUZEdGeWRFbGtlQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtNXZaR1ZVYjAxdmRtVWdQU0J2YkdSRGFGdHBaSGhKYms5c1pGMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tITmhiV1ZXYm05a1pTaDJibTlrWlZSdlRXOTJaU3dnYm1WM1UzUmhjblJXYm05a1pTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkR05vVm01dlpHVW9kbTV2WkdWVWIwMXZkbVVzSUc1bGQxTjBZWEowVm01dlpHVXNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU3dnYm1WM1EyZ3NJRzVsZDFOMFlYSjBTV1I0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzlzWkVOb1cybGtlRWx1VDJ4a1hTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhiazF2ZG1VZ0ppWWdibTlrWlU5d2N5NXBibk5sY25SQ1pXWnZjbVVvY0dGeVpXNTBSV3h0TENCMmJtOWtaVlJ2VFc5MlpTNWxiRzBzSUc5c1pGTjBZWEowVm01dlpHVXVaV3h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JyWlhrZ1luVjBJR1JwWm1abGNtVnVkQ0JsYkdWdFpXNTBMaUIwY21WaGRDQmhjeUJ1WlhjZ1pXeGxiV1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZM0psWVhSbFJXeHRLRzVsZDFOMFlYSjBWbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2djR0Z5Wlc1MFJXeHRMQ0J2YkdSVGRHRnlkRlp1YjJSbExtVnNiU3dnWm1Gc2MyVXNJRzVsZDBOb0xDQnVaWGRUZEdGeWRFbGtlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRzVsZDFOMFlYSjBWbTV2WkdVZ1BTQnVaWGREYUZzcksyNWxkMU4wWVhKMFNXUjRYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRzlzWkZOMFlYSjBTV1I0SUQ0Z2IyeGtSVzVrU1dSNEtTQjdYRzRnSUNBZ0lDQnlaV1pGYkcwZ1BTQnBjMVZ1WkdWbUtHNWxkME5vVzI1bGQwVnVaRWxrZUNBcklERmRLU0EvSUc1MWJHd2dPaUJ1WlhkRGFGdHVaWGRGYm1SSlpIZ2dLeUF4WFM1bGJHMDdYRzRnSUNBZ0lDQmhaR1JXYm05a1pYTW9jR0Z5Wlc1MFJXeHRMQ0J5WldaRmJHMHNJRzVsZDBOb0xDQnVaWGRUZEdGeWRFbGtlQ3dnYm1WM1JXNWtTV1I0TENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtVjNVM1JoY25SSlpIZ2dQaUJ1WlhkRmJtUkpaSGdwSUh0Y2JpQWdJQ0FnSUhKbGJXOTJaVlp1YjJSbGN5aHdZWEpsYm5SRmJHMHNJRzlzWkVOb0xDQnZiR1JUZEdGeWRFbGtlQ3dnYjJ4a1JXNWtTV1I0S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCamFHVmphMFIxY0d4cFkyRjBaVXRsZVhNZ0tHTm9hV3hrY21WdUtTQjdYRzRnSUNBZ2RtRnlJSE5sWlc1TFpYbHpJRDBnZTMwN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCamFHbHNaSEpsYmk1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUhadWIyUmxJRDBnWTJocGJHUnlaVzViYVYwN1hHNGdJQ0FnSUNCMllYSWdhMlY1SUQwZ2RtNXZaR1V1YTJWNU8xeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE5sWlc1TFpYbHpXMnRsZVYwcElIdGNiaUFnSUNBZ0lDQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0Z3aVJIVndiR2xqWVhSbElHdGxlWE1nWkdWMFpXTjBaV1E2SUNkY0lpQXJJR3RsZVNBcklGd2lKeTRnVkdocGN5QnRZWGtnWTJGMWMyVWdZVzRnZFhCa1lYUmxJR1Z5Y205eUxsd2lLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnViMlJsTG1OdmJuUmxlSFJjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sWlc1TFpYbHpXMnRsZVYwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1ptbHVaRWxrZUVsdVQyeGtJQ2h1YjJSbExDQnZiR1JEYUN3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWREc2dhU0E4SUdWdVpEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdZeUE5SUc5c1pFTm9XMmxkTzF4dUlDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0dNcElDWW1JSE5oYldWV2JtOWtaU2h1YjJSbExDQmpLU2tnZXlCeVpYUjFjbTRnYVNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2NHRjBZMmhXYm05a1pTQW9YRzRnSUNBZ2IyeGtWbTV2WkdVc1hHNGdJQ0FnZG01dlpHVXNYRzRnSUNBZ2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbExGeHVJQ0FnSUc5M2JtVnlRWEp5WVhrc1hHNGdJQ0FnYVc1a1pYZ3NYRzRnSUNBZ2NtVnRiM1psVDI1c2VWeHVJQ0FwSUh0Y2JpQWdJQ0JwWmlBb2IyeGtWbTV2WkdVZ1BUMDlJSFp1YjJSbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FYTkVaV1lvZG01dlpHVXVaV3h0S1NBbUppQnBjMFJsWmlodmQyNWxja0Z5Y21GNUtTa2dlMXh1SUNBZ0lDQWdMeThnWTJ4dmJtVWdjbVYxYzJWa0lIWnViMlJsWEc0Z0lDQWdJQ0IyYm05a1pTQTlJRzkzYm1WeVFYSnlZWGxiYVc1a1pYaGRJRDBnWTJ4dmJtVldUbTlrWlNoMmJtOWtaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdWc2JTQTlJSFp1YjJSbExtVnNiU0E5SUc5c1pGWnViMlJsTG1Wc2JUdGNibHh1SUNBZ0lHbG1JQ2hwYzFSeWRXVW9iMnhrVm01dlpHVXVhWE5CYzNsdVkxQnNZV05sYUc5c1pHVnlLU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0hadWIyUmxMbUZ6ZVc1alJtRmpkRzl5ZVM1eVpYTnZiSFpsWkNrcElIdGNiaUFnSUNBZ0lDQWdhSGxrY21GMFpTaHZiR1JXYm05a1pTNWxiRzBzSUhadWIyUmxMQ0JwYm5ObGNuUmxaRlp1YjJSbFVYVmxkV1VwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZG01dlpHVXVhWE5CYzNsdVkxQnNZV05sYUc5c1pHVnlJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhKbGRYTmxJR1ZzWlcxbGJuUWdabTl5SUhOMFlYUnBZeUIwY21WbGN5NWNiaUFnSUNBdkx5QnViM1JsSUhkbElHOXViSGtnWkc4Z2RHaHBjeUJwWmlCMGFHVWdkbTV2WkdVZ2FYTWdZMnh2Ym1Wa0lDMWNiaUFnSUNBdkx5QnBaaUIwYUdVZ2JtVjNJRzV2WkdVZ2FYTWdibTkwSUdOc2IyNWxaQ0JwZENCdFpXRnVjeUIwYUdVZ2NtVnVaR1Z5SUdaMWJtTjBhVzl1Y3lCb1lYWmxJR0psWlc1Y2JpQWdJQ0F2THlCeVpYTmxkQ0JpZVNCMGFHVWdhRzkwTFhKbGJHOWhaQzFoY0drZ1lXNWtJSGRsSUc1bFpXUWdkRzhnWkc4Z1lTQndjbTl3WlhJZ2NtVXRjbVZ1WkdWeUxseHVJQ0FnSUdsbUlDaHBjMVJ5ZFdVb2RtNXZaR1V1YVhOVGRHRjBhV01wSUNZbVhHNGdJQ0FnSUNCcGMxUnlkV1VvYjJ4a1ZtNXZaR1V1YVhOVGRHRjBhV01wSUNZbVhHNGdJQ0FnSUNCMmJtOWtaUzVyWlhrZ1BUMDlJRzlzWkZadWIyUmxMbXRsZVNBbUpseHVJQ0FnSUNBZ0tHbHpWSEoxWlNoMmJtOWtaUzVwYzBOc2IyNWxaQ2tnZkh3Z2FYTlVjblZsS0hadWIyUmxMbWx6VDI1alpTa3BYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjJibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlNBOUlHOXNaRlp1YjJSbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObE8xeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdrN1hHNGdJQ0FnZG1GeUlHUmhkR0VnUFNCMmJtOWtaUzVrWVhSaE8xeHVJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhLU0FtSmlCcGMwUmxaaWhwSUQwZ1pHRjBZUzVvYjI5cktTQW1KaUJwYzBSbFppaHBJRDBnYVM1d2NtVndZWFJqYUNrcElIdGNiaUFnSUNBZ0lHa29iMnhrVm01dlpHVXNJSFp1YjJSbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdiMnhrUTJnZ1BTQnZiR1JXYm05a1pTNWphR2xzWkhKbGJqdGNiaUFnSUNCMllYSWdZMmdnUFNCMmJtOWtaUzVqYUdsc1pISmxianRjYmlBZ0lDQnBaaUFvYVhORVpXWW9aR0YwWVNrZ0ppWWdhWE5RWVhSamFHRmliR1VvZG01dlpHVXBLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2dZMkp6TG5Wd1pHRjBaUzVzWlc1bmRHZzdJQ3NyYVNrZ2V5QmpZbk11ZFhCa1lYUmxXMmxkS0c5c1pGWnViMlJsTENCMmJtOWtaU2s3SUgxY2JpQWdJQ0FnSUdsbUlDaHBjMFJsWmlocElEMGdaR0YwWVM1b2IyOXJLU0FtSmlCcGMwUmxaaWhwSUQwZ2FTNTFjR1JoZEdVcEtTQjdJR2tvYjJ4a1ZtNXZaR1VzSUhadWIyUmxLVHNnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYVhOVmJtUmxaaWgyYm05a1pTNTBaWGgwS1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHOXNaRU5vS1NBbUppQnBjMFJsWmloamFDa3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXNaRU5vSUNFOVBTQmphQ2tnZXlCMWNHUmhkR1ZEYUdsc1pISmxiaWhsYkcwc0lHOXNaRU5vTENCamFDd2dhVzV6WlhKMFpXUldibTlrWlZGMVpYVmxMQ0J5WlcxdmRtVlBibXg1S1RzZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBjMFJsWmloamFDa3BJSHRjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lHTm9aV05yUkhWd2JHbGpZWFJsUzJWNWN5aGphQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHOXNaRlp1YjJSbExuUmxlSFFwS1NCN0lHNXZaR1ZQY0hNdWMyVjBWR1Y0ZEVOdmJuUmxiblFvWld4dExDQW5KeWs3SUgxY2JpQWdJQ0FnSUNBZ1lXUmtWbTV2WkdWektHVnNiU3dnYm5Wc2JDd2dZMmdzSURBc0lHTm9MbXhsYm1kMGFDQXRJREVzSUdsdWMyVnlkR1ZrVm01dlpHVlJkV1YxWlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHbHpSR1ZtS0c5c1pFTm9LU2tnZTF4dUlDQWdJQ0FnSUNCeVpXMXZkbVZXYm05a1pYTW9aV3h0TENCdmJHUkRhQ3dnTUN3Z2IyeGtRMmd1YkdWdVozUm9JQzBnTVNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHbHpSR1ZtS0c5c1pGWnViMlJsTG5SbGVIUXBLU0I3WEc0Z0lDQWdJQ0FnSUc1dlpHVlBjSE11YzJWMFZHVjRkRU52Ym5SbGJuUW9aV3h0TENBbkp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHZiR1JXYm05a1pTNTBaWGgwSUNFOVBTQjJibTlrWlM1MFpYaDBLU0I3WEc0Z0lDQWdJQ0J1YjJSbFQzQnpMbk5sZEZSbGVIUkRiMjUwWlc1MEtHVnNiU3dnZG01dlpHVXVkR1Y0ZENrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNocGMwUmxaaWhrWVhSaEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0dselJHVm1LR2tnUFNCa1lYUmhMbWh2YjJzcElDWW1JR2x6UkdWbUtHa2dQU0JwTG5CdmMzUndZWFJqYUNrcElIc2dhU2h2YkdSV2JtOWtaU3dnZG01dlpHVXBPeUI5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYVc1MmIydGxTVzV6WlhKMFNHOXZheUFvZG01dlpHVXNJSEYxWlhWbExDQnBibWwwYVdGc0tTQjdYRzRnSUNBZ0x5OGdaR1ZzWVhrZ2FXNXpaWEowSUdodmIydHpJR1p2Y2lCamIyMXdiMjVsYm5RZ2NtOXZkQ0J1YjJSbGN5d2dhVzUyYjJ0bElIUm9aVzBnWVdaMFpYSWdkR2hsWEc0Z0lDQWdMeThnWld4bGJXVnVkQ0JwY3lCeVpXRnNiSGtnYVc1elpYSjBaV1JjYmlBZ0lDQnBaaUFvYVhOVWNuVmxLR2x1YVhScFlXd3BJQ1ltSUdselJHVm1LSFp1YjJSbExuQmhjbVZ1ZENrcElIdGNiaUFnSUNBZ0lIWnViMlJsTG5CaGNtVnVkQzVrWVhSaExuQmxibVJwYm1kSmJuTmxjblFnUFNCeGRXVjFaVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnhkV1YxWlM1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpWdHBYUzVrWVhSaExtaHZiMnN1YVc1elpYSjBLSEYxWlhWbFcybGRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVhJZ2FIbGtjbUYwYVc5dVFtRnBiR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDOHZJR3hwYzNRZ2IyWWdiVzlrZFd4bGN5QjBhR0YwSUdOaGJpQnphMmx3SUdOeVpXRjBaU0JvYjI5cklHUjFjbWx1WnlCb2VXUnlZWFJwYjI0Z1ltVmpZWFZ6WlNCMGFHVjVYRzRnSUM4dklHRnlaU0JoYkhKbFlXUjVJSEpsYm1SbGNtVmtJRzl1SUhSb1pTQmpiR2xsYm5RZ2IzSWdhR0Z6SUc1dklHNWxaV1FnWm05eUlHbHVhWFJwWVd4cGVtRjBhVzl1WEc0Z0lDOHZJRTV2ZEdVNklITjBlV3hsSUdseklHVjRZMngxWkdWa0lHSmxZMkYxYzJVZ2FYUWdjbVZzYVdWeklHOXVJR2x1YVhScFlXd2dZMnh2Ym1VZ1ptOXlJR1oxZEhWeVpWeHVJQ0F2THlCa1pXVndJSFZ3WkdGMFpYTWdLQ00zTURZektTNWNiaUFnZG1GeUlHbHpVbVZ1WkdWeVpXUk5iMlIxYkdVZ1BTQnRZV3RsVFdGd0tDZGhkSFJ5Y3l4amJHRnpjeXh6ZEdGMGFXTkRiR0Z6Y3l4emRHRjBhV05UZEhsc1pTeHJaWGtuS1R0Y2JseHVJQ0F2THlCT2IzUmxPaUIwYUdseklHbHpJR0VnWW5KdmQzTmxjaTF2Ym14NUlHWjFibU4wYVc5dUlITnZJSGRsSUdOaGJpQmhjM04xYldVZ1pXeHRjeUJoY21VZ1JFOU5JRzV2WkdWekxseHVJQ0JtZFc1amRHbHZiaUJvZVdSeVlYUmxJQ2hsYkcwc0lIWnViMlJsTENCcGJuTmxjblJsWkZadWIyUmxVWFZsZFdVc0lHbHVWbEJ5WlNrZ2UxeHVJQ0FnSUhaaGNpQnBPMXh1SUNBZ0lIWmhjaUIwWVdjZ1BTQjJibTlrWlM1MFlXYzdYRzRnSUNBZ2RtRnlJR1JoZEdFZ1BTQjJibTlrWlM1a1lYUmhPMXh1SUNBZ0lIWmhjaUJqYUdsc1pISmxiaUE5SUhadWIyUmxMbU5vYVd4a2NtVnVPMXh1SUNBZ0lHbHVWbEJ5WlNBOUlHbHVWbEJ5WlNCOGZDQW9aR0YwWVNBbUppQmtZWFJoTG5CeVpTazdYRzRnSUNBZ2RtNXZaR1V1Wld4dElEMGdaV3h0TzF4dVhHNGdJQ0FnYVdZZ0tHbHpWSEoxWlNoMmJtOWtaUzVwYzBOdmJXMWxiblFwSUNZbUlHbHpSR1ZtS0hadWIyUmxMbUZ6ZVc1alJtRmpkRzl5ZVNrcElIdGNiaUFnSUNBZ0lIWnViMlJsTG1selFYTjVibU5RYkdGalpXaHZiR1JsY2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlZ4dUlDQWdJSDFjYmlBZ0lDQXZMeUJoYzNObGNuUWdibTlrWlNCdFlYUmphRnh1SUNBZ0lIdGNiaUFnSUNBZ0lHbG1JQ2doWVhOelpYSjBUbTlrWlUxaGRHTm9LR1ZzYlN3Z2RtNXZaR1VzSUdsdVZsQnlaU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBjMFJsWmloa1lYUmhLU2tnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0drZ1BTQmtZWFJoTG1odmIyc3BJQ1ltSUdselJHVm1LR2tnUFNCcExtbHVhWFFwS1NCN0lHa29kbTV2WkdVc0lIUnlkV1VnTHlvZ2FIbGtjbUYwYVc1bklDb3ZLVHNnZlZ4dUlDQWdJQ0FnYVdZZ0tHbHpSR1ZtS0drZ1BTQjJibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlNrcElIdGNiaUFnSUNBZ0lDQWdMeThnWTJocGJHUWdZMjl0Y0c5dVpXNTBMaUJwZENCemFHOTFiR1FnYUdGMlpTQm9lV1J5WVhSbFpDQnBkSE1nYjNkdUlIUnlaV1V1WEc0Z0lDQWdJQ0FnSUdsdWFYUkRiMjF3YjI1bGJuUW9kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hwYzBSbFppaDBZV2NwS1NCN1hHNGdJQ0FnSUNCcFppQW9hWE5FWldZb1kyaHBiR1J5Wlc0cEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUdWdGNIUjVJR1ZzWlcxbGJuUXNJR0ZzYkc5M0lHTnNhV1Z1ZENCMGJ5QndhV05ySUhWd0lHRnVaQ0J3YjNCMWJHRjBaU0JqYUdsc1pISmxibHh1SUNBZ0lDQWdJQ0JwWmlBb0lXVnNiUzVvWVhORGFHbHNaRTV2WkdWektDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamNtVmhkR1ZEYUdsc1pISmxiaWgyYm05a1pTd2dZMmhwYkdSeVpXNHNJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkaTFvZEcxc0lHRnVaQ0JrYjIxUWNtOXdjem9nYVc1dVpYSklWRTFNWEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2x6UkdWbUtHa2dQU0JrWVhSaEtTQW1KaUJwYzBSbFppaHBJRDBnYVM1a2IyMVFjbTl3Y3lrZ0ppWWdhWE5FWldZb2FTQTlJR2t1YVc1dVpYSklWRTFNS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDA5SUdWc2JTNXBibTVsY2toVVRVd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyOXVjMjlzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaGFIbGtjbUYwYVc5dVFtRnBiR1ZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoNVpISmhkR2x2YmtKaGFXeGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkUVlYSmxiblE2SUNjc0lHVnNiU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZHpaWEoyWlhJZ2FXNXVaWEpJVkUxTU9pQW5MQ0JwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9KMk5zYVdWdWRDQnBibTVsY2toVVRVdzZJQ2NzSUdWc2JTNXBibTVsY2toVVRVd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBkR1Z5WVhSbElHRnVaQ0JqYjIxd1lYSmxJR05vYVd4a2NtVnVJR3hwYzNSelhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyaHBiR1J5Wlc1TllYUmphQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMmhwYkdST2IyUmxJRDBnWld4dExtWnBjbk4wUTJocGJHUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcEpERWdQU0F3T3lCcEpERWdQQ0JqYUdsc1pISmxiaTVzWlc1bmRHZzdJR2trTVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWTJocGJHUk9iMlJsSUh4OElDRm9lV1J5WVhSbEtHTm9hV3hrVG05a1pTd2dZMmhwYkdSeVpXNWJhU1F4WFN3Z2FXNXpaWEowWldSV2JtOWtaVkYxWlhWbExDQnBibFpRY21VcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmhwYkdSeVpXNU5ZWFJqYUNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyaHBiR1JPYjJSbElEMGdZMmhwYkdST2IyUmxMbTVsZUhSVGFXSnNhVzVuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhV1lnWTJocGJHUk9iMlJsSUdseklHNXZkQ0J1ZFd4c0xDQnBkQ0J0WldGdWN5QjBhR1VnWVdOMGRXRnNJR05vYVd4a1RtOWtaWE1nYkdsemRDQnBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiRzl1WjJWeUlIUm9ZVzRnZEdobElIWnBjblIxWVd3Z1kyaHBiR1J5Wlc0Z2JHbHpkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWTJocGJHUnlaVzVOWVhSamFDQjhmQ0JqYUdsc1pFNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZMjl1YzI5c1pTQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhhSGxrY21GMGFXOXVRbUZwYkdWa1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaDVaSEpoZEdsdmJrSmhhV3hsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtDZFFZWEpsYm5RNklDY3NJR1ZzYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2ROYVhOdFlYUmphR2x1WnlCamFHbHNaRTV2WkdWeklIWnpMaUJXVG05a1pYTTZJQ2NzSUdWc2JTNWphR2xzWkU1dlpHVnpMQ0JqYUdsc1pISmxiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9hWE5FWldZb1pHRjBZU2twSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1oxYkd4SmJuWnZhMlVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJR1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXbHpVbVZ1WkdWeVpXUk5iMlIxYkdVb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdablZzYkVsdWRtOXJaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuWnZhMlZEY21WaGRHVkliMjlyY3loMmJtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hablZzYkVsdWRtOXJaU0FtSmlCa1lYUmhXeWRqYkdGemN5ZGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdaVzV6ZFhKbElHTnZiR3hsWTNScGJtY2daR1Z3Y3lCbWIzSWdaR1ZsY0NCamJHRnpjeUJpYVc1a2FXNW5jeUJtYjNJZ1puVjBkWEpsSUhWd1pHRjBaWE5jYmlBZ0lDQWdJQ0FnSUNCMGNtRjJaWEp6WlNoa1lYUmhXeWRqYkdGemN5ZGRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvWld4dExtUmhkR0VnSVQwOUlIWnViMlJsTG5SbGVIUXBJSHRjYmlBZ0lDQWdJR1ZzYlM1a1lYUmhJRDBnZG01dlpHVXVkR1Y0ZER0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1ZjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdGemMyVnlkRTV2WkdWTllYUmphQ0FvYm05a1pTd2dkbTV2WkdVc0lHbHVWbEJ5WlNrZ2UxeHVJQ0FnSUdsbUlDaHBjMFJsWmloMmJtOWtaUzUwWVdjcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RtNXZaR1V1ZEdGbkxtbHVaR1Y0VDJZb0ozWjFaUzFqYjIxd2IyNWxiblFuS1NBOVBUMGdNQ0I4ZkNBb1hHNGdJQ0FnSUNBZ0lDRnBjMVZ1YTI1dmQyNUZiR1Z0Wlc1MEpDUXhLSFp1YjJSbExDQnBibFpRY21VcElDWW1YRzRnSUNBZ0lDQWdJSFp1YjJSbExuUmhaeTUwYjB4dmQyVnlRMkZ6WlNncElEMDlQU0FvYm05a1pTNTBZV2RPWVcxbElDWW1JRzV2WkdVdWRHRm5UbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BLVnh1SUNBZ0lDQWdLVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm05a1pTNXViMlJsVkhsd1pTQTlQVDBnS0hadWIyUmxMbWx6UTI5dGJXVnVkQ0EvSURnZ09pQXpLVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQndZWFJqYUNBb2IyeGtWbTV2WkdVc0lIWnViMlJsTENCb2VXUnlZWFJwYm1jc0lISmxiVzkyWlU5dWJIa3BJSHRjYmlBZ0lDQnBaaUFvYVhOVmJtUmxaaWgyYm05a1pTa3BJSHRjYmlBZ0lDQWdJR2xtSUNocGMwUmxaaWh2YkdSV2JtOWtaU2twSUhzZ2FXNTJiMnRsUkdWemRISnZlVWh2YjJzb2IyeGtWbTV2WkdVcE95QjlYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2FYTkpibWwwYVdGc1VHRjBZMmdnUFNCbVlXeHpaVHRjYmlBZ0lDQjJZWElnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsSUQwZ1cxMDdYRzVjYmlBZ0lDQnBaaUFvYVhOVmJtUmxaaWh2YkdSV2JtOWtaU2twSUh0Y2JpQWdJQ0FnSUM4dklHVnRjSFI1SUcxdmRXNTBJQ2hzYVd0bGJIa2dZWE1nWTI5dGNHOXVaVzUwS1N3Z1kzSmxZWFJsSUc1bGR5QnliMjkwSUdWc1pXMWxiblJjYmlBZ0lDQWdJR2x6U1c1cGRHbGhiRkJoZEdOb0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdOeVpXRjBaVVZzYlNoMmJtOWtaU3dnYVc1elpYSjBaV1JXYm05a1pWRjFaWFZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkbUZ5SUdselVtVmhiRVZzWlcxbGJuUWdQU0JwYzBSbFppaHZiR1JXYm05a1pTNXViMlJsVkhsd1pTazdYRzRnSUNBZ0lDQnBaaUFvSVdselVtVmhiRVZzWlcxbGJuUWdKaVlnYzJGdFpWWnViMlJsS0c5c1pGWnViMlJsTENCMmJtOWtaU2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdjR0YwWTJnZ1pYaHBjM1JwYm1jZ2NtOXZkQ0J1YjJSbFhHNGdJQ0FnSUNBZ0lIQmhkR05vVm01dlpHVW9iMnhrVm01dlpHVXNJSFp1YjJSbExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXNJRzUxYkd3c0lHNTFiR3dzSUhKbGJXOTJaVTl1YkhrcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6VW1WaGJFVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCdGIzVnVkR2x1WnlCMGJ5QmhJSEpsWVd3Z1pXeGxiV1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JSFJvYVhNZ2FYTWdjMlZ5ZG1WeUxYSmxibVJsY21Wa0lHTnZiblJsYm5RZ1lXNWtJR2xtSUhkbElHTmhiaUJ3WlhKbWIzSnRYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1lTQnpkV05qWlhOelpuVnNJR2g1WkhKaGRHbHZiaTVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9iMnhrVm01dlpHVXVibTlrWlZSNWNHVWdQVDA5SURFZ0ppWWdiMnhrVm01dlpHVXVhR0Z6UVhSMGNtbGlkWFJsS0ZOVFVsOUJWRlJTS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJ4a1ZtNXZaR1V1Y21WdGIzWmxRWFIwY21saWRYUmxLRk5UVWw5QlZGUlNLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHaDVaSEpoZEdsdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMVJ5ZFdVb2FIbGtjbUYwYVc1bktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2g1WkhKaGRHVW9iMnhrVm01dlpHVXNJSFp1YjJSbExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2x1ZG05clpVbHVjMlZ5ZEVodmIyc29kbTV2WkdVc0lHbHVjMlZ5ZEdWa1ZtNXZaR1ZSZFdWMVpTd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2YkdSV2JtOWtaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJGeWJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5WR2hsSUdOc2FXVnVkQzF6YVdSbElISmxibVJsY21Wa0lIWnBjblIxWVd3Z1JFOU5JSFJ5WldVZ2FYTWdibTkwSUcxaGRHTm9hVzVuSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHpaWEoyWlhJdGNtVnVaR1Z5WldRZ1kyOXVkR1Z1ZEM0Z1ZHaHBjeUJwY3lCc2FXdGxiSGtnWTJGMWMyVmtJR0o1SUdsdVkyOXljbVZqZENBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5TRlJOVENCdFlYSnJkWEFzSUdadmNpQmxlR0Z0Y0d4bElHNWxjM1JwYm1jZ1lteHZZMnN0YkdWMlpXd2daV3hsYldWdWRITWdhVzV6YVdSbElDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M4Y0Q0c0lHOXlJRzFwYzNOcGJtY2dQSFJpYjJSNVBpNGdRbUZwYkdsdVp5Qm9lV1J5WVhScGIyNGdZVzVrSUhCbGNtWnZjbTFwYm1jZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMloxYkd3Z1kyeHBaVzUwTFhOcFpHVWdjbVZ1WkdWeUxpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1pXbDBhR1Z5SUc1dmRDQnpaWEoyWlhJdGNtVnVaR1Z5WldRc0lHOXlJR2g1WkhKaGRHbHZiaUJtWVdsc1pXUXVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1kzSmxZWFJsSUdGdUlHVnRjSFI1SUc1dlpHVWdZVzVrSUhKbGNHeGhZMlVnYVhSY2JpQWdJQ0FnSUNBZ0lDQnZiR1JXYm05a1pTQTlJR1Z0Y0hSNVRtOWtaVUYwS0c5c1pGWnViMlJsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUhKbGNHeGhZMmx1WnlCbGVHbHpkR2x1WnlCbGJHVnRaVzUwWEc0Z0lDQWdJQ0FnSUhaaGNpQnZiR1JGYkcwZ1BTQnZiR1JXYm05a1pTNWxiRzA3WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEpsYm5SRmJHMGdQU0J1YjJSbFQzQnpMbkJoY21WdWRFNXZaR1VvYjJ4a1JXeHRLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QmpjbVZoZEdVZ2JtVjNJRzV2WkdWY2JpQWdJQ0FnSUNBZ1kzSmxZWFJsUld4dEtGeHVJQ0FnSUNBZ0lDQWdJSFp1YjJSbExGeHVJQ0FnSUNBZ0lDQWdJR2x1YzJWeWRHVmtWbTV2WkdWUmRXVjFaU3hjYmlBZ0lDQWdJQ0FnSUNBdkx5QmxlSFJ5WlcxbGJIa2djbUZ5WlNCbFpHZGxJR05oYzJVNklHUnZJRzV2ZENCcGJuTmxjblFnYVdZZ2IyeGtJR1ZzWlcxbGJuUWdhWE1nYVc0Z1lWeHVJQ0FnSUNBZ0lDQWdJQzh2SUd4bFlYWnBibWNnZEhKaGJuTnBkR2x2Ymk0Z1QyNXNlU0JvWVhCd1pXNXpJSGRvWlc0Z1kyOXRZbWx1YVc1bklIUnlZVzV6YVhScGIyNGdLMXh1SUNBZ0lDQWdJQ0FnSUM4dklHdGxaWEF0WVd4cGRtVWdLeUJJVDBOekxpQW9JelExT1RBcFhHNGdJQ0FnSUNBZ0lDQWdiMnhrUld4dExsOXNaV0YyWlVOaUlEOGdiblZzYkNBNklIQmhjbVZ1ZEVWc2JTeGNiaUFnSUNBZ0lDQWdJQ0J1YjJSbFQzQnpMbTVsZUhSVGFXSnNhVzVuS0c5c1pFVnNiU2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUIxY0dSaGRHVWdjR0Z5Wlc1MElIQnNZV05sYUc5c1pHVnlJRzV2WkdVZ1pXeGxiV1Z1ZEN3Z2NtVmpkWEp6YVhabGJIbGNiaUFnSUNBZ0lDQWdhV1lnS0dselJHVm1LSFp1YjJSbExuQmhjbVZ1ZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ1lXNWpaWE4wYjNJZ1BTQjJibTlrWlM1d1lYSmxiblE3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSEJoZEdOb1lXSnNaU0E5SUdselVHRjBZMmhoWW14bEtIWnViMlJsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb1lXNWpaWE4wYjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1kySnpMbVJsYzNSeWIza3ViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJKekxtUmxjM1J5YjNsYmFWMG9ZVzVqWlhOMGIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1alpYTjBiM0l1Wld4dElEMGdkbTV2WkdVdVpXeHRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJoZEdOb1lXSnNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSkRFZ1BTQXdPeUJwSkRFZ1BDQmpZbk11WTNKbFlYUmxMbXhsYm1kMGFEc2dLeXRwSkRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZbk11WTNKbFlYUmxXMmtrTVYwb1pXMXdkSGxPYjJSbExDQmhibU5sYzNSdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJelkxTVROY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXNTJiMnRsSUdsdWMyVnlkQ0JvYjI5cmN5QjBhR0YwSUcxaGVTQm9ZWFpsSUdKbFpXNGdiV1Z5WjJWa0lHSjVJR055WldGMFpTQm9iMjlyY3k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pTNW5MaUJtYjNJZ1pHbHlaV04wYVhabGN5QjBhR0YwSUhWelpYTWdkR2hsSUZ3aWFXNXpaWEowWldSY0lpQm9iMjlyTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXNXpaWEowSUQwZ1lXNWpaWE4wYjNJdVpHRjBZUzVvYjI5ckxtbHVjMlZ5ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVjMlZ5ZEM1dFpYSm5aV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpkR0Z5ZENCaGRDQnBibVJsZUNBeElIUnZJR0YyYjJsa0lISmxMV2x1ZG05cmFXNW5JR052YlhCdmJtVnVkQ0J0YjNWdWRHVmtJR2h2YjJ0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcEpESWdQU0F4T3lCcEpESWdQQ0JwYm5ObGNuUXVabTV6TG14bGJtZDBhRHNnYVNReUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWMyVnlkQzVtYm5OYmFTUXlYU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm5hWE4wWlhKU1pXWW9ZVzVqWlhOMGIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1alpYTjBiM0lnUFNCaGJtTmxjM1J2Y2k1d1lYSmxiblE3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pHVnpkSEp2ZVNCdmJHUWdibTlrWlZ4dUlDQWdJQ0FnSUNCcFppQW9hWE5FWldZb2NHRnlaVzUwUld4dEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGJXOTJaVlp1YjJSbGN5aHdZWEpsYm5SRmJHMHNJRnR2YkdSV2JtOWtaVjBzSURBc0lEQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselJHVm1LRzlzWkZadWIyUmxMblJoWnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0JwYm5admEyVkVaWE4wY205NVNHOXZheWh2YkdSV2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwYm5admEyVkpibk5sY25SSWIyOXJLSFp1YjJSbExDQnBibk5sY25SbFpGWnViMlJsVVhWbGRXVXNJR2x6U1c1cGRHbGhiRkJoZEdOb0tUdGNiaUFnSUNCeVpYUjFjbTRnZG01dlpHVXVaV3h0WEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJrYVhKbFkzUnBkbVZ6SUQwZ2UxeHVJQ0JqY21WaGRHVTZJSFZ3WkdGMFpVUnBjbVZqZEdsMlpYTXNYRzRnSUhWd1pHRjBaVG9nZFhCa1lYUmxSR2x5WldOMGFYWmxjeXhjYmlBZ1pHVnpkSEp2ZVRvZ1puVnVZM1JwYjI0Z2RXNWlhVzVrUkdseVpXTjBhWFpsY3lBb2RtNXZaR1VwSUh0Y2JpQWdJQ0IxY0dSaGRHVkVhWEpsWTNScGRtVnpLSFp1YjJSbExDQmxiWEIwZVU1dlpHVXBPMXh1SUNCOVhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCMWNHUmhkR1ZFYVhKbFkzUnBkbVZ6SUNodmJHUldibTlrWlN3Z2RtNXZaR1VwSUh0Y2JpQWdhV1lnS0c5c1pGWnViMlJsTG1SaGRHRXVaR2x5WldOMGFYWmxjeUI4ZkNCMmJtOWtaUzVrWVhSaExtUnBjbVZqZEdsMlpYTXBJSHRjYmlBZ0lDQmZkWEJrWVhSbEtHOXNaRlp1YjJSbExDQjJibTlrWlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdYM1Z3WkdGMFpTQW9iMnhrVm01dlpHVXNJSFp1YjJSbEtTQjdYRzRnSUhaaGNpQnBjME55WldGMFpTQTlJRzlzWkZadWIyUmxJRDA5UFNCbGJYQjBlVTV2WkdVN1hHNGdJSFpoY2lCcGMwUmxjM1J5YjNrZ1BTQjJibTlrWlNBOVBUMGdaVzF3ZEhsT2IyUmxPMXh1SUNCMllYSWdiMnhrUkdseWN5QTlJRzV2Y20xaGJHbDZaVVJwY21WamRHbDJaWE1rTVNodmJHUldibTlrWlM1a1lYUmhMbVJwY21WamRHbDJaWE1zSUc5c1pGWnViMlJsTG1OdmJuUmxlSFFwTzF4dUlDQjJZWElnYm1WM1JHbHljeUE5SUc1dmNtMWhiR2w2WlVScGNtVmpkR2wyWlhNa01TaDJibTlrWlM1a1lYUmhMbVJwY21WamRHbDJaWE1zSUhadWIyUmxMbU52Ym5SbGVIUXBPMXh1WEc0Z0lIWmhjaUJrYVhKelYybDBhRWx1YzJWeWRDQTlJRnRkTzF4dUlDQjJZWElnWkdseWMxZHBkR2hRYjNOMGNHRjBZMmdnUFNCYlhUdGNibHh1SUNCMllYSWdhMlY1TENCdmJHUkVhWElzSUdScGNqdGNiaUFnWm05eUlDaHJaWGtnYVc0Z2JtVjNSR2x5Y3lrZ2UxeHVJQ0FnSUc5c1pFUnBjaUE5SUc5c1pFUnBjbk5iYTJWNVhUdGNiaUFnSUNCa2FYSWdQU0J1WlhkRWFYSnpXMnRsZVYwN1hHNGdJQ0FnYVdZZ0tDRnZiR1JFYVhJcElIdGNiaUFnSUNBZ0lDOHZJRzVsZHlCa2FYSmxZM1JwZG1Vc0lHSnBibVJjYmlBZ0lDQWdJR05oYkd4SWIyOXJKREVvWkdseUxDQW5ZbWx1WkNjc0lIWnViMlJsTENCdmJHUldibTlrWlNrN1hHNGdJQ0FnSUNCcFppQW9aR2x5TG1SbFppQW1KaUJrYVhJdVpHVm1MbWx1YzJWeWRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUdScGNuTlhhWFJvU1c1elpYSjBMbkIxYzJnb1pHbHlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdaWGhwYzNScGJtY2daR2x5WldOMGFYWmxMQ0IxY0dSaGRHVmNiaUFnSUNBZ0lHUnBjaTV2YkdSV1lXeDFaU0E5SUc5c1pFUnBjaTUyWVd4MVpUdGNiaUFnSUNBZ0lHUnBjaTV2YkdSQmNtY2dQU0J2YkdSRWFYSXVZWEpuTzF4dUlDQWdJQ0FnWTJGc2JFaHZiMnNrTVNoa2FYSXNJQ2QxY0dSaGRHVW5MQ0IyYm05a1pTd2diMnhrVm01dlpHVXBPMXh1SUNBZ0lDQWdhV1lnS0dScGNpNWtaV1lnSmlZZ1pHbHlMbVJsWmk1amIyMXdiMjVsYm5SVmNHUmhkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lHUnBjbk5YYVhSb1VHOXpkSEJoZEdOb0xuQjFjMmdvWkdseUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBaaUFvWkdseWMxZHBkR2hKYm5ObGNuUXViR1Z1WjNSb0tTQjdYRzRnSUNBZ2RtRnlJR05oYkd4SmJuTmxjblFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1JwY25OWGFYUm9TVzV6WlhKMExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdOaGJHeEliMjlySkRFb1pHbHljMWRwZEdoSmJuTmxjblJiYVYwc0lDZHBibk5sY25SbFpDY3NJSFp1YjJSbExDQnZiR1JXYm05a1pTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCcFppQW9hWE5EY21WaGRHVXBJSHRjYmlBZ0lDQWdJRzFsY21kbFZrNXZaR1ZJYjI5cktIWnViMlJsTENBbmFXNXpaWEowSnl3Z1kyRnNiRWx1YzJWeWRDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdOaGJHeEpibk5sY25Rb0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBaaUFvWkdseWMxZHBkR2hRYjNOMGNHRjBZMmd1YkdWdVozUm9LU0I3WEc0Z0lDQWdiV1Z5WjJWV1RtOWtaVWh2YjJzb2RtNXZaR1VzSUNkd2IzTjBjR0YwWTJnbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdScGNuTlhhWFJvVUc5emRIQmhkR05vTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR05oYkd4SWIyOXJKREVvWkdseWMxZHBkR2hRYjNOMGNHRjBZMmhiYVYwc0lDZGpiMjF3YjI1bGJuUlZjR1JoZEdWa0p5d2dkbTV2WkdVc0lHOXNaRlp1YjJSbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJR2xtSUNnaGFYTkRjbVZoZEdVcElIdGNiaUFnSUNCbWIzSWdLR3RsZVNCcGJpQnZiR1JFYVhKektTQjdYRzRnSUNBZ0lDQnBaaUFvSVc1bGQwUnBjbk5iYTJWNVhTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCdWJ5QnNiMjVuWlhJZ2NISmxjMlZ1ZEN3Z2RXNWlhVzVrWEc0Z0lDQWdJQ0FnSUdOaGJHeEliMjlySkRFb2IyeGtSR2x5YzF0clpYbGRMQ0FuZFc1aWFXNWtKeXdnYjJ4a1ZtNXZaR1VzSUc5c1pGWnViMlJsTENCcGMwUmxjM1J5YjNrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNTJZWElnWlcxd2RIbE5iMlJwWm1sbGNuTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dVhHNW1kVzVqZEdsdmJpQnViM0p0WVd4cGVtVkVhWEpsWTNScGRtVnpKREVnS0Z4dUlDQmthWEp6TEZ4dUlDQjJiVnh1S1NCN1hHNGdJSFpoY2lCeVpYTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dUlDQnBaaUFvSVdScGNuTXBJSHRjYmlBZ0lDQXZMeUFrWm14dmR5MWthWE5oWW14bExXeHBibVZjYmlBZ0lDQnlaWFIxY200Z2NtVnpYRzRnSUgxY2JpQWdkbUZ5SUdrc0lHUnBjanRjYmlBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUdScGNuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0JrYVhJZ1BTQmthWEp6VzJsZE8xeHVJQ0FnSUdsbUlDZ2haR2x5TG0xdlpHbG1hV1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0x5OGdKR1pzYjNjdFpHbHpZV0pzWlMxc2FXNWxYRzRnSUNBZ0lDQmthWEl1Ylc5a2FXWnBaWEp6SUQwZ1pXMXdkSGxOYjJScFptbGxjbk03WEc0Z0lDQWdmVnh1SUNBZ0lISmxjMXRuWlhSU1lYZEVhWEpPWVcxbEtHUnBjaWxkSUQwZ1pHbHlPMXh1SUNBZ0lHUnBjaTVrWldZZ1BTQnlaWE52YkhabFFYTnpaWFFvZG0wdUpHOXdkR2x2Ym5Nc0lDZGthWEpsWTNScGRtVnpKeXdnWkdseUxtNWhiV1VzSUhSeWRXVXBPMXh1SUNCOVhHNGdJQzh2SUNSbWJHOTNMV1JwYzJGaWJHVXRiR2x1WlZ4dUlDQnlaWFIxY200Z2NtVnpYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRkpoZDBScGNrNWhiV1VnS0dScGNpa2dlMXh1SUNCeVpYUjFjbTRnWkdseUxuSmhkMDVoYldVZ2ZId2dLQ2hrYVhJdWJtRnRaU2tnS3lCY0lpNWNJaUFySUNoUFltcGxZM1F1YTJWNWN5aGthWEl1Ylc5a2FXWnBaWEp6SUh4OElIdDlLUzVxYjJsdUtDY3VKeWtwS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJqWVd4c1NHOXZheVF4SUNoa2FYSXNJR2h2YjJzc0lIWnViMlJsTENCdmJHUldibTlrWlN3Z2FYTkVaWE4wY205NUtTQjdYRzRnSUhaaGNpQm1iaUE5SUdScGNpNWtaV1lnSmlZZ1pHbHlMbVJsWmx0b2IyOXJYVHRjYmlBZ2FXWWdLR1p1S1NCN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lHWnVLSFp1YjJSbExtVnNiU3dnWkdseUxDQjJibTlrWlN3Z2IyeGtWbTV2WkdVc0lHbHpSR1Z6ZEhKdmVTazdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdhR0Z1Wkd4bFJYSnliM0lvWlN3Z2RtNXZaR1V1WTI5dWRHVjRkQ3dnS0Z3aVpHbHlaV04wYVhabElGd2lJQ3NnS0dScGNpNXVZVzFsS1NBcklGd2lJRndpSUNzZ2FHOXZheUFySUZ3aUlHaHZiMnRjSWlrcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNTJZWElnWW1GelpVMXZaSFZzWlhNZ1BTQmJYRzRnSUhKbFppeGNiaUFnWkdseVpXTjBhWFpsYzF4dVhUdGNibHh1THlvZ0lDb3ZYRzVjYm1aMWJtTjBhVzl1SUhWd1pHRjBaVUYwZEhKeklDaHZiR1JXYm05a1pTd2dkbTV2WkdVcElIdGNiaUFnZG1GeUlHOXdkSE1nUFNCMmJtOWtaUzVqYjIxd2IyNWxiblJQY0hScGIyNXpPMXh1SUNCcFppQW9hWE5FWldZb2IzQjBjeWtnSmlZZ2IzQjBjeTVEZEc5eUxtOXdkR2x2Ym5NdWFXNW9aWEpwZEVGMGRISnpJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc0Z0lHbG1JQ2hwYzFWdVpHVm1LRzlzWkZadWIyUmxMbVJoZEdFdVlYUjBjbk1wSUNZbUlHbHpWVzVrWldZb2RtNXZaR1V1WkdGMFlTNWhkSFJ5Y3lrcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0IyWVhJZ2EyVjVMQ0JqZFhJc0lHOXNaRHRjYmlBZ2RtRnlJR1ZzYlNBOUlIWnViMlJsTG1Wc2JUdGNiaUFnZG1GeUlHOXNaRUYwZEhKeklEMGdiMnhrVm01dlpHVXVaR0YwWVM1aGRIUnljeUI4ZkNCN2ZUdGNiaUFnZG1GeUlHRjBkSEp6SUQwZ2RtNXZaR1V1WkdGMFlTNWhkSFJ5Y3lCOGZDQjdmVHRjYmlBZ0x5OGdZMnh2Ym1VZ2IySnpaWEoyWldRZ2IySnFaV04wY3l3Z1lYTWdkR2hsSUhWelpYSWdjSEp2WW1GaWJIa2dkMkZ1ZEhNZ2RHOGdiWFYwWVhSbElHbDBYRzRnSUdsbUlDaHBjMFJsWmloaGRIUnljeTVmWDI5aVgxOHBLU0I3WEc0Z0lDQWdZWFIwY25NZ1BTQjJibTlrWlM1a1lYUmhMbUYwZEhKeklEMGdaWGgwWlc1a0tIdDlMQ0JoZEhSeWN5azdYRzRnSUgxY2JseHVJQ0JtYjNJZ0tHdGxlU0JwYmlCaGRIUnljeWtnZTF4dUlDQWdJR04xY2lBOUlHRjBkSEp6VzJ0bGVWMDdYRzRnSUNBZ2IyeGtJRDBnYjJ4a1FYUjBjbk5iYTJWNVhUdGNiaUFnSUNCcFppQW9iMnhrSUNFOVBTQmpkWElwSUh0Y2JpQWdJQ0FnSUhObGRFRjBkSElvWld4dExDQnJaWGtzSUdOMWNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lDOHZJQ00wTXpreE9pQnBiaUJKUlRrc0lITmxkSFJwYm1jZ2RIbHdaU0JqWVc0Z2NtVnpaWFFnZG1Gc2RXVWdabTl5SUdsdWNIVjBXM1I1Y0dVOWNtRmthVzlkWEc0Z0lDOHZJQ00yTmpZMk9pQkpSUzlGWkdkbElHWnZjbU5sY3lCd2NtOW5jbVZ6Y3lCMllXeDFaU0JrYjNkdUlIUnZJREVnWW1WbWIzSmxJSE5sZEhScGJtY2dZU0J0WVhoY2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJR2xtSUNnb2FYTkpSU0I4ZkNCcGMwVmtaMlVwSUNZbUlHRjBkSEp6TG5aaGJIVmxJQ0U5UFNCdmJHUkJkSFJ5Y3k1MllXeDFaU2tnZTF4dUlDQWdJSE5sZEVGMGRISW9aV3h0TENBbmRtRnNkV1VuTENCaGRIUnljeTUyWVd4MVpTazdYRzRnSUgxY2JpQWdabTl5SUNoclpYa2dhVzRnYjJ4a1FYUjBjbk1wSUh0Y2JpQWdJQ0JwWmlBb2FYTlZibVJsWmloaGRIUnljMXRyWlhsZEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0dseldHeHBibXNvYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0JsYkcwdWNtVnRiM1psUVhSMGNtbGlkWFJsVGxNb2VHeHBibXRPVXl3Z1oyVjBXR3hwYm10UWNtOXdLR3RsZVNrcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hhWE5GYm5WdFpYSmhkR1ZrUVhSMGNpaHJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lHVnNiUzV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9hMlY1S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyVjBRWFIwY2lBb1pXd3NJR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0dWc0xuUmhaMDVoYldVdWFXNWtaWGhQWmlnbkxTY3BJRDRnTFRFcElIdGNiaUFnSUNCaVlYTmxVMlYwUVhSMGNpaGxiQ3dnYTJWNUxDQjJZV3gxWlNrN1hHNGdJSDBnWld4elpTQnBaaUFvYVhOQ2IyOXNaV0Z1UVhSMGNpaHJaWGtwS1NCN1hHNGdJQ0FnTHk4Z2MyVjBJR0YwZEhKcFluVjBaU0JtYjNJZ1lteGhibXNnZG1Gc2RXVmNiaUFnSUNBdkx5QmxMbWN1SUR4dmNIUnBiMjRnWkdsellXSnNaV1ErVTJWc1pXTjBJRzl1WlR3dmIzQjBhVzl1UGx4dUlDQWdJR2xtSUNocGMwWmhiSE41UVhSMGNsWmhiSFZsS0haaGJIVmxLU2tnZTF4dUlDQWdJQ0FnWld3dWNtVnRiM1psUVhSMGNtbGlkWFJsS0d0bGVTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklIUmxZMmh1YVdOaGJHeDVJR0ZzYkc5M1puVnNiSE5qY21WbGJpQnBjeUJoSUdKdmIyeGxZVzRnWVhSMGNtbGlkWFJsSUdadmNpQThhV1p5WVcxbFBpeGNiaUFnSUNBZ0lDOHZJR0oxZENCR2JHRnphQ0JsZUhCbFkzUnpJR0VnZG1Gc2RXVWdiMllnWENKMGNuVmxYQ0lnZDJobGJpQjFjMlZrSUc5dUlEeGxiV0psWkQ0Z2RHRm5YRzRnSUNBZ0lDQjJZV3gxWlNBOUlHdGxlU0E5UFQwZ0oyRnNiRzkzWm5Wc2JITmpjbVZsYmljZ0ppWWdaV3d1ZEdGblRtRnRaU0E5UFQwZ0owVk5Ra1ZFSjF4dUlDQWdJQ0FnSUNBL0lDZDBjblZsSjF4dUlDQWdJQ0FnSUNBNklHdGxlVHRjYmlBZ0lDQWdJR1ZzTG5ObGRFRjBkSEpwWW5WMFpTaHJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb2FYTkZiblZ0WlhKaGRHVmtRWFIwY2loclpYa3BLU0I3WEc0Z0lDQWdaV3d1YzJWMFFYUjBjbWxpZFhSbEtHdGxlU3dnWTI5dWRtVnlkRVZ1ZFcxbGNtRjBaV1JXWVd4MVpTaHJaWGtzSUhaaGJIVmxLU2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9hWE5ZYkdsdWF5aHJaWGtwS1NCN1hHNGdJQ0FnYVdZZ0tHbHpSbUZzYzNsQmRIUnlWbUZzZFdVb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCbGJDNXlaVzF2ZG1WQmRIUnlhV0oxZEdWT1V5aDRiR2x1YTA1VExDQm5aWFJZYkdsdWExQnliM0FvYTJWNUtTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWc0xuTmxkRUYwZEhKcFluVjBaVTVUS0hoc2FXNXJUbE1zSUd0bGVTd2dkbUZzZFdVcE8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCaVlYTmxVMlYwUVhSMGNpaGxiQ3dnYTJWNUxDQjJZV3gxWlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZbUZ6WlZObGRFRjBkSElnS0dWc0xDQnJaWGtzSUhaaGJIVmxLU0I3WEc0Z0lHbG1JQ2hwYzBaaGJITjVRWFIwY2xaaGJIVmxLSFpoYkhWbEtTa2dlMXh1SUNBZ0lHVnNMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaHJaWGtwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUM4dklDTTNNVE00T2lCSlJURXdJQ1lnTVRFZ1ptbHlaWE1nYVc1d2RYUWdaWFpsYm5RZ2QyaGxiaUJ6WlhSMGFXNW5JSEJzWVdObGFHOXNaR1Z5SUc5dVhHNGdJQ0FnTHk4Z1BIUmxlSFJoY21WaFBpNHVMaUJpYkc5amF5QjBhR1VnWm1seWMzUWdhVzV3ZFhRZ1pYWmxiblFnWVc1a0lISmxiVzkyWlNCMGFHVWdZbXh2WTJ0bGNseHVJQ0FnSUM4dklHbHRiV1ZrYVdGMFpXeDVMbHh1SUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUdselNVVWdKaVlnSVdselNVVTVJQ1ltWEc0Z0lDQWdJQ0JsYkM1MFlXZE9ZVzFsSUQwOVBTQW5WRVZZVkVGU1JVRW5JQ1ltWEc0Z0lDQWdJQ0JyWlhrZ1BUMDlJQ2R3YkdGalpXaHZiR1JsY2ljZ0ppWWdkbUZzZFdVZ0lUMDlJQ2NuSUNZbUlDRmxiQzVmWDJsbGNHaGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lIWmhjaUJpYkc5amEyVnlJRDBnWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lDQWdaUzV6ZEc5d1NXMXRaV1JwWVhSbFVISnZjR0ZuWVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnWld3dWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25hVzV3ZFhRbkxDQmliRzlqYTJWeUtUdGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ0lDQmxiQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RwYm5CMWRDY3NJR0pzYjJOclpYSXBPMXh1SUNBZ0lDQWdMeThnSkdac2IzY3RaR2x6WVdKc1pTMXNhVzVsWEc0Z0lDQWdJQ0JsYkM1ZlgybGxjR2dnUFNCMGNuVmxPeUF2S2lCSlJTQndiR0ZqWldodmJHUmxjaUJ3WVhSamFHVmtJQ292WEc0Z0lDQWdmVnh1SUNBZ0lHVnNMbk5sZEVGMGRISnBZblYwWlNoclpYa3NJSFpoYkhWbEtUdGNiaUFnZlZ4dWZWeHVYRzUyWVhJZ1lYUjBjbk1nUFNCN1hHNGdJR055WldGMFpUb2dkWEJrWVhSbFFYUjBjbk1zWEc0Z0lIVndaR0YwWlRvZ2RYQmtZWFJsUVhSMGNuTmNibjA3WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQjFjR1JoZEdWRGJHRnpjeUFvYjJ4a1ZtNXZaR1VzSUhadWIyUmxLU0I3WEc0Z0lIWmhjaUJsYkNBOUlIWnViMlJsTG1Wc2JUdGNiaUFnZG1GeUlHUmhkR0VnUFNCMmJtOWtaUzVrWVhSaE8xeHVJQ0IyWVhJZ2IyeGtSR0YwWVNBOUlHOXNaRlp1YjJSbExtUmhkR0U3WEc0Z0lHbG1JQ2hjYmlBZ0lDQnBjMVZ1WkdWbUtHUmhkR0V1YzNSaGRHbGpRMnhoYzNNcElDWW1YRzRnSUNBZ2FYTlZibVJsWmloa1lYUmhMbU5zWVhOektTQW1KaUFvWEc0Z0lDQWdJQ0JwYzFWdVpHVm1LRzlzWkVSaGRHRXBJSHg4SUNoY2JpQWdJQ0FnSUNBZ2FYTlZibVJsWmlodmJHUkVZWFJoTG5OMFlYUnBZME5zWVhOektTQW1KbHh1SUNBZ0lDQWdJQ0JwYzFWdVpHVm1LRzlzWkVSaGRHRXVZMnhoYzNNcFhHNGdJQ0FnSUNBcFhHNGdJQ0FnS1Z4dUlDQXBJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1WEc0Z0lIWmhjaUJqYkhNZ1BTQm5aVzVEYkdGemMwWnZjbFp1YjJSbEtIWnViMlJsS1R0Y2JseHVJQ0F2THlCb1lXNWtiR1VnZEhKaGJuTnBkR2x2YmlCamJHRnpjMlZ6WEc0Z0lIWmhjaUIwY21GdWMybDBhVzl1UTJ4aGMzTWdQU0JsYkM1ZmRISmhibk5wZEdsdmJrTnNZWE56WlhNN1hHNGdJR2xtSUNocGMwUmxaaWgwY21GdWMybDBhVzl1UTJ4aGMzTXBLU0I3WEc0Z0lDQWdZMnh6SUQwZ1kyOXVZMkYwS0dOc2N5d2djM1J5YVc1bmFXWjVRMnhoYzNNb2RISmhibk5wZEdsdmJrTnNZWE56S1NrN1hHNGdJSDFjYmx4dUlDQXZMeUJ6WlhRZ2RHaGxJR05zWVhOelhHNGdJR2xtSUNoamJITWdJVDA5SUdWc0xsOXdjbVYyUTJ4aGMzTXBJSHRjYmlBZ0lDQmxiQzV6WlhSQmRIUnlhV0oxZEdVb0oyTnNZWE56Snl3Z1kyeHpLVHRjYmlBZ0lDQmxiQzVmY0hKbGRrTnNZWE56SUQwZ1kyeHpPMXh1SUNCOVhHNTlYRzVjYm5aaGNpQnJiR0Z6Y3lBOUlIdGNiaUFnWTNKbFlYUmxPaUIxY0dSaGRHVkRiR0Z6Y3l4Y2JpQWdkWEJrWVhSbE9pQjFjR1JoZEdWRGJHRnpjMXh1ZlR0Y2JseHVMeW9nSUNvdlhHNWNiblpoY2lCMllXeHBaRVJwZG1semFXOXVRMmhoY2xKRklEMGdMMXRjWEhjcExpdGNYQzFmSkZ4Y1hWMHZPMXh1WEc1bWRXNWpkR2x2YmlCd1lYSnpaVVpwYkhSbGNuTWdLR1Y0Y0NrZ2UxeHVJQ0IyWVhJZ2FXNVRhVzVuYkdVZ1BTQm1ZV3h6WlR0Y2JpQWdkbUZ5SUdsdVJHOTFZbXhsSUQwZ1ptRnNjMlU3WEc0Z0lIWmhjaUJwYmxSbGJYQnNZWFJsVTNSeWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUhaaGNpQnBibEpsWjJWNElEMGdabUZzYzJVN1hHNGdJSFpoY2lCamRYSnNlU0E5SURBN1hHNGdJSFpoY2lCemNYVmhjbVVnUFNBd08xeHVJQ0IyWVhJZ2NHRnlaVzRnUFNBd08xeHVJQ0IyWVhJZ2JHRnpkRVpwYkhSbGNrbHVaR1Y0SUQwZ01EdGNiaUFnZG1GeUlHTXNJSEJ5WlhZc0lHa3NJR1Y0Y0hKbGMzTnBiMjRzSUdacGJIUmxjbk03WEc1Y2JpQWdabTl5SUNocElEMGdNRHNnYVNBOElHVjRjQzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUhCeVpYWWdQU0JqTzF4dUlDQWdJR01nUFNCbGVIQXVZMmhoY2tOdlpHVkJkQ2hwS1R0Y2JpQWdJQ0JwWmlBb2FXNVRhVzVuYkdVcElIdGNiaUFnSUNBZ0lHbG1JQ2hqSUQwOVBTQXdlREkzSUNZbUlIQnlaWFlnSVQwOUlEQjROVU1wSUhzZ2FXNVRhVzVuYkdVZ1BTQm1ZV3h6WlRzZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FXNUViM1ZpYkdVcElIdGNiaUFnSUNBZ0lHbG1JQ2hqSUQwOVBTQXdlREl5SUNZbUlIQnlaWFlnSVQwOUlEQjROVU1wSUhzZ2FXNUViM1ZpYkdVZ1BTQm1ZV3h6WlRzZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FXNVVaVzF3YkdGMFpWTjBjbWx1WnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLR01nUFQwOUlEQjROakFnSmlZZ2NISmxkaUFoUFQwZ01IZzFReWtnZXlCcGJsUmxiWEJzWVhSbFUzUnlhVzVuSUQwZ1ptRnNjMlU3SUgxY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dsdVVtVm5aWGdwSUh0Y2JpQWdJQ0FnSUdsbUlDaGpJRDA5UFNBd2VESm1JQ1ltSUhCeVpYWWdJVDA5SURCNE5VTXBJSHNnYVc1U1pXZGxlQ0E5SUdaaGJITmxPeUI5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hjYmlBZ0lDQWdJR01nUFQwOUlEQjROME1nSmlZZ0x5OGdjR2x3WlZ4dUlDQWdJQ0FnWlhod0xtTm9ZWEpEYjJSbFFYUW9hU0FySURFcElDRTlQU0F3ZURkRElDWW1YRzRnSUNBZ0lDQmxlSEF1WTJoaGNrTnZaR1ZCZENocElDMGdNU2tnSVQwOUlEQjROME1nSmlaY2JpQWdJQ0FnSUNGamRYSnNlU0FtSmlBaGMzRjFZWEpsSUNZbUlDRndZWEpsYmx4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tHVjRjSEpsYzNOcGIyNGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJtYVhKemRDQm1hV3gwWlhJc0lHVnVaQ0J2WmlCbGVIQnlaWE56YVc5dVhHNGdJQ0FnSUNBZ0lHeGhjM1JHYVd4MFpYSkpibVJsZUNBOUlHa2dLeUF4TzF4dUlDQWdJQ0FnSUNCbGVIQnlaWE56YVc5dUlEMGdaWGh3TG5Oc2FXTmxLREFzSUdrcExuUnlhVzBvS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhCMWMyaEdhV3gwWlhJb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYzNkcGRHTm9JQ2hqS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnTUhneU1qb2dhVzVFYjNWaWJHVWdQU0IwY25WbE95QmljbVZoYXlBZ0lDQWdJQ0FnSUM4dklGd2lYRzRnSUNBZ0lDQWdJR05oYzJVZ01IZ3lOem9nYVc1VGFXNW5iR1VnUFNCMGNuVmxPeUJpY21WaGF5QWdJQ0FnSUNBZ0lDOHZJQ2RjYmlBZ0lDQWdJQ0FnWTJGelpTQXdlRFl3T2lCcGJsUmxiWEJzWVhSbFUzUnlhVzVuSUQwZ2RISjFaVHNnWW5KbFlXc2dMeThnWUZ4dUlDQWdJQ0FnSUNCallYTmxJREI0TWpnNklIQmhjbVZ1S3lzN0lHSnlaV0ZySUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBb1hHNGdJQ0FnSUNBZ0lHTmhjMlVnTUhneU9Ub2djR0Z5Wlc0dExUc2dZbkpsWVdzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDbGNiaUFnSUNBZ0lDQWdZMkZ6WlNBd2VEVkNPaUJ6Y1hWaGNtVXJLenNnWW5KbFlXc2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdXMXh1SUNBZ0lDQWdJQ0JqWVhObElEQjROVVE2SUhOeGRXRnlaUzB0T3lCaWNtVmhheUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJkWEc0Z0lDQWdJQ0FnSUdOaGMyVWdNSGczUWpvZ1kzVnliSGtyS3pzZ1luSmxZV3NnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0F3ZURkRU9pQmpkWEpzZVMwdE95QmljbVZoYXlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR01nUFQwOUlEQjRNbVlwSUhzZ0x5OGdMMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FpQTlJR2tnTFNBeE8xeHVJQ0FnSUNBZ0lDQjJZWElnY0NBOUlDaDJiMmxrSURBcE8xeHVJQ0FnSUNBZ0lDQXZMeUJtYVc1a0lHWnBjbk4wSUc1dmJpMTNhR2wwWlhOd1lXTmxJSEJ5WlhZZ1kyaGhjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tEc2dhaUErUFNBd095QnFMUzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQndJRDBnWlhod0xtTm9ZWEpCZENocUtUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2NDQWhQVDBnSnlBbktTQjdJR0p5WldGcklIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYQWdmSHdnSVhaaGJHbGtSR2wyYVhOcGIyNURhR0Z5VWtVdWRHVnpkQ2h3S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2x1VW1WblpYZ2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdhV1lnS0dWNGNISmxjM05wYjI0Z1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJR1Y0Y0hKbGMzTnBiMjRnUFNCbGVIQXVjMnhwWTJVb01Dd2dhU2t1ZEhKcGJTZ3BPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHeGhjM1JHYVd4MFpYSkpibVJsZUNBaFBUMGdNQ2tnZTF4dUlDQWdJSEIxYzJoR2FXeDBaWElvS1R0Y2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlIQjFjMmhHYVd4MFpYSWdLQ2tnZTF4dUlDQWdJQ2htYVd4MFpYSnpJSHg4SUNobWFXeDBaWEp6SUQwZ1cxMHBLUzV3ZFhOb0tHVjRjQzV6YkdsalpTaHNZWE4wUm1sc2RHVnlTVzVrWlhnc0lHa3BMblJ5YVcwb0tTazdYRzRnSUNBZ2JHRnpkRVpwYkhSbGNrbHVaR1Y0SUQwZ2FTQXJJREU3WEc0Z0lIMWNibHh1SUNCcFppQW9abWxzZEdWeWN5a2dlMXh1SUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCbWFXeDBaWEp6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQmxlSEJ5WlhOemFXOXVJRDBnZDNKaGNFWnBiSFJsY2lobGVIQnlaWE56YVc5dUxDQm1hV3gwWlhKelcybGRLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdaWGh3Y21WemMybHZibHh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjNjbUZ3Um1sc2RHVnlJQ2hsZUhBc0lHWnBiSFJsY2lrZ2UxeHVJQ0IyWVhJZ2FTQTlJR1pwYkhSbGNpNXBibVJsZUU5bUtDY29KeWs3WEc0Z0lHbG1JQ2hwSUR3Z01Da2dlMXh1SUNBZ0lDOHZJRjltT2lCeVpYTnZiSFpsUm1sc2RHVnlYRzRnSUNBZ2NtVjBkWEp1SUNoY0lsOW1LRnhjWENKY0lpQXJJR1pwYkhSbGNpQXJJRndpWEZ4Y0lpa29YQ0lnS3lCbGVIQWdLeUJjSWlsY0lpbGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjJZWElnYm1GdFpTQTlJR1pwYkhSbGNpNXpiR2xqWlNnd0xDQnBLVHRjYmlBZ0lDQjJZWElnWVhKbmN5QTlJR1pwYkhSbGNpNXpiR2xqWlNocElDc2dNU2s3WEc0Z0lDQWdjbVYwZFhKdUlDaGNJbDltS0Z4Y1hDSmNJaUFySUc1aGJXVWdLeUJjSWx4Y1hDSXBLRndpSUNzZ1pYaHdJQ3NnS0dGeVozTWdJVDA5SUNjcEp5QS9JQ2NzSnlBcklHRnlaM01nT2lCaGNtZHpLU2xjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dVhHNWNiaThxSUdWemJHbHVkQzFrYVhOaFlteGxJRzV2TFhWdWRYTmxaQzEyWVhKeklDb3ZYRzVtZFc1amRHbHZiaUJpWVhObFYyRnliaUFvYlhObkxDQnlZVzVuWlNrZ2UxeHVJQ0JqYjI1emIyeGxMbVZ5Y205eUtDaGNJbHRXZFdVZ1kyOXRjR2xzWlhKZE9pQmNJaUFySUcxelp5a3BPMXh1ZlZ4dUx5b2daWE5zYVc1MExXVnVZV0pzWlNCdWJ5MTFiblZ6WldRdGRtRnljeUFxTDF4dVhHNW1kVzVqZEdsdmJpQndiSFZqYTAxdlpIVnNaVVoxYm1OMGFXOXVJQ2hjYmlBZ2JXOWtkV3hsY3l4Y2JpQWdhMlY1WEc0cElIdGNiaUFnY21WMGRYSnVJRzF2WkhWc1pYTmNiaUFnSUNBL0lHMXZaSFZzWlhNdWJXRndLR1oxYm1OMGFXOXVJQ2h0S1NCN0lISmxkSFZ5YmlCdFcydGxlVjA3SUgwcExtWnBiSFJsY2lobWRXNWpkR2x2YmlBb1h5a2dleUJ5WlhSMWNtNGdYenNnZlNsY2JpQWdJQ0E2SUZ0ZFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdGa1pGQnliM0FnS0dWc0xDQnVZVzFsTENCMllXeDFaU3dnY21GdVoyVXNJR1I1Ym1GdGFXTXBJSHRjYmlBZ0tHVnNMbkJ5YjNCeklIeDhJQ2hsYkM1d2NtOXdjeUE5SUZ0ZEtTa3VjSFZ6YUNoeVlXNW5aVk5sZEVsMFpXMG9leUJ1WVcxbE9pQnVZVzFsTENCMllXeDFaVG9nZG1Gc2RXVXNJR1I1Ym1GdGFXTTZJR1I1Ym1GdGFXTWdmU3dnY21GdVoyVXBLVHRjYmlBZ1pXd3VjR3hoYVc0Z1BTQm1ZV3h6WlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWVdSa1FYUjBjaUFvWld3c0lHNWhiV1VzSUhaaGJIVmxMQ0J5WVc1blpTd2daSGx1WVcxcFl5a2dlMXh1SUNCMllYSWdZWFIwY25NZ1BTQmtlVzVoYldsalhHNGdJQ0FnUHlBb1pXd3VaSGx1WVcxcFkwRjBkSEp6SUh4OElDaGxiQzVrZVc1aGJXbGpRWFIwY25NZ1BTQmJYU2twWEc0Z0lDQWdPaUFvWld3dVlYUjBjbk1nZkh3Z0tHVnNMbUYwZEhKeklEMGdXMTBwS1R0Y2JpQWdZWFIwY25NdWNIVnphQ2h5WVc1blpWTmxkRWwwWlcwb2V5QnVZVzFsT2lCdVlXMWxMQ0IyWVd4MVpUb2dkbUZzZFdVc0lHUjVibUZ0YVdNNklHUjVibUZ0YVdNZ2ZTd2djbUZ1WjJVcEtUdGNiaUFnWld3dWNHeGhhVzRnUFNCbVlXeHpaVHRjYm4xY2JseHVMeThnWVdSa0lHRWdjbUYzSUdGMGRISWdLSFZ6WlNCMGFHbHpJR2x1SUhCeVpWUnlZVzV6Wm05eWJYTXBYRzVtZFc1amRHbHZiaUJoWkdSU1lYZEJkSFJ5SUNobGJDd2dibUZ0WlN3Z2RtRnNkV1VzSUhKaGJtZGxLU0I3WEc0Z0lHVnNMbUYwZEhKelRXRndXMjVoYldWZElEMGdkbUZzZFdVN1hHNGdJR1ZzTG1GMGRISnpUR2x6ZEM1d2RYTm9LSEpoYm1kbFUyVjBTWFJsYlNoN0lHNWhiV1U2SUc1aGJXVXNJSFpoYkhWbE9pQjJZV3gxWlNCOUxDQnlZVzVuWlNrcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaFpHUkVhWEpsWTNScGRtVWdLRnh1SUNCbGJDeGNiaUFnYm1GdFpTeGNiaUFnY21GM1RtRnRaU3hjYmlBZ2RtRnNkV1VzWEc0Z0lHRnlaeXhjYmlBZ2FYTkVlVzVoYldsalFYSm5MRnh1SUNCdGIyUnBabWxsY25Nc1hHNGdJSEpoYm1kbFhHNHBJSHRjYmlBZ0tHVnNMbVJwY21WamRHbDJaWE1nZkh3Z0tHVnNMbVJwY21WamRHbDJaWE1nUFNCYlhTa3BMbkIxYzJnb2NtRnVaMlZUWlhSSmRHVnRLSHRjYmlBZ0lDQnVZVzFsT2lCdVlXMWxMRnh1SUNBZ0lISmhkMDVoYldVNklISmhkMDVoYldVc1hHNGdJQ0FnZG1Gc2RXVTZJSFpoYkhWbExGeHVJQ0FnSUdGeVp6b2dZWEpuTEZ4dUlDQWdJR2x6UkhsdVlXMXBZMEZ5WnpvZ2FYTkVlVzVoYldsalFYSm5MRnh1SUNBZ0lHMXZaR2xtYVdWeWN6b2diVzlrYVdacFpYSnpYRzRnSUgwc0lISmhibWRsS1NrN1hHNGdJR1ZzTG5Cc1lXbHVJRDBnWm1Gc2MyVTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQnlaWEJsYm1STmIyUnBabWxsY2sxaGNtdGxjaUFvYzNsdFltOXNMQ0J1WVcxbExDQmtlVzVoYldsaktTQjdYRzRnSUhKbGRIVnliaUJrZVc1aGJXbGpYRzRnSUNBZ1B5QW9YQ0pmY0NoY0lpQXJJRzVoYldVZ0t5QmNJaXhjWEZ3aVhDSWdLeUJ6ZVcxaWIyd2dLeUJjSWx4Y1hDSXBYQ0lwWEc0Z0lDQWdPaUJ6ZVcxaWIyd2dLeUJ1WVcxbElDOHZJRzFoY21zZ2RHaGxJR1YyWlc1MElHRnpJR05oY0hSMWNtVmtYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRmtaRWhoYm1Sc1pYSWdLRnh1SUNCbGJDeGNiaUFnYm1GdFpTeGNiaUFnZG1Gc2RXVXNYRzRnSUcxdlpHbG1hV1Z5Y3l4Y2JpQWdhVzF3YjNKMFlXNTBMRnh1SUNCM1lYSnVMRnh1SUNCeVlXNW5aU3hjYmlBZ1pIbHVZVzFwWTF4dUtTQjdYRzRnSUcxdlpHbG1hV1Z5Y3lBOUlHMXZaR2xtYVdWeWN5QjhmQ0JsYlhCMGVVOWlhbVZqZER0Y2JpQWdMeThnZDJGeWJpQndjbVYyWlc1MElHRnVaQ0J3WVhOemFYWmxJRzF2WkdsbWFXVnlYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9YRzRnSUNBZ2QyRnliaUFtSmx4dUlDQWdJRzF2WkdsbWFXVnljeTV3Y21WMlpXNTBJQ1ltSUcxdlpHbG1hV1Z5Y3k1d1lYTnphWFpsWEc0Z0lDa2dlMXh1SUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FuY0dGemMybDJaU0JoYm1RZ2NISmxkbVZ1ZENCallXNWNYQ2QwSUdKbElIVnpaV1FnZEc5blpYUm9aWEl1SUNjZ0sxeHVJQ0FnSUNBZ0oxQmhjM05wZG1VZ2FHRnVaR3hsY2lCallXNWNYQ2QwSUhCeVpYWmxiblFnWkdWbVlYVnNkQ0JsZG1WdWRDNG5MRnh1SUNBZ0lDQWdjbUZ1WjJWY2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ0x5OGdibTl5YldGc2FYcGxJR05zYVdOckxuSnBaMmgwSUdGdVpDQmpiR2xqYXk1dGFXUmtiR1VnYzJsdVkyVWdkR2hsZVNCa2IyNG5kQ0JoWTNSMVlXeHNlU0JtYVhKbFhHNGdJQzh2SUhSb2FYTWdhWE1nZEdWamFHNXBZMkZzYkhrZ1luSnZkM05sY2kxemNHVmphV1pwWXl3Z1luVjBJR0YwSUd4bFlYTjBJR1p2Y2lCdWIzY2dZbkp2ZDNObGNuTWdZWEpsWEc0Z0lDOHZJSFJvWlNCdmJteDVJSFJoY21kbGRDQmxiblp6SUhSb1lYUWdhR0YyWlNCeWFXZG9kQzl0YVdSa2JHVWdZMnhwWTJ0ekxseHVJQ0JwWmlBb2JXOWthV1pwWlhKekxuSnBaMmgwS1NCN1hHNGdJQ0FnYVdZZ0tHUjVibUZ0YVdNcElIdGNiaUFnSUNBZ0lHNWhiV1VnUFNCY0lpaGNJaUFySUc1aGJXVWdLeUJjSWlrOVBUMG5ZMnhwWTJzblB5ZGpiMjUwWlhoMGJXVnVkU2M2S0Z3aUlDc2dibUZ0WlNBcklGd2lLVndpTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYm1GdFpTQTlQVDBnSjJOc2FXTnJKeWtnZTF4dUlDQWdJQ0FnYm1GdFpTQTlJQ2RqYjI1MFpYaDBiV1Z1ZFNjN1hHNGdJQ0FnSUNCa1pXeGxkR1VnYlc5a2FXWnBaWEp6TG5KcFoyaDBPMXh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJR2xtSUNodGIyUnBabWxsY25NdWJXbGtaR3hsS1NCN1hHNGdJQ0FnYVdZZ0tHUjVibUZ0YVdNcElIdGNiaUFnSUNBZ0lHNWhiV1VnUFNCY0lpaGNJaUFySUc1aGJXVWdLeUJjSWlrOVBUMG5ZMnhwWTJzblB5ZHRiM1Z6WlhWd0p6b29YQ0lnS3lCdVlXMWxJQ3NnWENJcFhDSTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHVZVzFsSUQwOVBTQW5ZMnhwWTJzbktTQjdYRzRnSUNBZ0lDQnVZVzFsSUQwZ0oyMXZkWE5sZFhBbk8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZJR05vWldOcklHTmhjSFIxY21VZ2JXOWthV1pwWlhKY2JpQWdhV1lnS0cxdlpHbG1hV1Z5Y3k1allYQjBkWEpsS1NCN1hHNGdJQ0FnWkdWc1pYUmxJRzF2WkdsbWFXVnljeTVqWVhCMGRYSmxPMXh1SUNBZ0lHNWhiV1VnUFNCd2NtVndaVzVrVFc5a2FXWnBaWEpOWVhKclpYSW9KeUVuTENCdVlXMWxMQ0JrZVc1aGJXbGpLVHRjYmlBZ2ZWeHVJQ0JwWmlBb2JXOWthV1pwWlhKekxtOXVZMlVwSUh0Y2JpQWdJQ0JrWld4bGRHVWdiVzlrYVdacFpYSnpMbTl1WTJVN1hHNGdJQ0FnYm1GdFpTQTlJSEJ5WlhCbGJtUk5iMlJwWm1sbGNrMWhjbXRsY2lnbmZpY3NJRzVoYldVc0lHUjVibUZ0YVdNcE8xeHVJQ0I5WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQnBaaUFvYlc5a2FXWnBaWEp6TG5CaGMzTnBkbVVwSUh0Y2JpQWdJQ0JrWld4bGRHVWdiVzlrYVdacFpYSnpMbkJoYzNOcGRtVTdYRzRnSUNBZ2JtRnRaU0E5SUhCeVpYQmxibVJOYjJScFptbGxjazFoY210bGNpZ25KaWNzSUc1aGJXVXNJR1I1Ym1GdGFXTXBPMXh1SUNCOVhHNWNiaUFnZG1GeUlHVjJaVzUwY3p0Y2JpQWdhV1lnS0cxdlpHbG1hV1Z5Y3k1dVlYUnBkbVVwSUh0Y2JpQWdJQ0JrWld4bGRHVWdiVzlrYVdacFpYSnpMbTVoZEdsMlpUdGNiaUFnSUNCbGRtVnVkSE1nUFNCbGJDNXVZWFJwZG1WRmRtVnVkSE1nZkh3Z0tHVnNMbTVoZEdsMlpVVjJaVzUwY3lBOUlIdDlLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JsZG1WdWRITWdQU0JsYkM1bGRtVnVkSE1nZkh3Z0tHVnNMbVYyWlc1MGN5QTlJSHQ5S1R0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJ1WlhkSVlXNWtiR1Z5SUQwZ2NtRnVaMlZUWlhSSmRHVnRLSHNnZG1Gc2RXVTZJSFpoYkhWbExuUnlhVzBvS1N3Z1pIbHVZVzFwWXpvZ1pIbHVZVzFwWXlCOUxDQnlZVzVuWlNrN1hHNGdJR2xtSUNodGIyUnBabWxsY25NZ0lUMDlJR1Z0Y0hSNVQySnFaV04wS1NCN1hHNGdJQ0FnYm1WM1NHRnVaR3hsY2k1dGIyUnBabWxsY25NZ1BTQnRiMlJwWm1sbGNuTTdYRzRnSUgxY2JseHVJQ0IyWVhJZ2FHRnVaR3hsY25NZ1BTQmxkbVZ1ZEhOYmJtRnRaVjA3WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaG9ZVzVrYkdWeWN5a3BJSHRjYmlBZ0lDQnBiWEJ2Y25SaGJuUWdQeUJvWVc1a2JHVnljeTUxYm5Ob2FXWjBLRzVsZDBoaGJtUnNaWElwSURvZ2FHRnVaR3hsY25NdWNIVnphQ2h1WlhkSVlXNWtiR1Z5S1R0Y2JpQWdmU0JsYkhObElHbG1JQ2hvWVc1a2JHVnljeWtnZTF4dUlDQWdJR1YyWlc1MGMxdHVZVzFsWFNBOUlHbHRjRzl5ZEdGdWRDQS9JRnR1WlhkSVlXNWtiR1Z5TENCb1lXNWtiR1Z5YzEwZ09pQmJhR0Z1Wkd4bGNuTXNJRzVsZDBoaGJtUnNaWEpkTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdWMlpXNTBjMXR1WVcxbFhTQTlJRzVsZDBoaGJtUnNaWEk3WEc0Z0lIMWNibHh1SUNCbGJDNXdiR0ZwYmlBOUlHWmhiSE5sTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSU1lYZENhVzVrYVc1blFYUjBjaUFvWEc0Z0lHVnNMRnh1SUNCdVlXMWxYRzRwSUh0Y2JpQWdjbVYwZFhKdUlHVnNMbkpoZDBGMGRISnpUV0Z3V3ljNkp5QXJJRzVoYldWZElIeDhYRzRnSUNBZ1pXd3VjbUYzUVhSMGNuTk5ZWEJiSjNZdFltbHVaRG9uSUNzZ2JtRnRaVjBnZkh4Y2JpQWdJQ0JsYkM1eVlYZEJkSFJ5YzAxaGNGdHVZVzFsWFZ4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSQ2FXNWthVzVuUVhSMGNpQW9YRzRnSUdWc0xGeHVJQ0J1WVcxbExGeHVJQ0JuWlhSVGRHRjBhV05jYmlrZ2UxeHVJQ0IyWVhJZ1pIbHVZVzFwWTFaaGJIVmxJRDFjYmlBZ0lDQm5aWFJCYm1SU1pXMXZkbVZCZEhSeUtHVnNMQ0FuT2ljZ0t5QnVZVzFsS1NCOGZGeHVJQ0FnSUdkbGRFRnVaRkpsYlc5MlpVRjBkSElvWld3c0lDZDJMV0pwYm1RNkp5QXJJRzVoYldVcE8xeHVJQ0JwWmlBb1pIbHVZVzFwWTFaaGJIVmxJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQnlaWFIxY200Z2NHRnljMlZHYVd4MFpYSnpLR1I1Ym1GdGFXTldZV3gxWlNsY2JpQWdmU0JsYkhObElHbG1JQ2huWlhSVGRHRjBhV01nSVQwOUlHWmhiSE5sS1NCN1hHNGdJQ0FnZG1GeUlITjBZWFJwWTFaaGJIVmxJRDBnWjJWMFFXNWtVbVZ0YjNabFFYUjBjaWhsYkN3Z2JtRnRaU2s3WEc0Z0lDQWdhV1lnS0hOMFlYUnBZMVpoYkhWbElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCS1UwOU9Mbk4wY21sdVoybG1lU2h6ZEdGMGFXTldZV3gxWlNsY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5OGdibTkwWlRvZ2RHaHBjeUJ2Ym14NUlISmxiVzkyWlhNZ2RHaGxJR0YwZEhJZ1puSnZiU0IwYUdVZ1FYSnlZWGtnS0dGMGRISnpUR2x6ZENrZ2MyOGdkR2hoZENCcGRGeHVMeThnWkc5bGMyNG5kQ0JuWlhRZ2NISnZZMlZ6YzJWa0lHSjVJSEJ5YjJObGMzTkJkSFJ5Y3k1Y2JpOHZJRUo1SUdSbFptRjFiSFFnYVhRZ1pHOWxjeUJPVDFRZ2NtVnRiM1psSUdsMElHWnliMjBnZEdobElHMWhjQ0FvWVhSMGNuTk5ZWEFwSUdKbFkyRjFjMlVnZEdobElHMWhjQ0JwYzF4dUx5OGdibVZsWkdWa0lHUjFjbWx1WnlCamIyUmxaMlZ1TGx4dVpuVnVZM1JwYjI0Z1oyVjBRVzVrVW1WdGIzWmxRWFIwY2lBb1hHNGdJR1ZzTEZ4dUlDQnVZVzFsTEZ4dUlDQnlaVzF2ZG1WR2NtOXRUV0Z3WEc0cElIdGNiaUFnZG1GeUlIWmhiRHRjYmlBZ2FXWWdLQ2gyWVd3Z1BTQmxiQzVoZEhSeWMwMWhjRnR1WVcxbFhTa2dJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lIWmhjaUJzYVhOMElEMGdaV3d1WVhSMGNuTk1hWE4wTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnYkdsemRDNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2xtSUNoc2FYTjBXMmxkTG01aGJXVWdQVDA5SUc1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnYkdsemRDNXpjR3hwWTJVb2FTd2dNU2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHbG1JQ2h5WlcxdmRtVkdjbTl0VFdGd0tTQjdYRzRnSUNBZ1pHVnNaWFJsSUdWc0xtRjBkSEp6VFdGd1cyNWhiV1ZkTzF4dUlDQjlYRzRnSUhKbGRIVnliaUIyWVd4Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFFXNWtVbVZ0YjNabFFYUjBja0o1VW1WblpYZ2dLRnh1SUNCbGJDeGNiaUFnYm1GdFpWeHVLU0I3WEc0Z0lIWmhjaUJzYVhOMElEMGdaV3d1WVhSMGNuTk1hWE4wTzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR3hwYzNRdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJR0YwZEhJZ1BTQnNhWE4wVzJsZE8xeHVJQ0FnSUdsbUlDaHVZVzFsTG5SbGMzUW9ZWFIwY2k1dVlXMWxLU2tnZTF4dUlDQWdJQ0FnYkdsemRDNXpjR3hwWTJVb2FTd2dNU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZWFIwY2x4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVlXNW5aVk5sZEVsMFpXMGdLRnh1SUNCcGRHVnRMRnh1SUNCeVlXNW5aVnh1S1NCN1hHNGdJR2xtSUNoeVlXNW5aU2tnZTF4dUlDQWdJR2xtSUNoeVlXNW5aUzV6ZEdGeWRDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnBkR1Z0TG5OMFlYSjBJRDBnY21GdVoyVXVjM1JoY25RN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoeVlXNW5aUzVsYm1RZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2FYUmxiUzVsYm1RZ1BTQnlZVzVuWlM1bGJtUTdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCcGRHVnRYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNHZLaXBjYmlBcUlFTnliM056TFhCc1lYUm1iM0p0SUdOdlpHVWdaMlZ1WlhKaGRHbHZiaUJtYjNJZ1kyOXRjRzl1Wlc1MElIWXRiVzlrWld4Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWdVEyOXRjRzl1Wlc1MFRXOWtaV3dnS0Z4dUlDQmxiQ3hjYmlBZ2RtRnNkV1VzWEc0Z0lHMXZaR2xtYVdWeWMxeHVLU0I3WEc0Z0lIWmhjaUJ5WldZZ1BTQnRiMlJwWm1sbGNuTWdmSHdnZTMwN1hHNGdJSFpoY2lCdWRXMWlaWElnUFNCeVpXWXViblZ0WW1WeU8xeHVJQ0IyWVhJZ2RISnBiU0E5SUhKbFppNTBjbWx0TzF4dVhHNGdJSFpoY2lCaVlYTmxWbUZzZFdWRmVIQnlaWE56YVc5dUlEMGdKeVFrZGljN1hHNGdJSFpoY2lCMllXeDFaVVY0Y0hKbGMzTnBiMjRnUFNCaVlYTmxWbUZzZFdWRmVIQnlaWE56YVc5dU8xeHVJQ0JwWmlBb2RISnBiU2tnZTF4dUlDQWdJSFpoYkhWbFJYaHdjbVZ6YzJsdmJpQTlYRzRnSUNBZ0lDQmNJaWgwZVhCbGIyWWdYQ0lnS3lCaVlYTmxWbUZzZFdWRmVIQnlaWE56YVc5dUlDc2dYQ0lnUFQwOUlDZHpkSEpwYm1jblhDSWdLMXh1SUNBZ0lDQWdYQ0kvSUZ3aUlDc2dZbUZ6WlZaaGJIVmxSWGh3Y21WemMybHZiaUFySUZ3aUxuUnlhVzBvS1Z3aUlDdGNiaUFnSUNBZ0lGd2lPaUJjSWlBcklHSmhjMlZXWVd4MVpVVjRjSEpsYzNOcGIyNGdLeUJjSWlsY0lqdGNiaUFnZlZ4dUlDQnBaaUFvYm5WdFltVnlLU0I3WEc0Z0lDQWdkbUZzZFdWRmVIQnlaWE56YVc5dUlEMGdYQ0pmYmloY0lpQXJJSFpoYkhWbFJYaHdjbVZ6YzJsdmJpQXJJRndpS1Z3aU8xeHVJQ0I5WEc0Z0lIWmhjaUJoYzNOcFoyNXRaVzUwSUQwZ1oyVnVRWE56YVdkdWJXVnVkRU52WkdVb2RtRnNkV1VzSUhaaGJIVmxSWGh3Y21WemMybHZiaWs3WEc1Y2JpQWdaV3d1Ylc5a1pXd2dQU0I3WEc0Z0lDQWdkbUZzZFdVNklDaGNJaWhjSWlBcklIWmhiSFZsSUNzZ1hDSXBYQ0lwTEZ4dUlDQWdJR1Y0Y0hKbGMzTnBiMjQ2SUVwVFQwNHVjM1J5YVc1bmFXWjVLSFpoYkhWbEtTeGNiaUFnSUNCallXeHNZbUZqYXpvZ0tGd2lablZ1WTNScGIyNGdLRndpSUNzZ1ltRnpaVlpoYkhWbFJYaHdjbVZ6YzJsdmJpQXJJRndpS1NCN1hDSWdLeUJoYzNOcFoyNXRaVzUwSUNzZ1hDSjlYQ0lwWEc0Z0lIMDdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EzSnZjM010Y0d4aGRHWnZjbTBnWTI5a1pXZGxiaUJvWld4d1pYSWdabTl5SUdkbGJtVnlZWFJwYm1jZ2RpMXRiMlJsYkNCMllXeDFaU0JoYzNOcFoyNXRaVzUwSUdOdlpHVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHZGxia0Z6YzJsbmJtMWxiblJEYjJSbElDaGNiaUFnZG1Gc2RXVXNYRzRnSUdGemMybG5ibTFsYm5SY2Jpa2dlMXh1SUNCMllYSWdjbVZ6SUQwZ2NHRnljMlZOYjJSbGJDaDJZV3gxWlNrN1hHNGdJR2xtSUNoeVpYTXVhMlY1SUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2gyWVd4MVpTQXJJRndpUFZ3aUlDc2dZWE56YVdkdWJXVnVkQ2xjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLRndpSkhObGRDaGNJaUFySUNoeVpYTXVaWGh3S1NBcklGd2lMQ0JjSWlBcklDaHlaWE11YTJWNUtTQXJJRndpTENCY0lpQXJJR0Z6YzJsbmJtMWxiblFnS3lCY0lpbGNJaWxjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUZCaGNuTmxJR0VnZGkxdGIyUmxiQ0JsZUhCeVpYTnphVzl1SUdsdWRHOGdZU0JpWVhObElIQmhkR2dnWVc1a0lHRWdabWx1WVd3Z2EyVjVJSE5sWjIxbGJuUXVYRzRnS2lCSVlXNWtiR1Z6SUdKdmRHZ2daRzkwTFhCaGRHZ2dZVzVrSUhCdmMzTnBZbXhsSUhOeGRXRnlaU0JpY21GamEyVjBjeTVjYmlBcVhHNGdLaUJRYjNOemFXSnNaU0JqWVhObGN6cGNiaUFxWEc0Z0tpQXRJSFJsYzNSY2JpQXFJQzBnZEdWemRGdHJaWGxkWEc0Z0tpQXRJSFJsYzNSYmRHVnpkREZiYTJWNVhWMWNiaUFxSUMwZ2RHVnpkRnRjSW1GY0lsMWJhMlY1WFZ4dUlDb2dMU0I0ZUhndWRHVnpkRnRoVzJGZExuUmxjM1F4VzJ0bGVWMWRYRzRnS2lBdElIUmxjM1F1ZUhoNExtRmJYQ0poYzJGY0lsMWJkR1Z6ZERGYmEyVjVYVjFjYmlBcVhHNGdLaTljYmx4dWRtRnlJR3hsYml3Z2MzUnlMQ0JqYUhJc0lHbHVaR1Y0SkRFc0lHVjRjSEpsYzNOcGIyNVFiM01zSUdWNGNISmxjM05wYjI1RmJtUlFiM003WEc1Y2JseHVYRzVtZFc1amRHbHZiaUJ3WVhKelpVMXZaR1ZzSUNoMllXd3BJSHRjYmlBZ0x5OGdSbWw0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MmRXVnFjeTkyZFdVdmNIVnNiQzgzTnpNd1hHNGdJQzh2SUdGc2JHOTNJSFl0Ylc5a1pXdzlYQ0p2WW1vdWRtRnNJRndpSUNoMGNtRnBiR2x1WnlCM2FHbDBaWE53WVdObEtWeHVJQ0IyWVd3Z1BTQjJZV3d1ZEhKcGJTZ3BPMXh1SUNCc1pXNGdQU0IyWVd3dWJHVnVaM1JvTzF4dVhHNGdJR2xtSUNoMllXd3VhVzVrWlhoUFppZ25XeWNwSUR3Z01DQjhmQ0IyWVd3dWJHRnpkRWx1WkdWNFQyWW9KMTBuS1NBOElHeGxiaUF0SURFcElIdGNiaUFnSUNCcGJtUmxlQ1F4SUQwZ2RtRnNMbXhoYzNSSmJtUmxlRTltS0NjdUp5azdYRzRnSUNBZ2FXWWdLR2x1WkdWNEpERWdQaUF0TVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ1pYaHdPaUIyWVd3dWMyeHBZMlVvTUN3Z2FXNWtaWGdrTVNrc1hHNGdJQ0FnSUNBZ0lHdGxlVG9nSjF3aUp5QXJJSFpoYkM1emJHbGpaU2hwYm1SbGVDUXhJQ3NnTVNrZ0t5QW5YQ0luWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lHVjRjRG9nZG1Gc0xGeHVJQ0FnSUNBZ0lDQnJaWGs2SUc1MWJHeGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnpkSElnUFNCMllXdzdYRzRnSUdsdVpHVjRKREVnUFNCbGVIQnlaWE56YVc5dVVHOXpJRDBnWlhod2NtVnpjMmx2YmtWdVpGQnZjeUE5SURBN1hHNWNiaUFnZDJocGJHVWdLQ0ZsYjJZb0tTa2dlMXh1SUNBZ0lHTm9jaUE5SUc1bGVIUW9LVHRjYmlBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdJQ0JwWmlBb2FYTlRkSEpwYm1kVGRHRnlkQ2hqYUhJcEtTQjdYRzRnSUNBZ0lDQndZWEp6WlZOMGNtbHVaeWhqYUhJcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyaHlJRDA5UFNBd2VEVkNLU0I3WEc0Z0lDQWdJQ0J3WVhKelpVSnlZV05yWlhRb1kyaHlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lHVjRjRG9nZG1Gc0xuTnNhV05sS0RBc0lHVjRjSEpsYzNOcGIyNVFiM01wTEZ4dUlDQWdJR3RsZVRvZ2RtRnNMbk5zYVdObEtHVjRjSEpsYzNOcGIyNVFiM01nS3lBeExDQmxlSEJ5WlhOemFXOXVSVzVrVUc5ektWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJRzVsZUhRZ0tDa2dlMXh1SUNCeVpYUjFjbTRnYzNSeUxtTm9ZWEpEYjJSbFFYUW9LeXRwYm1SbGVDUXhLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxiMllnS0NrZ2UxeHVJQ0J5WlhSMWNtNGdhVzVrWlhna01TQStQU0JzWlc1Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhOVGRISnBibWRUZEdGeWRDQW9ZMmh5S1NCN1hHNGdJSEpsZEhWeWJpQmphSElnUFQwOUlEQjRNaklnZkh3Z1kyaHlJRDA5UFNBd2VESTNYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQmhjbk5sUW5KaFkydGxkQ0FvWTJoeUtTQjdYRzRnSUhaaGNpQnBia0p5WVdOclpYUWdQU0F4TzF4dUlDQmxlSEJ5WlhOemFXOXVVRzl6SUQwZ2FXNWtaWGdrTVR0Y2JpQWdkMmhwYkdVZ0tDRmxiMllvS1NrZ2UxeHVJQ0FnSUdOb2NpQTlJRzVsZUhRb0tUdGNiaUFnSUNCcFppQW9hWE5UZEhKcGJtZFRkR0Z5ZENoamFISXBLU0I3WEc0Z0lDQWdJQ0J3WVhKelpWTjBjbWx1WnloamFISXBPMXh1SUNBZ0lDQWdZMjl1ZEdsdWRXVmNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHTm9jaUE5UFQwZ01IZzFRaWtnZXlCcGJrSnlZV05yWlhRckt6c2dmVnh1SUNBZ0lHbG1JQ2hqYUhJZ1BUMDlJREI0TlVRcElIc2dhVzVDY21GamEyVjBMUzA3SUgxY2JpQWdJQ0JwWmlBb2FXNUNjbUZqYTJWMElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCbGVIQnlaWE56YVc5dVJXNWtVRzl6SUQwZ2FXNWtaWGdrTVR0Y2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSEJoY25ObFUzUnlhVzVuSUNoamFISXBJSHRjYmlBZ2RtRnlJSE4wY21sdVoxRjFiM1JsSUQwZ1kyaHlPMXh1SUNCM2FHbHNaU0FvSVdWdlppZ3BLU0I3WEc0Z0lDQWdZMmh5SUQwZ2JtVjRkQ2dwTzF4dUlDQWdJR2xtSUNoamFISWdQVDA5SUhOMGNtbHVaMUYxYjNSbEtTQjdYRzRnSUNBZ0lDQmljbVZoYTF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dWRtRnlJSGRoY200a01UdGNibHh1THk4Z2FXNGdjMjl0WlNCallYTmxjeXdnZEdobElHVjJaVzUwSUhWelpXUWdhR0Z6SUhSdklHSmxJR1JsZEdWeWJXbHVaV1FnWVhRZ2NuVnVkR2x0WlZ4dUx5OGdjMjhnZDJVZ2RYTmxaQ0J6YjIxbElISmxjMlZ5ZG1Wa0lIUnZhMlZ1Y3lCa2RYSnBibWNnWTI5dGNHbHNaUzVjYm5aaGNpQlNRVTVIUlY5VVQwdEZUaUE5SUNkZlgzSW5PMXh1ZG1GeUlFTklSVU5MUWs5WVgxSkJSRWxQWDFSUFMwVk9JRDBnSjE5Zll5YzdYRzVjYm1aMWJtTjBhVzl1SUcxdlpHVnNJQ2hjYmlBZ1pXd3NYRzRnSUdScGNpeGNiaUFnWDNkaGNtNWNiaWtnZTF4dUlDQjNZWEp1SkRFZ1BTQmZkMkZ5Ymp0Y2JpQWdkbUZ5SUhaaGJIVmxJRDBnWkdseUxuWmhiSFZsTzF4dUlDQjJZWElnYlc5a2FXWnBaWEp6SUQwZ1pHbHlMbTF2WkdsbWFXVnljenRjYmlBZ2RtRnlJSFJoWnlBOUlHVnNMblJoWnp0Y2JpQWdkbUZ5SUhSNWNHVWdQU0JsYkM1aGRIUnljMDFoY0M1MGVYQmxPMXh1WEc0Z0lIdGNiaUFnSUNBdkx5QnBibkIxZEhNZ2QybDBhQ0IwZVhCbFBWd2labWxzWlZ3aUlHRnlaU0J5WldGa0lHOXViSGtnWVc1a0lITmxkSFJwYm1jZ2RHaGxJR2x1Y0hWMEozTmNiaUFnSUNBdkx5QjJZV3gxWlNCM2FXeHNJSFJvY205M0lHRnVJR1Z5Y205eUxseHVJQ0FnSUdsbUlDaDBZV2NnUFQwOUlDZHBibkIxZENjZ0ppWWdkSGx3WlNBOVBUMGdKMlpwYkdVbktTQjdYRzRnSUNBZ0lDQjNZWEp1SkRFb1hHNGdJQ0FnSUNBZ0lGd2lQRndpSUNzZ0tHVnNMblJoWnlrZ0t5QmNJaUIyTFcxdlpHVnNQVnhjWENKY0lpQXJJSFpoYkhWbElDc2dYQ0pjWEZ3aUlIUjVjR1U5WEZ4Y0ltWnBiR1ZjWEZ3aVBqcGNYRzVjSWlBclhHNGdJQ0FnSUNBZ0lGd2lSbWxzWlNCcGJuQjFkSE1nWVhKbElISmxZV1FnYjI1c2VTNGdWWE5sSUdFZ2RpMXZianBqYUdGdVoyVWdiR2x6ZEdWdVpYSWdhVzV6ZEdWaFpDNWNJaXhjYmlBZ0lDQWdJQ0FnWld3dWNtRjNRWFIwY25OTllYQmJKM1l0Ylc5a1pXd25YVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JwWmlBb1pXd3VZMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdaMlZ1UTI5dGNHOXVaVzUwVFc5a1pXd29aV3dzSUhaaGJIVmxMQ0J0YjJScFptbGxjbk1wTzF4dUlDQWdJQzh2SUdOdmJYQnZibVZ1ZENCMkxXMXZaR1ZzSUdSdlpYTnVKM1FnYm1WbFpDQmxlSFJ5WVNCeWRXNTBhVzFsWEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lIMGdaV3h6WlNCcFppQW9kR0ZuSUQwOVBTQW5jMlZzWldOMEp5a2dlMXh1SUNBZ0lHZGxibE5sYkdWamRDaGxiQ3dnZG1Gc2RXVXNJRzF2WkdsbWFXVnljeWs3WEc0Z0lIMGdaV3h6WlNCcFppQW9kR0ZuSUQwOVBTQW5hVzV3ZFhRbklDWW1JSFI1Y0dVZ1BUMDlJQ2RqYUdWamEySnZlQ2NwSUh0Y2JpQWdJQ0JuWlc1RGFHVmphMkp2ZUUxdlpHVnNLR1ZzTENCMllXeDFaU3dnYlc5a2FXWnBaWEp6S1R0Y2JpQWdmU0JsYkhObElHbG1JQ2gwWVdjZ1BUMDlJQ2RwYm5CMWRDY2dKaVlnZEhsd1pTQTlQVDBnSjNKaFpHbHZKeWtnZTF4dUlDQWdJR2RsYmxKaFpHbHZUVzlrWld3b1pXd3NJSFpoYkhWbExDQnRiMlJwWm1sbGNuTXBPMXh1SUNCOUlHVnNjMlVnYVdZZ0tIUmhaeUE5UFQwZ0oybHVjSFYwSnlCOGZDQjBZV2NnUFQwOUlDZDBaWGgwWVhKbFlTY3BJSHRjYmlBZ0lDQm5aVzVFWldaaGRXeDBUVzlrWld3b1pXd3NJSFpoYkhWbExDQnRiMlJwWm1sbGNuTXBPMXh1SUNCOUlHVnNjMlVnYVdZZ0tDRmpiMjVtYVdjdWFYTlNaWE5sY25abFpGUmhaeWgwWVdjcEtTQjdYRzRnSUNBZ1oyVnVRMjl0Y0c5dVpXNTBUVzlrWld3b1pXd3NJSFpoYkhWbExDQnRiMlJwWm1sbGNuTXBPMXh1SUNBZ0lDOHZJR052YlhCdmJtVnVkQ0IyTFcxdlpHVnNJR1J2WlhOdUozUWdibVZsWkNCbGVIUnlZU0J5ZFc1MGFXMWxYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkMkZ5YmlReEtGeHVJQ0FnSUNBZ1hDSThYQ0lnS3lBb1pXd3VkR0ZuS1NBcklGd2lJSFl0Ylc5a1pXdzlYRnhjSWx3aUlDc2dkbUZzZFdVZ0t5QmNJbHhjWENJK09pQmNJaUFyWEc0Z0lDQWdJQ0JjSW5ZdGJXOWtaV3dnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ0J2YmlCMGFHbHpJR1ZzWlcxbGJuUWdkSGx3WlM0Z1hDSWdLMXh1SUNBZ0lDQWdKMGxtSUhsdmRTQmhjbVVnZDI5eWEybHVaeUIzYVhSb0lHTnZiblJsYm5SbFpHbDBZV0pzWlN3Z2FYUmNYQ2R6SUhKbFkyOXRiV1Z1WkdWa0lIUnZJQ2NnSzF4dUlDQWdJQ0FnSjNkeVlYQWdZU0JzYVdKeVlYSjVJR1JsWkdsallYUmxaQ0JtYjNJZ2RHaGhkQ0J3ZFhKd2IzTmxJR2x1YzJsa1pTQmhJR04xYzNSdmJTQmpiMjF3YjI1bGJuUXVKeXhjYmlBZ0lDQWdJR1ZzTG5KaGQwRjBkSEp6VFdGd1d5ZDJMVzF2WkdWc0oxMWNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdMeThnWlc1emRYSmxJSEoxYm5ScGJXVWdaR2x5WldOMGFYWmxJRzFsZEdGa1lYUmhYRzRnSUhKbGRIVnliaUIwY25WbFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGJrTm9aV05yWW05NFRXOWtaV3dnS0Z4dUlDQmxiQ3hjYmlBZ2RtRnNkV1VzWEc0Z0lHMXZaR2xtYVdWeWMxeHVLU0I3WEc0Z0lIWmhjaUJ1ZFcxaVpYSWdQU0J0YjJScFptbGxjbk1nSmlZZ2JXOWthV1pwWlhKekxtNTFiV0psY2p0Y2JpQWdkbUZ5SUhaaGJIVmxRbWx1WkdsdVp5QTlJR2RsZEVKcGJtUnBibWRCZEhSeUtHVnNMQ0FuZG1Gc2RXVW5LU0I4ZkNBbmJuVnNiQ2M3WEc0Z0lIWmhjaUIwY25WbFZtRnNkV1ZDYVc1a2FXNW5JRDBnWjJWMFFtbHVaR2x1WjBGMGRISW9aV3dzSUNkMGNuVmxMWFpoYkhWbEp5a2dmSHdnSjNSeWRXVW5PMXh1SUNCMllYSWdabUZzYzJWV1lXeDFaVUpwYm1ScGJtY2dQU0JuWlhSQ2FXNWthVzVuUVhSMGNpaGxiQ3dnSjJaaGJITmxMWFpoYkhWbEp5a2dmSHdnSjJaaGJITmxKenRjYmlBZ1lXUmtVSEp2Y0NobGJDd2dKMk5vWldOclpXUW5MRnh1SUNBZ0lGd2lRWEp5WVhrdWFYTkJjbkpoZVNoY0lpQXJJSFpoYkhWbElDc2dYQ0lwWENJZ0sxeHVJQ0FnSUZ3aVAxOXBLRndpSUNzZ2RtRnNkV1VnS3lCY0lpeGNJaUFySUhaaGJIVmxRbWx1WkdsdVp5QXJJRndpS1Q0dE1Wd2lJQ3NnS0Z4dUlDQWdJQ0FnZEhKMVpWWmhiSFZsUW1sdVpHbHVaeUE5UFQwZ0ozUnlkV1VuWEc0Z0lDQWdJQ0FnSUQ4Z0tGd2lPaWhjSWlBcklIWmhiSFZsSUNzZ1hDSXBYQ0lwWEc0Z0lDQWdJQ0FnSURvZ0tGd2lPbDl4S0Z3aUlDc2dkbUZzZFdVZ0t5QmNJaXhjSWlBcklIUnlkV1ZXWVd4MVpVSnBibVJwYm1jZ0t5QmNJaWxjSWlsY2JpQWdJQ0FwWEc0Z0lDazdYRzRnSUdGa1pFaGhibVJzWlhJb1pXd3NJQ2RqYUdGdVoyVW5MRnh1SUNBZ0lGd2lkbUZ5SUNRa1lUMWNJaUFySUhaaGJIVmxJQ3NnWENJc1hDSWdLMXh1SUNBZ0lDQWdJQ0FuSkNSbGJEMGtaWFpsYm5RdWRHRnlaMlYwTENjZ0sxeHVJQ0FnSUNBZ0lDQmNJaVFrWXowa0pHVnNMbU5vWldOclpXUS9LRndpSUNzZ2RISjFaVlpoYkhWbFFtbHVaR2x1WnlBcklGd2lLVG9vWENJZ0t5Qm1ZV3h6WlZaaGJIVmxRbWx1WkdsdVp5QXJJRndpS1R0Y0lpQXJYRzRnSUNBZ0oybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb0pDUmhLU2w3SnlBclhHNGdJQ0FnSUNCY0luWmhjaUFrSkhZOVhDSWdLeUFvYm5WdFltVnlJRDhnSjE5dUtDY2dLeUIyWVd4MVpVSnBibVJwYm1jZ0t5QW5LU2NnT2lCMllXeDFaVUpwYm1ScGJtY3BJQ3NnWENJc1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUNja0pHazlYMmtvSkNSaExDUWtkaWs3SnlBclhHNGdJQ0FnSUNCY0ltbG1LQ1FrWld3dVkyaGxZMnRsWkNsN0pDUnBQREFtSmloY0lpQXJJQ2huWlc1QmMzTnBaMjV0Wlc1MFEyOWtaU2gyWVd4MVpTd2dKeVFrWVM1amIyNWpZWFFvV3lRa2RsMHBKeWtwSUNzZ1hDSXBmVndpSUN0Y2JpQWdJQ0FnSUZ3aVpXeHpaWHNrSkdrK0xURW1KaWhjSWlBcklDaG5aVzVCYzNOcFoyNXRaVzUwUTI5a1pTaDJZV3gxWlN3Z0p5UWtZUzV6YkdsalpTZ3dMQ1FrYVNrdVkyOXVZMkYwS0NRa1lTNXpiR2xqWlNna0pHa3JNU2twSnlrcElDc2dYQ0lwZlZ3aUlDdGNiaUFnSUNCY0luMWxiSE5sZTF3aUlDc2dLR2RsYmtGemMybG5ibTFsYm5SRGIyUmxLSFpoYkhWbExDQW5KQ1JqSnlrcElDc2dYQ0o5WENJc1hHNGdJQ0FnYm5Wc2JDd2dkSEoxWlZ4dUlDQXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aVzVTWVdScGIwMXZaR1ZzSUNoY2JpQWdaV3dzWEc0Z0lIWmhiSFZsTEZ4dUlDQnRiMlJwWm1sbGNuTmNiaWtnZTF4dUlDQjJZWElnYm5WdFltVnlJRDBnYlc5a2FXWnBaWEp6SUNZbUlHMXZaR2xtYVdWeWN5NXVkVzFpWlhJN1hHNGdJSFpoY2lCMllXeDFaVUpwYm1ScGJtY2dQU0JuWlhSQ2FXNWthVzVuUVhSMGNpaGxiQ3dnSjNaaGJIVmxKeWtnZkh3Z0oyNTFiR3duTzF4dUlDQjJZV3gxWlVKcGJtUnBibWNnUFNCdWRXMWlaWElnUHlBb1hDSmZiaWhjSWlBcklIWmhiSFZsUW1sdVpHbHVaeUFySUZ3aUtWd2lLU0E2SUhaaGJIVmxRbWx1WkdsdVp6dGNiaUFnWVdSa1VISnZjQ2hsYkN3Z0oyTm9aV05yWldRbkxDQW9YQ0pmY1NoY0lpQXJJSFpoYkhWbElDc2dYQ0lzWENJZ0t5QjJZV3gxWlVKcGJtUnBibWNnS3lCY0lpbGNJaWtwTzF4dUlDQmhaR1JJWVc1a2JHVnlLR1ZzTENBblkyaGhibWRsSnl3Z1oyVnVRWE56YVdkdWJXVnVkRU52WkdVb2RtRnNkV1VzSUhaaGJIVmxRbWx1WkdsdVp5a3NJRzUxYkd3c0lIUnlkV1VwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlc1VFpXeGxZM1FnS0Z4dUlDQmxiQ3hjYmlBZ2RtRnNkV1VzWEc0Z0lHMXZaR2xtYVdWeWMxeHVLU0I3WEc0Z0lIWmhjaUJ1ZFcxaVpYSWdQU0J0YjJScFptbGxjbk1nSmlZZ2JXOWthV1pwWlhKekxtNTFiV0psY2p0Y2JpQWdkbUZ5SUhObGJHVmpkR1ZrVm1Gc0lEMGdYQ0pCY25KaGVTNXdjbTkwYjNSNWNHVXVabWxzZEdWeVhDSWdLMXh1SUNBZ0lGd2lMbU5oYkd3b0pHVjJaVzUwTG5SaGNtZGxkQzV2Y0hScGIyNXpMR1oxYm1OMGFXOXVLRzhwZTNKbGRIVnliaUJ2TG5ObGJHVmpkR1ZrZlNsY0lpQXJYRzRnSUNBZ1hDSXViV0Z3S0daMWJtTjBhVzl1S0c4cGUzWmhjaUIyWVd3Z1BTQmNYRndpWDNaaGJIVmxYRnhjSWlCcGJpQnZJRDhnYnk1ZmRtRnNkV1VnT2lCdkxuWmhiSFZsTzF3aUlDdGNiaUFnSUNCY0luSmxkSFZ5YmlCY0lpQXJJQ2h1ZFcxaVpYSWdQeUFuWDI0b2RtRnNLU2NnT2lBbmRtRnNKeWtnS3lCY0luMHBYQ0k3WEc1Y2JpQWdkbUZ5SUdGemMybG5ibTFsYm5RZ1BTQW5KR1YyWlc1MExuUmhjbWRsZEM1dGRXeDBhWEJzWlNBL0lDUWtjMlZzWldOMFpXUldZV3dnT2lBa0pITmxiR1ZqZEdWa1ZtRnNXekJkSnp0Y2JpQWdkbUZ5SUdOdlpHVWdQU0JjSW5aaGNpQWtKSE5sYkdWamRHVmtWbUZzSUQwZ1hDSWdLeUJ6Wld4bFkzUmxaRlpoYkNBcklGd2lPMXdpTzF4dUlDQmpiMlJsSUQwZ1kyOWtaU0FySUZ3aUlGd2lJQ3NnS0dkbGJrRnpjMmxuYm0xbGJuUkRiMlJsS0haaGJIVmxMQ0JoYzNOcFoyNXRaVzUwS1NrN1hHNGdJR0ZrWkVoaGJtUnNaWElvWld3c0lDZGphR0Z1WjJVbkxDQmpiMlJsTENCdWRXeHNMQ0IwY25WbEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVnVSR1ZtWVhWc2RFMXZaR1ZzSUNoY2JpQWdaV3dzWEc0Z0lIWmhiSFZsTEZ4dUlDQnRiMlJwWm1sbGNuTmNiaWtnZTF4dUlDQjJZWElnZEhsd1pTQTlJR1ZzTG1GMGRISnpUV0Z3TG5SNWNHVTdYRzVjYmlBZ0x5OGdkMkZ5YmlCcFppQjJMV0pwYm1RNmRtRnNkV1VnWTI5dVpteHBZM1J6SUhkcGRHZ2dkaTF0YjJSbGJGeHVJQ0F2THlCbGVHTmxjSFFnWm05eUlHbHVjSFYwY3lCM2FYUm9JSFl0WW1sdVpEcDBlWEJsWEc0Z0lIdGNiaUFnSUNCMllYSWdkbUZzZFdVa01TQTlJR1ZzTG1GMGRISnpUV0Z3V3lkMkxXSnBibVE2ZG1Gc2RXVW5YU0I4ZkNCbGJDNWhkSFJ5YzAxaGNGc25PblpoYkhWbEoxMDdYRzRnSUNBZ2RtRnlJSFI1Y0dWQ2FXNWthVzVuSUQwZ1pXd3VZWFIwY25OTllYQmJKM1l0WW1sdVpEcDBlWEJsSjEwZ2ZId2daV3d1WVhSMGNuTk5ZWEJiSnpwMGVYQmxKMTA3WEc0Z0lDQWdhV1lnS0haaGJIVmxKREVnSmlZZ0lYUjVjR1ZDYVc1a2FXNW5LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1ltbHVaR2x1WnlBOUlHVnNMbUYwZEhKelRXRndXeWQyTFdKcGJtUTZkbUZzZFdVblhTQS9JQ2QyTFdKcGJtUTZkbUZzZFdVbklEb2dKenAyWVd4MVpTYzdYRzRnSUNBZ0lDQjNZWEp1SkRFb1hHNGdJQ0FnSUNBZ0lHSnBibVJwYm1jZ0t5QmNJajFjWEZ3aVhDSWdLeUIyWVd4MVpTUXhJQ3NnWENKY1hGd2lJR052Ym1ac2FXTjBjeUIzYVhSb0lIWXRiVzlrWld3Z2IyNGdkR2hsSUhOaGJXVWdaV3hsYldWdWRDQmNJaUFyWEc0Z0lDQWdJQ0FnSUNkaVpXTmhkWE5sSUhSb1pTQnNZWFIwWlhJZ1lXeHlaV0ZrZVNCbGVIQmhibVJ6SUhSdklHRWdkbUZzZFdVZ1ltbHVaR2x1WnlCcGJuUmxjbTVoYkd4NUp5eGNiaUFnSUNBZ0lDQWdaV3d1Y21GM1FYUjBjbk5OWVhCYlltbHVaR2x1WjExY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2RtRnlJSEpsWmlBOUlHMXZaR2xtYVdWeWN5QjhmQ0I3ZlR0Y2JpQWdkbUZ5SUd4aGVua2dQU0J5WldZdWJHRjZlVHRjYmlBZ2RtRnlJRzUxYldKbGNpQTlJSEpsWmk1dWRXMWlaWEk3WEc0Z0lIWmhjaUIwY21sdElEMGdjbVZtTG5SeWFXMDdYRzRnSUhaaGNpQnVaV1ZrUTI5dGNHOXphWFJwYjI1SGRXRnlaQ0E5SUNGc1lYcDVJQ1ltSUhSNWNHVWdJVDA5SUNkeVlXNW5aU2M3WEc0Z0lIWmhjaUJsZG1WdWRDQTlJR3hoZW5sY2JpQWdJQ0EvSUNkamFHRnVaMlVuWEc0Z0lDQWdPaUIwZVhCbElEMDlQU0FuY21GdVoyVW5YRzRnSUNBZ0lDQS9JRkpCVGtkRlgxUlBTMFZPWEc0Z0lDQWdJQ0E2SUNkcGJuQjFkQ2M3WEc1Y2JpQWdkbUZ5SUhaaGJIVmxSWGh3Y21WemMybHZiaUE5SUNja1pYWmxiblF1ZEdGeVoyVjBMblpoYkhWbEp6dGNiaUFnYVdZZ0tIUnlhVzBwSUh0Y2JpQWdJQ0IyWVd4MVpVVjRjSEpsYzNOcGIyNGdQU0JjSWlSbGRtVnVkQzUwWVhKblpYUXVkbUZzZFdVdWRISnBiU2dwWENJN1hHNGdJSDFjYmlBZ2FXWWdLRzUxYldKbGNpa2dlMXh1SUNBZ0lIWmhiSFZsUlhod2NtVnpjMmx2YmlBOUlGd2lYMjRvWENJZ0t5QjJZV3gxWlVWNGNISmxjM05wYjI0Z0t5QmNJaWxjSWp0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJqYjJSbElEMGdaMlZ1UVhOemFXZHViV1Z1ZEVOdlpHVW9kbUZzZFdVc0lIWmhiSFZsUlhod2NtVnpjMmx2YmlrN1hHNGdJR2xtSUNodVpXVmtRMjl0Y0c5emFYUnBiMjVIZFdGeVpDa2dlMXh1SUNBZ0lHTnZaR1VnUFNCY0ltbG1LQ1JsZG1WdWRDNTBZWEpuWlhRdVkyOXRjRzl6YVc1bktYSmxkSFZ5Ymp0Y0lpQXJJR052WkdVN1hHNGdJSDFjYmx4dUlDQmhaR1JRY205d0tHVnNMQ0FuZG1Gc2RXVW5MQ0FvWENJb1hDSWdLeUIyWVd4MVpTQXJJRndpS1Z3aUtTazdYRzRnSUdGa1pFaGhibVJzWlhJb1pXd3NJR1YyWlc1MExDQmpiMlJsTENCdWRXeHNMQ0IwY25WbEtUdGNiaUFnYVdZZ0tIUnlhVzBnZkh3Z2JuVnRZbVZ5S1NCN1hHNGdJQ0FnWVdSa1NHRnVaR3hsY2lobGJDd2dKMkpzZFhJbkxDQW5KR1p2Y21ObFZYQmtZWFJsS0NrbktUdGNiaUFnZlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1THk4Z2JtOXliV0ZzYVhwbElIWXRiVzlrWld3Z1pYWmxiblFnZEc5clpXNXpJSFJvWVhRZ1kyRnVJRzl1YkhrZ1ltVWdaR1YwWlhKdGFXNWxaQ0JoZENCeWRXNTBhVzFsTGx4dUx5OGdhWFFuY3lCcGJYQnZjblJoYm5RZ2RHOGdjR3hoWTJVZ2RHaGxJR1YyWlc1MElHRnpJSFJvWlNCbWFYSnpkQ0JwYmlCMGFHVWdZWEp5WVhrZ1ltVmpZWFZ6WlZ4dUx5OGdkR2hsSUhkb2IyeGxJSEJ2YVc1MElHbHpJR1Z1YzNWeWFXNW5JSFJvWlNCMkxXMXZaR1ZzSUdOaGJHeGlZV05ySUdkbGRITWdZMkZzYkdWa0lHSmxabTl5WlZ4dUx5OGdkWE5sY2kxaGRIUmhZMmhsWkNCb1lXNWtiR1Z5Y3k1Y2JtWjFibU4wYVc5dUlHNXZjbTFoYkdsNlpVVjJaVzUwY3lBb2IyNHBJSHRjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292WEc0Z0lHbG1JQ2hwYzBSbFppaHZibHRTUVU1SFJWOVVUMHRGVGwwcEtTQjdYRzRnSUNBZ0x5OGdTVVVnYVc1d2RYUmJkSGx3WlQxeVlXNW5aVjBnYjI1c2VTQnpkWEJ3YjNKMGN5QmdZMmhoYm1kbFlDQmxkbVZ1ZEZ4dUlDQWdJSFpoY2lCbGRtVnVkQ0E5SUdselNVVWdQeUFuWTJoaGJtZGxKeUE2SUNkcGJuQjFkQ2M3WEc0Z0lDQWdiMjViWlhabGJuUmRJRDBnVzEwdVkyOXVZMkYwS0c5dVcxSkJUa2RGWDFSUFMwVk9YU3dnYjI1YlpYWmxiblJkSUh4OElGdGRLVHRjYmlBZ0lDQmtaV3hsZEdVZ2IyNWJVa0ZPUjBWZlZFOUxSVTVkTzF4dUlDQjlYRzRnSUM4dklGUm9hWE1nZDJGeklHOXlhV2RwYm1Gc2JIa2dhVzUwWlc1a1pXUWdkRzhnWm1sNElDTTBOVEl4SUdKMWRDQnVieUJzYjI1blpYSWdibVZqWlhOellYSjVYRzRnSUM4dklHRm1kR1Z5SURJdU5TNGdTMlZsY0dsdVp5QnBkQ0JtYjNJZ1ltRmphM2RoY21SeklHTnZiWEJoZENCM2FYUm9JR2RsYm1WeVlYUmxaQ0JqYjJSbElHWnliMjBnUENBeUxqUmNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUdsbUlDaHBjMFJsWmlodmJsdERTRVZEUzBKUFdGOVNRVVJKVDE5VVQwdEZUbDBwS1NCN1hHNGdJQ0FnYjI0dVkyaGhibWRsSUQwZ1cxMHVZMjl1WTJGMEtHOXVXME5JUlVOTFFrOVlYMUpCUkVsUFgxUlBTMFZPWFN3Z2IyNHVZMmhoYm1kbElIeDhJRnRkS1R0Y2JpQWdJQ0JrWld4bGRHVWdiMjViUTBoRlEwdENUMWhmVWtGRVNVOWZWRTlMUlU1ZE8xeHVJQ0I5WEc1OVhHNWNiblpoY2lCMFlYSm5aWFFrTVR0Y2JseHVablZ1WTNScGIyNGdZM0psWVhSbFQyNWpaVWhoYm1Sc1pYSWtNU0FvWlhabGJuUXNJR2hoYm1Sc1pYSXNJR05oY0hSMWNtVXBJSHRjYmlBZ2RtRnlJRjkwWVhKblpYUWdQU0IwWVhKblpYUWtNVHNnTHk4Z2MyRjJaU0JqZFhKeVpXNTBJSFJoY21kbGRDQmxiR1Z0Wlc1MElHbHVJR05zYjNOMWNtVmNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJRzl1WTJWSVlXNWtiR1Z5SUNncElIdGNiaUFnSUNCMllYSWdjbVZ6SUQwZ2FHRnVaR3hsY2k1aGNIQnNlU2h1ZFd4c0xDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lHbG1JQ2h5WlhNZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxiVzkyWlNReUtHVjJaVzUwTENCdmJtTmxTR0Z1Wkd4bGNpd2dZMkZ3ZEhWeVpTd2dYM1JoY21kbGRDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaTh2SUNNNU5EUTJPaUJHYVhKbFptOTRJRHc5SURVeklDaHBiaUJ3WVhKMGFXTjFiR0Z5TENCRlUxSWdOVElwSUdoaGN5QnBibU52Y25KbFkzUWdSWFpsYm5RdWRHbHRaVk4wWVcxd1hHNHZMeUJwYlhCc1pXMWxiblJoZEdsdmJpQmhibVFnWkc5bGN5QnViM1FnWm1seVpTQnRhV055YjNSaGMydHpJR2x1SUdKbGRIZGxaVzRnWlhabGJuUWdjSEp2Y0dGbllYUnBiMjRzSUhOdlhHNHZMeUJ6WVdabElIUnZJR1Y0WTJ4MVpHVXVYRzUyWVhJZ2RYTmxUV2xqY205MFlYTnJSbWw0SUQwZ2FYTlZjMmx1WjAxcFkzSnZWR0Z6YXlBbUppQWhLR2x6UmtZZ0ppWWdUblZ0WW1WeUtHbHpSa1piTVYwcElEdzlJRFV6S1R0Y2JseHVablZ1WTNScGIyNGdZV1JrSkRFZ0tGeHVJQ0J1WVcxbExGeHVJQ0JvWVc1a2JHVnlMRnh1SUNCallYQjBkWEpsTEZ4dUlDQndZWE56YVhabFhHNHBJSHRjYmlBZ0x5OGdZWE41Ym1NZ1pXUm5aU0JqWVhObElDTTJOVFkyT2lCcGJtNWxjaUJqYkdsamF5QmxkbVZ1ZENCMGNtbG5aMlZ5Y3lCd1lYUmphQ3dnWlhabGJuUWdhR0Z1Wkd4bGNseHVJQ0F2THlCaGRIUmhZMmhsWkNCMGJ5QnZkWFJsY2lCbGJHVnRaVzUwSUdSMWNtbHVaeUJ3WVhSamFDd2dZVzVrSUhSeWFXZG5aWEpsWkNCaFoyRnBiaTRnVkdocGMxeHVJQ0F2THlCb1lYQndaVzV6SUdKbFkyRjFjMlVnWW5KdmQzTmxjbk1nWm1seVpTQnRhV055YjNSaGMyc2dkR2xqYTNNZ1ltVjBkMlZsYmlCbGRtVnVkQ0J3Y205d1lXZGhkR2x2Ymk1Y2JpQWdMeThnZEdobElITnZiSFYwYVc5dUlHbHpJSE5wYlhCc1pUb2dkMlVnYzJGMlpTQjBhR1VnZEdsdFpYTjBZVzF3SUhkb1pXNGdZU0JvWVc1a2JHVnlJR2x6SUdGMGRHRmphR1ZrTEZ4dUlDQXZMeUJoYm1RZ2RHaGxJR2hoYm1Sc1pYSWdkMjkxYkdRZ2IyNXNlU0JtYVhKbElHbG1JSFJvWlNCbGRtVnVkQ0J3WVhOelpXUWdkRzhnYVhRZ2QyRnpJR1pwY21Wa1hHNGdJQzh2SUVGR1ZFVlNJR2wwSUhkaGN5QmhkSFJoWTJobFpDNWNiaUFnYVdZZ0tIVnpaVTFwWTNKdmRHRnphMFpwZUNrZ2UxeHVJQ0FnSUhaaGNpQmhkSFJoWTJobFpGUnBiV1Z6ZEdGdGNDQTlJR04xY25KbGJuUkdiSFZ6YUZScGJXVnpkR0Z0Y0R0Y2JpQWdJQ0IyWVhJZ2IzSnBaMmx1WVd3Z1BTQm9ZVzVrYkdWeU8xeHVJQ0FnSUdoaGJtUnNaWElnUFNCdmNtbG5hVzVoYkM1ZmQzSmhjSEJsY2lBOUlHWjFibU4wYVc5dUlDaGxLU0I3WEc0Z0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDOHZJRzV2SUdKMVltSnNhVzVuTENCemFHOTFiR1FnWVd4M1lYbHpJR1pwY21VdVhHNGdJQ0FnSUNBZ0lDOHZJSFJvYVhNZ2FYTWdhblZ6ZENCaElITmhabVYwZVNCdVpYUWdhVzRnWTJGelpTQmxkbVZ1ZEM1MGFXMWxVM1JoYlhBZ2FYTWdkVzV5Wld4cFlXSnNaU0JwYmx4dUlDQWdJQ0FnSUNBdkx5QmpaWEowWVdsdUlIZGxhWEprSUdWdWRtbHliMjV0Wlc1MGN5NHVMbHh1SUNBZ0lDQWdJQ0JsTG5SaGNtZGxkQ0E5UFQwZ1pTNWpkWEp5Wlc1MFZHRnlaMlYwSUh4OFhHNGdJQ0FnSUNBZ0lDOHZJR1YyWlc1MElHbHpJR1pwY21Wa0lHRm1kR1Z5SUdoaGJtUnNaWElnWVhSMFlXTm9iV1Z1ZEZ4dUlDQWdJQ0FnSUNCbExuUnBiV1ZUZEdGdGNDQStQU0JoZEhSaFkyaGxaRlJwYldWemRHRnRjQ0I4ZkZ4dUlDQWdJQ0FnSUNBdkx5QmlZV2xzSUdadmNpQmxiblpwY205dWJXVnVkSE1nZEdoaGRDQm9ZWFpsSUdKMVoyZDVJR1YyWlc1MExuUnBiV1ZUZEdGdGNDQnBiWEJzWlcxbGJuUmhkR2x2Ym5OY2JpQWdJQ0FnSUNBZ0x5OGdJemswTmpJZ2FVOVRJRGtnWW5Wbk9pQmxkbVZ1ZEM1MGFXMWxVM1JoYlhBZ2FYTWdNQ0JoWm5SbGNpQm9hWE4wYjNKNUxuQjFjMmhUZEdGMFpWeHVJQ0FnSUNBZ0lDQXZMeUFqT1RZNE1TQlJkRmRsWWtWdVoybHVaU0JsZG1WdWRDNTBhVzFsVTNSaGJYQWdhWE1nYm1WbllYUnBkbVVnZG1Gc2RXVmNiaUFnSUNBZ0lDQWdaUzUwYVcxbFUzUmhiWEFnUEQwZ01DQjhmRnh1SUNBZ0lDQWdJQ0F2THlBak9UUTBPQ0JpWVdsc0lHbG1JR1YyWlc1MElHbHpJR1pwY21Wa0lHbHVJR0Z1YjNSb1pYSWdaRzlqZFcxbGJuUWdhVzRnWVNCdGRXeDBhUzF3WVdkbFhHNGdJQ0FnSUNBZ0lDOHZJR1ZzWldOMGNtOXVMMjUzTG1weklHRndjQ3dnYzJsdVkyVWdaWFpsYm5RdWRHbHRaVk4wWVcxd0lIZHBiR3dnWW1VZ2RYTnBibWNnWVNCa2FXWm1aWEpsYm5SY2JpQWdJQ0FnSUNBZ0x5OGdjM1JoY25ScGJtY2djbVZtWlhKbGJtTmxYRzRnSUNBZ0lDQWdJR1V1ZEdGeVoyVjBMbTkzYm1WeVJHOWpkVzFsYm5RZ0lUMDlJR1J2WTNWdFpXNTBYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzl5YVdkcGJtRnNMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlYRzRnSUhSaGNtZGxkQ1F4TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWEc0Z0lDQWdibUZ0WlN4Y2JpQWdJQ0JvWVc1a2JHVnlMRnh1SUNBZ0lITjFjSEJ2Y25SelVHRnpjMmwyWlZ4dUlDQWdJQ0FnUHlCN0lHTmhjSFIxY21VNklHTmhjSFIxY21Vc0lIQmhjM05wZG1VNklIQmhjM05wZG1VZ2ZWeHVJQ0FnSUNBZ09pQmpZWEIwZFhKbFhHNGdJQ2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYlc5MlpTUXlJQ2hjYmlBZ2JtRnRaU3hjYmlBZ2FHRnVaR3hsY2l4Y2JpQWdZMkZ3ZEhWeVpTeGNiaUFnWDNSaGNtZGxkRnh1S1NCN1hHNGdJQ2hmZEdGeVoyVjBJSHg4SUhSaGNtZGxkQ1F4S1M1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtGeHVJQ0FnSUc1aGJXVXNYRzRnSUNBZ2FHRnVaR3hsY2k1ZmQzSmhjSEJsY2lCOGZDQm9ZVzVrYkdWeUxGeHVJQ0FnSUdOaGNIUjFjbVZjYmlBZ0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsUkU5TlRHbHpkR1Z1WlhKeklDaHZiR1JXYm05a1pTd2dkbTV2WkdVcElIdGNiaUFnYVdZZ0tHbHpWVzVrWldZb2IyeGtWbTV2WkdVdVpHRjBZUzV2YmlrZ0ppWWdhWE5WYm1SbFppaDJibTlrWlM1a1lYUmhMbTl1S1NrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNGdJSFpoY2lCdmJpQTlJSFp1YjJSbExtUmhkR0V1YjI0Z2ZId2dlMzA3WEc0Z0lIWmhjaUJ2YkdSUGJpQTlJRzlzWkZadWIyUmxMbVJoZEdFdWIyNGdmSHdnZTMwN1hHNGdJSFJoY21kbGRDUXhJRDBnZG01dlpHVXVaV3h0TzF4dUlDQnViM0p0WVd4cGVtVkZkbVZ1ZEhNb2IyNHBPMXh1SUNCMWNHUmhkR1ZNYVhOMFpXNWxjbk1vYjI0c0lHOXNaRTl1TENCaFpHUWtNU3dnY21WdGIzWmxKRElzSUdOeVpXRjBaVTl1WTJWSVlXNWtiR1Z5SkRFc0lIWnViMlJsTG1OdmJuUmxlSFFwTzF4dUlDQjBZWEpuWlhRa01TQTlJSFZ1WkdWbWFXNWxaRHRjYm4xY2JseHVkbUZ5SUdWMlpXNTBjeUE5SUh0Y2JpQWdZM0psWVhSbE9pQjFjR1JoZEdWRVQwMU1hWE4wWlc1bGNuTXNYRzRnSUhWd1pHRjBaVG9nZFhCa1lYUmxSRTlOVEdsemRHVnVaWEp6WEc1OU8xeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlITjJaME52Ym5SaGFXNWxjanRjYmx4dVpuVnVZM1JwYjI0Z2RYQmtZWFJsUkU5TlVISnZjSE1nS0c5c1pGWnViMlJsTENCMmJtOWtaU2tnZTF4dUlDQnBaaUFvYVhOVmJtUmxaaWh2YkdSV2JtOWtaUzVrWVhSaExtUnZiVkJ5YjNCektTQW1KaUJwYzFWdVpHVm1LSFp1YjJSbExtUmhkR0V1Wkc5dFVISnZjSE1wS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdkbUZ5SUd0bGVTd2dZM1Z5TzF4dUlDQjJZWElnWld4dElEMGdkbTV2WkdVdVpXeHRPMXh1SUNCMllYSWdiMnhrVUhKdmNITWdQU0J2YkdSV2JtOWtaUzVrWVhSaExtUnZiVkJ5YjNCeklIeDhJSHQ5TzF4dUlDQjJZWElnY0hKdmNITWdQU0IyYm05a1pTNWtZWFJoTG1SdmJWQnliM0J6SUh4OElIdDlPMXh1SUNBdkx5QmpiRzl1WlNCdlluTmxjblpsWkNCdlltcGxZM1J6TENCaGN5QjBhR1VnZFhObGNpQndjbTlpWVdKc2VTQjNZVzUwY3lCMGJ5QnRkWFJoZEdVZ2FYUmNiaUFnYVdZZ0tHbHpSR1ZtS0hCeWIzQnpMbDlmYjJKZlh5a3BJSHRjYmlBZ0lDQndjbTl3Y3lBOUlIWnViMlJsTG1SaGRHRXVaRzl0VUhKdmNITWdQU0JsZUhSbGJtUW9lMzBzSUhCeWIzQnpLVHRjYmlBZ2ZWeHVYRzRnSUdadmNpQW9hMlY1SUdsdUlHOXNaRkJ5YjNCektTQjdYRzRnSUNBZ2FXWWdLQ0VvYTJWNUlHbHVJSEJ5YjNCektTa2dlMXh1SUNBZ0lDQWdaV3h0VzJ0bGVWMGdQU0FuSnp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWIzSWdLR3RsZVNCcGJpQndjbTl3Y3lrZ2UxeHVJQ0FnSUdOMWNpQTlJSEJ5YjNCelcydGxlVjA3WEc0Z0lDQWdMeThnYVdkdWIzSmxJR05vYVd4a2NtVnVJR2xtSUhSb1pTQnViMlJsSUdoaGN5QjBaWGgwUTI5dWRHVnVkQ0J2Y2lCcGJtNWxja2hVVFV3c1hHNGdJQ0FnTHk4Z1lYTWdkR2hsYzJVZ2QybHNiQ0IwYUhKdmR5QmhkMkY1SUdWNGFYTjBhVzVuSUVSUFRTQnViMlJsY3lCaGJtUWdZMkYxYzJVZ2NtVnRiM1poYkNCbGNuSnZjbk5jYmlBZ0lDQXZMeUJ2YmlCemRXSnpaWEYxWlc1MElIQmhkR05vWlhNZ0tDTXpNell3S1Z4dUlDQWdJR2xtSUNoclpYa2dQVDA5SUNkMFpYaDBRMjl1ZEdWdWRDY2dmSHdnYTJWNUlEMDlQU0FuYVc1dVpYSklWRTFNSnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFp1YjJSbExtTm9hV3hrY21WdUtTQjdJSFp1YjJSbExtTm9hV3hrY21WdUxteGxibWQwYUNBOUlEQTdJSDFjYmlBZ0lDQWdJR2xtSUNoamRYSWdQVDA5SUc5c1pGQnliM0J6VzJ0bGVWMHBJSHNnWTI5dWRHbHVkV1VnZlZ4dUlDQWdJQ0FnTHk4Z0l6WTJNREVnZDI5eWF5QmhjbTkxYm1RZ1EyaHliMjFsSUhabGNuTnBiMjRnUEQwZ05UVWdZblZuSUhkb1pYSmxJSE5wYm1kc1pTQjBaWGgwVG05a1pWeHVJQ0FnSUNBZ0x5OGdjbVZ3YkdGalpXUWdZbmtnYVc1dVpYSklWRTFNTDNSbGVIUkRiMjUwWlc1MElISmxkR0ZwYm5NZ2FYUnpJSEJoY21WdWRFNXZaR1VnY0hKdmNHVnlkSGxjYmlBZ0lDQWdJR2xtSUNobGJHMHVZMmhwYkdST2IyUmxjeTVzWlc1bmRHZ2dQVDA5SURFcElIdGNiaUFnSUNBZ0lDQWdaV3h0TG5KbGJXOTJaVU5vYVd4a0tHVnNiUzVqYUdsc1pFNXZaR1Z6V3pCZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hMlY1SUQwOVBTQW5kbUZzZFdVbklDWW1JR1ZzYlM1MFlXZE9ZVzFsSUNFOVBTQW5VRkpQUjFKRlUxTW5LU0I3WEc0Z0lDQWdJQ0F2THlCemRHOXlaU0IyWVd4MVpTQmhjeUJmZG1Gc2RXVWdZWE1nZDJWc2JDQnphVzVqWlZ4dUlDQWdJQ0FnTHk4Z2JtOXVMWE4wY21sdVp5QjJZV3gxWlhNZ2QybHNiQ0JpWlNCemRISnBibWRwWm1sbFpGeHVJQ0FnSUNBZ1pXeHRMbDkyWVd4MVpTQTlJR04xY2p0Y2JpQWdJQ0FnSUM4dklHRjJiMmxrSUhKbGMyVjBkR2x1WnlCamRYSnpiM0lnY0c5emFYUnBiMjRnZDJobGJpQjJZV3gxWlNCcGN5QjBhR1VnYzJGdFpWeHVJQ0FnSUNBZ2RtRnlJSE4wY2tOMWNpQTlJR2x6Vlc1a1pXWW9ZM1Z5S1NBL0lDY25JRG9nVTNSeWFXNW5LR04xY2lrN1hHNGdJQ0FnSUNCcFppQW9jMmh2ZFd4a1ZYQmtZWFJsVm1Gc2RXVW9aV3h0TENCemRISkRkWElwS1NCN1hHNGdJQ0FnSUNBZ0lHVnNiUzUyWVd4MVpTQTlJSE4wY2tOMWNqdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHdGxlU0E5UFQwZ0oybHVibVZ5U0ZSTlRDY2dKaVlnYVhOVFZrY29aV3h0TG5SaFowNWhiV1VwSUNZbUlHbHpWVzVrWldZb1pXeHRMbWx1Ym1WeVNGUk5UQ2twSUh0Y2JpQWdJQ0FnSUM4dklFbEZJR1J2WlhOdUozUWdjM1Z3Y0c5eWRDQnBibTVsY2toVVRVd2dabTl5SUZOV1J5QmxiR1Z0Wlc1MGMxeHVJQ0FnSUNBZ2MzWm5RMjl1ZEdGcGJtVnlJRDBnYzNablEyOXVkR0ZwYm1WeUlIeDhJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTzF4dUlDQWdJQ0FnYzNablEyOXVkR0ZwYm1WeUxtbHVibVZ5U0ZSTlRDQTlJRndpUEhOMlp6NWNJaUFySUdOMWNpQXJJRndpUEM5emRtYytYQ0k3WEc0Z0lDQWdJQ0IyWVhJZ2MzWm5JRDBnYzNablEyOXVkR0ZwYm1WeUxtWnBjbk4wUTJocGJHUTdYRzRnSUNBZ0lDQjNhR2xzWlNBb1pXeHRMbVpwY25OMFEyaHBiR1FwSUh0Y2JpQWdJQ0FnSUNBZ1pXeHRMbkpsYlc5MlpVTm9hV3hrS0dWc2JTNW1hWEp6ZEVOb2FXeGtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSGRvYVd4bElDaHpkbWN1Wm1seWMzUkRhR2xzWkNrZ2UxeHVJQ0FnSUNBZ0lDQmxiRzB1WVhCd1pXNWtRMmhwYkdRb2MzWm5MbVpwY25OMFEyaHBiR1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdJQ0F2THlCemEybHdJSFJvWlNCMWNHUmhkR1VnYVdZZ2IyeGtJR0Z1WkNCdVpYY2dWa1JQVFNCemRHRjBaU0JwY3lCMGFHVWdjMkZ0WlM1Y2JpQWdJQ0FnSUM4dklHQjJZV3gxWldBZ2FYTWdhR0Z1Wkd4bFpDQnpaWEJoY21GMFpXeDVJR0psWTJGMWMyVWdkR2hsSUVSUFRTQjJZV3gxWlNCdFlYa2dZbVVnZEdWdGNHOXlZWEpwYkhsY2JpQWdJQ0FnSUM4dklHOTFkQ0J2WmlCemVXNWpJSGRwZEdnZ1ZrUlBUU0J6ZEdGMFpTQmtkV1VnZEc4Z1ptOWpkWE1zSUdOdmJYQnZjMmwwYVc5dUlHRnVaQ0J0YjJScFptbGxjbk11WEc0Z0lDQWdJQ0F2THlCVWFHbHpJQ0FqTkRVeU1TQmllU0J6YTJsd2NHbHVaeUIwYUdVZ2RXNXVaV05sYzJGeWNua2dZR05vWldOclpXUmdJSFZ3WkdGMFpTNWNiaUFnSUNBZ0lHTjFjaUFoUFQwZ2IyeGtVSEp2Y0hOYmEyVjVYVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdMeThnYzI5dFpTQndjbTl3WlhKMGVTQjFjR1JoZEdWeklHTmhiaUIwYUhKdmQxeHVJQ0FnSUNBZ0x5OGdaUzVuTGlCZ2RtRnNkV1ZnSUc5dUlEeHdjbTluY21WemN6NGdkeThnYm05dUxXWnBibWwwWlNCMllXeDFaVnh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1pXeHRXMnRsZVYwZ1BTQmpkWEk3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHZMeUJqYUdWamF5QndiR0YwWm05eWJYTXZkMlZpTDNWMGFXd3ZZWFIwY25NdWFuTWdZV05qWlhCMFZtRnNkV1ZjYmx4dVhHNW1kVzVqZEdsdmJpQnphRzkxYkdSVmNHUmhkR1ZXWVd4MVpTQW9aV3h0TENCamFHVmphMVpoYkNrZ2UxeHVJQ0J5WlhSMWNtNGdLQ0ZsYkcwdVkyOXRjRzl6YVc1bklDWW1JQ2hjYmlBZ0lDQmxiRzB1ZEdGblRtRnRaU0E5UFQwZ0owOVFWRWxQVGljZ2ZIeGNiaUFnSUNCcGMwNXZkRWx1Um05amRYTkJibVJFYVhKMGVTaGxiRzBzSUdOb1pXTnJWbUZzS1NCOGZGeHVJQ0FnSUdselJHbHlkSGxYYVhSb1RXOWthV1pwWlhKektHVnNiU3dnWTJobFkydFdZV3dwWEc0Z0lDa3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpUbTkwU1c1R2IyTjFjMEZ1WkVScGNuUjVJQ2hsYkcwc0lHTm9aV05yVm1Gc0tTQjdYRzRnSUM4dklISmxkSFZ5YmlCMGNuVmxJSGRvWlc0Z2RHVjRkR0p2ZUNBb0xtNTFiV0psY2lCaGJtUWdMblJ5YVcwcElHeHZjMlZ6SUdadlkzVnpJR0Z1WkNCcGRITWdkbUZzZFdVZ2FYTmNiaUFnTHk4Z2JtOTBJR1Z4ZFdGc0lIUnZJSFJvWlNCMWNHUmhkR1ZrSUhaaGJIVmxYRzRnSUhaaGNpQnViM1JKYmtadlkzVnpJRDBnZEhKMVpUdGNiaUFnTHk4Z0l6WXhOVGRjYmlBZ0x5OGdkMjl5YXlCaGNtOTFibVFnU1VVZ1luVm5JSGRvWlc0Z1lXTmpaWE56YVc1bklHUnZZM1Z0Wlc1MExtRmpkR2wyWlVWc1pXMWxiblFnYVc0Z1lXNGdhV1p5WVcxbFhHNGdJSFJ5ZVNCN0lHNXZkRWx1Um05amRYTWdQU0JrYjJOMWJXVnVkQzVoWTNScGRtVkZiR1Z0Wlc1MElDRTlQU0JsYkcwN0lIMGdZMkYwWTJnZ0tHVXBJSHQ5WEc0Z0lISmxkSFZ5YmlCdWIzUkpia1p2WTNWeklDWW1JR1ZzYlM1MllXeDFaU0FoUFQwZ1kyaGxZMnRXWVd4Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhORWFYSjBlVmRwZEdoTmIyUnBabWxsY25NZ0tHVnNiU3dnYm1WM1ZtRnNLU0I3WEc0Z0lIWmhjaUIyWVd4MVpTQTlJR1ZzYlM1MllXeDFaVHRjYmlBZ2RtRnlJRzF2WkdsbWFXVnljeUE5SUdWc2JTNWZkazF2WkdsbWFXVnljenNnTHk4Z2FXNXFaV04wWldRZ1lua2dkaTF0YjJSbGJDQnlkVzUwYVcxbFhHNGdJR2xtSUNocGMwUmxaaWh0YjJScFptbGxjbk1wS1NCN1hHNGdJQ0FnYVdZZ0tHMXZaR2xtYVdWeWN5NXVkVzFpWlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGIwNTFiV0psY2loMllXeDFaU2tnSVQwOUlIUnZUblZ0WW1WeUtHNWxkMVpoYkNsY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0cxdlpHbG1hV1Z5Y3k1MGNtbHRLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVdWRISnBiU2dwSUNFOVBTQnVaWGRXWVd3dWRISnBiU2dwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjJZV3gxWlNBaFBUMGdibVYzVm1Gc1hHNTlYRzVjYm5aaGNpQmtiMjFRY205d2N5QTlJSHRjYmlBZ1kzSmxZWFJsT2lCMWNHUmhkR1ZFVDAxUWNtOXdjeXhjYmlBZ2RYQmtZWFJsT2lCMWNHUmhkR1ZFVDAxUWNtOXdjMXh1ZlR0Y2JseHVMeW9nSUNvdlhHNWNiblpoY2lCd1lYSnpaVk4wZVd4bFZHVjRkQ0E5SUdOaFkyaGxaQ2htZFc1amRHbHZiaUFvWTNOelZHVjRkQ2tnZTF4dUlDQjJZWElnY21WeklEMGdlMzA3WEc0Z0lIWmhjaUJzYVhOMFJHVnNhVzFwZEdWeUlEMGdMenNvUHlGYlhpaGRLbHhjS1Nrdlp6dGNiaUFnZG1GeUlIQnliM0JsY25SNVJHVnNhVzFwZEdWeUlEMGdMem9vTGlzcEx6dGNiaUFnWTNOelZHVjRkQzV6Y0d4cGRDaHNhWE4wUkdWc2FXMXBkR1Z5S1M1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNocGRHVnRLU0I3WEc0Z0lDQWdhV1lnS0dsMFpXMHBJSHRjYmlBZ0lDQWdJSFpoY2lCMGJYQWdQU0JwZEdWdExuTndiR2wwS0hCeWIzQmxjblI1UkdWc2FXMXBkR1Z5S1R0Y2JpQWdJQ0FnSUhSdGNDNXNaVzVuZEdnZ1BpQXhJQ1ltSUNoeVpYTmJkRzF3V3pCZExuUnlhVzBvS1YwZ1BTQjBiWEJiTVYwdWRISnBiU2dwS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1SUNCeVpYUjFjbTRnY21WelhHNTlLVHRjYmx4dUx5OGdiV1Z5WjJVZ2MzUmhkR2xqSUdGdVpDQmtlVzVoYldsaklITjBlV3hsSUdSaGRHRWdiMjRnZEdobElITmhiV1VnZG01dlpHVmNibVoxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVk4wZVd4bFJHRjBZU0FvWkdGMFlTa2dlMXh1SUNCMllYSWdjM1I1YkdVZ1BTQnViM0p0WVd4cGVtVlRkSGxzWlVKcGJtUnBibWNvWkdGMFlTNXpkSGxzWlNrN1hHNGdJQzh2SUhOMFlYUnBZeUJ6ZEhsc1pTQnBjeUJ3Y21VdGNISnZZMlZ6YzJWa0lHbHVkRzhnWVc0Z2IySnFaV04wSUdSMWNtbHVaeUJqYjIxd2FXeGhkR2x2Ymx4dUlDQXZMeUJoYm1RZ2FYTWdZV3gzWVhseklHRWdabkpsYzJnZ2IySnFaV04wTENCemJ5QnBkQ2R6SUhOaFptVWdkRzhnYldWeVoyVWdhVzUwYnlCcGRGeHVJQ0J5WlhSMWNtNGdaR0YwWVM1emRHRjBhV05UZEhsc1pWeHVJQ0FnSUQ4Z1pYaDBaVzVrS0dSaGRHRXVjM1JoZEdsalUzUjViR1VzSUhOMGVXeGxLVnh1SUNBZ0lEb2djM1I1YkdWY2JuMWNibHh1THk4Z2JtOXliV0ZzYVhwbElIQnZjM05wWW14bElHRnljbUY1SUM4Z2MzUnlhVzVuSUhaaGJIVmxjeUJwYm5SdklFOWlhbVZqZEZ4dVpuVnVZM1JwYjI0Z2JtOXliV0ZzYVhwbFUzUjViR1ZDYVc1a2FXNW5JQ2hpYVc1a2FXNW5VM1I1YkdVcElIdGNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWW1sdVpHbHVaMU4wZVd4bEtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGIwOWlhbVZqZENoaWFXNWthVzVuVTNSNWJHVXBYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJpYVc1a2FXNW5VM1I1YkdVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQmhjbk5sVTNSNWJHVlVaWGgwS0dKcGJtUnBibWRUZEhsc1pTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z1ltbHVaR2x1WjFOMGVXeGxYRzU5WEc1Y2JpOHFLbHh1SUNvZ2NHRnlaVzUwSUdOdmJYQnZibVZ1ZENCemRIbHNaU0J6YUc5MWJHUWdZbVVnWVdaMFpYSWdZMmhwYkdRbmMxeHVJQ29nYzI4Z2RHaGhkQ0J3WVhKbGJuUWdZMjl0Y0c5dVpXNTBKM01nYzNSNWJHVWdZMjkxYkdRZ2IzWmxjbkpwWkdVZ2FYUmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBVM1I1YkdVZ0tIWnViMlJsTENCamFHVmphME5vYVd4a0tTQjdYRzRnSUhaaGNpQnlaWE1nUFNCN2ZUdGNiaUFnZG1GeUlITjBlV3hsUkdGMFlUdGNibHh1SUNCcFppQW9ZMmhsWTJ0RGFHbHNaQ2tnZTF4dUlDQWdJSFpoY2lCamFHbHNaRTV2WkdVZ1BTQjJibTlrWlR0Y2JpQWdJQ0IzYUdsc1pTQW9ZMmhwYkdST2IyUmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxLU0I3WEc0Z0lDQWdJQ0JqYUdsc1pFNXZaR1VnUFNCamFHbHNaRTV2WkdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVdVgzWnViMlJsTzF4dUlDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQmphR2xzWkU1dlpHVWdKaVlnWTJocGJHUk9iMlJsTG1SaGRHRWdKaVpjYmlBZ0lDQWdJQ0FnS0hOMGVXeGxSR0YwWVNBOUlHNXZjbTFoYkdsNlpWTjBlV3hsUkdGMFlTaGphR2xzWkU1dlpHVXVaR0YwWVNrcFhHNGdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdaWGgwWlc1a0tISmxjeXdnYzNSNWJHVkVZWFJoS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcFppQW9LSE4wZVd4bFJHRjBZU0E5SUc1dmNtMWhiR2w2WlZOMGVXeGxSR0YwWVNoMmJtOWtaUzVrWVhSaEtTa3BJSHRjYmlBZ0lDQmxlSFJsYm1Rb2NtVnpMQ0J6ZEhsc1pVUmhkR0VwTzF4dUlDQjlYRzVjYmlBZ2RtRnlJSEJoY21WdWRFNXZaR1VnUFNCMmJtOWtaVHRjYmlBZ2QyaHBiR1VnS0Nod1lYSmxiblJPYjJSbElEMGdjR0Z5Wlc1MFRtOWtaUzV3WVhKbGJuUXBLU0I3WEc0Z0lDQWdhV1lnS0hCaGNtVnVkRTV2WkdVdVpHRjBZU0FtSmlBb2MzUjViR1ZFWVhSaElEMGdibTl5YldGc2FYcGxVM1I1YkdWRVlYUmhLSEJoY21WdWRFNXZaR1V1WkdGMFlTa3BLU0I3WEc0Z0lDQWdJQ0JsZUhSbGJtUW9jbVZ6TENCemRIbHNaVVJoZEdFcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WelhHNTlYRzVjYmk4cUlDQXFMMXh1WEc1MllYSWdZM056Vm1GeVVrVWdQU0F2WGkwdEx6dGNiblpoY2lCcGJYQnZjblJoYm5SU1JTQTlJQzljWEhNcUlXbHRjRzl5ZEdGdWRDUXZPMXh1ZG1GeUlITmxkRkJ5YjNBZ1BTQm1kVzVqZEdsdmJpQW9aV3dzSUc1aGJXVXNJSFpoYkNrZ2UxeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYVdZZ0tpOWNiaUFnYVdZZ0tHTnpjMVpoY2xKRkxuUmxjM1FvYm1GdFpTa3BJSHRjYmlBZ0lDQmxiQzV6ZEhsc1pTNXpaWFJRY205d1pYSjBlU2h1WVcxbExDQjJZV3dwTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLR2x0Y0c5eWRHRnVkRkpGTG5SbGMzUW9kbUZzS1NrZ2UxeHVJQ0FnSUdWc0xuTjBlV3hsTG5ObGRGQnliM0JsY25SNUtHaDVjR2hsYm1GMFpTaHVZVzFsS1N3Z2RtRnNMbkpsY0d4aFkyVW9hVzF3YjNKMFlXNTBVa1VzSUNjbktTd2dKMmx0Y0c5eWRHRnVkQ2NwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhaaGNpQnViM0p0WVd4cGVtVmtUbUZ0WlNBOUlHNXZjbTFoYkdsNlpTaHVZVzFsS1R0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd3cEtTQjdYRzRnSUNBZ0lDQXZMeUJUZFhCd2IzSjBJSFpoYkhWbGN5QmhjbkpoZVNCamNtVmhkR1ZrSUdKNUlHRjFkRzl3Y21WbWFYaGxjaXdnWlM1bkxseHVJQ0FnSUNBZ0x5OGdlMlJwYzNCc1lYazZJRnRjSWkxM1pXSnJhWFF0WW05NFhDSXNJRndpTFcxekxXWnNaWGhpYjNoY0lpd2dYQ0ptYkdWNFhDSmRmVnh1SUNBZ0lDQWdMeThnVTJWMElIUm9aVzBnYjI1bElHSjVJRzl1WlN3Z1lXNWtJSFJvWlNCaWNtOTNjMlZ5SUhkcGJHd2diMjVzZVNCelpYUWdkR2h2YzJVZ2FYUWdZMkZ1SUhKbFkyOW5ibWw2WlZ4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYmlBOUlIWmhiQzVzWlc1bmRHZzdJR2tnUENCc1pXNDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQmxiQzV6ZEhsc1pWdHViM0p0WVd4cGVtVmtUbUZ0WlYwZ1BTQjJZV3hiYVYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1ZzTG5OMGVXeGxXMjV2Y20xaGJHbDZaV1JPWVcxbFhTQTlJSFpoYkR0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JuWmhjaUIyWlc1a2IzSk9ZVzFsY3lBOUlGc25WMlZpYTJsMEp5d2dKMDF2ZWljc0lDZHRjeWRkTzF4dVhHNTJZWElnWlcxd2RIbFRkSGxzWlR0Y2JuWmhjaUJ1YjNKdFlXeHBlbVVnUFNCallXTm9aV1FvWm5WdVkzUnBiMjRnS0hCeWIzQXBJSHRjYmlBZ1pXMXdkSGxUZEhsc1pTQTlJR1Z0Y0hSNVUzUjViR1VnZkh3Z1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5a3VjM1I1YkdVN1hHNGdJSEJ5YjNBZ1BTQmpZVzFsYkdsNlpTaHdjbTl3S1R0Y2JpQWdhV1lnS0hCeWIzQWdJVDA5SUNkbWFXeDBaWEluSUNZbUlDaHdjbTl3SUdsdUlHVnRjSFI1VTNSNWJHVXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnliM0JjYmlBZ2ZWeHVJQ0IyWVhJZ1kyRndUbUZ0WlNBOUlIQnliM0F1WTJoaGNrRjBLREFwTG5SdlZYQndaWEpEWVhObEtDa2dLeUJ3Y205d0xuTnNhV05sS0RFcE8xeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhabGJtUnZjazVoYldWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdkbUZ5SUc1aGJXVWdQU0IyWlc1a2IzSk9ZVzFsYzF0cFhTQXJJR05oY0U1aGJXVTdYRzRnSUNBZ2FXWWdLRzVoYldVZ2FXNGdaVzF3ZEhsVGRIbHNaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzVoYldWY2JpQWdJQ0I5WEc0Z0lIMWNibjBwTzF4dVhHNW1kVzVqZEdsdmJpQjFjR1JoZEdWVGRIbHNaU0FvYjJ4a1ZtNXZaR1VzSUhadWIyUmxLU0I3WEc0Z0lIWmhjaUJrWVhSaElEMGdkbTV2WkdVdVpHRjBZVHRjYmlBZ2RtRnlJRzlzWkVSaGRHRWdQU0J2YkdSV2JtOWtaUzVrWVhSaE8xeHVYRzRnSUdsbUlDaHBjMVZ1WkdWbUtHUmhkR0V1YzNSaGRHbGpVM1I1YkdVcElDWW1JR2x6Vlc1a1pXWW9aR0YwWVM1emRIbHNaU2tnSmlaY2JpQWdJQ0JwYzFWdVpHVm1LRzlzWkVSaGRHRXVjM1JoZEdsalUzUjViR1VwSUNZbUlHbHpWVzVrWldZb2IyeGtSR0YwWVM1emRIbHNaU2xjYmlBZ0tTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNibHh1SUNCMllYSWdZM1Z5TENCdVlXMWxPMXh1SUNCMllYSWdaV3dnUFNCMmJtOWtaUzVsYkcwN1hHNGdJSFpoY2lCdmJHUlRkR0YwYVdOVGRIbHNaU0E5SUc5c1pFUmhkR0V1YzNSaGRHbGpVM1I1YkdVN1hHNGdJSFpoY2lCdmJHUlRkSGxzWlVKcGJtUnBibWNnUFNCdmJHUkVZWFJoTG01dmNtMWhiR2w2WldSVGRIbHNaU0I4ZkNCdmJHUkVZWFJoTG5OMGVXeGxJSHg4SUh0OU8xeHVYRzRnSUM4dklHbG1JSE4wWVhScFl5QnpkSGxzWlNCbGVHbHpkSE1zSUhOMGVXeGxZbWx1WkdsdVp5QmhiSEpsWVdSNUlHMWxjbWRsWkNCcGJuUnZJR2wwSUhkb1pXNGdaRzlwYm1jZ2JtOXliV0ZzYVhwbFUzUjViR1ZFWVhSaFhHNGdJSFpoY2lCdmJHUlRkSGxzWlNBOUlHOXNaRk4wWVhScFkxTjBlV3hsSUh4OElHOXNaRk4wZVd4bFFtbHVaR2x1Wnp0Y2JseHVJQ0IyWVhJZ2MzUjViR1VnUFNCdWIzSnRZV3hwZW1WVGRIbHNaVUpwYm1ScGJtY29kbTV2WkdVdVpHRjBZUzV6ZEhsc1pTa2dmSHdnZTMwN1hHNWNiaUFnTHk4Z2MzUnZjbVVnYm05eWJXRnNhWHBsWkNCemRIbHNaU0IxYm1SbGNpQmhJR1JwWm1abGNtVnVkQ0JyWlhrZ1ptOXlJRzVsZUhRZ1pHbG1abHh1SUNBdkx5QnRZV3RsSUhOMWNtVWdkRzhnWTJ4dmJtVWdhWFFnYVdZZ2FYUW5jeUJ5WldGamRHbDJaU3dnYzJsdVkyVWdkR2hsSUhWelpYSWdiR2xyWld4NUlIZGhiblJ6WEc0Z0lDOHZJSFJ2SUcxMWRHRjBaU0JwZEM1Y2JpQWdkbTV2WkdVdVpHRjBZUzV1YjNKdFlXeHBlbVZrVTNSNWJHVWdQU0JwYzBSbFppaHpkSGxzWlM1ZlgyOWlYMThwWEc0Z0lDQWdQeUJsZUhSbGJtUW9lMzBzSUhOMGVXeGxLVnh1SUNBZ0lEb2djM1I1YkdVN1hHNWNiaUFnZG1GeUlHNWxkMU4wZVd4bElEMGdaMlYwVTNSNWJHVW9kbTV2WkdVc0lIUnlkV1VwTzF4dVhHNGdJR1p2Y2lBb2JtRnRaU0JwYmlCdmJHUlRkSGxzWlNrZ2UxeHVJQ0FnSUdsbUlDaHBjMVZ1WkdWbUtHNWxkMU4wZVd4bFcyNWhiV1ZkS1NrZ2UxeHVJQ0FnSUNBZ2MyVjBVSEp2Y0NobGJDd2dibUZ0WlN3Z0p5Y3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQm1iM0lnS0c1aGJXVWdhVzRnYm1WM1UzUjViR1VwSUh0Y2JpQWdJQ0JqZFhJZ1BTQnVaWGRUZEhsc1pWdHVZVzFsWFR0Y2JpQWdJQ0JwWmlBb1kzVnlJQ0U5UFNCdmJHUlRkSGxzWlZ0dVlXMWxYU2tnZTF4dUlDQWdJQ0FnTHk4Z2FXVTVJSE5sZEhScGJtY2dkRzhnYm5Wc2JDQm9ZWE1nYm04Z1pXWm1aV04wTENCdGRYTjBJSFZ6WlNCbGJYQjBlU0J6ZEhKcGJtZGNiaUFnSUNBZ0lITmxkRkJ5YjNBb1pXd3NJRzVoYldVc0lHTjFjaUE5UFNCdWRXeHNJRDhnSnljZ09pQmpkWElwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1MllYSWdjM1I1YkdVZ1BTQjdYRzRnSUdOeVpXRjBaVG9nZFhCa1lYUmxVM1I1YkdVc1hHNGdJSFZ3WkdGMFpUb2dkWEJrWVhSbFUzUjViR1ZjYm4wN1hHNWNiaThxSUNBcUwxeHVYRzUyWVhJZ2QyaHBkR1Z6Y0dGalpWSkZJRDBnTDF4Y2N5c3ZPMXh1WEc0dktpcGNiaUFxSUVGa1pDQmpiR0Z6Y3lCM2FYUm9JR052YlhCaGRHbGlhV3hwZEhrZ1ptOXlJRk5XUnlCemFXNWpaU0JqYkdGemMweHBjM1FnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ0J2Ymx4dUlDb2dVMVpISUdWc1pXMWxiblJ6SUdsdUlFbEZYRzRnS2k5Y2JtWjFibU4wYVc5dUlHRmtaRU5zWVhOeklDaGxiQ3dnWTJ4ektTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9JV05zY3lCOGZDQWhLR05zY3lBOUlHTnNjeTUwY21sdEtDa3BLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmx4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0JwWmlBb1pXd3VZMnhoYzNOTWFYTjBLU0I3WEc0Z0lDQWdhV1lnS0dOc2N5NXBibVJsZUU5bUtDY2dKeWtnUGlBdE1Ta2dlMXh1SUNBZ0lDQWdZMnh6TG5Od2JHbDBLSGRvYVhSbGMzQmhZMlZTUlNrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1l5a2dleUJ5WlhSMWNtNGdaV3d1WTJ4aGMzTk1hWE4wTG1Ga1pDaGpLVHNnZlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1ZzTG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMnh6S1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZG1GeUlHTjFjaUE5SUZ3aUlGd2lJQ3NnS0dWc0xtZGxkRUYwZEhKcFluVjBaU2duWTJ4aGMzTW5LU0I4ZkNBbkp5a2dLeUJjSWlCY0lqdGNiaUFnSUNCcFppQW9ZM1Z5TG1sdVpHVjRUMllvSnlBbklDc2dZMnh6SUNzZ0p5QW5LU0E4SURBcElIdGNiaUFnSUNBZ0lHVnNMbk5sZEVGMGRISnBZblYwWlNnblkyeGhjM01uTENBb1kzVnlJQ3NnWTJ4ektTNTBjbWx0S0NrcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxiVzkyWlNCamJHRnpjeUIzYVhSb0lHTnZiWEJoZEdsaWFXeHBkSGtnWm05eUlGTldSeUJ6YVc1alpTQmpiR0Z6YzB4cGMzUWdhWE1nYm05MElITjFjSEJ2Y25SbFpDQnZibHh1SUNvZ1UxWkhJR1ZzWlcxbGJuUnpJR2x1SUVsRlhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGJXOTJaVU5zWVhOeklDaGxiQ3dnWTJ4ektTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9JV05zY3lCOGZDQWhLR05zY3lBOUlHTnNjeTUwY21sdEtDa3BLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmx4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0JwWmlBb1pXd3VZMnhoYzNOTWFYTjBLU0I3WEc0Z0lDQWdhV1lnS0dOc2N5NXBibVJsZUU5bUtDY2dKeWtnUGlBdE1Ta2dlMXh1SUNBZ0lDQWdZMnh6TG5Od2JHbDBLSGRvYVhSbGMzQmhZMlZTUlNrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1l5a2dleUJ5WlhSMWNtNGdaV3d1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hqS1RzZ2ZTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWc0xtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb1kyeHpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ0ZsYkM1amJHRnpjMHhwYzNRdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCbGJDNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb0oyTnNZWE56SnlrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhaaGNpQmpkWElnUFNCY0lpQmNJaUFySUNobGJDNW5aWFJCZEhSeWFXSjFkR1VvSjJOc1lYTnpKeWtnZkh3Z0p5Y3BJQ3NnWENJZ1hDSTdYRzRnSUNBZ2RtRnlJSFJoY2lBOUlDY2dKeUFySUdOc2N5QXJJQ2NnSnp0Y2JpQWdJQ0IzYUdsc1pTQW9ZM1Z5TG1sdVpHVjRUMllvZEdGeUtTQStQU0F3S1NCN1hHNGdJQ0FnSUNCamRYSWdQU0JqZFhJdWNtVndiR0ZqWlNoMFlYSXNJQ2NnSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR04xY2lBOUlHTjFjaTUwY21sdEtDazdYRzRnSUNBZ2FXWWdLR04xY2lrZ2UxeHVJQ0FnSUNBZ1pXd3VjMlYwUVhSMGNtbGlkWFJsS0NkamJHRnpjeWNzSUdOMWNpazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWc0xuSmxiVzkyWlVGMGRISnBZblYwWlNnblkyeGhjM01uS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlISmxjMjlzZG1WVWNtRnVjMmwwYVc5dUlDaGtaV1lrSkRFcElIdGNiaUFnYVdZZ0tDRmtaV1lrSkRFcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnWld4elpTQXFMMXh1SUNCcFppQW9kSGx3Wlc5bUlHUmxaaVFrTVNBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQjJZWElnY21WeklEMGdlMzA3WEc0Z0lDQWdhV1lnS0dSbFppUWtNUzVqYzNNZ0lUMDlJR1poYkhObEtTQjdYRzRnSUNBZ0lDQmxlSFJsYm1Rb2NtVnpMQ0JoZFhSdlEzTnpWSEpoYm5OcGRHbHZiaWhrWldZa0pERXVibUZ0WlNCOGZDQW5kaWNwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaWGgwWlc1a0tISmxjeXdnWkdWbUpDUXhLVHRjYmlBZ0lDQnlaWFIxY200Z2NtVnpYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdSbFppUWtNU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCeVpYUjFjbTRnWVhWMGIwTnpjMVJ5WVc1emFYUnBiMjRvWkdWbUpDUXhLVnh1SUNCOVhHNTlYRzVjYm5aaGNpQmhkWFJ2UTNOelZISmhibk5wZEdsdmJpQTlJR05oWTJobFpDaG1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lHVnVkR1Z5UTJ4aGMzTTZJQ2h1WVcxbElDc2dYQ0l0Wlc1MFpYSmNJaWtzWEc0Z0lDQWdaVzUwWlhKVWIwTnNZWE56T2lBb2JtRnRaU0FySUZ3aUxXVnVkR1Z5TFhSdlhDSXBMRnh1SUNBZ0lHVnVkR1Z5UVdOMGFYWmxRMnhoYzNNNklDaHVZVzFsSUNzZ1hDSXRaVzUwWlhJdFlXTjBhWFpsWENJcExGeHVJQ0FnSUd4bFlYWmxRMnhoYzNNNklDaHVZVzFsSUNzZ1hDSXRiR1ZoZG1WY0lpa3NYRzRnSUNBZ2JHVmhkbVZVYjBOc1lYTnpPaUFvYm1GdFpTQXJJRndpTFd4bFlYWmxMWFJ2WENJcExGeHVJQ0FnSUd4bFlYWmxRV04wYVhabFEyeGhjM002SUNodVlXMWxJQ3NnWENJdGJHVmhkbVV0WVdOMGFYWmxYQ0lwWEc0Z0lIMWNibjBwTzF4dVhHNTJZWElnYUdGelZISmhibk5wZEdsdmJpQTlJR2x1UW5KdmQzTmxjaUFtSmlBaGFYTkpSVGs3WEc1MllYSWdWRkpCVGxOSlZFbFBUaUE5SUNkMGNtRnVjMmwwYVc5dUp6dGNiblpoY2lCQlRrbE5RVlJKVDA0Z1BTQW5ZVzVwYldGMGFXOXVKenRjYmx4dUx5OGdWSEpoYm5OcGRHbHZiaUJ3Y205d1pYSjBlUzlsZG1WdWRDQnpibWxtWm1sdVoxeHVkbUZ5SUhSeVlXNXphWFJwYjI1UWNtOXdJRDBnSjNSeVlXNXphWFJwYjI0bk8xeHVkbUZ5SUhSeVlXNXphWFJwYjI1RmJtUkZkbVZ1ZENBOUlDZDBjbUZ1YzJsMGFXOXVaVzVrSnp0Y2JuWmhjaUJoYm1sdFlYUnBiMjVRY205d0lEMGdKMkZ1YVcxaGRHbHZiaWM3WEc1MllYSWdZVzVwYldGMGFXOXVSVzVrUlhabGJuUWdQU0FuWVc1cGJXRjBhVzl1Wlc1a0p6dGNibWxtSUNob1lYTlVjbUZ1YzJsMGFXOXVLU0I3WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQnBaaUFvZDJsdVpHOTNMbTl1ZEhKaGJuTnBkR2x2Ym1WdVpDQTlQVDBnZFc1a1pXWnBibVZrSUNZbVhHNGdJQ0FnZDJsdVpHOTNMbTl1ZDJWaWEybDBkSEpoYm5OcGRHbHZibVZ1WkNBaFBUMGdkVzVrWldacGJtVmtYRzRnSUNrZ2UxeHVJQ0FnSUhSeVlXNXphWFJwYjI1UWNtOXdJRDBnSjFkbFltdHBkRlJ5WVc1emFYUnBiMjRuTzF4dUlDQWdJSFJ5WVc1emFYUnBiMjVGYm1SRmRtVnVkQ0E5SUNkM1pXSnJhWFJVY21GdWMybDBhVzl1Ulc1a0p6dGNiaUFnZlZ4dUlDQnBaaUFvZDJsdVpHOTNMbTl1WVc1cGJXRjBhVzl1Wlc1a0lEMDlQU0IxYm1SbFptbHVaV1FnSmlaY2JpQWdJQ0IzYVc1a2IzY3ViMjUzWldKcmFYUmhibWx0WVhScGIyNWxibVFnSVQwOUlIVnVaR1ZtYVc1bFpGeHVJQ0FwSUh0Y2JpQWdJQ0JoYm1sdFlYUnBiMjVRY205d0lEMGdKMWRsWW10cGRFRnVhVzFoZEdsdmJpYzdYRzRnSUNBZ1lXNXBiV0YwYVc5dVJXNWtSWFpsYm5RZ1BTQW5kMlZpYTJsMFFXNXBiV0YwYVc5dVJXNWtKenRjYmlBZ2ZWeHVmVnh1WEc0dkx5QmlhVzVrYVc1bklIUnZJSGRwYm1SdmR5QnBjeUJ1WldObGMzTmhjbmtnZEc4Z2JXRnJaU0JvYjNRZ2NtVnNiMkZrSUhkdmNtc2dhVzRnU1VVZ2FXNGdjM1J5YVdOMElHMXZaR1ZjYm5aaGNpQnlZV1lnUFNCcGJrSnliM2R6WlhKY2JpQWdQeUIzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsWEc0Z0lDQWdQeUIzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsTG1KcGJtUW9kMmx1Wkc5M0tWeHVJQ0FnSURvZ2MyVjBWR2x0Wlc5MWRGeHVJQ0E2SUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292SUdaMWJtTjBhVzl1SUNobWJpa2dleUJ5WlhSMWNtNGdabTRvS1RzZ2ZUdGNibHh1Wm5WdVkzUnBiMjRnYm1WNGRFWnlZVzFsSUNobWJpa2dlMXh1SUNCeVlXWW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSEpoWmlobWJpazdYRzRnSUgwcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaFpHUlVjbUZ1YzJsMGFXOXVRMnhoYzNNZ0tHVnNMQ0JqYkhNcElIdGNiaUFnZG1GeUlIUnlZVzV6YVhScGIyNURiR0Z6YzJWeklEMGdaV3d1WDNSeVlXNXphWFJwYjI1RGJHRnpjMlZ6SUh4OElDaGxiQzVmZEhKaGJuTnBkR2x2YmtOc1lYTnpaWE1nUFNCYlhTazdYRzRnSUdsbUlDaDBjbUZ1YzJsMGFXOXVRMnhoYzNObGN5NXBibVJsZUU5bUtHTnNjeWtnUENBd0tTQjdYRzRnSUNBZ2RISmhibk5wZEdsdmJrTnNZWE56WlhNdWNIVnphQ2hqYkhNcE8xeHVJQ0FnSUdGa1pFTnNZWE56S0dWc0xDQmpiSE1wTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxiVzkyWlZSeVlXNXphWFJwYjI1RGJHRnpjeUFvWld3c0lHTnNjeWtnZTF4dUlDQnBaaUFvWld3dVgzUnlZVzV6YVhScGIyNURiR0Z6YzJWektTQjdYRzRnSUNBZ2NtVnRiM1psS0dWc0xsOTBjbUZ1YzJsMGFXOXVRMnhoYzNObGN5d2dZMnh6S1R0Y2JpQWdmVnh1SUNCeVpXMXZkbVZEYkdGemN5aGxiQ3dnWTJ4ektUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2QyaGxibFJ5WVc1emFYUnBiMjVGYm1SeklDaGNiaUFnWld3c1hHNGdJR1Y0Y0dWamRHVmtWSGx3WlN4Y2JpQWdZMkpjYmlrZ2UxeHVJQ0IyWVhJZ2NtVm1JRDBnWjJWMFZISmhibk5wZEdsdmJrbHVabThvWld3c0lHVjRjR1ZqZEdWa1ZIbHdaU2s3WEc0Z0lIWmhjaUIwZVhCbElEMGdjbVZtTG5SNWNHVTdYRzRnSUhaaGNpQjBhVzFsYjNWMElEMGdjbVZtTG5ScGJXVnZkWFE3WEc0Z0lIWmhjaUJ3Y205d1EyOTFiblFnUFNCeVpXWXVjSEp2Y0VOdmRXNTBPMXh1SUNCcFppQW9JWFI1Y0dVcElIc2djbVYwZFhKdUlHTmlLQ2tnZlZ4dUlDQjJZWElnWlhabGJuUWdQU0IwZVhCbElEMDlQU0JVVWtGT1UwbFVTVTlPSUQ4Z2RISmhibk5wZEdsdmJrVnVaRVYyWlc1MElEb2dZVzVwYldGMGFXOXVSVzVrUlhabGJuUTdYRzRnSUhaaGNpQmxibVJsWkNBOUlEQTdYRzRnSUhaaGNpQmxibVFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1pXd3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWhsZG1WdWRDd2diMjVGYm1RcE8xeHVJQ0FnSUdOaUtDazdYRzRnSUgwN1hHNGdJSFpoY2lCdmJrVnVaQ0E5SUdaMWJtTjBhVzl1SUNobEtTQjdYRzRnSUNBZ2FXWWdLR1V1ZEdGeVoyVjBJRDA5UFNCbGJDa2dlMXh1SUNBZ0lDQWdhV1lnS0NzclpXNWtaV1FnUGowZ2NISnZjRU52ZFc1MEtTQjdYRzRnSUNBZ0lDQWdJR1Z1WkNncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVHRjYmlBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdhV1lnS0dWdVpHVmtJRHdnY0hKdmNFTnZkVzUwS1NCN1hHNGdJQ0FnSUNCbGJtUW9LVHRjYmlBZ0lDQjlYRzRnSUgwc0lIUnBiV1Z2ZFhRZ0t5QXhLVHRjYmlBZ1pXd3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGxkbVZ1ZEN3Z2IyNUZibVFwTzF4dWZWeHVYRzUyWVhJZ2RISmhibk5tYjNKdFVrVWdQU0F2WEZ4aUtIUnlZVzV6Wm05eWJYeGhiR3dwS0N4OEpDa3ZPMXh1WEc1bWRXNWpkR2x2YmlCblpYUlVjbUZ1YzJsMGFXOXVTVzVtYnlBb1pXd3NJR1Y0Y0dWamRHVmtWSGx3WlNrZ2UxeHVJQ0IyWVhJZ2MzUjViR1Z6SUQwZ2QybHVaRzkzTG1kbGRFTnZiWEIxZEdWa1UzUjViR1VvWld3cE8xeHVJQ0F2THlCS1UwUlBUU0J0WVhrZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkNCbWIzSWdkSEpoYm5OcGRHbHZiaUJ3Y205d1pYSjBhV1Z6WEc0Z0lIWmhjaUIwY21GdWMybDBhVzl1UkdWc1lYbHpJRDBnS0hOMGVXeGxjMXQwY21GdWMybDBhVzl1VUhKdmNDQXJJQ2RFWld4aGVTZGRJSHg4SUNjbktTNXpjR3hwZENnbkxDQW5LVHRjYmlBZ2RtRnlJSFJ5WVc1emFYUnBiMjVFZFhKaGRHbHZibk1nUFNBb2MzUjViR1Z6VzNSeVlXNXphWFJwYjI1UWNtOXdJQ3NnSjBSMWNtRjBhVzl1SjEwZ2ZId2dKeWNwTG5Od2JHbDBLQ2NzSUNjcE8xeHVJQ0IyWVhJZ2RISmhibk5wZEdsdmJsUnBiV1Z2ZFhRZ1BTQm5aWFJVYVcxbGIzVjBLSFJ5WVc1emFYUnBiMjVFWld4aGVYTXNJSFJ5WVc1emFYUnBiMjVFZFhKaGRHbHZibk1wTzF4dUlDQjJZWElnWVc1cGJXRjBhVzl1UkdWc1lYbHpJRDBnS0hOMGVXeGxjMXRoYm1sdFlYUnBiMjVRY205d0lDc2dKMFJsYkdGNUoxMGdmSHdnSnljcExuTndiR2wwS0Njc0lDY3BPMXh1SUNCMllYSWdZVzVwYldGMGFXOXVSSFZ5WVhScGIyNXpJRDBnS0hOMGVXeGxjMXRoYm1sdFlYUnBiMjVRY205d0lDc2dKMFIxY21GMGFXOXVKMTBnZkh3Z0p5Y3BMbk53YkdsMEtDY3NJQ2NwTzF4dUlDQjJZWElnWVc1cGJXRjBhVzl1VkdsdFpXOTFkQ0E5SUdkbGRGUnBiV1Z2ZFhRb1lXNXBiV0YwYVc5dVJHVnNZWGx6TENCaGJtbHRZWFJwYjI1RWRYSmhkR2x2Ym5NcE8xeHVYRzRnSUhaaGNpQjBlWEJsTzF4dUlDQjJZWElnZEdsdFpXOTFkQ0E5SURBN1hHNGdJSFpoY2lCd2NtOXdRMjkxYm5RZ1BTQXdPMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLR1Y0Y0dWamRHVmtWSGx3WlNBOVBUMGdWRkpCVGxOSlZFbFBUaWtnZTF4dUlDQWdJR2xtSUNoMGNtRnVjMmwwYVc5dVZHbHRaVzkxZENBK0lEQXBJSHRjYmlBZ0lDQWdJSFI1Y0dVZ1BTQlVVa0ZPVTBsVVNVOU9PMXh1SUNBZ0lDQWdkR2x0Wlc5MWRDQTlJSFJ5WVc1emFYUnBiMjVVYVcxbGIzVjBPMXh1SUNBZ0lDQWdjSEp2Y0VOdmRXNTBJRDBnZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1Y3k1c1pXNW5kR2c3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tHVjRjR1ZqZEdWa1ZIbHdaU0E5UFQwZ1FVNUpUVUZVU1U5T0tTQjdYRzRnSUNBZ2FXWWdLR0Z1YVcxaGRHbHZibFJwYldWdmRYUWdQaUF3S1NCN1hHNGdJQ0FnSUNCMGVYQmxJRDBnUVU1SlRVRlVTVTlPTzF4dUlDQWdJQ0FnZEdsdFpXOTFkQ0E5SUdGdWFXMWhkR2x2YmxScGJXVnZkWFE3WEc0Z0lDQWdJQ0J3Y205d1EyOTFiblFnUFNCaGJtbHRZWFJwYjI1RWRYSmhkR2x2Ym5NdWJHVnVaM1JvTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYVcxbGIzVjBJRDBnVFdGMGFDNXRZWGdvZEhKaGJuTnBkR2x2YmxScGJXVnZkWFFzSUdGdWFXMWhkR2x2YmxScGJXVnZkWFFwTzF4dUlDQWdJSFI1Y0dVZ1BTQjBhVzFsYjNWMElENGdNRnh1SUNBZ0lDQWdQeUIwY21GdWMybDBhVzl1VkdsdFpXOTFkQ0ErSUdGdWFXMWhkR2x2YmxScGJXVnZkWFJjYmlBZ0lDQWdJQ0FnUHlCVVVrRk9VMGxVU1U5T1hHNGdJQ0FnSUNBZ0lEb2dRVTVKVFVGVVNVOU9YRzRnSUNBZ0lDQTZJRzUxYkd3N1hHNGdJQ0FnY0hKdmNFTnZkVzUwSUQwZ2RIbHdaVnh1SUNBZ0lDQWdQeUIwZVhCbElEMDlQU0JVVWtGT1UwbFVTVTlPWEc0Z0lDQWdJQ0FnSUQ4Z2RISmhibk5wZEdsdmJrUjFjbUYwYVc5dWN5NXNaVzVuZEdoY2JpQWdJQ0FnSUNBZ09pQmhibWx0WVhScGIyNUVkWEpoZEdsdmJuTXViR1Z1WjNSb1hHNGdJQ0FnSUNBNklEQTdYRzRnSUgxY2JpQWdkbUZ5SUdoaGMxUnlZVzV6Wm05eWJTQTlYRzRnSUNBZ2RIbHdaU0E5UFQwZ1ZGSkJUbE5KVkVsUFRpQW1KbHh1SUNBZ0lIUnlZVzV6Wm05eWJWSkZMblJsYzNRb2MzUjViR1Z6VzNSeVlXNXphWFJwYjI1UWNtOXdJQ3NnSjFCeWIzQmxjblI1SjEwcE8xeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIUjVjR1U2SUhSNWNHVXNYRzRnSUNBZ2RHbHRaVzkxZERvZ2RHbHRaVzkxZEN4Y2JpQWdJQ0J3Y205d1EyOTFiblE2SUhCeWIzQkRiM1Z1ZEN4Y2JpQWdJQ0JvWVhOVWNtRnVjMlp2Y20wNklHaGhjMVJ5WVc1elptOXliVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRGUnBiV1Z2ZFhRZ0tHUmxiR0Y1Y3l3Z1pIVnlZWFJwYjI1ektTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc0Z0lIZG9hV3hsSUNoa1pXeGhlWE11YkdWdVozUm9JRHdnWkhWeVlYUnBiMjV6TG14bGJtZDBhQ2tnZTF4dUlDQWdJR1JsYkdGNWN5QTlJR1JsYkdGNWN5NWpiMjVqWVhRb1pHVnNZWGx6S1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCTllYUm9MbTFoZUM1aGNIQnNlU2h1ZFd4c0xDQmtkWEpoZEdsdmJuTXViV0Z3S0daMWJtTjBhVzl1SUNoa0xDQnBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUnZUWE1vWkNrZ0t5QjBiMDF6S0dSbGJHRjVjMXRwWFNsY2JpQWdmU2twWEc1OVhHNWNiaTh2SUU5c1pDQjJaWEp6YVc5dWN5QnZaaUJEYUhKdmJXbDFiU0FvWW1Wc2IzY2dOakV1TUM0ek1UWXpMakV3TUNrZ1ptOXliV0YwY3lCbWJHOWhkR2x1WnlCd2IybHVkR1Z5SUc1MWJXSmxjbk5jYmk4dklHbHVJR0VnYkc5allXeGxMV1JsY0dWdVpHVnVkQ0IzWVhrc0lIVnphVzVuSUdFZ1kyOXRiV0VnYVc1emRHVmhaQ0J2WmlCaElHUnZkQzVjYmk4dklFbG1JR052YlcxaElHbHpJRzV2ZENCeVpYQnNZV05sWkNCM2FYUm9JR0VnWkc5MExDQjBhR1VnYVc1d2RYUWdkMmxzYkNCaVpTQnliM1Z1WkdWa0lHUnZkMjRnS0drdVpTNGdZV04wYVc1blhHNHZMeUJoY3lCaElHWnNiMjl5SUdaMWJtTjBhVzl1S1NCallYVnphVzVuSUhWdVpYaHdaV04wWldRZ1ltVm9ZWFpwYjNKelhHNW1kVzVqZEdsdmJpQjBiMDF6SUNoektTQjdYRzRnSUhKbGRIVnliaUJPZFcxaVpYSW9jeTV6YkdsalpTZ3dMQ0F0TVNrdWNtVndiR0ZqWlNnbkxDY3NJQ2N1SnlrcElDb2dNVEF3TUZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1Wm5WdVkzUnBiMjRnWlc1MFpYSWdLSFp1YjJSbExDQjBiMmRuYkdWRWFYTndiR0Y1S1NCN1hHNGdJSFpoY2lCbGJDQTlJSFp1YjJSbExtVnNiVHRjYmx4dUlDQXZMeUJqWVd4c0lHeGxZWFpsSUdOaGJHeGlZV05ySUc1dmQxeHVJQ0JwWmlBb2FYTkVaV1lvWld3dVgyeGxZWFpsUTJJcEtTQjdYRzRnSUNBZ1pXd3VYMnhsWVhabFEySXVZMkZ1WTJWc2JHVmtJRDBnZEhKMVpUdGNiaUFnSUNCbGJDNWZiR1ZoZG1WRFlpZ3BPMXh1SUNCOVhHNWNiaUFnZG1GeUlHUmhkR0VnUFNCeVpYTnZiSFpsVkhKaGJuTnBkR2x2YmloMmJtOWtaUzVrWVhSaExuUnlZVzV6YVhScGIyNHBPMXh1SUNCcFppQW9hWE5WYm1SbFppaGtZWFJoS1NrZ2UxeHVJQ0FnSUhKbGRIVnlibHh1SUNCOVhHNWNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUdsbUlDaHBjMFJsWmlobGJDNWZaVzUwWlhKRFlpa2dmSHdnWld3dWJtOWtaVlI1Y0dVZ0lUMDlJREVwSUh0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dVhHNGdJSFpoY2lCamMzTWdQU0JrWVhSaExtTnpjenRjYmlBZ2RtRnlJSFI1Y0dVZ1BTQmtZWFJoTG5SNWNHVTdYRzRnSUhaaGNpQmxiblJsY2tOc1lYTnpJRDBnWkdGMFlTNWxiblJsY2tOc1lYTnpPMXh1SUNCMllYSWdaVzUwWlhKVWIwTnNZWE56SUQwZ1pHRjBZUzVsYm5SbGNsUnZRMnhoYzNNN1hHNGdJSFpoY2lCbGJuUmxja0ZqZEdsMlpVTnNZWE56SUQwZ1pHRjBZUzVsYm5SbGNrRmpkR2wyWlVOc1lYTnpPMXh1SUNCMllYSWdZWEJ3WldGeVEyeGhjM01nUFNCa1lYUmhMbUZ3Y0dWaGNrTnNZWE56TzF4dUlDQjJZWElnWVhCd1pXRnlWRzlEYkdGemN5QTlJR1JoZEdFdVlYQndaV0Z5Vkc5RGJHRnpjenRjYmlBZ2RtRnlJR0Z3Y0dWaGNrRmpkR2wyWlVOc1lYTnpJRDBnWkdGMFlTNWhjSEJsWVhKQlkzUnBkbVZEYkdGemN6dGNiaUFnZG1GeUlHSmxabTl5WlVWdWRHVnlJRDBnWkdGMFlTNWlaV1p2Y21WRmJuUmxjanRjYmlBZ2RtRnlJR1Z1ZEdWeUlEMGdaR0YwWVM1bGJuUmxjanRjYmlBZ2RtRnlJR0ZtZEdWeVJXNTBaWElnUFNCa1lYUmhMbUZtZEdWeVJXNTBaWEk3WEc0Z0lIWmhjaUJsYm5SbGNrTmhibU5sYkd4bFpDQTlJR1JoZEdFdVpXNTBaWEpEWVc1alpXeHNaV1E3WEc0Z0lIWmhjaUJpWldadmNtVkJjSEJsWVhJZ1BTQmtZWFJoTG1KbFptOXlaVUZ3Y0dWaGNqdGNiaUFnZG1GeUlHRndjR1ZoY2lBOUlHUmhkR0V1WVhCd1pXRnlPMXh1SUNCMllYSWdZV1owWlhKQmNIQmxZWElnUFNCa1lYUmhMbUZtZEdWeVFYQndaV0Z5TzF4dUlDQjJZWElnWVhCd1pXRnlRMkZ1WTJWc2JHVmtJRDBnWkdGMFlTNWhjSEJsWVhKRFlXNWpaV3hzWldRN1hHNGdJSFpoY2lCa2RYSmhkR2x2YmlBOUlHUmhkR0V1WkhWeVlYUnBiMjQ3WEc1Y2JpQWdMeThnWVdOMGFYWmxTVzV6ZEdGdVkyVWdkMmxzYkNCaGJIZGhlWE1nWW1VZ2RHaGxJRHgwY21GdWMybDBhVzl1UGlCamIyMXdiMjVsYm5RZ2JXRnVZV2RwYm1jZ2RHaHBjMXh1SUNBdkx5QjBjbUZ1YzJsMGFXOXVMaUJQYm1VZ1pXUm5aU0JqWVhObElIUnZJR05vWldOcklHbHpJSGRvWlc0Z2RHaGxJRHgwY21GdWMybDBhVzl1UGlCcGN5QndiR0ZqWldSY2JpQWdMeThnWVhNZ2RHaGxJSEp2YjNRZ2JtOWtaU0J2WmlCaElHTm9hV3hrSUdOdmJYQnZibVZ1ZEM0Z1NXNGdkR2hoZENCallYTmxJSGRsSUc1bFpXUWdkRzhnWTJobFkydGNiaUFnTHk4Z1BIUnlZVzV6YVhScGIyNCtKM01nY0dGeVpXNTBJR1p2Y2lCaGNIQmxZWElnWTJobFkyc3VYRzRnSUhaaGNpQmpiMjUwWlhoMElEMGdZV04wYVhabFNXNXpkR0Z1WTJVN1hHNGdJSFpoY2lCMGNtRnVjMmwwYVc5dVRtOWtaU0E5SUdGamRHbDJaVWx1YzNSaGJtTmxMaVIyYm05a1pUdGNiaUFnZDJocGJHVWdLSFJ5WVc1emFYUnBiMjVPYjJSbElDWW1JSFJ5WVc1emFYUnBiMjVPYjJSbExuQmhjbVZ1ZENrZ2UxeHVJQ0FnSUdOdmJuUmxlSFFnUFNCMGNtRnVjMmwwYVc5dVRtOWtaUzVqYjI1MFpYaDBPMXh1SUNBZ0lIUnlZVzV6YVhScGIyNU9iMlJsSUQwZ2RISmhibk5wZEdsdmJrNXZaR1V1Y0dGeVpXNTBPMXh1SUNCOVhHNWNiaUFnZG1GeUlHbHpRWEJ3WldGeUlEMGdJV052Ym5SbGVIUXVYMmx6VFc5MWJuUmxaQ0I4ZkNBaGRtNXZaR1V1YVhOU2IyOTBTVzV6WlhKME8xeHVYRzRnSUdsbUlDaHBjMEZ3Y0dWaGNpQW1KaUFoWVhCd1pXRnlJQ1ltSUdGd2NHVmhjaUFoUFQwZ0p5Y3BJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1WEc0Z0lIWmhjaUJ6ZEdGeWRFTnNZWE56SUQwZ2FYTkJjSEJsWVhJZ0ppWWdZWEJ3WldGeVEyeGhjM05jYmlBZ0lDQS9JR0Z3Y0dWaGNrTnNZWE56WEc0Z0lDQWdPaUJsYm5SbGNrTnNZWE56TzF4dUlDQjJZWElnWVdOMGFYWmxRMnhoYzNNZ1BTQnBjMEZ3Y0dWaGNpQW1KaUJoY0hCbFlYSkJZM1JwZG1WRGJHRnpjMXh1SUNBZ0lEOGdZWEJ3WldGeVFXTjBhWFpsUTJ4aGMzTmNiaUFnSUNBNklHVnVkR1Z5UVdOMGFYWmxRMnhoYzNNN1hHNGdJSFpoY2lCMGIwTnNZWE56SUQwZ2FYTkJjSEJsWVhJZ0ppWWdZWEJ3WldGeVZHOURiR0Z6YzF4dUlDQWdJRDhnWVhCd1pXRnlWRzlEYkdGemMxeHVJQ0FnSURvZ1pXNTBaWEpVYjBOc1lYTnpPMXh1WEc0Z0lIWmhjaUJpWldadmNtVkZiblJsY2todmIyc2dQU0JwYzBGd2NHVmhjbHh1SUNBZ0lEOGdLR0psWm05eVpVRndjR1ZoY2lCOGZDQmlaV1p2Y21WRmJuUmxjaWxjYmlBZ0lDQTZJR0psWm05eVpVVnVkR1Z5TzF4dUlDQjJZWElnWlc1MFpYSkliMjlySUQwZ2FYTkJjSEJsWVhKY2JpQWdJQ0EvSUNoMGVYQmxiMllnWVhCd1pXRnlJRDA5UFNBblpuVnVZM1JwYjI0bklEOGdZWEJ3WldGeUlEb2daVzUwWlhJcFhHNGdJQ0FnT2lCbGJuUmxjanRjYmlBZ2RtRnlJR0ZtZEdWeVJXNTBaWEpJYjI5cklEMGdhWE5CY0hCbFlYSmNiaUFnSUNBL0lDaGhablJsY2tGd2NHVmhjaUI4ZkNCaFpuUmxja1Z1ZEdWeUtWeHVJQ0FnSURvZ1lXWjBaWEpGYm5SbGNqdGNiaUFnZG1GeUlHVnVkR1Z5UTJGdVkyVnNiR1ZrU0c5dmF5QTlJR2x6UVhCd1pXRnlYRzRnSUNBZ1B5QW9ZWEJ3WldGeVEyRnVZMlZzYkdWa0lIeDhJR1Z1ZEdWeVEyRnVZMlZzYkdWa0tWeHVJQ0FnSURvZ1pXNTBaWEpEWVc1alpXeHNaV1E3WEc1Y2JpQWdkbUZ5SUdWNGNHeHBZMmwwUlc1MFpYSkVkWEpoZEdsdmJpQTlJSFJ2VG5WdFltVnlLRnh1SUNBZ0lHbHpUMkpxWldOMEtHUjFjbUYwYVc5dUtWeHVJQ0FnSUNBZ1B5QmtkWEpoZEdsdmJpNWxiblJsY2x4dUlDQWdJQ0FnT2lCa2RYSmhkR2x2Ymx4dUlDQXBPMXh1WEc0Z0lHbG1JQ2hsZUhCc2FXTnBkRVZ1ZEdWeVJIVnlZWFJwYjI0Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUdOb1pXTnJSSFZ5WVhScGIyNG9aWGh3YkdsamFYUkZiblJsY2tSMWNtRjBhVzl1TENBblpXNTBaWEluTENCMmJtOWtaU2s3WEc0Z0lIMWNibHh1SUNCMllYSWdaWGh3WldOMGMwTlRVeUE5SUdOemN5QWhQVDBnWm1Gc2MyVWdKaVlnSVdselNVVTVPMXh1SUNCMllYSWdkWE5sY2xkaGJuUnpRMjl1ZEhKdmJDQTlJR2RsZEVodmIydEJjbWQxYldWdWRITk1aVzVuZEdnb1pXNTBaWEpJYjI5cktUdGNibHh1SUNCMllYSWdZMklnUFNCbGJDNWZaVzUwWlhKRFlpQTlJRzl1WTJVb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHbG1JQ2hsZUhCbFkzUnpRMU5US1NCN1hHNGdJQ0FnSUNCeVpXMXZkbVZVY21GdWMybDBhVzl1UTJ4aGMzTW9aV3dzSUhSdlEyeGhjM01wTzF4dUlDQWdJQ0FnY21WdGIzWmxWSEpoYm5OcGRHbHZia05zWVhOektHVnNMQ0JoWTNScGRtVkRiR0Z6Y3lrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoallpNWpZVzVqWld4c1pXUXBJSHRjYmlBZ0lDQWdJR2xtSUNobGVIQmxZM1J6UTFOVEtTQjdYRzRnSUNBZ0lDQWdJSEpsYlc5MlpWUnlZVzV6YVhScGIyNURiR0Z6Y3lobGJDd2djM1JoY25SRGJHRnpjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYm5SbGNrTmhibU5sYkd4bFpFaHZiMnNnSmlZZ1pXNTBaWEpEWVc1alpXeHNaV1JJYjI5cktHVnNLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1lXWjBaWEpGYm5SbGNraHZiMnNnSmlZZ1lXWjBaWEpGYm5SbGNraHZiMnNvWld3cE8xeHVJQ0FnSUgxY2JpQWdJQ0JsYkM1ZlpXNTBaWEpEWWlBOUlHNTFiR3c3WEc0Z0lIMHBPMXh1WEc0Z0lHbG1JQ2doZG01dlpHVXVaR0YwWVM1emFHOTNLU0I3WEc0Z0lDQWdMeThnY21WdGIzWmxJSEJsYm1ScGJtY2diR1ZoZG1VZ1pXeGxiV1Z1ZENCdmJpQmxiblJsY2lCaWVTQnBibXBsWTNScGJtY2dZVzRnYVc1elpYSjBJR2h2YjJ0Y2JpQWdJQ0J0WlhKblpWWk9iMlJsU0c5dmF5aDJibTlrWlN3Z0oybHVjMlZ5ZENjc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCd1lYSmxiblFnUFNCbGJDNXdZWEpsYm5ST2IyUmxPMXh1SUNBZ0lDQWdkbUZ5SUhCbGJtUnBibWRPYjJSbElEMGdjR0Z5Wlc1MElDWW1JSEJoY21WdWRDNWZjR1Z1WkdsdVp5QW1KaUJ3WVhKbGJuUXVYM0JsYm1ScGJtZGJkbTV2WkdVdWEyVjVYVHRjYmlBZ0lDQWdJR2xtSUNod1pXNWthVzVuVG05a1pTQW1KbHh1SUNBZ0lDQWdJQ0J3Wlc1a2FXNW5UbTlrWlM1MFlXY2dQVDA5SUhadWIyUmxMblJoWnlBbUpseHVJQ0FnSUNBZ0lDQndaVzVrYVc1blRtOWtaUzVsYkcwdVgyeGxZWFpsUTJKY2JpQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQndaVzVrYVc1blRtOWtaUzVsYkcwdVgyeGxZWFpsUTJJb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVnVkR1Z5U0c5dmF5QW1KaUJsYm5SbGNraHZiMnNvWld3c0lHTmlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4dklITjBZWEowSUdWdWRHVnlJSFJ5WVc1emFYUnBiMjVjYmlBZ1ltVm1iM0psUlc1MFpYSkliMjlySUNZbUlHSmxabTl5WlVWdWRHVnlTRzl2YXlobGJDazdYRzRnSUdsbUlDaGxlSEJsWTNSelExTlRLU0I3WEc0Z0lDQWdZV1JrVkhKaGJuTnBkR2x2YmtOc1lYTnpLR1ZzTENCemRHRnlkRU5zWVhOektUdGNiaUFnSUNCaFpHUlVjbUZ1YzJsMGFXOXVRMnhoYzNNb1pXd3NJR0ZqZEdsMlpVTnNZWE56S1R0Y2JpQWdJQ0J1WlhoMFJuSmhiV1VvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ2NtVnRiM1psVkhKaGJuTnBkR2x2YmtOc1lYTnpLR1ZzTENCemRHRnlkRU5zWVhOektUdGNiaUFnSUNBZ0lHbG1JQ2doWTJJdVkyRnVZMlZzYkdWa0tTQjdYRzRnSUNBZ0lDQWdJR0ZrWkZSeVlXNXphWFJwYjI1RGJHRnpjeWhsYkN3Z2RHOURiR0Z6Y3lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZFhObGNsZGhiblJ6UTI5dWRISnZiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzFaaGJHbGtSSFZ5WVhScGIyNG9aWGh3YkdsamFYUkZiblJsY2tSMWNtRjBhVzl1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENoallpd2daWGh3YkdsamFYUkZiblJsY2tSMWNtRjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJobGJsUnlZVzV6YVhScGIyNUZibVJ6S0dWc0xDQjBlWEJsTENCallpazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQnBaaUFvZG01dlpHVXVaR0YwWVM1emFHOTNLU0I3WEc0Z0lDQWdkRzluWjJ4bFJHbHpjR3hoZVNBbUppQjBiMmRuYkdWRWFYTndiR0Y1S0NrN1hHNGdJQ0FnWlc1MFpYSkliMjlySUNZbUlHVnVkR1Z5U0c5dmF5aGxiQ3dnWTJJcE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0NGbGVIQmxZM1J6UTFOVElDWW1JQ0YxYzJWeVYyRnVkSE5EYjI1MGNtOXNLU0I3WEc0Z0lDQWdZMklvS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnNaV0YyWlNBb2RtNXZaR1VzSUhKdEtTQjdYRzRnSUhaaGNpQmxiQ0E5SUhadWIyUmxMbVZzYlR0Y2JseHVJQ0F2THlCallXeHNJR1Z1ZEdWeUlHTmhiR3hpWVdOcklHNXZkMXh1SUNCcFppQW9hWE5FWldZb1pXd3VYMlZ1ZEdWeVEySXBLU0I3WEc0Z0lDQWdaV3d1WDJWdWRHVnlRMkl1WTJGdVkyVnNiR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQmxiQzVmWlc1MFpYSkRZaWdwTzF4dUlDQjlYRzVjYmlBZ2RtRnlJR1JoZEdFZ1BTQnlaWE52YkhabFZISmhibk5wZEdsdmJpaDJibTlrWlM1a1lYUmhMblJ5WVc1emFYUnBiMjRwTzF4dUlDQnBaaUFvYVhOVmJtUmxaaWhrWVhSaEtTQjhmQ0JsYkM1dWIyUmxWSGx3WlNBaFBUMGdNU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnliU2dwWEc0Z0lIMWNibHh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLR2x6UkdWbUtHVnNMbDlzWldGMlpVTmlLU2tnZTF4dUlDQWdJSEpsZEhWeWJseHVJQ0I5WEc1Y2JpQWdkbUZ5SUdOemN5QTlJR1JoZEdFdVkzTnpPMXh1SUNCMllYSWdkSGx3WlNBOUlHUmhkR0V1ZEhsd1pUdGNiaUFnZG1GeUlHeGxZWFpsUTJ4aGMzTWdQU0JrWVhSaExteGxZWFpsUTJ4aGMzTTdYRzRnSUhaaGNpQnNaV0YyWlZSdlEyeGhjM01nUFNCa1lYUmhMbXhsWVhabFZHOURiR0Z6Y3p0Y2JpQWdkbUZ5SUd4bFlYWmxRV04wYVhabFEyeGhjM01nUFNCa1lYUmhMbXhsWVhabFFXTjBhWFpsUTJ4aGMzTTdYRzRnSUhaaGNpQmlaV1p2Y21WTVpXRjJaU0E5SUdSaGRHRXVZbVZtYjNKbFRHVmhkbVU3WEc0Z0lIWmhjaUJzWldGMlpTQTlJR1JoZEdFdWJHVmhkbVU3WEc0Z0lIWmhjaUJoWm5SbGNreGxZWFpsSUQwZ1pHRjBZUzVoWm5SbGNreGxZWFpsTzF4dUlDQjJZWElnYkdWaGRtVkRZVzVqWld4c1pXUWdQU0JrWVhSaExteGxZWFpsUTJGdVkyVnNiR1ZrTzF4dUlDQjJZWElnWkdWc1lYbE1aV0YyWlNBOUlHUmhkR0V1WkdWc1lYbE1aV0YyWlR0Y2JpQWdkbUZ5SUdSMWNtRjBhVzl1SUQwZ1pHRjBZUzVrZFhKaGRHbHZianRjYmx4dUlDQjJZWElnWlhod1pXTjBjME5UVXlBOUlHTnpjeUFoUFQwZ1ptRnNjMlVnSmlZZ0lXbHpTVVU1TzF4dUlDQjJZWElnZFhObGNsZGhiblJ6UTI5dWRISnZiQ0E5SUdkbGRFaHZiMnRCY21kMWJXVnVkSE5NWlc1bmRHZ29iR1ZoZG1VcE8xeHVYRzRnSUhaaGNpQmxlSEJzYVdOcGRFeGxZWFpsUkhWeVlYUnBiMjRnUFNCMGIwNTFiV0psY2loY2JpQWdJQ0JwYzA5aWFtVmpkQ2hrZFhKaGRHbHZiaWxjYmlBZ0lDQWdJRDhnWkhWeVlYUnBiMjR1YkdWaGRtVmNiaUFnSUNBZ0lEb2daSFZ5WVhScGIyNWNiaUFnS1R0Y2JseHVJQ0JwWmlBb2FYTkVaV1lvWlhod2JHbGphWFJNWldGMlpVUjFjbUYwYVc5dUtTa2dlMXh1SUNBZ0lHTm9aV05yUkhWeVlYUnBiMjRvWlhod2JHbGphWFJNWldGMlpVUjFjbUYwYVc5dUxDQW5iR1ZoZG1VbkxDQjJibTlrWlNrN1hHNGdJSDFjYmx4dUlDQjJZWElnWTJJZ1BTQmxiQzVmYkdWaGRtVkRZaUE5SUc5dVkyVW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR2xtSUNobGJDNXdZWEpsYm5ST2IyUmxJQ1ltSUdWc0xuQmhjbVZ1ZEU1dlpHVXVYM0JsYm1ScGJtY3BJSHRjYmlBZ0lDQWdJR1ZzTG5CaGNtVnVkRTV2WkdVdVgzQmxibVJwYm1kYmRtNXZaR1V1YTJWNVhTQTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNobGVIQmxZM1J6UTFOVEtTQjdYRzRnSUNBZ0lDQnlaVzF2ZG1WVWNtRnVjMmwwYVc5dVEyeGhjM01vWld3c0lHeGxZWFpsVkc5RGJHRnpjeWs3WEc0Z0lDQWdJQ0J5WlcxdmRtVlVjbUZ1YzJsMGFXOXVRMnhoYzNNb1pXd3NJR3hsWVhabFFXTjBhWFpsUTJ4aGMzTXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9ZMkl1WTJGdVkyVnNiR1ZrS1NCN1hHNGdJQ0FnSUNCcFppQW9aWGh3WldOMGMwTlRVeWtnZTF4dUlDQWdJQ0FnSUNCeVpXMXZkbVZVY21GdWMybDBhVzl1UTJ4aGMzTW9aV3dzSUd4bFlYWmxRMnhoYzNNcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2JHVmhkbVZEWVc1alpXeHNaV1FnSmlZZ2JHVmhkbVZEWVc1alpXeHNaV1FvWld3cE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5YlNncE8xeHVJQ0FnSUNBZ1lXWjBaWEpNWldGMlpTQW1KaUJoWm5SbGNreGxZWFpsS0dWc0tUdGNiaUFnSUNCOVhHNGdJQ0FnWld3dVgyeGxZWFpsUTJJZ1BTQnVkV3hzTzF4dUlDQjlLVHRjYmx4dUlDQnBaaUFvWkdWc1lYbE1aV0YyWlNrZ2UxeHVJQ0FnSUdSbGJHRjVUR1ZoZG1Vb2NHVnlabTl5YlV4bFlYWmxLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J3WlhKbWIzSnRUR1ZoZG1Vb0tUdGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEJsY21admNtMU1aV0YyWlNBb0tTQjdYRzRnSUNBZ0x5OGdkR2hsSUdSbGJHRjVaV1FnYkdWaGRtVWdiV0Y1SUdoaGRtVWdZV3h5WldGa2VTQmlaV1Z1SUdOaGJtTmxiR3hsWkZ4dUlDQWdJR2xtSUNoallpNWpZVzVqWld4c1pXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUgxY2JpQWdJQ0F2THlCeVpXTnZjbVFnYkdWaGRtbHVaeUJsYkdWdFpXNTBYRzRnSUNBZ2FXWWdLQ0YyYm05a1pTNWtZWFJoTG5Ob2IzY2dKaVlnWld3dWNHRnlaVzUwVG05a1pTa2dlMXh1SUNBZ0lDQWdLR1ZzTG5CaGNtVnVkRTV2WkdVdVgzQmxibVJwYm1jZ2ZId2dLR1ZzTG5CaGNtVnVkRTV2WkdVdVgzQmxibVJwYm1jZ1BTQjdmU2twV3loMmJtOWtaUzVyWlhrcFhTQTlJSFp1YjJSbE8xeHVJQ0FnSUgxY2JpQWdJQ0JpWldadmNtVk1aV0YyWlNBbUppQmlaV1p2Y21WTVpXRjJaU2hsYkNrN1hHNGdJQ0FnYVdZZ0tHVjRjR1ZqZEhORFUxTXBJSHRjYmlBZ0lDQWdJR0ZrWkZSeVlXNXphWFJwYjI1RGJHRnpjeWhsYkN3Z2JHVmhkbVZEYkdGemN5azdYRzRnSUNBZ0lDQmhaR1JVY21GdWMybDBhVzl1UTJ4aGMzTW9aV3dzSUd4bFlYWmxRV04wYVhabFEyeGhjM01wTzF4dUlDQWdJQ0FnYm1WNGRFWnlZVzFsS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVZ0YjNabFZISmhibk5wZEdsdmJrTnNZWE56S0dWc0xDQnNaV0YyWlVOc1lYTnpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmpZaTVqWVc1alpXeHNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmhaR1JVY21GdWMybDBhVzl1UTJ4aGMzTW9aV3dzSUd4bFlYWmxWRzlEYkdGemN5azdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjFjMlZ5VjJGdWRITkRiMjUwY205c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5XWVd4cFpFUjFjbUYwYVc5dUtHVjRjR3hwWTJsMFRHVmhkbVZFZFhKaGRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENoallpd2daWGh3YkdsamFYUk1aV0YyWlVSMWNtRjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9aVzVVY21GdWMybDBhVzl1Ulc1a2N5aGxiQ3dnZEhsd1pTd2dZMklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUd4bFlYWmxJQ1ltSUd4bFlYWmxLR1ZzTENCallpazdYRzRnSUNBZ2FXWWdLQ0ZsZUhCbFkzUnpRMU5USUNZbUlDRjFjMlZ5VjJGdWRITkRiMjUwY205c0tTQjdYRzRnSUNBZ0lDQmpZaWdwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dkx5QnZibXg1SUhWelpXUWdhVzRnWkdWMklHMXZaR1ZjYm1aMWJtTjBhVzl1SUdOb1pXTnJSSFZ5WVhScGIyNGdLSFpoYkN3Z2JtRnRaU3dnZG01dlpHVXBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQjJZV3dnSVQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJRndpUEhSeVlXNXphWFJwYjI0K0lHVjRjR3hwWTJsMElGd2lJQ3NnYm1GdFpTQXJJRndpSUdSMWNtRjBhVzl1SUdseklHNXZkQ0JoSUhaaGJHbGtJRzUxYldKbGNpQXRJRndpSUN0Y2JpQWdJQ0FnSUZ3aVoyOTBJRndpSUNzZ0tFcFRUMDR1YzNSeWFXNW5hV1o1S0haaGJDa3BJQ3NnWENJdVhDSXNYRzRnSUNBZ0lDQjJibTlrWlM1amIyNTBaWGgwWEc0Z0lDQWdLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaHBjMDVoVGloMllXd3BLU0I3WEc0Z0lDQWdkMkZ5YmloY2JpQWdJQ0FnSUZ3aVBIUnlZVzV6YVhScGIyNCtJR1Y0Y0d4cFkybDBJRndpSUNzZ2JtRnRaU0FySUZ3aUlHUjFjbUYwYVc5dUlHbHpJRTVoVGlBdElGd2lJQ3RjYmlBZ0lDQWdJQ2QwYUdVZ1pIVnlZWFJwYjI0Z1pYaHdjbVZ6YzJsdmJpQnRhV2RvZENCaVpTQnBibU52Y25KbFkzUXVKeXhjYmlBZ0lDQWdJSFp1YjJSbExtTnZiblJsZUhSY2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpWbUZzYVdSRWRYSmhkR2x2YmlBb2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc0lEMDlQU0FuYm5WdFltVnlKeUFtSmlBaGFYTk9ZVTRvZG1Gc0tWeHVmVnh1WEc0dktpcGNiaUFxSUU1dmNtMWhiR2w2WlNCaElIUnlZVzV6YVhScGIyNGdhRzl2YXlkeklHRnlaM1Z0Wlc1MElHeGxibWQwYUM0Z1ZHaGxJR2h2YjJzZ2JXRjVJR0psT2x4dUlDb2dMU0JoSUcxbGNtZGxaQ0JvYjI5cklDaHBiblp2YTJWeUtTQjNhWFJvSUhSb1pTQnZjbWxuYVc1aGJDQnBiaUF1Wm01elhHNGdLaUF0SUdFZ2QzSmhjSEJsWkNCamIyMXdiMjVsYm5RZ2JXVjBhRzlrSUNoamFHVmpheUF1WDJ4bGJtZDBhQ2xjYmlBcUlDMGdZU0J3YkdGcGJpQm1kVzVqZEdsdmJpQW9MbXhsYm1kMGFDbGNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBTRzl2YTBGeVozVnRaVzUwYzB4bGJtZDBhQ0FvWm00cElIdGNiaUFnYVdZZ0tHbHpWVzVrWldZb1ptNHBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lIMWNiaUFnZG1GeUlHbHVkbTlyWlhKR2JuTWdQU0JtYmk1bWJuTTdYRzRnSUdsbUlDaHBjMFJsWmlocGJuWnZhMlZ5Um01ektTa2dlMXh1SUNBZ0lDOHZJR2x1ZG05clpYSmNiaUFnSUNCeVpYUjFjbTRnWjJWMFNHOXZhMEZ5WjNWdFpXNTBjMHhsYm1kMGFDaGNiaUFnSUNBZ0lFRnljbUY1TG1selFYSnlZWGtvYVc1MmIydGxja1p1Y3lsY2JpQWdJQ0FnSUNBZ1B5QnBiblp2YTJWeVJtNXpXekJkWEc0Z0lDQWdJQ0FnSURvZ2FXNTJiMnRsY2tadWMxeHVJQ0FnSUNsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnS0dadUxsOXNaVzVuZEdnZ2ZId2dabTR1YkdWdVozUm9LU0ErSURGY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZaVzUwWlhJZ0tGOHNJSFp1YjJSbEtTQjdYRzRnSUdsbUlDaDJibTlrWlM1a1lYUmhMbk5vYjNjZ0lUMDlJSFJ5ZFdVcElIdGNiaUFnSUNCbGJuUmxjaWgyYm05a1pTazdYRzRnSUgxY2JuMWNibHh1ZG1GeUlIUnlZVzV6YVhScGIyNGdQU0JwYmtKeWIzZHpaWElnUHlCN1hHNGdJR055WldGMFpUb2dYMlZ1ZEdWeUxGeHVJQ0JoWTNScGRtRjBaVG9nWDJWdWRHVnlMRnh1SUNCeVpXMXZkbVU2SUdaMWJtTjBhVzl1SUhKbGJXOTJaU1FrTVNBb2RtNXZaR1VzSUhKdEtTQjdYRzRnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdJQ0JwWmlBb2RtNXZaR1V1WkdGMFlTNXphRzkzSUNFOVBTQjBjblZsS1NCN1hHNGdJQ0FnSUNCc1pXRjJaU2gyYm05a1pTd2djbTBwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnliU2dwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmU0E2SUh0OU8xeHVYRzUyWVhJZ2NHeGhkR1p2Y20xTmIyUjFiR1Z6SUQwZ1cxeHVJQ0JoZEhSeWN5eGNiaUFnYTJ4aGMzTXNYRzRnSUdWMlpXNTBjeXhjYmlBZ1pHOXRVSEp2Y0hNc1hHNGdJSE4wZVd4bExGeHVJQ0IwY21GdWMybDBhVzl1WEc1ZE8xeHVYRzR2S2lBZ0tpOWNibHh1THk4Z2RHaGxJR1JwY21WamRHbDJaU0J0YjJSMWJHVWdjMmh2ZFd4a0lHSmxJR0Z3Y0d4cFpXUWdiR0Z6ZEN3Z1lXWjBaWElnWVd4c1hHNHZMeUJpZFdsc2RDMXBiaUJ0YjJSMWJHVnpJR2hoZG1VZ1ltVmxiaUJoY0hCc2FXVmtMbHh1ZG1GeUlHMXZaSFZzWlhNZ1BTQndiR0YwWm05eWJVMXZaSFZzWlhNdVkyOXVZMkYwS0dKaGMyVk5iMlIxYkdWektUdGNibHh1ZG1GeUlIQmhkR05vSUQwZ1kzSmxZWFJsVUdGMFkyaEdkVzVqZEdsdmJpaDdJRzV2WkdWUGNITTZJRzV2WkdWUGNITXNJRzF2WkhWc1pYTTZJRzF2WkhWc1pYTWdmU2s3WEc1Y2JpOHFLbHh1SUNvZ1RtOTBJSFI1Y0dVZ1kyaGxZMnRwYm1jZ2RHaHBjeUJtYVd4bElHSmxZMkYxYzJVZ1pteHZkeUJrYjJWemJpZDBJR3hwYTJVZ1lYUjBZV05vYVc1blhHNGdLaUJ3Y205d1pYSjBhV1Z6SUhSdklFVnNaVzFsYm5SekxseHVJQ292WEc1Y2JpOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dWFXWWdLR2x6U1VVNUtTQjdYRzRnSUM4dklHaDBkSEE2THk5M2QzY3ViV0YwZEhNME1URXVZMjl0TDNCdmMzUXZhVzUwWlhKdVpYUXRaWGh3Ykc5eVpYSXRPUzF2Ym1sdWNIVjBMMXh1SUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkelpXeGxZM1JwYjI1amFHRnVaMlVuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJR1ZzSUQwZ1pHOWpkVzFsYm5RdVlXTjBhWFpsUld4bGJXVnVkRHRjYmlBZ0lDQnBaaUFvWld3Z0ppWWdaV3d1ZG0xdlpHVnNLU0I3WEc0Z0lDQWdJQ0IwY21sbloyVnlLR1ZzTENBbmFXNXdkWFFuS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlZ4dVhHNTJZWElnWkdseVpXTjBhWFpsSUQwZ2UxeHVJQ0JwYm5ObGNuUmxaRG9nWm5WdVkzUnBiMjRnYVc1elpYSjBaV1FnS0dWc0xDQmlhVzVrYVc1bkxDQjJibTlrWlN3Z2IyeGtWbTV2WkdVcElIdGNiaUFnSUNCcFppQW9kbTV2WkdVdWRHRm5JRDA5UFNBbmMyVnNaV04wSnlrZ2UxeHVJQ0FnSUNBZ0x5OGdJelk1TUROY2JpQWdJQ0FnSUdsbUlDaHZiR1JXYm05a1pTNWxiRzBnSmlZZ0lXOXNaRlp1YjJSbExtVnNiUzVmZGs5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2JXVnlaMlZXVG05a1pVaHZiMnNvZG01dlpHVXNJQ2R3YjNOMGNHRjBZMmduTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWkdseVpXTjBhWFpsTG1OdmJYQnZibVZ1ZEZWd1pHRjBaV1FvWld3c0lHSnBibVJwYm1jc0lIWnViMlJsS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpaWFJUWld4bFkzUmxaQ2hsYkN3Z1ltbHVaR2x1Wnl3Z2RtNXZaR1V1WTI5dWRHVjRkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkM1ZmRrOXdkR2x2Ym5NZ1BTQmJYUzV0WVhBdVkyRnNiQ2hsYkM1dmNIUnBiMjV6TENCblpYUldZV3gxWlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMmJtOWtaUzUwWVdjZ1BUMDlJQ2QwWlhoMFlYSmxZU2NnZkh3Z2FYTlVaWGgwU1c1d2RYUlVlWEJsS0dWc0xuUjVjR1VwS1NCN1hHNGdJQ0FnSUNCbGJDNWZkazF2WkdsbWFXVnljeUE5SUdKcGJtUnBibWN1Ylc5a2FXWnBaWEp6TzF4dUlDQWdJQ0FnYVdZZ0tDRmlhVzVrYVc1bkxtMXZaR2xtYVdWeWN5NXNZWHA1S1NCN1hHNGdJQ0FnSUNBZ0lHVnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk52YlhCdmMybDBhVzl1YzNSaGNuUW5MQ0J2YmtOdmJYQnZjMmwwYVc5dVUzUmhjblFwTzF4dUlDQWdJQ0FnSUNCbGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiMjF3YjNOcGRHbHZibVZ1WkNjc0lHOXVRMjl0Y0c5emFYUnBiMjVGYm1RcE8xeHVJQ0FnSUNBZ0lDQXZMeUJUWVdaaGNta2dQQ0F4TUM0eUlDWWdWVWxYWldKV2FXVjNJR1J2WlhOdUozUWdabWx5WlNCamIyMXdiM05wZEdsdmJtVnVaQ0IzYUdWdVhHNGdJQ0FnSUNBZ0lDOHZJSE4zYVhSamFHbHVaeUJtYjJOMWN5QmlaV1p2Y21VZ1kyOXVabWx5YldsdVp5QmpiMjF3YjNOcGRHbHZiaUJqYUc5cFkyVmNiaUFnSUNBZ0lDQWdMeThnZEdocGN5QmhiSE52SUdacGVHVnpJSFJvWlNCcGMzTjFaU0IzYUdWeVpTQnpiMjFsSUdKeWIzZHpaWEp6SUdVdVp5NGdhVTlUSUVOb2NtOXRaVnh1SUNBZ0lDQWdJQ0F2THlCbWFYSmxjeUJjSW1Ob1lXNW5aVndpSUdsdWMzUmxZV1FnYjJZZ1hDSnBibkIxZEZ3aUlHOXVJR0YxZEc5amIyMXdiR1YwWlM1Y2JpQWdJQ0FnSUNBZ1pXd3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMmhoYm1kbEp5d2diMjVEYjIxd2IzTnBkR2x2YmtWdVpDazdYRzRnSUNBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOSlJUa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCbGJDNTJiVzlrWld3Z1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lHTnZiWEJ2Ym1WdWRGVndaR0YwWldRNklHWjFibU4wYVc5dUlHTnZiWEJ2Ym1WdWRGVndaR0YwWldRZ0tHVnNMQ0JpYVc1a2FXNW5MQ0IyYm05a1pTa2dlMXh1SUNBZ0lHbG1JQ2gyYm05a1pTNTBZV2NnUFQwOUlDZHpaV3hsWTNRbktTQjdYRzRnSUNBZ0lDQnpaWFJUWld4bFkzUmxaQ2hsYkN3Z1ltbHVaR2x1Wnl3Z2RtNXZaR1V1WTI5dWRHVjRkQ2s3WEc0Z0lDQWdJQ0F2THlCcGJpQmpZWE5sSUhSb1pTQnZjSFJwYjI1eklISmxibVJsY21Wa0lHSjVJSFl0Wm05eUlHaGhkbVVnWTJoaGJtZGxaQ3hjYmlBZ0lDQWdJQzh2SUdsMEozTWdjRzl6YzJsaWJHVWdkR2hoZENCMGFHVWdkbUZzZFdVZ2FYTWdiM1YwTFc5bUxYTjVibU1nZDJsMGFDQjBhR1VnY21WdVpHVnlaV1FnYjNCMGFXOXVjeTVjYmlBZ0lDQWdJQzh2SUdSbGRHVmpkQ0J6ZFdOb0lHTmhjMlZ6SUdGdVpDQm1hV3gwWlhJZ2IzVjBJSFpoYkhWbGN5QjBhR0YwSUc1dklHeHZibWRsY2lCb1lYTWdZU0J0WVhSamFHbHVaMXh1SUNBZ0lDQWdMeThnYjNCMGFXOXVJR2x1SUhSb1pTQkVUMDB1WEc0Z0lDQWdJQ0IyWVhJZ2NISmxkazl3ZEdsdmJuTWdQU0JsYkM1ZmRrOXdkR2x2Ym5NN1hHNGdJQ0FnSUNCMllYSWdZM1Z5VDNCMGFXOXVjeUE5SUdWc0xsOTJUM0IwYVc5dWN5QTlJRnRkTG0xaGNDNWpZV3hzS0dWc0xtOXdkR2x2Ym5Nc0lHZGxkRlpoYkhWbEtUdGNiaUFnSUNBZ0lHbG1JQ2hqZFhKUGNIUnBiMjV6TG5OdmJXVW9ablZ1WTNScGIyNGdLRzhzSUdrcElIc2djbVYwZFhKdUlDRnNiMjl6WlVWeGRXRnNLRzhzSUhCeVpYWlBjSFJwYjI1elcybGRLVHNnZlNrcElIdGNiaUFnSUNBZ0lDQWdMeThnZEhKcFoyZGxjaUJqYUdGdVoyVWdaWFpsYm5RZ2FXWmNiaUFnSUNBZ0lDQWdMeThnYm04Z2JXRjBZMmhwYm1jZ2IzQjBhVzl1SUdadmRXNWtJR1p2Y2lCaGRDQnNaV0Z6ZENCdmJtVWdkbUZzZFdWY2JpQWdJQ0FnSUNBZ2RtRnlJRzVsWldSU1pYTmxkQ0E5SUdWc0xtMTFiSFJwY0d4bFhHNGdJQ0FnSUNBZ0lDQWdQeUJpYVc1a2FXNW5MblpoYkhWbExuTnZiV1VvWm5WdVkzUnBiMjRnS0hZcElIc2djbVYwZFhKdUlHaGhjMDV2VFdGMFkyaHBibWRQY0hScGIyNG9kaXdnWTNWeVQzQjBhVzl1Y3lrN0lIMHBYRzRnSUNBZ0lDQWdJQ0FnT2lCaWFXNWthVzVuTG5aaGJIVmxJQ0U5UFNCaWFXNWthVzVuTG05c1pGWmhiSFZsSUNZbUlHaGhjMDV2VFdGMFkyaHBibWRQY0hScGIyNG9ZbWx1WkdsdVp5NTJZV3gxWlN3Z1kzVnlUM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJR2xtSUNodVpXVmtVbVZ6WlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0IwY21sbloyVnlLR1ZzTENBblkyaGhibWRsSnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNWNibVoxYm1OMGFXOXVJSE5sZEZObGJHVmpkR1ZrSUNobGJDd2dZbWx1WkdsdVp5d2dkbTBwSUh0Y2JpQWdZV04wZFdGc2JIbFRaWFJUWld4bFkzUmxaQ2hsYkN3Z1ltbHVaR2x1Wnl3Z2RtMHBPMXh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ2FXWWdLR2x6U1VVZ2ZId2dhWE5GWkdkbEtTQjdYRzRnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0JoWTNSMVlXeHNlVk5sZEZObGJHVmpkR1ZrS0dWc0xDQmlhVzVrYVc1bkxDQjJiU2s3WEc0Z0lDQWdmU3dnTUNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZV04wZFdGc2JIbFRaWFJUWld4bFkzUmxaQ0FvWld3c0lHSnBibVJwYm1jc0lIWnRLU0I3WEc0Z0lIWmhjaUIyWVd4MVpTQTlJR0pwYm1ScGJtY3VkbUZzZFdVN1hHNGdJSFpoY2lCcGMwMTFiSFJwY0d4bElEMGdaV3d1YlhWc2RHbHdiR1U3WEc0Z0lHbG1JQ2hwYzAxMWJIUnBjR3hsSUNZbUlDRkJjbkpoZVM1cGMwRnljbUY1S0haaGJIVmxLU2tnZTF4dUlDQWdJSGRoY200b1hHNGdJQ0FnSUNCY0lqeHpaV3hsWTNRZ2JYVnNkR2x3YkdVZ2RpMXRiMlJsYkQxY1hGd2lYQ0lnS3lBb1ltbHVaR2x1Wnk1bGVIQnlaWE56YVc5dUtTQXJJRndpWEZ4Y0lqNGdYQ0lnSzF4dUlDQWdJQ0FnWENKbGVIQmxZM1J6SUdGdUlFRnljbUY1SUhaaGJIVmxJR1p2Y2lCcGRITWdZbWx1WkdsdVp5d2dZblYwSUdkdmRDQmNJaUFySUNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29kbUZzZFdVcExuTnNhV05sS0Rnc0lDMHhLU2tzWEc0Z0lDQWdJQ0IyYlZ4dUlDQWdJQ2s3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmlBZ2RtRnlJSE5sYkdWamRHVmtMQ0J2Y0hScGIyNDdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1pXd3ViM0IwYVc5dWN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQnZjSFJwYjI0Z1BTQmxiQzV2Y0hScGIyNXpXMmxkTzF4dUlDQWdJR2xtSUNocGMwMTFiSFJwY0d4bEtTQjdYRzRnSUNBZ0lDQnpaV3hsWTNSbFpDQTlJR3h2YjNObFNXNWtaWGhQWmloMllXeDFaU3dnWjJWMFZtRnNkV1VvYjNCMGFXOXVLU2tnUGlBdE1UdGNiaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNHVjMlZzWldOMFpXUWdJVDA5SUhObGJHVmpkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ymk1elpXeGxZM1JsWkNBOUlITmxiR1ZqZEdWa08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwWmlBb2JHOXZjMlZGY1hWaGJDaG5aWFJXWVd4MVpTaHZjSFJwYjI0cExDQjJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dWc0xuTmxiR1ZqZEdWa1NXNWtaWGdnSVQwOUlHa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCbGJDNXpaV3hsWTNSbFpFbHVaR1Y0SUQwZ2FUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmlBZ2FXWWdLQ0ZwYzAxMWJIUnBjR3hsS1NCN1hHNGdJQ0FnWld3dWMyVnNaV04wWldSSmJtUmxlQ0E5SUMweE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR2hoYzA1dlRXRjBZMmhwYm1kUGNIUnBiMjRnS0haaGJIVmxMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lISmxkSFZ5YmlCdmNIUnBiMjV6TG1WMlpYSjVLR1oxYm1OMGFXOXVJQ2h2S1NCN0lISmxkSFZ5YmlBaGJHOXZjMlZGY1hWaGJDaHZMQ0IyWVd4MVpTazdJSDBwWEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEZaaGJIVmxJQ2h2Y0hScGIyNHBJSHRjYmlBZ2NtVjBkWEp1SUNkZmRtRnNkV1VuSUdsdUlHOXdkR2x2Ymx4dUlDQWdJRDhnYjNCMGFXOXVMbDkyWVd4MVpWeHVJQ0FnSURvZ2IzQjBhVzl1TG5aaGJIVmxYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXVRMjl0Y0c5emFYUnBiMjVUZEdGeWRDQW9aU2tnZTF4dUlDQmxMblJoY21kbGRDNWpiMjF3YjNOcGJtY2dQU0IwY25WbE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdmJrTnZiWEJ2YzJsMGFXOXVSVzVrSUNobEtTQjdYRzRnSUM4dklIQnlaWFpsYm5RZ2RISnBaMmRsY21sdVp5QmhiaUJwYm5CMWRDQmxkbVZ1ZENCbWIzSWdibThnY21WaGMyOXVYRzRnSUdsbUlDZ2haUzUwWVhKblpYUXVZMjl0Y0c5emFXNW5LU0I3SUhKbGRIVnliaUI5WEc0Z0lHVXVkR0Z5WjJWMExtTnZiWEJ2YzJsdVp5QTlJR1poYkhObE8xeHVJQ0IwY21sbloyVnlLR1V1ZEdGeVoyVjBMQ0FuYVc1d2RYUW5LVHRjYm4xY2JseHVablZ1WTNScGIyNGdkSEpwWjJkbGNpQW9aV3dzSUhSNWNHVXBJSHRjYmlBZ2RtRnlJR1VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGZG1WdWRDZ25TRlJOVEVWMlpXNTBjeWNwTzF4dUlDQmxMbWx1YVhSRmRtVnVkQ2gwZVhCbExDQjBjblZsTENCMGNuVmxLVHRjYmlBZ1pXd3VaR2x6Y0dGMFkyaEZkbVZ1ZENobEtUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JpOHZJSEpsWTNWeWMybDJaV3g1SUhObFlYSmphQ0JtYjNJZ2NHOXpjMmxpYkdVZ2RISmhibk5wZEdsdmJpQmtaV1pwYm1Wa0lHbHVjMmxrWlNCMGFHVWdZMjl0Y0c5dVpXNTBJSEp2YjNSY2JtWjFibU4wYVc5dUlHeHZZMkYwWlU1dlpHVWdLSFp1YjJSbEtTQjdYRzRnSUhKbGRIVnliaUIyYm05a1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTQW1KaUFvSVhadWIyUmxMbVJoZEdFZ2ZId2dJWFp1YjJSbExtUmhkR0V1ZEhKaGJuTnBkR2x2YmlsY2JpQWdJQ0EvSUd4dlkyRjBaVTV2WkdVb2RtNXZaR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlV1WDNadWIyUmxLVnh1SUNBZ0lEb2dkbTV2WkdWY2JuMWNibHh1ZG1GeUlITm9iM2NnUFNCN1hHNGdJR0pwYm1RNklHWjFibU4wYVc5dUlHSnBibVFnS0dWc0xDQnlaV1lzSUhadWIyUmxLU0I3WEc0Z0lDQWdkbUZ5SUhaaGJIVmxJRDBnY21WbUxuWmhiSFZsTzF4dVhHNGdJQ0FnZG01dlpHVWdQU0JzYjJOaGRHVk9iMlJsS0hadWIyUmxLVHRjYmlBZ0lDQjJZWElnZEhKaGJuTnBkR2x2YmlRa01TQTlJSFp1YjJSbExtUmhkR0VnSmlZZ2RtNXZaR1V1WkdGMFlTNTBjbUZ1YzJsMGFXOXVPMXh1SUNBZ0lIWmhjaUJ2Y21sbmFXNWhiRVJwYzNCc1lYa2dQU0JsYkM1ZlgzWlBjbWxuYVc1aGJFUnBjM0JzWVhrZ1BWeHVJQ0FnSUNBZ1pXd3VjM1I1YkdVdVpHbHpjR3hoZVNBOVBUMGdKMjV2Ym1VbklEOGdKeWNnT2lCbGJDNXpkSGxzWlM1a2FYTndiR0Y1TzF4dUlDQWdJR2xtSUNoMllXeDFaU0FtSmlCMGNtRnVjMmwwYVc5dUpDUXhLU0I3WEc0Z0lDQWdJQ0IyYm05a1pTNWtZWFJoTG5Ob2IzY2dQU0IwY25WbE8xeHVJQ0FnSUNBZ1pXNTBaWElvZG01dlpHVXNJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1pXd3VjM1I1YkdVdVpHbHpjR3hoZVNBOUlHOXlhV2RwYm1Gc1JHbHpjR3hoZVR0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JsYkM1emRIbHNaUzVrYVhOd2JHRjVJRDBnZG1Gc2RXVWdQeUJ2Y21sbmFXNWhiRVJwYzNCc1lYa2dPaUFuYm05dVpTYzdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJSFZ3WkdGMFpUb2dablZ1WTNScGIyNGdkWEJrWVhSbElDaGxiQ3dnY21WbUxDQjJibTlrWlNrZ2UxeHVJQ0FnSUhaaGNpQjJZV3gxWlNBOUlISmxaaTUyWVd4MVpUdGNiaUFnSUNCMllYSWdiMnhrVm1Gc2RXVWdQU0J5WldZdWIyeGtWbUZzZFdVN1hHNWNiaUFnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ0lDQnBaaUFvSVhaaGJIVmxJRDA5UFNBaGIyeGtWbUZzZFdVcElIc2djbVYwZFhKdUlIMWNiaUFnSUNCMmJtOWtaU0E5SUd4dlkyRjBaVTV2WkdVb2RtNXZaR1VwTzF4dUlDQWdJSFpoY2lCMGNtRnVjMmwwYVc5dUpDUXhJRDBnZG01dlpHVXVaR0YwWVNBbUppQjJibTlrWlM1a1lYUmhMblJ5WVc1emFYUnBiMjQ3WEc0Z0lDQWdhV1lnS0hSeVlXNXphWFJwYjI0a0pERXBJSHRjYmlBZ0lDQWdJSFp1YjJSbExtUmhkR0V1YzJodmR5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCcFppQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdaVzUwWlhJb2RtNXZaR1VzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0JsYkM1emRIbHNaUzVrYVhOd2JHRjVJRDBnWld3dVgxOTJUM0pwWjJsdVlXeEVhWE53YkdGNU8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR3hsWVhabEtIWnViMlJsTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWld3dWMzUjViR1V1WkdsemNHeGhlU0E5SUNkdWIyNWxKenRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1ZzTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0IyWVd4MVpTQS9JR1ZzTGw5ZmRrOXlhV2RwYm1Gc1JHbHpjR3hoZVNBNklDZHViMjVsSnp0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ2RXNWlhVzVrT2lCbWRXNWpkR2x2YmlCMWJtSnBibVFnS0Z4dUlDQWdJR1ZzTEZ4dUlDQWdJR0pwYm1ScGJtY3NYRzRnSUNBZ2RtNXZaR1VzWEc0Z0lDQWdiMnhrVm01dlpHVXNYRzRnSUNBZ2FYTkVaWE4wY205NVhHNGdJQ2tnZTF4dUlDQWdJR2xtSUNnaGFYTkVaWE4wY205NUtTQjdYRzRnSUNBZ0lDQmxiQzV6ZEhsc1pTNWthWE53YkdGNUlEMGdaV3d1WDE5MlQzSnBaMmx1WVd4RWFYTndiR0Y1TzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dWRtRnlJSEJzWVhSbWIzSnRSR2x5WldOMGFYWmxjeUE5SUh0Y2JpQWdiVzlrWld3NklHUnBjbVZqZEdsMlpTeGNiaUFnYzJodmR6b2djMmh2ZDF4dWZUdGNibHh1THlvZ0lDb3ZYRzVjYm5aaGNpQjBjbUZ1YzJsMGFXOXVVSEp2Y0hNZ1BTQjdYRzRnSUc1aGJXVTZJRk4wY21sdVp5eGNiaUFnWVhCd1pXRnlPaUJDYjI5c1pXRnVMRnh1SUNCamMzTTZJRUp2YjJ4bFlXNHNYRzRnSUcxdlpHVTZJRk4wY21sdVp5eGNiaUFnZEhsd1pUb2dVM1J5YVc1bkxGeHVJQ0JsYm5SbGNrTnNZWE56T2lCVGRISnBibWNzWEc0Z0lHeGxZWFpsUTJ4aGMzTTZJRk4wY21sdVp5eGNiaUFnWlc1MFpYSlViME5zWVhOek9pQlRkSEpwYm1jc1hHNGdJR3hsWVhabFZHOURiR0Z6Y3pvZ1UzUnlhVzVuTEZ4dUlDQmxiblJsY2tGamRHbDJaVU5zWVhOek9pQlRkSEpwYm1jc1hHNGdJR3hsWVhabFFXTjBhWFpsUTJ4aGMzTTZJRk4wY21sdVp5eGNiaUFnWVhCd1pXRnlRMnhoYzNNNklGTjBjbWx1Wnl4Y2JpQWdZWEJ3WldGeVFXTjBhWFpsUTJ4aGMzTTZJRk4wY21sdVp5eGNiaUFnWVhCd1pXRnlWRzlEYkdGemN6b2dVM1J5YVc1bkxGeHVJQ0JrZFhKaGRHbHZiam9nVzA1MWJXSmxjaXdnVTNSeWFXNW5MQ0JQWW1wbFkzUmRYRzU5TzF4dVhHNHZMeUJwYmlCallYTmxJSFJvWlNCamFHbHNaQ0JwY3lCaGJITnZJR0Z1SUdGaWMzUnlZV04wSUdOdmJYQnZibVZ1ZEN3Z1pTNW5MaUE4YTJWbGNDMWhiR2wyWlQ1Y2JpOHZJSGRsSUhkaGJuUWdkRzhnY21WamRYSnphWFpsYkhrZ2NtVjBjbWxsZG1VZ2RHaGxJSEpsWVd3Z1kyOXRjRzl1Wlc1MElIUnZJR0psSUhKbGJtUmxjbVZrWEc1bWRXNWpkR2x2YmlCblpYUlNaV0ZzUTJocGJHUWdLSFp1YjJSbEtTQjdYRzRnSUhaaGNpQmpiMjF3VDNCMGFXOXVjeUE5SUhadWIyUmxJQ1ltSUhadWIyUmxMbU52YlhCdmJtVnVkRTl3ZEdsdmJuTTdYRzRnSUdsbUlDaGpiMjF3VDNCMGFXOXVjeUFtSmlCamIyMXdUM0IwYVc5dWN5NURkRzl5TG05d2RHbHZibk11WVdKemRISmhZM1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaMlYwVW1WaGJFTm9hV3hrS0dkbGRFWnBjbk4wUTI5dGNHOXVaVzUwUTJocGJHUW9ZMjl0Y0U5d2RHbHZibk11WTJocGJHUnlaVzRwS1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUIyYm05a1pWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR1Y0ZEhKaFkzUlVjbUZ1YzJsMGFXOXVSR0YwWVNBb1kyOXRjQ2tnZTF4dUlDQjJZWElnWkdGMFlTQTlJSHQ5TzF4dUlDQjJZWElnYjNCMGFXOXVjeUE5SUdOdmJYQXVKRzl3ZEdsdmJuTTdYRzRnSUM4dklIQnliM0J6WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCdmNIUnBiMjV6TG5CeWIzQnpSR0YwWVNrZ2UxeHVJQ0FnSUdSaGRHRmJhMlY1WFNBOUlHTnZiWEJiYTJWNVhUdGNiaUFnZlZ4dUlDQXZMeUJsZG1WdWRITXVYRzRnSUM4dklHVjRkSEpoWTNRZ2JHbHpkR1Z1WlhKeklHRnVaQ0J3WVhOeklIUm9aVzBnWkdseVpXTjBiSGtnZEc4Z2RHaGxJSFJ5WVc1emFYUnBiMjRnYldWMGFHOWtjMXh1SUNCMllYSWdiR2x6ZEdWdVpYSnpJRDBnYjNCMGFXOXVjeTVmY0dGeVpXNTBUR2x6ZEdWdVpYSnpPMXh1SUNCbWIzSWdLSFpoY2lCclpYa2tNU0JwYmlCc2FYTjBaVzVsY25NcElIdGNiaUFnSUNCa1lYUmhXMk5oYldWc2FYcGxLR3RsZVNReEtWMGdQU0JzYVhOMFpXNWxjbk5iYTJWNUpERmRPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmtZWFJoWEc1OVhHNWNibVoxYm1OMGFXOXVJSEJzWVdObGFHOXNaR1Z5SUNob0xDQnlZWGREYUdsc1pDa2dlMXh1SUNCcFppQW9MMXhjWkMxclpXVndMV0ZzYVhabEpDOHVkR1Z6ZENoeVlYZERhR2xzWkM1MFlXY3BLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZ29KMnRsWlhBdFlXeHBkbVVuTENCN1hHNGdJQ0FnSUNCd2NtOXdjem9nY21GM1EyaHBiR1F1WTI5dGNHOXVaVzUwVDNCMGFXOXVjeTV3Y205d2MwUmhkR0ZjYmlBZ0lDQjlLVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdoaGMxQmhjbVZ1ZEZSeVlXNXphWFJwYjI0Z0tIWnViMlJsS1NCN1hHNGdJSGRvYVd4bElDZ29kbTV2WkdVZ1BTQjJibTlrWlM1d1lYSmxiblFwS1NCN1hHNGdJQ0FnYVdZZ0tIWnViMlJsTG1SaGRHRXVkSEpoYm5OcGRHbHZiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdWY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTlRZVzFsUTJocGJHUWdLR05vYVd4a0xDQnZiR1JEYUdsc1pDa2dlMXh1SUNCeVpYUjFjbTRnYjJ4a1EyaHBiR1F1YTJWNUlEMDlQU0JqYUdsc1pDNXJaWGtnSmlZZ2IyeGtRMmhwYkdRdWRHRm5JRDA5UFNCamFHbHNaQzUwWVdkY2JuMWNibHh1ZG1GeUlHbHpUbTkwVkdWNGRFNXZaR1VnUFNCbWRXNWpkR2x2YmlBb1l5a2dleUJ5WlhSMWNtNGdZeTUwWVdjZ2ZId2dhWE5CYzNsdVkxQnNZV05sYUc5c1pHVnlLR01wT3lCOU8xeHVYRzUyWVhJZ2FYTldVMmh2ZDBScGNtVmpkR2wyWlNBOUlHWjFibU4wYVc5dUlDaGtLU0I3SUhKbGRIVnliaUJrTG01aGJXVWdQVDA5SUNkemFHOTNKenNnZlR0Y2JseHVkbUZ5SUZSeVlXNXphWFJwYjI0Z1BTQjdYRzRnSUc1aGJXVTZJQ2QwY21GdWMybDBhVzl1Snl4Y2JpQWdjSEp2Y0hNNklIUnlZVzV6YVhScGIyNVFjbTl3Y3l4Y2JpQWdZV0p6ZEhKaFkzUTZJSFJ5ZFdVc1hHNWNiaUFnY21WdVpHVnlPaUJtZFc1amRHbHZiaUJ5Wlc1a1pYSWdLR2dwSUh0Y2JpQWdJQ0IyWVhJZ2RHaHBjeVF4SUQwZ2RHaHBjenRjYmx4dUlDQWdJSFpoY2lCamFHbHNaSEpsYmlBOUlIUm9hWE11SkhOc2IzUnpMbVJsWm1GMWJIUTdYRzRnSUNBZ2FXWWdLQ0ZqYUdsc1pISmxiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdabWxzZEdWeUlHOTFkQ0IwWlhoMElHNXZaR1Z6SUNod2IzTnphV0pzWlNCM2FHbDBaWE53WVdObGN5bGNiaUFnSUNCamFHbHNaSEpsYmlBOUlHTm9hV3hrY21WdUxtWnBiSFJsY2locGMwNXZkRlJsZUhST2IyUmxLVHRjYmlBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdJQ0JwWmlBb0lXTm9hV3hrY21WdUxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnZDJGeWJpQnRkV3gwYVhCc1pTQmxiR1Z0Wlc1MGMxeHVJQ0FnSUdsbUlDaGphR2xzWkhKbGJpNXNaVzVuZEdnZ1BpQXhLU0I3WEc0Z0lDQWdJQ0IzWVhKdUtGeHVJQ0FnSUNBZ0lDQW5QSFJ5WVc1emFYUnBiMjQrSUdOaGJpQnZibXg1SUdKbElIVnpaV1FnYjI0Z1lTQnphVzVuYkdVZ1pXeGxiV1Z1ZEM0Z1ZYTmxJQ2NnSzF4dUlDQWdJQ0FnSUNBblBIUnlZVzV6YVhScGIyNHRaM0p2ZFhBK0lHWnZjaUJzYVhOMGN5NG5MRnh1SUNBZ0lDQWdJQ0IwYUdsekxpUndZWEpsYm5SY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHMXZaR1VnUFNCMGFHbHpMbTF2WkdVN1hHNWNiaUFnSUNBdkx5QjNZWEp1SUdsdWRtRnNhV1FnYlc5a1pWeHVJQ0FnSUdsbUlDaHRiMlJsSUNZbUlHMXZaR1VnSVQwOUlDZHBiaTF2ZFhRbklDWW1JRzF2WkdVZ0lUMDlJQ2R2ZFhRdGFXNG5YRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBbmFXNTJZV3hwWkNBOGRISmhibk5wZEdsdmJqNGdiVzlrWlRvZ0p5QXJJRzF2WkdVc1hHNGdJQ0FnSUNBZ0lIUm9hWE11SkhCaGNtVnVkRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnY21GM1EyaHBiR1FnUFNCamFHbHNaSEpsYmxzd1hUdGNibHh1SUNBZ0lDOHZJR2xtSUhSb2FYTWdhWE1nWVNCamIyMXdiMjVsYm5RZ2NtOXZkQ0J1YjJSbElHRnVaQ0IwYUdVZ1kyOXRjRzl1Wlc1MEozTmNiaUFnSUNBdkx5QndZWEpsYm5RZ1kyOXVkR0ZwYm1WeUlHNXZaR1VnWVd4emJ5Qm9ZWE1nZEhKaGJuTnBkR2x2Yml3Z2MydHBjQzVjYmlBZ0lDQnBaaUFvYUdGelVHRnlaVzUwVkhKaGJuTnBkR2x2YmloMGFHbHpMaVIyYm05a1pTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlZWGREYUdsc1pGeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHRndjR3g1SUhSeVlXNXphWFJwYjI0Z1pHRjBZU0IwYnlCamFHbHNaRnh1SUNBZ0lDOHZJSFZ6WlNCblpYUlNaV0ZzUTJocGJHUW9LU0IwYnlCcFoyNXZjbVVnWVdKemRISmhZM1FnWTI5dGNHOXVaVzUwY3lCbExtY3VJR3RsWlhBdFlXeHBkbVZjYmlBZ0lDQjJZWElnWTJocGJHUWdQU0JuWlhSU1pXRnNRMmhwYkdRb2NtRjNRMmhwYkdRcE8xeHVJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNBZ0lHbG1JQ2doWTJocGJHUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlZWGREYUdsc1pGeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBhR2x6TGw5c1pXRjJhVzVuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY0d4aFkyVm9iMnhrWlhJb2FDd2djbUYzUTJocGJHUXBYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdaVzV6ZFhKbElHRWdhMlY1SUhSb1lYUWdhWE1nZFc1cGNYVmxJSFJ2SUhSb1pTQjJibTlrWlNCMGVYQmxJR0Z1WkNCMGJ5QjBhR2x6SUhSeVlXNXphWFJwYjI1Y2JpQWdJQ0F2THlCamIyMXdiMjVsYm5RZ2FXNXpkR0Z1WTJVdUlGUm9hWE1nYTJWNUlIZHBiR3dnWW1VZ2RYTmxaQ0IwYnlCeVpXMXZkbVVnY0dWdVpHbHVaeUJzWldGMmFXNW5JRzV2WkdWelhHNGdJQ0FnTHk4Z1pIVnlhVzVuSUdWdWRHVnlhVzVuTGx4dUlDQWdJSFpoY2lCcFpDQTlJRndpWDE5MGNtRnVjMmwwYVc5dUxWd2lJQ3NnS0hSb2FYTXVYM1ZwWkNrZ0t5QmNJaTFjSWp0Y2JpQWdJQ0JqYUdsc1pDNXJaWGtnUFNCamFHbHNaQzVyWlhrZ1BUMGdiblZzYkZ4dUlDQWdJQ0FnUHlCamFHbHNaQzVwYzBOdmJXMWxiblJjYmlBZ0lDQWdJQ0FnUHlCcFpDQXJJQ2RqYjIxdFpXNTBKMXh1SUNBZ0lDQWdJQ0E2SUdsa0lDc2dZMmhwYkdRdWRHRm5YRzRnSUNBZ0lDQTZJR2x6VUhKcGJXbDBhWFpsS0dOb2FXeGtMbXRsZVNsY2JpQWdJQ0FnSUNBZ1B5QW9VM1J5YVc1bktHTm9hV3hrTG10bGVTa3VhVzVrWlhoUFppaHBaQ2tnUFQwOUlEQWdQeUJqYUdsc1pDNXJaWGtnT2lCcFpDQXJJR05vYVd4a0xtdGxlU2xjYmlBZ0lDQWdJQ0FnT2lCamFHbHNaQzVyWlhrN1hHNWNiaUFnSUNCMllYSWdaR0YwWVNBOUlDaGphR2xzWkM1a1lYUmhJSHg4SUNoamFHbHNaQzVrWVhSaElEMGdlMzBwS1M1MGNtRnVjMmwwYVc5dUlEMGdaWGgwY21GamRGUnlZVzV6YVhScGIyNUVZWFJoS0hSb2FYTXBPMXh1SUNBZ0lIWmhjaUJ2YkdSU1lYZERhR2xzWkNBOUlIUm9hWE11WDNadWIyUmxPMXh1SUNBZ0lIWmhjaUJ2YkdSRGFHbHNaQ0E5SUdkbGRGSmxZV3hEYUdsc1pDaHZiR1JTWVhkRGFHbHNaQ2s3WEc1Y2JpQWdJQ0F2THlCdFlYSnJJSFl0YzJodmQxeHVJQ0FnSUM4dklITnZJSFJvWVhRZ2RHaGxJSFJ5WVc1emFYUnBiMjRnYlc5a2RXeGxJR05oYmlCb1lXNWtJRzkyWlhJZ2RHaGxJR052Ym5SeWIyd2dkRzhnZEdobElHUnBjbVZqZEdsMlpWeHVJQ0FnSUdsbUlDaGphR2xzWkM1a1lYUmhMbVJwY21WamRHbDJaWE1nSmlZZ1kyaHBiR1F1WkdGMFlTNWthWEpsWTNScGRtVnpMbk52YldVb2FYTldVMmh2ZDBScGNtVmpkR2wyWlNrcElIdGNiaUFnSUNBZ0lHTm9hV3hrTG1SaGRHRXVjMmh2ZHlBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0Z4dUlDQWdJQ0FnYjJ4a1EyaHBiR1FnSmlaY2JpQWdJQ0FnSUc5c1pFTm9hV3hrTG1SaGRHRWdKaVpjYmlBZ0lDQWdJQ0ZwYzFOaGJXVkRhR2xzWkNoamFHbHNaQ3dnYjJ4a1EyaHBiR1FwSUNZbVhHNGdJQ0FnSUNBaGFYTkJjM2x1WTFCc1lXTmxhRzlzWkdWeUtHOXNaRU5vYVd4a0tTQW1KbHh1SUNBZ0lDQWdMeThnSXpZMk9EY2dZMjl0Y0c5dVpXNTBJSEp2YjNRZ2FYTWdZU0JqYjIxdFpXNTBJRzV2WkdWY2JpQWdJQ0FnSUNFb2IyeGtRMmhwYkdRdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVZ0ppWWdiMnhrUTJocGJHUXVZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVXVYM1p1YjJSbExtbHpRMjl0YldWdWRDbGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lDOHZJSEpsY0d4aFkyVWdiMnhrSUdOb2FXeGtJSFJ5WVc1emFYUnBiMjRnWkdGMFlTQjNhWFJvSUdaeVpYTm9JRzl1WlZ4dUlDQWdJQ0FnTHk4Z2FXMXdiM0owWVc1MElHWnZjaUJrZVc1aGJXbGpJSFJ5WVc1emFYUnBiMjV6SVZ4dUlDQWdJQ0FnZG1GeUlHOXNaRVJoZEdFZ1BTQnZiR1JEYUdsc1pDNWtZWFJoTG5SeVlXNXphWFJwYjI0Z1BTQmxlSFJsYm1Rb2UzMHNJR1JoZEdFcE8xeHVJQ0FnSUNBZ0x5OGdhR0Z1Wkd4bElIUnlZVzV6YVhScGIyNGdiVzlrWlZ4dUlDQWdJQ0FnYVdZZ0tHMXZaR1VnUFQwOUlDZHZkWFF0YVc0bktTQjdYRzRnSUNBZ0lDQWdJQzh2SUhKbGRIVnliaUJ3YkdGalpXaHZiR1JsY2lCdWIyUmxJR0Z1WkNCeGRXVjFaU0IxY0dSaGRHVWdkMmhsYmlCc1pXRjJaU0JtYVc1cGMyaGxjMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNaV0YyYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2JXVnlaMlZXVG05a1pVaHZiMnNvYjJ4a1JHRjBZU3dnSjJGbWRHVnlUR1ZoZG1VbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeVF4TGw5c1pXRjJhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeVF4TGlSbWIzSmpaVlZ3WkdGMFpTZ3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCc1lXTmxhRzlzWkdWeUtHZ3NJSEpoZDBOb2FXeGtLVnh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h0YjJSbElEMDlQU0FuYVc0dGIzVjBKeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9hWE5CYzNsdVkxQnNZV05sYUc5c1pHVnlLR05vYVd4a0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2YkdSU1lYZERhR2xzWkZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJrWld4aGVXVmtUR1ZoZG1VN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3WlhKbWIzSnRUR1ZoZG1VZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUdSbGJHRjVaV1JNWldGMlpTZ3BPeUI5TzF4dUlDQWdJQ0FnSUNCdFpYSm5aVlpPYjJSbFNHOXZheWhrWVhSaExDQW5ZV1owWlhKRmJuUmxjaWNzSUhCbGNtWnZjbTFNWldGMlpTazdYRzRnSUNBZ0lDQWdJRzFsY21kbFZrNXZaR1ZJYjI5cktHUmhkR0VzSUNkbGJuUmxja05oYm1ObGJHeGxaQ2NzSUhCbGNtWnZjbTFNWldGMlpTazdYRzRnSUNBZ0lDQWdJRzFsY21kbFZrNXZaR1ZJYjI5cktHOXNaRVJoZEdFc0lDZGtaV3hoZVV4bFlYWmxKeXdnWm5WdVkzUnBiMjRnS0d4bFlYWmxLU0I3SUdSbGJHRjVaV1JNWldGMlpTQTlJR3hsWVhabE95QjlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2NtRjNRMmhwYkdSY2JpQWdmVnh1ZlR0Y2JseHVMeW9nSUNvdlhHNWNiblpoY2lCd2NtOXdjeUE5SUdWNGRHVnVaQ2g3WEc0Z0lIUmhaem9nVTNSeWFXNW5MRnh1SUNCdGIzWmxRMnhoYzNNNklGTjBjbWx1WjF4dWZTd2dkSEpoYm5OcGRHbHZibEJ5YjNCektUdGNibHh1WkdWc1pYUmxJSEJ5YjNCekxtMXZaR1U3WEc1Y2JuWmhjaUJVY21GdWMybDBhVzl1UjNKdmRYQWdQU0I3WEc0Z0lIQnliM0J6T2lCd2NtOXdjeXhjYmx4dUlDQmlaV1p2Y21WTmIzVnVkRG9nWm5WdVkzUnBiMjRnWW1WbWIzSmxUVzkxYm5RZ0tDa2dlMXh1SUNBZ0lIWmhjaUIwYUdsekpERWdQU0IwYUdsek8xeHVYRzRnSUNBZ2RtRnlJSFZ3WkdGMFpTQTlJSFJvYVhNdVgzVndaR0YwWlR0Y2JpQWdJQ0IwYUdsekxsOTFjR1JoZEdVZ1BTQm1kVzVqZEdsdmJpQW9kbTV2WkdVc0lHaDVaSEpoZEdsdVp5a2dlMXh1SUNBZ0lDQWdkbUZ5SUhKbGMzUnZjbVZCWTNScGRtVkpibk4wWVc1alpTQTlJSE5sZEVGamRHbDJaVWx1YzNSaGJtTmxLSFJvYVhNa01TazdYRzRnSUNBZ0lDQXZMeUJtYjNKalpTQnlaVzF2ZG1sdVp5QndZWE56WEc0Z0lDQWdJQ0IwYUdsekpERXVYMTl3WVhSamFGOWZLRnh1SUNBZ0lDQWdJQ0IwYUdsekpERXVYM1p1YjJSbExGeHVJQ0FnSUNBZ0lDQjBhR2x6SkRFdWEyVndkQ3hjYmlBZ0lDQWdJQ0FnWm1Gc2MyVXNJQzh2SUdoNVpISmhkR2x1WjF4dUlDQWdJQ0FnSUNCMGNuVmxJQzh2SUhKbGJXOTJaVTl1YkhrZ0tDRnBiWEJ2Y25SaGJuUXNJR0YyYjJsa2N5QjFibTVsWTJWemMyRnllU0J0YjNabGN5bGNiaUFnSUNBZ0lDazdYRzRnSUNBZ0lDQjBhR2x6SkRFdVgzWnViMlJsSUQwZ2RHaHBjeVF4TG10bGNIUTdYRzRnSUNBZ0lDQnlaWE4wYjNKbFFXTjBhWFpsU1c1emRHRnVZMlVvS1R0Y2JpQWdJQ0FnSUhWd1pHRjBaUzVqWVd4c0tIUm9hWE1rTVN3Z2RtNXZaR1VzSUdoNVpISmhkR2x1WnlrN1hHNGdJQ0FnZlR0Y2JpQWdmU3hjYmx4dUlDQnlaVzVrWlhJNklHWjFibU4wYVc5dUlISmxibVJsY2lBb2FDa2dlMXh1SUNBZ0lIWmhjaUIwWVdjZ1BTQjBhR2x6TG5SaFp5QjhmQ0IwYUdsekxpUjJibTlrWlM1a1lYUmhMblJoWnlCOGZDQW5jM0JoYmljN1hHNGdJQ0FnZG1GeUlHMWhjQ0E5SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN1hHNGdJQ0FnZG1GeUlIQnlaWFpEYUdsc1pISmxiaUE5SUhSb2FYTXVjSEpsZGtOb2FXeGtjbVZ1SUQwZ2RHaHBjeTVqYUdsc1pISmxianRjYmlBZ0lDQjJZWElnY21GM1EyaHBiR1J5Wlc0Z1BTQjBhR2x6TGlSemJHOTBjeTVrWldaaGRXeDBJSHg4SUZ0ZE8xeHVJQ0FnSUhaaGNpQmphR2xzWkhKbGJpQTlJSFJvYVhNdVkyaHBiR1J5Wlc0Z1BTQmJYVHRjYmlBZ0lDQjJZWElnZEhKaGJuTnBkR2x2YmtSaGRHRWdQU0JsZUhSeVlXTjBWSEpoYm5OcGRHbHZia1JoZEdFb2RHaHBjeWs3WEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhKaGQwTm9hV3hrY21WdUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1l5QTlJSEpoZDBOb2FXeGtjbVZ1VzJsZE8xeHVJQ0FnSUNBZ2FXWWdLR011ZEdGbktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoakxtdGxlU0FoUFNCdWRXeHNJQ1ltSUZOMGNtbHVaeWhqTG10bGVTa3VhVzVrWlhoUFppZ25YMTkyYkdsemRDY3BJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJocGJHUnlaVzR1Y0hWemFDaGpLVHRjYmlBZ0lDQWdJQ0FnSUNCdFlYQmJZeTVyWlhsZElEMGdZMXh1SUNBZ0lDQWdJQ0FnSURzb1l5NWtZWFJoSUh4OElDaGpMbVJoZEdFZ1BTQjdmU2twTG5SeVlXNXphWFJwYjI0Z1BTQjBjbUZ1YzJsMGFXOXVSR0YwWVR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYjNCMGN5QTlJR011WTI5dGNHOXVaVzUwVDNCMGFXOXVjenRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdibUZ0WlNBOUlHOXdkSE1nUHlBb2IzQjBjeTVEZEc5eUxtOXdkR2x2Ym5NdWJtRnRaU0I4ZkNCdmNIUnpMblJoWnlCOGZDQW5KeWtnT2lCakxuUmhaenRjYmlBZ0lDQWdJQ0FnSUNCM1lYSnVLQ2hjSWp4MGNtRnVjMmwwYVc5dUxXZHliM1Z3UGlCamFHbHNaSEpsYmlCdGRYTjBJR0psSUd0bGVXVmtPaUE4WENJZ0t5QnVZVzFsSUNzZ1hDSStYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHdjbVYyUTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0FnSUhaaGNpQnJaWEIwSUQwZ1cxMDdYRzRnSUNBZ0lDQjJZWElnY21WdGIzWmxaQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTUXhJRDBnTURzZ2FTUXhJRHdnY0hKbGRrTm9hV3hrY21WdUxteGxibWQwYURzZ2FTUXhLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR01rTVNBOUlIQnlaWFpEYUdsc1pISmxibHRwSkRGZE8xeHVJQ0FnSUNBZ0lDQmpKREV1WkdGMFlTNTBjbUZ1YzJsMGFXOXVJRDBnZEhKaGJuTnBkR2x2YmtSaGRHRTdYRzRnSUNBZ0lDQWdJR01rTVM1a1lYUmhMbkJ2Y3lBOUlHTWtNUzVsYkcwdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHRZWEJiWXlReExtdGxlVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnJaWEIwTG5CMWMyZ29ZeVF4S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaVzF2ZG1Wa0xuQjFjMmdvWXlReEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1clpYQjBJRDBnYUNoMFlXY3NJRzUxYkd3c0lHdGxjSFFwTzF4dUlDQWdJQ0FnZEdocGN5NXlaVzF2ZG1Wa0lEMGdjbVZ0YjNabFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYUNoMFlXY3NJRzUxYkd3c0lHTm9hV3hrY21WdUtWeHVJQ0I5TEZ4dVhHNGdJSFZ3WkdGMFpXUTZJR1oxYm1OMGFXOXVJSFZ3WkdGMFpXUWdLQ2tnZTF4dUlDQWdJSFpoY2lCamFHbHNaSEpsYmlBOUlIUm9hWE11Y0hKbGRrTm9hV3hrY21WdU8xeHVJQ0FnSUhaaGNpQnRiM1psUTJ4aGMzTWdQU0IwYUdsekxtMXZkbVZEYkdGemN5QjhmQ0FvS0hSb2FYTXVibUZ0WlNCOGZDQW5kaWNwSUNzZ0p5MXRiM1psSnlrN1hHNGdJQ0FnYVdZZ0tDRmphR2xzWkhKbGJpNXNaVzVuZEdnZ2ZId2dJWFJvYVhNdWFHRnpUVzkyWlNoamFHbHNaSEpsYmxzd1hTNWxiRzBzSUcxdmRtVkRiR0Z6Y3lrcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhkbElHUnBkbWxrWlNCMGFHVWdkMjl5YXlCcGJuUnZJSFJvY21WbElHeHZiM0J6SUhSdklHRjJiMmxrSUcxcGVHbHVaeUJFVDAwZ2NtVmhaSE1nWVc1a0lIZHlhWFJsYzF4dUlDQWdJQzh2SUdsdUlHVmhZMmdnYVhSbGNtRjBhVzl1SUMwZ2QyaHBZMmdnYUdWc2NITWdjSEpsZG1WdWRDQnNZWGx2ZFhRZ2RHaHlZWE5vYVc1bkxseHVJQ0FnSUdOb2FXeGtjbVZ1TG1admNrVmhZMmdvWTJGc2JGQmxibVJwYm1kRFluTXBPMXh1SUNBZ0lHTm9hV3hrY21WdUxtWnZja1ZoWTJnb2NtVmpiM0prVUc5emFYUnBiMjRwTzF4dUlDQWdJR05vYVd4a2NtVnVMbVp2Y2tWaFkyZ29ZWEJ3YkhsVWNtRnVjMnhoZEdsdmJpazdYRzVjYmlBZ0lDQXZMeUJtYjNKalpTQnlaV1pzYjNjZ2RHOGdjSFYwSUdWMlpYSjVkR2hwYm1jZ2FXNGdjRzl6YVhScGIyNWNiaUFnSUNBdkx5QmhjM05wWjI0Z2RHOGdkR2hwY3lCMGJ5QmhkbTlwWkNCaVpXbHVaeUJ5WlcxdmRtVmtJR2x1SUhSeVpXVXRjMmhoYTJsdVoxeHVJQ0FnSUM4dklDUm1iRzkzTFdScGMyRmliR1V0YkdsdVpWeHVJQ0FnSUhSb2FYTXVYM0psWm14dmR5QTlJR1J2WTNWdFpXNTBMbUp2WkhrdWIyWm1jMlYwU0dWcFoyaDBPMXh1WEc0Z0lDQWdZMmhwYkdSeVpXNHVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ZeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHTXVaR0YwWVM1dGIzWmxaQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdaV3dnUFNCakxtVnNiVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITWdQU0JsYkM1emRIbHNaVHRjYmlBZ0lDQWdJQ0FnWVdSa1ZISmhibk5wZEdsdmJrTnNZWE56S0dWc0xDQnRiM1psUTJ4aGMzTXBPMXh1SUNBZ0lDQWdJQ0J6TG5SeVlXNXpabTl5YlNBOUlITXVWMlZpYTJsMFZISmhibk5tYjNKdElEMGdjeTUwY21GdWMybDBhVzl1UkhWeVlYUnBiMjRnUFNBbkp6dGNiaUFnSUNBZ0lDQWdaV3d1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWgwY21GdWMybDBhVzl1Ulc1a1JYWmxiblFzSUdWc0xsOXRiM1psUTJJZ1BTQm1kVzVqZEdsdmJpQmpZaUFvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNobElDWW1JR1V1ZEdGeVoyVjBJQ0U5UFNCbGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpTQjhmQ0F2ZEhKaGJuTm1iM0p0SkM4dWRHVnpkQ2hsTG5CeWIzQmxjblI1VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvZEhKaGJuTnBkR2x2YmtWdVpFVjJaVzUwTENCallpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNWZiVzkyWlVOaUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYlc5MlpWUnlZVzV6YVhScGIyNURiR0Z6Y3lobGJDd2diVzkyWlVOc1lYTnpLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOUxGeHVYRzRnSUcxbGRHaHZaSE02SUh0Y2JpQWdJQ0JvWVhOTmIzWmxPaUJtZFc1amRHbHZiaUJvWVhOTmIzWmxJQ2hsYkN3Z2JXOTJaVU5zWVhOektTQjdYRzRnSUNBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdJQ0FnSUdsbUlDZ2hhR0Z6VkhKaGJuTnBkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlZjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyaGhjMDF2ZG1VcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJoaGMwMXZkbVZjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzh2SUVSbGRHVmpkQ0IzYUdWMGFHVnlJR0Z1SUdWc1pXMWxiblFnZDJsMGFDQjBhR1VnYlc5MlpTQmpiR0Z6Y3lCaGNIQnNhV1ZrSUdoaGMxeHVJQ0FnSUNBZ0x5OGdRMU5USUhSeVlXNXphWFJwYjI1ekxpQlRhVzVqWlNCMGFHVWdaV3hsYldWdWRDQnRZWGtnWW1VZ2FXNXphV1JsSUdGdUlHVnVkR1Z5YVc1blhHNGdJQ0FnSUNBdkx5QjBjbUZ1YzJsMGFXOXVJR0YwSUhSb2FYTWdkbVZ5ZVNCdGIyMWxiblFzSUhkbElHMWhhMlVnWVNCamJHOXVaU0J2WmlCcGRDQmhibVFnY21WdGIzWmxYRzRnSUNBZ0lDQXZMeUJoYkd3Z2IzUm9aWElnZEhKaGJuTnBkR2x2YmlCamJHRnpjMlZ6SUdGd2NHeHBaV1FnZEc4Z1pXNXpkWEpsSUc5dWJIa2dkR2hsSUcxdmRtVWdZMnhoYzNOY2JpQWdJQ0FnSUM4dklHbHpJR0Z3Y0d4cFpXUXVYRzRnSUNBZ0lDQjJZWElnWTJ4dmJtVWdQU0JsYkM1amJHOXVaVTV2WkdVb0tUdGNiaUFnSUNBZ0lHbG1JQ2hsYkM1ZmRISmhibk5wZEdsdmJrTnNZWE56WlhNcElIdGNiaUFnSUNBZ0lDQWdaV3d1WDNSeVlXNXphWFJwYjI1RGJHRnpjMlZ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dOc2N5a2dleUJ5WlcxdmRtVkRiR0Z6Y3loamJHOXVaU3dnWTJ4ektUc2dmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JoWkdSRGJHRnpjeWhqYkc5dVpTd2diVzkyWlVOc1lYTnpLVHRjYmlBZ0lDQWdJR05zYjI1bExuTjBlV3hsTG1ScGMzQnNZWGtnUFNBbmJtOXVaU2M3WEc0Z0lDQWdJQ0IwYUdsekxpUmxiQzVoY0hCbGJtUkRhR2xzWkNoamJHOXVaU2s3WEc0Z0lDQWdJQ0IyWVhJZ2FXNW1ieUE5SUdkbGRGUnlZVzV6YVhScGIyNUpibVp2S0dOc2IyNWxLVHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNMbkpsYlc5MlpVTm9hV3hrS0dOc2IyNWxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW9kR2hwY3k1ZmFHRnpUVzkyWlNBOUlHbHVabTh1YUdGelZISmhibk5tYjNKdEtWeHVJQ0FnSUgxY2JpQWdmVnh1ZlR0Y2JseHVablZ1WTNScGIyNGdZMkZzYkZCbGJtUnBibWREWW5NZ0tHTXBJSHRjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292WEc0Z0lHbG1JQ2hqTG1Wc2JTNWZiVzkyWlVOaUtTQjdYRzRnSUNBZ1l5NWxiRzB1WDIxdmRtVkRZaWdwTzF4dUlDQjlYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9ZeTVsYkcwdVgyVnVkR1Z5UTJJcElIdGNiaUFnSUNCakxtVnNiUzVmWlc1MFpYSkRZaWdwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxZMjl5WkZCdmMybDBhVzl1SUNoaktTQjdYRzRnSUdNdVpHRjBZUzV1WlhkUWIzTWdQU0JqTG1Wc2JTNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWVhCd2JIbFVjbUZ1YzJ4aGRHbHZiaUFvWXlrZ2UxeHVJQ0IyWVhJZ2IyeGtVRzl6SUQwZ1l5NWtZWFJoTG5CdmN6dGNiaUFnZG1GeUlHNWxkMUJ2Y3lBOUlHTXVaR0YwWVM1dVpYZFFiM003WEc0Z0lIWmhjaUJrZUNBOUlHOXNaRkJ2Y3k1c1pXWjBJQzBnYm1WM1VHOXpMbXhsWm5RN1hHNGdJSFpoY2lCa2VTQTlJRzlzWkZCdmN5NTBiM0FnTFNCdVpYZFFiM011ZEc5d08xeHVJQ0JwWmlBb1pIZ2dmSHdnWkhrcElIdGNiaUFnSUNCakxtUmhkR0V1Ylc5MlpXUWdQU0IwY25WbE8xeHVJQ0FnSUhaaGNpQnpJRDBnWXk1bGJHMHVjM1I1YkdVN1hHNGdJQ0FnY3k1MGNtRnVjMlp2Y20wZ1BTQnpMbGRsWW10cGRGUnlZVzV6Wm05eWJTQTlJRndpZEhKaGJuTnNZWFJsS0Z3aUlDc2daSGdnS3lCY0luQjRMRndpSUNzZ1pIa2dLeUJjSW5CNEtWd2lPMXh1SUNBZ0lITXVkSEpoYm5OcGRHbHZia1IxY21GMGFXOXVJRDBnSnpCekp6dGNiaUFnZlZ4dWZWeHVYRzUyWVhJZ2NHeGhkR1p2Y20xRGIyMXdiMjVsYm5SeklEMGdlMXh1SUNCVWNtRnVjMmwwYVc5dU9pQlVjbUZ1YzJsMGFXOXVMRnh1SUNCVWNtRnVjMmwwYVc5dVIzSnZkWEE2SUZSeVlXNXphWFJwYjI1SGNtOTFjRnh1ZlR0Y2JseHVMeW9nSUNvdlhHNWNiaTh2SUdsdWMzUmhiR3dnY0d4aGRHWnZjbTBnYzNCbFkybG1hV01nZFhScGJITmNibFoxWlM1amIyNW1hV2N1YlhWemRGVnpaVkJ5YjNBZ1BTQnRkWE4wVlhObFVISnZjRHRjYmxaMVpTNWpiMjVtYVdjdWFYTlNaWE5sY25abFpGUmhaeUE5SUdselVtVnpaWEoyWldSVVlXYzdYRzVXZFdVdVkyOXVabWxuTG1selVtVnpaWEoyWldSQmRIUnlJRDBnYVhOU1pYTmxjblpsWkVGMGRISTdYRzVXZFdVdVkyOXVabWxuTG1kbGRGUmhaMDVoYldWemNHRmpaU0E5SUdkbGRGUmhaMDVoYldWemNHRmpaVHRjYmxaMVpTNWpiMjVtYVdjdWFYTlZibXR1YjNkdVJXeGxiV1Z1ZENBOUlHbHpWVzVyYm05M2JrVnNaVzFsYm5RN1hHNWNiaTh2SUdsdWMzUmhiR3dnY0d4aGRHWnZjbTBnY25WdWRHbHRaU0JrYVhKbFkzUnBkbVZ6SUNZZ1kyOXRjRzl1Wlc1MGMxeHVaWGgwWlc1a0tGWjFaUzV2Y0hScGIyNXpMbVJwY21WamRHbDJaWE1zSUhCc1lYUm1iM0p0UkdseVpXTjBhWFpsY3lrN1hHNWxlSFJsYm1Rb1ZuVmxMbTl3ZEdsdmJuTXVZMjl0Y0c5dVpXNTBjeXdnY0d4aGRHWnZjbTFEYjIxd2IyNWxiblJ6S1R0Y2JseHVMeThnYVc1emRHRnNiQ0J3YkdGMFptOXliU0J3WVhSamFDQm1kVzVqZEdsdmJseHVWblZsTG5CeWIzUnZkSGx3WlM1ZlgzQmhkR05vWDE4Z1BTQnBia0p5YjNkelpYSWdQeUJ3WVhSamFDQTZJRzV2YjNBN1hHNWNiaTh2SUhCMVlteHBZeUJ0YjNWdWRDQnRaWFJvYjJSY2JsWjFaUzV3Y205MGIzUjVjR1V1SkcxdmRXNTBJRDBnWm5WdVkzUnBiMjRnS0Z4dUlDQmxiQ3hjYmlBZ2FIbGtjbUYwYVc1blhHNHBJSHRjYmlBZ1pXd2dQU0JsYkNBbUppQnBia0p5YjNkelpYSWdQeUJ4ZFdWeWVTaGxiQ2tnT2lCMWJtUmxabWx1WldRN1hHNGdJSEpsZEhWeWJpQnRiM1Z1ZEVOdmJYQnZibVZ1ZENoMGFHbHpMQ0JsYkN3Z2FIbGtjbUYwYVc1bktWeHVmVHRjYmx4dUx5OGdaR1YyZEc5dmJITWdaMnh2WW1Gc0lHaHZiMnRjYmk4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc1cFppQW9hVzVDY205M2MyVnlLU0I3WEc0Z0lITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR2xtSUNoamIyNW1hV2N1WkdWMmRHOXZiSE1wSUh0Y2JpQWdJQ0FnSUdsbUlDaGtaWFowYjI5c2N5a2dlMXh1SUNBZ0lDQWdJQ0JrWlhaMGIyOXNjeTVsYldsMEtDZHBibWwwSnl3Z1ZuVmxLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVmJZMjl1YzI5c1pTNXBibVp2SUQ4Z0oybHVabThuSURvZ0oyeHZaeWRkS0Z4dUlDQWdJQ0FnSUNBZ0lDZEViM2R1Ykc5aFpDQjBhR1VnVm5WbElFUmxkblJ2YjJ4eklHVjRkR1Z1YzJsdmJpQm1iM0lnWVNCaVpYUjBaWElnWkdWMlpXeHZjRzFsYm5RZ1pYaHdaWEpwWlc1alpUcGNYRzRuSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5hSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1oxWldwekwzWjFaUzFrWlhaMGIyOXNjeWRjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dOdmJtWnBaeTV3Y205a2RXTjBhVzl1Vkdsd0lDRTlQU0JtWVd4elpTQW1KbHh1SUNBZ0lDQWdkSGx3Wlc5bUlHTnZibk52YkdVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0JqYjI1emIyeGxXMk52Ym5OdmJHVXVhVzVtYnlBL0lDZHBibVp2SnlBNklDZHNiMmNuWFNoY2JpQWdJQ0FnSUNBZ1hDSlpiM1VnWVhKbElISjFibTVwYm1jZ1ZuVmxJR2x1SUdSbGRtVnNiM0J0Wlc1MElHMXZaR1V1WEZ4dVhDSWdLMXh1SUNBZ0lDQWdJQ0JjSWsxaGEyVWdjM1Z5WlNCMGJ5QjBkWEp1SUc5dUlIQnliMlIxWTNScGIyNGdiVzlrWlNCM2FHVnVJR1JsY0d4dmVXbHVaeUJtYjNJZ2NISnZaSFZqZEdsdmJpNWNYRzVjSWlBclhHNGdJQ0FnSUNBZ0lGd2lVMlZsSUcxdmNtVWdkR2x3Y3lCaGRDQm9kSFJ3Y3pvdkwzWjFaV3B6TG05eVp5OW5kV2xrWlM5a1pYQnNiM2x0Wlc1MExtaDBiV3hjSWx4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNJREFwTzF4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlHUmxabUYxYkhSVVlXZFNSU0E5SUM5Y1hIdGNYSHNvS0Q4NkxueGNYSEkvWEZ4dUtTcy9LVnhjZlZ4Y2ZTOW5PMXh1ZG1GeUlISmxaMlY0UlhOallYQmxVa1VnUFNBdld5MHVLaXMvWGlSN2ZTZ3BmRnRjWEYxY1hDOWNYRnhjWFM5bk8xeHVYRzUyWVhJZ1luVnBiR1JTWldkbGVDQTlJR05oWTJobFpDaG1kVzVqZEdsdmJpQW9aR1ZzYVcxcGRHVnljeWtnZTF4dUlDQjJZWElnYjNCbGJpQTlJR1JsYkdsdGFYUmxjbk5iTUYwdWNtVndiR0ZqWlNoeVpXZGxlRVZ6WTJGd1pWSkZMQ0FuWEZ4Y1hDUW1KeWs3WEc0Z0lIWmhjaUJqYkc5elpTQTlJR1JsYkdsdGFYUmxjbk5iTVYwdWNtVndiR0ZqWlNoeVpXZGxlRVZ6WTJGd1pWSkZMQ0FuWEZ4Y1hDUW1KeWs3WEc0Z0lISmxkSFZ5YmlCdVpYY2dVbVZuUlhod0tHOXdaVzRnS3lBbktDZy9PaTU4WEZ4Y1hHNHBLejhwSnlBcklHTnNiM05sTENBblp5Y3BYRzU5S1R0Y2JseHVYRzVjYm1aMWJtTjBhVzl1SUhCaGNuTmxWR1Y0ZENBb1hHNGdJSFJsZUhRc1hHNGdJR1JsYkdsdGFYUmxjbk5jYmlrZ2UxeHVJQ0IyWVhJZ2RHRm5Va1VnUFNCa1pXeHBiV2wwWlhKeklEOGdZblZwYkdSU1pXZGxlQ2hrWld4cGJXbDBaWEp6S1NBNklHUmxabUYxYkhSVVlXZFNSVHRjYmlBZ2FXWWdLQ0YwWVdkU1JTNTBaWE4wS0hSbGVIUXBLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmlBZ2RtRnlJSFJ2YTJWdWN5QTlJRnRkTzF4dUlDQjJZWElnY21GM1ZHOXJaVzV6SUQwZ1cxMDdYRzRnSUhaaGNpQnNZWE4wU1c1a1pYZ2dQU0IwWVdkU1JTNXNZWE4wU1c1a1pYZ2dQU0F3TzF4dUlDQjJZWElnYldGMFkyZ3NJR2x1WkdWNExDQjBiMnRsYmxaaGJIVmxPMXh1SUNCM2FHbHNaU0FvS0cxaGRHTm9JRDBnZEdGblVrVXVaWGhsWXloMFpYaDBLU2twSUh0Y2JpQWdJQ0JwYm1SbGVDQTlJRzFoZEdOb0xtbHVaR1Y0TzF4dUlDQWdJQzh2SUhCMWMyZ2dkR1Y0ZENCMGIydGxibHh1SUNBZ0lHbG1JQ2hwYm1SbGVDQStJR3hoYzNSSmJtUmxlQ2tnZTF4dUlDQWdJQ0FnY21GM1ZHOXJaVzV6TG5CMWMyZ29kRzlyWlc1V1lXeDFaU0E5SUhSbGVIUXVjMnhwWTJVb2JHRnpkRWx1WkdWNExDQnBibVJsZUNrcE8xeHVJQ0FnSUNBZ2RHOXJaVzV6TG5CMWMyZ29TbE5QVGk1emRISnBibWRwWm5rb2RHOXJaVzVXWVd4MVpTa3BPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QjBZV2NnZEc5clpXNWNiaUFnSUNCMllYSWdaWGh3SUQwZ2NHRnljMlZHYVd4MFpYSnpLRzFoZEdOb1d6RmRMblJ5YVcwb0tTazdYRzRnSUNBZ2RHOXJaVzV6TG5CMWMyZ29LRndpWDNNb1hDSWdLeUJsZUhBZ0t5QmNJaWxjSWlrcE8xeHVJQ0FnSUhKaGQxUnZhMlZ1Y3k1d2RYTm9LSHNnSjBCaWFXNWthVzVuSnpvZ1pYaHdJSDBwTzF4dUlDQWdJR3hoYzNSSmJtUmxlQ0E5SUdsdVpHVjRJQ3NnYldGMFkyaGJNRjB1YkdWdVozUm9PMXh1SUNCOVhHNGdJR2xtSUNoc1lYTjBTVzVrWlhnZ1BDQjBaWGgwTG14bGJtZDBhQ2tnZTF4dUlDQWdJSEpoZDFSdmEyVnVjeTV3ZFhOb0tIUnZhMlZ1Vm1Gc2RXVWdQU0IwWlhoMExuTnNhV05sS0d4aGMzUkpibVJsZUNrcE8xeHVJQ0FnSUhSdmEyVnVjeTV3ZFhOb0tFcFRUMDR1YzNSeWFXNW5hV1o1S0hSdmEyVnVWbUZzZFdVcEtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdWNGNISmxjM05wYjI0NklIUnZhMlZ1Y3k1cWIybHVLQ2NySnlrc1hHNGdJQ0FnZEc5clpXNXpPaUJ5WVhkVWIydGxibk5jYmlBZ2ZWeHVmVnh1WEc0dktpQWdLaTljYmx4dVpuVnVZM1JwYjI0Z2RISmhibk5tYjNKdFRtOWtaU0FvWld3c0lHOXdkR2x2Ym5NcElIdGNiaUFnZG1GeUlIZGhjbTRnUFNCdmNIUnBiMjV6TG5kaGNtNGdmSHdnWW1GelpWZGhjbTQ3WEc0Z0lIWmhjaUJ6ZEdGMGFXTkRiR0Z6Y3lBOUlHZGxkRUZ1WkZKbGJXOTJaVUYwZEhJb1pXd3NJQ2RqYkdGemN5Y3BPMXh1SUNCcFppQW9jM1JoZEdsalEyeGhjM01wSUh0Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnY0dGeWMyVlVaWGgwS0hOMFlYUnBZME5zWVhOekxDQnZjSFJwYjI1ekxtUmxiR2x0YVhSbGNuTXBPMXh1SUNBZ0lHbG1JQ2h5WlhNcElIdGNiaUFnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUZ3aVkyeGhjM005WEZ4Y0lsd2lJQ3NnYzNSaGRHbGpRMnhoYzNNZ0t5QmNJbHhjWENJNklGd2lJQ3RjYmlBZ0lDQWdJQ0FnSjBsdWRHVnljRzlzWVhScGIyNGdhVzV6YVdSbElHRjBkSEpwWW5WMFpYTWdhR0Z6SUdKbFpXNGdjbVZ0YjNabFpDNGdKeUFyWEc0Z0lDQWdJQ0FnSUNkVmMyVWdkaTFpYVc1a0lHOXlJSFJvWlNCamIyeHZiaUJ6YUc5eWRHaGhibVFnYVc1emRHVmhaQzRnUm05eUlHVjRZVzF3YkdVc0lDY2dLMXh1SUNBZ0lDQWdJQ0FuYVc1emRHVmhaQ0J2WmlBOFpHbDJJR05zWVhOelBWd2llM3NnZG1Gc0lIMTlYQ0krTENCMWMyVWdQR1JwZGlBNlkyeGhjM005WENKMllXeGNJajR1Snl4Y2JpQWdJQ0FnSUNBZ1pXd3VjbUYzUVhSMGNuTk5ZWEJiSjJOc1lYTnpKMTFjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJR2xtSUNoemRHRjBhV05EYkdGemN5a2dlMXh1SUNBZ0lHVnNMbk4wWVhScFkwTnNZWE56SUQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvYzNSaGRHbGpRMnhoYzNNcE8xeHVJQ0I5WEc0Z0lIWmhjaUJqYkdGemMwSnBibVJwYm1jZ1BTQm5aWFJDYVc1a2FXNW5RWFIwY2lobGJDd2dKMk5zWVhOekp5d2dabUZzYzJVZ0x5b2daMlYwVTNSaGRHbGpJQ292S1R0Y2JpQWdhV1lnS0dOc1lYTnpRbWx1WkdsdVp5a2dlMXh1SUNBZ0lHVnNMbU5zWVhOelFtbHVaR2x1WnlBOUlHTnNZWE56UW1sdVpHbHVaenRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpXNUVZWFJoSUNobGJDa2dlMXh1SUNCMllYSWdaR0YwWVNBOUlDY25PMXh1SUNCcFppQW9aV3d1YzNSaGRHbGpRMnhoYzNNcElIdGNiaUFnSUNCa1lYUmhJQ3M5SUZ3aWMzUmhkR2xqUTJ4aGMzTTZYQ0lnS3lBb1pXd3VjM1JoZEdsalEyeGhjM01wSUNzZ1hDSXNYQ0k3WEc0Z0lIMWNiaUFnYVdZZ0tHVnNMbU5zWVhOelFtbHVaR2x1WnlrZ2UxeHVJQ0FnSUdSaGRHRWdLejBnWENKamJHRnpjenBjSWlBcklDaGxiQzVqYkdGemMwSnBibVJwYm1jcElDc2dYQ0lzWENJN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdSaGRHRmNibjFjYmx4dWRtRnlJR3RzWVhOekpERWdQU0I3WEc0Z0lITjBZWFJwWTB0bGVYTTZJRnNuYzNSaGRHbGpRMnhoYzNNblhTeGNiaUFnZEhKaGJuTm1iM0p0VG05a1pUb2dkSEpoYm5ObWIzSnRUbTlrWlN4Y2JpQWdaMlZ1UkdGMFlUb2daMlZ1UkdGMFlWeHVmVHRjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlIUnlZVzV6Wm05eWJVNXZaR1VrTVNBb1pXd3NJRzl3ZEdsdmJuTXBJSHRjYmlBZ2RtRnlJSGRoY200Z1BTQnZjSFJwYjI1ekxuZGhjbTRnZkh3Z1ltRnpaVmRoY200N1hHNGdJSFpoY2lCemRHRjBhV05UZEhsc1pTQTlJR2RsZEVGdVpGSmxiVzkyWlVGMGRISW9aV3dzSUNkemRIbHNaU2NwTzF4dUlDQnBaaUFvYzNSaGRHbGpVM1I1YkdVcElIdGNiaUFnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ0lDQjdYRzRnSUNBZ0lDQjJZWElnY21WeklEMGdjR0Z5YzJWVVpYaDBLSE4wWVhScFkxTjBlV3hsTENCdmNIUnBiMjV6TG1SbGJHbHRhWFJsY25NcE8xeHVJQ0FnSUNBZ2FXWWdLSEpsY3lrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lGd2ljM1I1YkdVOVhGeGNJbHdpSUNzZ2MzUmhkR2xqVTNSNWJHVWdLeUJjSWx4Y1hDSTZJRndpSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5TVzUwWlhKd2IyeGhkR2x2YmlCcGJuTnBaR1VnWVhSMGNtbGlkWFJsY3lCb1lYTWdZbVZsYmlCeVpXMXZkbVZrTGlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuVlhObElIWXRZbWx1WkNCdmNpQjBhR1VnWTI5c2IyNGdjMmh2Y25Sb1lXNWtJR2x1YzNSbFlXUXVJRVp2Y2lCbGVHRnRjR3hsTENBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuYVc1emRHVmhaQ0J2WmlBOFpHbDJJSE4wZVd4bFBWd2llM3NnZG1Gc0lIMTlYQ0krTENCMWMyVWdQR1JwZGlBNmMzUjViR1U5WENKMllXeGNJajR1Snl4Y2JpQWdJQ0FnSUNBZ0lDQmxiQzV5WVhkQmRIUnljMDFoY0ZzbmMzUjViR1VuWFZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JsYkM1emRHRjBhV05UZEhsc1pTQTlJRXBUVDA0dWMzUnlhVzVuYVdaNUtIQmhjbk5sVTNSNWJHVlVaWGgwS0hOMFlYUnBZMU4wZVd4bEtTazdYRzRnSUgxY2JseHVJQ0IyWVhJZ2MzUjViR1ZDYVc1a2FXNW5JRDBnWjJWMFFtbHVaR2x1WjBGMGRISW9aV3dzSUNkemRIbHNaU2NzSUdaaGJITmxJQzhxSUdkbGRGTjBZWFJwWXlBcUx5azdYRzRnSUdsbUlDaHpkSGxzWlVKcGJtUnBibWNwSUh0Y2JpQWdJQ0JsYkM1emRIbHNaVUpwYm1ScGJtY2dQU0J6ZEhsc1pVSnBibVJwYm1jN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaMlZ1UkdGMFlTUXhJQ2hsYkNrZ2UxeHVJQ0IyWVhJZ1pHRjBZU0E5SUNjbk8xeHVJQ0JwWmlBb1pXd3VjM1JoZEdsalUzUjViR1VwSUh0Y2JpQWdJQ0JrWVhSaElDczlJRndpYzNSaGRHbGpVM1I1YkdVNlhDSWdLeUFvWld3dWMzUmhkR2xqVTNSNWJHVXBJQ3NnWENJc1hDSTdYRzRnSUgxY2JpQWdhV1lnS0dWc0xuTjBlV3hsUW1sdVpHbHVaeWtnZTF4dUlDQWdJR1JoZEdFZ0t6MGdYQ0p6ZEhsc1pUb29YQ0lnS3lBb1pXd3VjM1I1YkdWQ2FXNWthVzVuS1NBcklGd2lLU3hjSWp0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnWkdGMFlWeHVmVnh1WEc1MllYSWdjM1I1YkdVa01TQTlJSHRjYmlBZ2MzUmhkR2xqUzJWNWN6b2dXeWR6ZEdGMGFXTlRkSGxzWlNkZExGeHVJQ0IwY21GdWMyWnZjbTFPYjJSbE9pQjBjbUZ1YzJadmNtMU9iMlJsSkRFc1hHNGdJR2RsYmtSaGRHRTZJR2RsYmtSaGRHRWtNVnh1ZlR0Y2JseHVMeW9nSUNvdlhHNWNiblpoY2lCa1pXTnZaR1Z5TzF4dVhHNTJZWElnYUdVZ1BTQjdYRzRnSUdSbFkyOWtaVG9nWm5WdVkzUnBiMjRnWkdWamIyUmxJQ2hvZEcxc0tTQjdYRzRnSUNBZ1pHVmpiMlJsY2lBOUlHUmxZMjlrWlhJZ2ZId2daRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc0Z0lDQWdaR1ZqYjJSbGNpNXBibTVsY2toVVRVd2dQU0JvZEcxc08xeHVJQ0FnSUhKbGRIVnliaUJrWldOdlpHVnlMblJsZUhSRGIyNTBaVzUwWEc0Z0lIMWNibjA3WEc1Y2JpOHFJQ0FxTDF4dVhHNTJZWElnYVhOVmJtRnllVlJoWnlBOUlHMWhhMlZOWVhBb1hHNGdJQ2RoY21WaExHSmhjMlVzWW5Jc1kyOXNMR1Z0WW1Wa0xHWnlZVzFsTEdoeUxHbHRaeXhwYm5CMWRDeHBjMmx1WkdWNExHdGxlV2RsYml3bklDdGNiaUFnSjJ4cGJtc3NiV1YwWVN4d1lYSmhiU3h6YjNWeVkyVXNkSEpoWTJzc2QySnlKMXh1S1R0Y2JseHVMeThnUld4bGJXVnVkSE1nZEdoaGRDQjViM1VnWTJGdUxDQnBiblJsYm5ScGIyNWhiR3g1TENCc1pXRjJaU0J2Y0dWdVhHNHZMeUFvWVc1a0lIZG9hV05vSUdOc2IzTmxJSFJvWlcxelpXeDJaWE1wWEc1MllYSWdZMkZ1UW1WTVpXWjBUM0JsYmxSaFp5QTlJRzFoYTJWTllYQW9YRzRnSUNkamIyeG5jbTkxY0N4a1pDeGtkQ3hzYVN4dmNIUnBiMjV6TEhBc2RHUXNkR1p2YjNRc2RHZ3NkR2hsWVdRc2RISXNjMjkxY21ObEoxeHVLVHRjYmx4dUx5OGdTRlJOVERVZ2RHRm5jeUJvZEhSd2N6b3ZMMmgwYld3dWMzQmxZeTUzYUdGMGQyY3ViM0puTDIxMWJIUnBjR0ZuWlM5cGJtUnBZMlZ6TG1oMGJXd2paV3hsYldWdWRITXRNMXh1THk4Z1VHaHlZWE5wYm1jZ1EyOXVkR1Z1ZENCb2RIUndjem92TDJoMGJXd3VjM0JsWXk1M2FHRjBkMmN1YjNKbkwyMTFiSFJwY0dGblpTOWtiMjB1YUhSdGJDTndhSEpoYzJsdVp5MWpiMjUwWlc1MFhHNTJZWElnYVhOT2IyNVFhSEpoYzJsdVoxUmhaeUE5SUcxaGEyVk5ZWEFvWEc0Z0lDZGhaR1J5WlhOekxHRnlkR2xqYkdVc1lYTnBaR1VzWW1GelpTeGliRzlqYTNGMWIzUmxMR0p2Wkhrc1kyRndkR2x2Yml4amIyd3NZMjlzWjNKdmRYQXNaR1FzSnlBclhHNGdJQ2RrWlhSaGFXeHpMR1JwWVd4dlp5eGthWFlzWkd3c1pIUXNabWxsYkdSelpYUXNabWxuWTJGd2RHbHZiaXhtYVdkMWNtVXNabTl2ZEdWeUxHWnZjbTBzSnlBclhHNGdJQ2RvTVN4b01peG9NeXhvTkN4b05TeG9OaXhvWldGa0xHaGxZV1JsY2l4b1ozSnZkWEFzYUhJc2FIUnRiQ3hzWldkbGJtUXNiR2tzYldWdWRXbDBaVzBzYldWMFlTd25JQ3RjYmlBZ0oyOXdkR2R5YjNWd0xHOXdkR2x2Yml4d1lYSmhiU3h5Y0N4eWRDeHpiM1Z5WTJVc2MzUjViR1VzYzNWdGJXRnllU3gwWW05a2VTeDBaQ3gwWm05dmRDeDBhQ3gwYUdWaFpDd25JQ3RjYmlBZ0ozUnBkR3hsTEhSeUxIUnlZV05ySjF4dUtUdGNibHh1THlvcVhHNGdLaUJPYjNRZ2RIbHdaUzFqYUdWamEybHVaeUIwYUdseklHWnBiR1VnWW1WallYVnpaU0JwZENkeklHMXZjM1JzZVNCMlpXNWtiM0lnWTI5a1pTNWNiaUFxTDF4dVhHNHZMeUJTWldkMWJHRnlJRVY0Y0hKbGMzTnBiMjV6SUdadmNpQndZWEp6YVc1bklIUmhaM01nWVc1a0lHRjBkSEpwWW5WMFpYTmNiblpoY2lCaGRIUnlhV0oxZEdVZ1BTQXZYbHhjY3lvb1cxNWNYSE5jSWljOFBseGNMejFkS3lrb1B6cGNYSE1xS0QwcFhGeHpLaWcvT2x3aUtGdGVYQ0pkS2lsY0lpdDhKeWhiWGlkZEtpa25LM3dvVzE1Y1hITmNJaWM5UEQ1Z1hTc3BLU2svTHp0Y2JuWmhjaUJrZVc1aGJXbGpRWEpuUVhSMGNtbGlkWFJsSUQwZ0wxNWNYSE1xS0NnL09uWXRXMXhjZHkxZEt6cDhRSHc2ZkNNcFhGeGJXMTQ5WFN0Y1hGMWJYbHhjYzF3aUp6dytYRnd2UFYwcUtTZy9PbHhjY3lvb1BTbGNYSE1xS0Q4NlhDSW9XMTVjSWwwcUtWd2lLM3duS0Z0ZUoxMHFLU2NyZkNoYlhseGNjMXdpSnowOFBtQmRLeWtwS1Q4dk8xeHVkbUZ5SUc1amJtRnRaU0E5SUZ3aVcyRXRla0V0V2w5ZFcxeGNYRnd0WEZ4Y1hDNHdMVGxmWVMxNlFTMWFYQ0lnS3lBb2RXNXBZMjlrWlZKbFowVjRjQzV6YjNWeVkyVXBJQ3NnWENKZEtsd2lPMXh1ZG1GeUlIRnVZVzFsUTJGd2RIVnlaU0E5SUZ3aUtDZy9PbHdpSUNzZ2JtTnVZVzFsSUNzZ1hDSmNYRnhjT2lrL1hDSWdLeUJ1WTI1aGJXVWdLeUJjSWlsY0lqdGNiblpoY2lCemRHRnlkRlJoWjA5d1pXNGdQU0J1WlhjZ1VtVm5SWGh3S0NoY0lsNDhYQ0lnS3lCeGJtRnRaVU5oY0hSMWNtVXBLVHRjYm5aaGNpQnpkR0Z5ZEZSaFowTnNiM05sSUQwZ0wxNWNYSE1xS0Z4Y0x6OHBQaTg3WEc1MllYSWdaVzVrVkdGbklEMGdibVYzSUZKbFowVjRjQ2dvWENKZVBGeGNYRnd2WENJZ0t5QnhibUZ0WlVOaGNIUjFjbVVnS3lCY0lsdGVQbDBxUGx3aUtTazdYRzUyWVhJZ1pHOWpkSGx3WlNBOUlDOWVQQ0ZFVDBOVVdWQkZJRnRlUGwwclBpOXBPMXh1THk4Z0l6Y3lPVGc2SUdWelkyRndaU0F0SUhSdklHRjJiMmxrSUdKbGFXNW5JSEJoYzJWa0lHRnpJRWhVVFV3Z1kyOXRiV1Z1ZENCM2FHVnVJR2x1YkdsdVpXUWdhVzRnY0dGblpWeHVkbUZ5SUdOdmJXMWxiblFnUFNBdlhqd2hYRnd0TFM4N1hHNTJZWElnWTI5dVpHbDBhVzl1WVd4RGIyMXRaVzUwSUQwZ0wxNDhJVnhjV3k4N1hHNWNiaTh2SUZOd1pXTnBZV3dnUld4bGJXVnVkSE1nS0dOaGJpQmpiMjUwWVdsdUlHRnVlWFJvYVc1bktWeHVkbUZ5SUdselVHeGhhVzVVWlhoMFJXeGxiV1Z1ZENBOUlHMWhhMlZOWVhBb0ozTmpjbWx3ZEN4emRIbHNaU3gwWlhoMFlYSmxZU2NzSUhSeWRXVXBPMXh1ZG1GeUlISmxRMkZqYUdVZ1BTQjdmVHRjYmx4dWRtRnlJR1JsWTI5a2FXNW5UV0Z3SUQwZ2UxeHVJQ0FuSm14ME95YzZJQ2M4Snl4Y2JpQWdKeVpuZERzbk9pQW5QaWNzWEc0Z0lDY21jWFZ2ZERzbk9pQW5YQ0luTEZ4dUlDQW5KbUZ0Y0Rzbk9pQW5KaWNzWEc0Z0lDY21JekV3T3ljNklDZGNYRzRuTEZ4dUlDQW5KaU01T3ljNklDZGNYSFFuTEZ4dUlDQW5KaU16T1Rzbk9pQmNJaWRjSWx4dWZUdGNiblpoY2lCbGJtTnZaR1ZrUVhSMGNpQTlJQzhtS0Q4NmJIUjhaM1I4Y1hWdmRIeGhiWEI4SXpNNUtUc3ZaenRjYm5aaGNpQmxibU52WkdWa1FYUjBjbGRwZEdoT1pYZE1hVzVsY3lBOUlDOG1LRDg2YkhSOFozUjhjWFZ2ZEh4aGJYQjhJek01ZkNNeE1Id2pPU2s3TDJjN1hHNWNiaTh2SUNNMU9Ua3lYRzUyWVhJZ2FYTkpaMjV2Y21WT1pYZHNhVzVsVkdGbklEMGdiV0ZyWlUxaGNDZ25jSEpsTEhSbGVIUmhjbVZoSnl3Z2RISjFaU2s3WEc1MllYSWdjMmh2ZFd4a1NXZHViM0psUm1seWMzUk9aWGRzYVc1bElEMGdablZ1WTNScGIyNGdLSFJoWnl3Z2FIUnRiQ2tnZXlCeVpYUjFjbTRnZEdGbklDWW1JR2x6U1dkdWIzSmxUbVYzYkdsdVpWUmhaeWgwWVdjcElDWW1JR2gwYld4Yk1GMGdQVDA5SUNkY1hHNG5PeUI5TzF4dVhHNW1kVzVqZEdsdmJpQmtaV052WkdWQmRIUnlJQ2gyWVd4MVpTd2djMmh2ZFd4a1JHVmpiMlJsVG1WM2JHbHVaWE1wSUh0Y2JpQWdkbUZ5SUhKbElEMGdjMmh2ZFd4a1JHVmpiMlJsVG1WM2JHbHVaWE1nUHlCbGJtTnZaR1ZrUVhSMGNsZHBkR2hPWlhkTWFXNWxjeUE2SUdWdVkyOWtaV1JCZEhSeU8xeHVJQ0J5WlhSMWNtNGdkbUZzZFdVdWNtVndiR0ZqWlNoeVpTd2dablZ1WTNScGIyNGdLRzFoZEdOb0tTQjdJSEpsZEhWeWJpQmtaV052WkdsdVowMWhjRnR0WVhSamFGMDdJSDBwWEc1OVhHNWNibVoxYm1OMGFXOXVJSEJoY25ObFNGUk5UQ0FvYUhSdGJDd2diM0IwYVc5dWN5a2dlMXh1SUNCMllYSWdjM1JoWTJzZ1BTQmJYVHRjYmlBZ2RtRnlJR1Y0Y0dWamRFaFVUVXdnUFNCdmNIUnBiMjV6TG1WNGNHVmpkRWhVVFV3N1hHNGdJSFpoY2lCcGMxVnVZWEo1VkdGbkpDUXhJRDBnYjNCMGFXOXVjeTVwYzFWdVlYSjVWR0ZuSUh4OElHNXZPMXh1SUNCMllYSWdZMkZ1UW1WTVpXWjBUM0JsYmxSaFp5UWtNU0E5SUc5d2RHbHZibk11WTJGdVFtVk1aV1owVDNCbGJsUmhaeUI4ZkNCdWJ6dGNiaUFnZG1GeUlHbHVaR1Y0SUQwZ01EdGNiaUFnZG1GeUlHeGhjM1FzSUd4aGMzUlVZV2M3WEc0Z0lIZG9hV3hsSUNob2RHMXNLU0I3WEc0Z0lDQWdiR0Z6ZENBOUlHaDBiV3c3WEc0Z0lDQWdMeThnVFdGclpTQnpkWEpsSUhkbEozSmxJRzV2ZENCcGJpQmhJSEJzWVdsdWRHVjRkQ0JqYjI1MFpXNTBJR1ZzWlcxbGJuUWdiR2xyWlNCelkzSnBjSFF2YzNSNWJHVmNiaUFnSUNCcFppQW9JV3hoYzNSVVlXY2dmSHdnSVdselVHeGhhVzVVWlhoMFJXeGxiV1Z1ZENoc1lYTjBWR0ZuS1NrZ2UxeHVJQ0FnSUNBZ2RtRnlJSFJsZUhSRmJtUWdQU0JvZEcxc0xtbHVaR1Y0VDJZb0p6d25LVHRjYmlBZ0lDQWdJR2xtSUNoMFpYaDBSVzVrSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFTnZiVzFsYm5RNlhHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjIxdFpXNTBMblJsYzNRb2FIUnRiQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnWTI5dGJXVnVkRVZ1WkNBOUlHaDBiV3d1YVc1a1pYaFBaaWduTFMwK0p5azdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ZMjl0YldWdWRFVnVaQ0ErUFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NXphRzkxYkdSTFpXVndRMjl0YldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtTnZiVzFsYm5Rb2FIUnRiQzV6ZFdKemRISnBibWNvTkN3Z1kyOXRiV1Z1ZEVWdVpDa3NJR2x1WkdWNExDQnBibVJsZUNBcklHTnZiVzFsYm5SRmJtUWdLeUF6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmtkbUZ1WTJVb1kyOXRiV1Z1ZEVWdVpDQXJJRE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVmNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJvZEhSd09pOHZaVzR1ZDJscmFYQmxaR2xoTG05eVp5OTNhV3RwTDBOdmJtUnBkR2x2Ym1Gc1gyTnZiVzFsYm5RalJHOTNibXhsZG1Wc0xYSmxkbVZoYkdWa1gyTnZibVJwZEdsdmJtRnNYMk52YlcxbGJuUmNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJtUnBkR2x2Ym1Gc1EyOXRiV1Z1ZEM1MFpYTjBLR2gwYld3cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHTnZibVJwZEdsdmJtRnNSVzVrSUQwZ2FIUnRiQzVwYm1SbGVFOW1LQ2RkUGljcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZibVJwZEdsdmJtRnNSVzVrSUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmtkbUZ1WTJVb1kyOXVaR2wwYVc5dVlXeEZibVFnS3lBeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JHOWpkSGx3WlRwY2JpQWdJQ0FnSUNBZ2RtRnlJR1J2WTNSNWNHVk5ZWFJqYUNBOUlHaDBiV3d1YldGMFkyZ29aRzlqZEhsd1pTazdYRzRnSUNBZ0lDQWdJR2xtSUNoa2IyTjBlWEJsVFdGMFkyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCaFpIWmhibU5sS0dSdlkzUjVjR1ZOWVhSamFGc3dYUzVzWlc1bmRHZ3BPMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsWEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJGYm1RZ2RHRm5PbHh1SUNBZ0lDQWdJQ0IyWVhJZ1pXNWtWR0ZuVFdGMFkyZ2dQU0JvZEcxc0xtMWhkR05vS0dWdVpGUmhaeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibVJVWVdkTllYUmphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJqZFhKSmJtUmxlQ0E5SUdsdVpHVjRPMXh1SUNBZ0lDQWdJQ0FnSUdGa2RtRnVZMlVvWlc1a1ZHRm5UV0YwWTJoYk1GMHViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdJQ0J3WVhKelpVVnVaRlJoWnlobGJtUlVZV2ROWVhSamFGc3hYU3dnWTNWeVNXNWtaWGdzSUdsdVpHVjRLVHRjYmlBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnVTNSaGNuUWdkR0ZuT2x4dUlDQWdJQ0FnSUNCMllYSWdjM1JoY25SVVlXZE5ZWFJqYUNBOUlIQmhjbk5sVTNSaGNuUlVZV2NvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE4wWVhKMFZHRm5UV0YwWTJncElIdGNiaUFnSUNBZ0lDQWdJQ0JvWVc1a2JHVlRkR0Z5ZEZSaFp5aHpkR0Z5ZEZSaFowMWhkR05vS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYzJodmRXeGtTV2R1YjNKbFJtbHljM1JPWlhkc2FXNWxLSE4wWVhKMFZHRm5UV0YwWTJndWRHRm5UbUZ0WlN3Z2FIUnRiQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZrZG1GdVkyVW9NU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZG1GeUlIUmxlSFFnUFNBb2RtOXBaQ0F3S1N3Z2NtVnpkQ0E5SUNoMmIybGtJREFwTENCdVpYaDBJRDBnS0hadmFXUWdNQ2s3WEc0Z0lDQWdJQ0JwWmlBb2RHVjRkRVZ1WkNBK1BTQXdLU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzUWdQU0JvZEcxc0xuTnNhV05sS0hSbGVIUkZibVFwTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvWEc0Z0lDQWdJQ0FnSUNBZ0lXVnVaRlJoWnk1MFpYTjBLSEpsYzNRcElDWW1YRzRnSUNBZ0lDQWdJQ0FnSVhOMFlYSjBWR0ZuVDNCbGJpNTBaWE4wS0hKbGMzUXBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lXTnZiVzFsYm5RdWRHVnpkQ2h5WlhOMEtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNGamIyNWthWFJwYjI1aGJFTnZiVzFsYm5RdWRHVnpkQ2h5WlhOMEtWeHVJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QThJR2x1SUhCc1lXbHVJSFJsZUhRc0lHSmxJR1p2Y21kcGRtbHVaeUJoYm1RZ2RISmxZWFFnYVhRZ1lYTWdkR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lHNWxlSFFnUFNCeVpYTjBMbWx1WkdWNFQyWW9KenduTENBeEtUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JtVjRkQ0E4SURBcElIc2dZbkpsWVdzZ2ZWeHVJQ0FnSUNBZ0lDQWdJSFJsZUhSRmJtUWdLejBnYm1WNGREdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOMElEMGdhSFJ0YkM1emJHbGpaU2gwWlhoMFJXNWtLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMFpYaDBJRDBnYUhSdGJDNXpkV0p6ZEhKcGJtY29NQ3dnZEdWNGRFVnVaQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaDBaWGgwUlc1a0lEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNCMFpYaDBJRDBnYUhSdGJEdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hSbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnWVdSMllXNWpaU2gwWlhoMExteGxibWQwYUNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbU5vWVhKeklDWW1JSFJsZUhRcElIdGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NWphR0Z5Y3loMFpYaDBMQ0JwYm1SbGVDQXRJSFJsZUhRdWJHVnVaM1JvTENCcGJtUmxlQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIWmhjaUJsYm1SVVlXZE1aVzVuZEdnZ1BTQXdPMXh1SUNBZ0lDQWdkbUZ5SUhOMFlXTnJaV1JVWVdjZ1BTQnNZWE4wVkdGbkxuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0IyWVhJZ2NtVlRkR0ZqYTJWa1ZHRm5JRDBnY21WRFlXTm9aVnR6ZEdGamEyVmtWR0ZuWFNCOGZDQW9jbVZEWVdOb1pWdHpkR0ZqYTJWa1ZHRm5YU0E5SUc1bGR5QlNaV2RGZUhBb0p5aGJYRnhjWEhOY1hGeGNVMTBxUHlrb1BDOG5JQ3NnYzNSaFkydGxaRlJoWnlBcklDZGJYajVkS2o0cEp5d2dKMmtuS1NrN1hHNGdJQ0FnSUNCMllYSWdjbVZ6ZENReElEMGdhSFJ0YkM1eVpYQnNZV05sS0hKbFUzUmhZMnRsWkZSaFp5d2dablZ1WTNScGIyNGdLR0ZzYkN3Z2RHVjRkQ3dnWlc1a1ZHRm5LU0I3WEc0Z0lDQWdJQ0FnSUdWdVpGUmhaMHhsYm1kMGFDQTlJR1Z1WkZSaFp5NXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYVhOUWJHRnBibFJsZUhSRmJHVnRaVzUwS0hOMFlXTnJaV1JVWVdjcElDWW1JSE4wWVdOclpXUlVZV2NnSVQwOUlDZHViM05qY21sd2RDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMFpYaDBJRDBnZEdWNGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTHp3aFhGd3RMU2hiWEZ4elhGeFRYU28vS1MwdFBpOW5MQ0FuSkRFbktTQXZMeUFqTnpJNU9GeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTHp3aFhGeGJRMFJCVkVGY1hGc29XMXhjYzF4Y1UxMHFQeWxkWFQ0dlp5d2dKeVF4SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hOb2IzVnNaRWxuYm05eVpVWnBjbk4wVG1WM2JHbHVaU2h6ZEdGamEyVmtWR0ZuTENCMFpYaDBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUmxlSFFnUFNCMFpYaDBMbk5zYVdObEtERXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtTm9ZWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NWphR0Z5Y3loMFpYaDBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSnlkY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2FXNWtaWGdnS3owZ2FIUnRiQzVzWlc1bmRHZ2dMU0J5WlhOMEpERXViR1Z1WjNSb08xeHVJQ0FnSUNBZ2FIUnRiQ0E5SUhKbGMzUWtNVHRjYmlBZ0lDQWdJSEJoY25ObFJXNWtWR0ZuS0hOMFlXTnJaV1JVWVdjc0lHbHVaR1Y0SUMwZ1pXNWtWR0ZuVEdWdVozUm9MQ0JwYm1SbGVDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR2gwYld3Z1BUMDlJR3hoYzNRcElIdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NdVkyaGhjbk1nSmlZZ2IzQjBhVzl1Y3k1amFHRnljeWhvZEcxc0tUdGNiaUFnSUNBZ0lHbG1JQ2doYzNSaFkyc3ViR1Z1WjNSb0lDWW1JRzl3ZEdsdmJuTXVkMkZ5YmlrZ2UxeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxuZGhjbTRvS0Z3aVRXRnNMV1p2Y20xaGRIUmxaQ0IwWVdjZ1lYUWdaVzVrSUc5bUlIUmxiWEJzWVhSbE9pQmNYRndpWENJZ0t5Qm9kRzFzSUNzZ1hDSmNYRndpWENJcExDQjdJSE4wWVhKME9pQnBibVJsZUNBcklHaDBiV3d1YkdWdVozUm9JSDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMeUJEYkdWaGJpQjFjQ0JoYm5rZ2NtVnRZV2x1YVc1bklIUmhaM05jYmlBZ2NHRnljMlZGYm1SVVlXY29LVHRjYmx4dUlDQm1kVzVqZEdsdmJpQmhaSFpoYm1ObElDaHVLU0I3WEc0Z0lDQWdhVzVrWlhnZ0t6MGdianRjYmlBZ0lDQm9kRzFzSUQwZ2FIUnRiQzV6ZFdKemRISnBibWNvYmlrN1hHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQndZWEp6WlZOMFlYSjBWR0ZuSUNncElIdGNiaUFnSUNCMllYSWdjM1JoY25RZ1BTQm9kRzFzTG0xaGRHTm9LSE4wWVhKMFZHRm5UM0JsYmlrN1hHNGdJQ0FnYVdZZ0tITjBZWEowS1NCN1hHNGdJQ0FnSUNCMllYSWdiV0YwWTJnZ1BTQjdYRzRnSUNBZ0lDQWdJSFJoWjA1aGJXVTZJSE4wWVhKMFd6RmRMRnh1SUNBZ0lDQWdJQ0JoZEhSeWN6b2dXMTBzWEc0Z0lDQWdJQ0FnSUhOMFlYSjBPaUJwYm1SbGVGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lHRmtkbUZ1WTJVb2MzUmhjblJiTUYwdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUhaaGNpQmxibVFzSUdGMGRISTdYRzRnSUNBZ0lDQjNhR2xzWlNBb0lTaGxibVFnUFNCb2RHMXNMbTFoZEdOb0tITjBZWEowVkdGblEyeHZjMlVwS1NBbUppQW9ZWFIwY2lBOUlHaDBiV3d1YldGMFkyZ29aSGx1WVcxcFkwRnlaMEYwZEhKcFluVjBaU2tnZkh3Z2FIUnRiQzV0WVhSamFDaGhkSFJ5YVdKMWRHVXBLU2tnZTF4dUlDQWdJQ0FnSUNCaGRIUnlMbk4wWVhKMElEMGdhVzVrWlhnN1hHNGdJQ0FnSUNBZ0lHRmtkbUZ1WTJVb1lYUjBjbHN3WFM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnSUNCaGRIUnlMbVZ1WkNBOUlHbHVaR1Y0TzF4dUlDQWdJQ0FnSUNCdFlYUmphQzVoZEhSeWN5NXdkWE5vS0dGMGRISXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0dWdVpDa2dlMXh1SUNBZ0lDQWdJQ0J0WVhSamFDNTFibUZ5ZVZOc1lYTm9JRDBnWlc1a1d6RmRPMXh1SUNBZ0lDQWdJQ0JoWkhaaGJtTmxLR1Z1WkZzd1hTNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ0lDQnRZWFJqYUM1bGJtUWdQU0JwYm1SbGVEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMWhkR05vWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYUdGdVpHeGxVM1JoY25SVVlXY2dLRzFoZEdOb0tTQjdYRzRnSUNBZ2RtRnlJSFJoWjA1aGJXVWdQU0J0WVhSamFDNTBZV2RPWVcxbE8xeHVJQ0FnSUhaaGNpQjFibUZ5ZVZOc1lYTm9JRDBnYldGMFkyZ3VkVzVoY25sVGJHRnphRHRjYmx4dUlDQWdJR2xtSUNobGVIQmxZM1JJVkUxTUtTQjdYRzRnSUNBZ0lDQnBaaUFvYkdGemRGUmhaeUE5UFQwZ0ozQW5JQ1ltSUdselRtOXVVR2h5WVhOcGJtZFVZV2NvZEdGblRtRnRaU2twSUh0Y2JpQWdJQ0FnSUNBZ2NHRnljMlZGYm1SVVlXY29iR0Z6ZEZSaFp5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvWTJGdVFtVk1aV1owVDNCbGJsUmhaeVFrTVNoMFlXZE9ZVzFsS1NBbUppQnNZWE4wVkdGbklEMDlQU0IwWVdkT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhCaGNuTmxSVzVrVkdGbktIUmhaMDVoYldVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQjFibUZ5ZVNBOUlHbHpWVzVoY25sVVlXY2tKREVvZEdGblRtRnRaU2tnZkh3Z0lTRjFibUZ5ZVZOc1lYTm9PMXh1WEc0Z0lDQWdkbUZ5SUd3Z1BTQnRZWFJqYUM1aGRIUnljeTVzWlc1bmRHZzdYRzRnSUNBZ2RtRnlJR0YwZEhKeklEMGdibVYzSUVGeWNtRjVLR3dwTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1lYSm5jeUE5SUcxaGRHTm9MbUYwZEhKelcybGRPMXh1SUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnWVhKbmMxc3pYU0I4ZkNCaGNtZHpXelJkSUh4OElHRnlaM05iTlYwZ2ZId2dKeWM3WEc0Z0lDQWdJQ0IyWVhJZ2MyaHZkV3hrUkdWamIyUmxUbVYzYkdsdVpYTWdQU0IwWVdkT1lXMWxJRDA5UFNBbllTY2dKaVlnWVhKbmMxc3hYU0E5UFQwZ0oyaHlaV1luWEc0Z0lDQWdJQ0FnSUQ4Z2IzQjBhVzl1Y3k1emFHOTFiR1JFWldOdlpHVk9aWGRzYVc1bGMwWnZja2h5WldaY2JpQWdJQ0FnSUNBZ09pQnZjSFJwYjI1ekxuTm9iM1ZzWkVSbFkyOWtaVTVsZDJ4cGJtVnpPMXh1SUNBZ0lDQWdZWFIwY25OYmFWMGdQU0I3WEc0Z0lDQWdJQ0FnSUc1aGJXVTZJR0Z5WjNOYk1WMHNYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQmtaV052WkdWQmRIUnlLSFpoYkhWbExDQnphRzkxYkdSRVpXTnZaR1ZPWlhkc2FXNWxjeWxjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1dmRYUndkWFJUYjNWeVkyVlNZVzVuWlNrZ2UxeHVJQ0FnSUNBZ0lDQmhkSFJ5YzF0cFhTNXpkR0Z5ZENBOUlHRnlaM011YzNSaGNuUWdLeUJoY21keld6QmRMbTFoZEdOb0tDOWVYRnh6S2k4cExteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ1lYUjBjbk5iYVYwdVpXNWtJRDBnWVhKbmN5NWxibVE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGMWJtRnllU2tnZTF4dUlDQWdJQ0FnYzNSaFkyc3VjSFZ6YUNoN0lIUmhaem9nZEdGblRtRnRaU3dnYkc5M1pYSkRZWE5sWkZSaFp6b2dkR0ZuVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwTENCaGRIUnljem9nWVhSMGNuTXNJSE4wWVhKME9pQnRZWFJqYUM1emRHRnlkQ3dnWlc1a09pQnRZWFJqYUM1bGJtUWdmU2s3WEc0Z0lDQWdJQ0JzWVhOMFZHRm5JRDBnZEdGblRtRnRaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYjNCMGFXOXVjeTV6ZEdGeWRDa2dlMXh1SUNBZ0lDQWdiM0IwYVc5dWN5NXpkR0Z5ZENoMFlXZE9ZVzFsTENCaGRIUnljeXdnZFc1aGNua3NJRzFoZEdOb0xuTjBZWEowTENCdFlYUmphQzVsYm1RcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlIQmhjbk5sUlc1a1ZHRm5JQ2gwWVdkT1lXMWxMQ0J6ZEdGeWRDd2daVzVrS1NCN1hHNGdJQ0FnZG1GeUlIQnZjeXdnYkc5M1pYSkRZWE5sWkZSaFowNWhiV1U3WEc0Z0lDQWdhV1lnS0hOMFlYSjBJRDA5SUc1MWJHd3BJSHNnYzNSaGNuUWdQU0JwYm1SbGVEc2dmVnh1SUNBZ0lHbG1JQ2hsYm1RZ1BUMGdiblZzYkNrZ2V5QmxibVFnUFNCcGJtUmxlRHNnZlZ4dVhHNGdJQ0FnTHk4Z1JtbHVaQ0IwYUdVZ1kyeHZjMlZ6ZENCdmNHVnVaV1FnZEdGbklHOW1JSFJvWlNCellXMWxJSFI1Y0dWY2JpQWdJQ0JwWmlBb2RHRm5UbUZ0WlNrZ2UxeHVJQ0FnSUNBZ2JHOTNaWEpEWVhObFpGUmhaMDVoYldVZ1BTQjBZV2RPWVcxbExuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0JtYjNJZ0tIQnZjeUE5SUhOMFlXTnJMbXhsYm1kMGFDQXRJREU3SUhCdmN5QStQU0F3T3lCd2IzTXRMU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9jM1JoWTJ0YmNHOXpYUzVzYjNkbGNrTmhjMlZrVkdGbklEMDlQU0JzYjNkbGNrTmhjMlZrVkdGblRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdMeThnU1dZZ2JtOGdkR0ZuSUc1aGJXVWdhWE1nY0hKdmRtbGtaV1FzSUdOc1pXRnVJSE5vYjNCY2JpQWdJQ0FnSUhCdmN5QTlJREE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hCdmN5QStQU0F3S1NCN1hHNGdJQ0FnSUNBdkx5QkRiRzl6WlNCaGJHd2dkR2hsSUc5d1pXNGdaV3hsYldWdWRITXNJSFZ3SUhSb1pTQnpkR0ZqYTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlITjBZV05yTG14bGJtZDBhQ0F0SURFN0lHa2dQajBnY0c5ek95QnBMUzBwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2tnUGlCd2IzTWdmSHdnSVhSaFowNWhiV1VnSmlaY2JpQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxuZGhjbTVjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NTNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdLRndpZEdGbklEeGNJaUFySUNoemRHRmphMXRwWFM1MFlXY3BJQ3NnWENJK0lHaGhjeUJ1YnlCdFlYUmphR2x1WnlCbGJtUWdkR0ZuTGx3aUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhzZ2MzUmhjblE2SUhOMFlXTnJXMmxkTG5OMFlYSjBMQ0JsYm1RNklITjBZV05yVzJsZExtVnVaQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1bGJtUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG1WdVpDaHpkR0ZqYTF0cFhTNTBZV2NzSUhOMFlYSjBMQ0JsYm1RcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUZKbGJXOTJaU0IwYUdVZ2IzQmxiaUJsYkdWdFpXNTBjeUJtY205dElIUm9aU0J6ZEdGamExeHVJQ0FnSUNBZ2MzUmhZMnN1YkdWdVozUm9JRDBnY0c5ek8xeHVJQ0FnSUNBZ2JHRnpkRlJoWnlBOUlIQnZjeUFtSmlCemRHRmphMXR3YjNNZ0xTQXhYUzUwWVdjN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoc2IzZGxja05oYzJWa1ZHRm5UbUZ0WlNBOVBUMGdKMkp5SnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVjM1JoY25RcElIdGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NXpkR0Z5ZENoMFlXZE9ZVzFsTENCYlhTd2dkSEoxWlN3Z2MzUmhjblFzSUdWdVpDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHNiM2RsY2tOaGMyVmtWR0ZuVG1GdFpTQTlQVDBnSjNBbktTQjdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTV6ZEdGeWRDa2dlMXh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbk4wWVhKMEtIUmhaMDVoYldVc0lGdGRMQ0JtWVd4elpTd2djM1JoY25Rc0lHVnVaQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1bGJtUXBJSHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVsYm1Rb2RHRm5UbUZ0WlN3Z2MzUmhjblFzSUdWdVpDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzUyWVhJZ2IyNVNSU0E5SUM5ZVFIeGVkaTF2Ympvdk8xeHVkbUZ5SUdScGNsSkZJRDBnTDE1MkxYeGVRSHhlT2k4N1hHNTJZWElnWm05eVFXeHBZWE5TUlNBOUlDOG9XMXhjYzF4Y1UxMHFQeWxjWEhNcktEODZhVzU4YjJZcFhGeHpLeWhiWEZ4elhGeFRYU29wTHp0Y2JuWmhjaUJtYjNKSmRHVnlZWFJ2Y2xKRklEMGdMeXdvVzE0c1hGeDlYRnhkWFNvcEtEODZMQ2hiWGl4Y1hIMWNYRjFkS2lrcFB5UXZPMXh1ZG1GeUlITjBjbWx3VUdGeVpXNXpVa1VnUFNBdlhseGNLSHhjWENra0wyYzdYRzUyWVhJZ1pIbHVZVzFwWTBGeVoxSkZJRDBnTDE1Y1hGc3VLbHhjWFNRdk8xeHVYRzUyWVhJZ1lYSm5Va1VnUFNBdk9pZ3VLaWtrTHp0Y2JuWmhjaUJpYVc1a1VrVWdQU0F2WGpwOFhseGNMbnhlZGkxaWFXNWtPaTg3WEc1MllYSWdiVzlrYVdacFpYSlNSU0E5SUM5Y1hDNWJYaTVjWEYxZEt5Zy9QVnRlWEZ4ZFhTb2tLUzluTzF4dVhHNTJZWElnYzJ4dmRGSkZJRDBnTDE1MkxYTnNiM1FvT253a0tYeGVJeTg3WEc1Y2JuWmhjaUJzYVc1bFFuSmxZV3RTUlNBOUlDOWJYRnh5WEZ4dVhTODdYRzUyWVhJZ2QyaHBkR1Z6Y0dGalpWSkZKREVnUFNBdlhGeHpLeTluTzF4dVhHNTJZWElnYVc1MllXeHBaRUYwZEhKcFluVjBaVkpGSUQwZ0wxdGNYSE5jSWljOFBseGNMejFkTHp0Y2JseHVkbUZ5SUdSbFkyOWtaVWhVVFV4RFlXTm9aV1FnUFNCallXTm9aV1FvYUdVdVpHVmpiMlJsS1R0Y2JseHVkbUZ5SUdWdGNIUjVVMnh2ZEZOamIzQmxWRzlyWlc0Z1BTQmNJbDlsYlhCMGVWOWNJanRjYmx4dUx5OGdZMjl1Wm1sbmRYSmhZbXhsSUhOMFlYUmxYRzUyWVhJZ2QyRnliaVF5TzF4dWRtRnlJR1JsYkdsdGFYUmxjbk03WEc1MllYSWdkSEpoYm5ObWIzSnRjenRjYm5aaGNpQndjbVZVY21GdWMyWnZjbTF6TzF4dWRtRnlJSEJ2YzNSVWNtRnVjMlp2Y20xek8xeHVkbUZ5SUhCc1lYUm1iM0p0U1hOUWNtVlVZV2M3WEc1MllYSWdjR3hoZEdadmNtMU5kWE4wVlhObFVISnZjRHRjYm5aaGNpQndiR0YwWm05eWJVZGxkRlJoWjA1aGJXVnpjR0ZqWlR0Y2JuWmhjaUJ0WVhsaVpVTnZiWEJ2Ym1WdWREdGNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRVk5VUld4bGJXVnVkQ0FvWEc0Z0lIUmhaeXhjYmlBZ1lYUjBjbk1zWEc0Z0lIQmhjbVZ1ZEZ4dUtTQjdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdkSGx3WlRvZ01TeGNiaUFnSUNCMFlXYzZJSFJoWnl4Y2JpQWdJQ0JoZEhSeWMweHBjM1E2SUdGMGRISnpMRnh1SUNBZ0lHRjBkSEp6VFdGd09pQnRZV3RsUVhSMGNuTk5ZWEFvWVhSMGNuTXBMRnh1SUNBZ0lISmhkMEYwZEhKelRXRndPaUI3ZlN4Y2JpQWdJQ0J3WVhKbGJuUTZJSEJoY21WdWRDeGNiaUFnSUNCamFHbHNaSEpsYmpvZ1cxMWNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRU52Ym5abGNuUWdTRlJOVENCemRISnBibWNnZEc4Z1FWTlVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQndZWEp6WlNBb1hHNGdJSFJsYlhCc1lYUmxMRnh1SUNCdmNIUnBiMjV6WEc0cElIdGNiaUFnZDJGeWJpUXlJRDBnYjNCMGFXOXVjeTUzWVhKdUlIeDhJR0poYzJWWFlYSnVPMXh1WEc0Z0lIQnNZWFJtYjNKdFNYTlFjbVZVWVdjZ1BTQnZjSFJwYjI1ekxtbHpVSEpsVkdGbklIeDhJRzV2TzF4dUlDQndiR0YwWm05eWJVMTFjM1JWYzJWUWNtOXdJRDBnYjNCMGFXOXVjeTV0ZFhOMFZYTmxVSEp2Y0NCOGZDQnVienRjYmlBZ2NHeGhkR1p2Y20xSFpYUlVZV2RPWVcxbGMzQmhZMlVnUFNCdmNIUnBiMjV6TG1kbGRGUmhaMDVoYldWemNHRmpaU0I4ZkNCdWJ6dGNiaUFnZG1GeUlHbHpVbVZ6WlhKMlpXUlVZV2NnUFNCdmNIUnBiMjV6TG1selVtVnpaWEoyWldSVVlXY2dmSHdnYm04N1hHNGdJRzFoZVdKbFEyOXRjRzl1Wlc1MElEMGdablZ1WTNScGIyNGdLR1ZzS1NCN0lISmxkSFZ5YmlBaElXVnNMbU52YlhCdmJtVnVkQ0I4ZkNBaGFYTlNaWE5sY25abFpGUmhaeWhsYkM1MFlXY3BPeUI5TzF4dVhHNGdJSFJ5WVc1elptOXliWE1nUFNCd2JIVmphMDF2WkhWc1pVWjFibU4wYVc5dUtHOXdkR2x2Ym5NdWJXOWtkV3hsY3l3Z0ozUnlZVzV6Wm05eWJVNXZaR1VuS1R0Y2JpQWdjSEpsVkhKaGJuTm1iM0p0Y3lBOUlIQnNkV05yVFc5a2RXeGxSblZ1WTNScGIyNG9iM0IwYVc5dWN5NXRiMlIxYkdWekxDQW5jSEpsVkhKaGJuTm1iM0p0VG05a1pTY3BPMXh1SUNCd2IzTjBWSEpoYm5ObWIzSnRjeUE5SUhCc2RXTnJUVzlrZFd4bFJuVnVZM1JwYjI0b2IzQjBhVzl1Y3k1dGIyUjFiR1Z6TENBbmNHOXpkRlJ5WVc1elptOXliVTV2WkdVbktUdGNibHh1SUNCa1pXeHBiV2wwWlhKeklEMGdiM0IwYVc5dWN5NWtaV3hwYldsMFpYSnpPMXh1WEc0Z0lIWmhjaUJ6ZEdGamF5QTlJRnRkTzF4dUlDQjJZWElnY0hKbGMyVnlkbVZYYUdsMFpYTndZV05sSUQwZ2IzQjBhVzl1Y3k1d2NtVnpaWEoyWlZkb2FYUmxjM0JoWTJVZ0lUMDlJR1poYkhObE8xeHVJQ0IyWVhJZ2QyaHBkR1Z6Y0dGalpVOXdkR2x2YmlBOUlHOXdkR2x2Ym5NdWQyaHBkR1Z6Y0dGalpUdGNiaUFnZG1GeUlISnZiM1E3WEc0Z0lIWmhjaUJqZFhKeVpXNTBVR0Z5Wlc1ME8xeHVJQ0IyWVhJZ2FXNVdVSEpsSUQwZ1ptRnNjMlU3WEc0Z0lIWmhjaUJwYmxCeVpTQTlJR1poYkhObE8xeHVJQ0IyWVhJZ2QyRnlibVZrSUQwZ1ptRnNjMlU3WEc1Y2JpQWdablZ1WTNScGIyNGdkMkZ5Yms5dVkyVWdLRzF6Wnl3Z2NtRnVaMlVwSUh0Y2JpQWdJQ0JwWmlBb0lYZGhjbTVsWkNrZ2UxeHVJQ0FnSUNBZ2QyRnlibVZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSGRoY200a01paHRjMmNzSUhKaGJtZGxLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJqYkc5elpVVnNaVzFsYm5RZ0tHVnNaVzFsYm5RcElIdGNiaUFnSUNCMGNtbHRSVzVrYVc1blYyaHBkR1Z6Y0dGalpTaGxiR1Z0Wlc1MEtUdGNiaUFnSUNCcFppQW9JV2x1VmxCeVpTQW1KaUFoWld4bGJXVnVkQzV3Y205alpYTnpaV1FwSUh0Y2JpQWdJQ0FnSUdWc1pXMWxiblFnUFNCd2NtOWpaWE56Uld4bGJXVnVkQ2hsYkdWdFpXNTBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdkSEpsWlNCdFlXNWhaMlZ0Wlc1MFhHNGdJQ0FnYVdZZ0tDRnpkR0ZqYXk1c1pXNW5kR2dnSmlZZ1pXeGxiV1Z1ZENBaFBUMGdjbTl2ZENrZ2UxeHVJQ0FnSUNBZ0x5OGdZV3hzYjNjZ2NtOXZkQ0JsYkdWdFpXNTBjeUIzYVhSb0lIWXRhV1lzSUhZdFpXeHpaUzFwWmlCaGJtUWdkaTFsYkhObFhHNGdJQ0FnSUNCcFppQW9jbTl2ZEM1cFppQW1KaUFvWld4bGJXVnVkQzVsYkhObGFXWWdmSHdnWld4bGJXVnVkQzVsYkhObEtTa2dlMXh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGxZMnRTYjI5MFEyOXVjM1J5WVdsdWRITW9aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWVdSa1NXWkRiMjVrYVhScGIyNG9jbTl2ZEN3Z2UxeHVJQ0FnSUNBZ0lDQWdJR1Y0Y0RvZ1pXeGxiV1Z1ZEM1bGJITmxhV1lzWEc0Z0lDQWdJQ0FnSUNBZ1lteHZZMnM2SUdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCM1lYSnVUMjVqWlNoY2JpQWdJQ0FnSUNBZ0lDQmNJa052YlhCdmJtVnVkQ0IwWlcxd2JHRjBaU0J6YUc5MWJHUWdZMjl1ZEdGcGJpQmxlR0ZqZEd4NUlHOXVaU0J5YjI5MElHVnNaVzFsYm5RdUlGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNCY0lrbG1JSGx2ZFNCaGNtVWdkWE5wYm1jZ2RpMXBaaUJ2YmlCdGRXeDBhWEJzWlNCbGJHVnRaVzUwY3l3Z1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUZ3aWRYTmxJSFl0Wld4elpTMXBaaUIwYnlCamFHRnBiaUIwYUdWdElHbHVjM1JsWVdRdVhDSXNYRzRnSUNBZ0lDQWdJQ0FnZXlCemRHRnlkRG9nWld4bGJXVnVkQzV6ZEdGeWRDQjlYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBVR0Z5Wlc1MElDWW1JQ0ZsYkdWdFpXNTBMbVp2Y21KcFpHUmxiaWtnZTF4dUlDQWdJQ0FnYVdZZ0tHVnNaVzFsYm5RdVpXeHpaV2xtSUh4OElHVnNaVzFsYm5RdVpXeHpaU2tnZTF4dUlDQWdJQ0FnSUNCd2NtOWpaWE56U1daRGIyNWthWFJwYjI1ektHVnNaVzFsYm5Rc0lHTjFjbkpsYm5SUVlYSmxiblFwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnNaVzFsYm5RdWMyeHZkRk5qYjNCbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2MyTnZjR1ZrSUhOc2IzUmNiaUFnSUNBZ0lDQWdJQ0F2THlCclpXVndJR2wwSUdsdUlIUm9aU0JqYUdsc1pISmxiaUJzYVhOMElITnZJSFJvWVhRZ2RpMWxiSE5sS0MxcFppa2dZMjl1WkdsMGFXOXVjeUJqWVc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJtYVc1a0lHbDBJR0Z6SUhSb1pTQndjbVYySUc1dlpHVXVYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHNWhiV1VnUFNCbGJHVnRaVzUwTG5Oc2IzUlVZWEpuWlhRZ2ZId2dKMXdpWkdWbVlYVnNkRndpSjF4dUlDQWdJQ0FnSUNBZ0lEc29ZM1Z5Y21WdWRGQmhjbVZ1ZEM1elkyOXdaV1JUYkc5MGN5QjhmQ0FvWTNWeWNtVnVkRkJoY21WdWRDNXpZMjl3WldSVGJHOTBjeUE5SUh0OUtTbGJibUZ0WlYwZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR04xY25KbGJuUlFZWEpsYm5RdVkyaHBiR1J5Wlc0dWNIVnphQ2hsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnWld4bGJXVnVkQzV3WVhKbGJuUWdQU0JqZFhKeVpXNTBVR0Z5Wlc1ME8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHWnBibUZzSUdOb2FXeGtjbVZ1SUdOc1pXRnVkWEJjYmlBZ0lDQXZMeUJtYVd4MFpYSWdiM1YwSUhOamIzQmxaQ0J6Ykc5MGMxeHVJQ0FnSUdWc1pXMWxiblF1WTJocGJHUnlaVzRnUFNCbGJHVnRaVzUwTG1Ob2FXeGtjbVZ1TG1acGJIUmxjaWhtZFc1amRHbHZiaUFvWXlrZ2V5QnlaWFIxY200Z0lTaGpLUzV6Ykc5MFUyTnZjR1U3SUgwcE8xeHVJQ0FnSUM4dklISmxiVzkyWlNCMGNtRnBiR2x1WnlCM2FHbDBaWE53WVdObElHNXZaR1VnWVdkaGFXNWNiaUFnSUNCMGNtbHRSVzVrYVc1blYyaHBkR1Z6Y0dGalpTaGxiR1Z0Wlc1MEtUdGNibHh1SUNBZ0lDOHZJR05vWldOcklIQnlaU0J6ZEdGMFpWeHVJQ0FnSUdsbUlDaGxiR1Z0Wlc1MExuQnlaU2tnZTF4dUlDQWdJQ0FnYVc1V1VISmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHdiR0YwWm05eWJVbHpVSEpsVkdGbktHVnNaVzFsYm5RdWRHRm5LU2tnZTF4dUlDQWdJQ0FnYVc1UWNtVWdQU0JtWVd4elpUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z1lYQndiSGtnY0c5emRDMTBjbUZ1YzJadmNtMXpYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndiM04wVkhKaGJuTm1iM0p0Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdjRzl6ZEZSeVlXNXpabTl5YlhOYmFWMG9aV3hsYldWdWRDd2diM0IwYVc5dWN5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdkSEpwYlVWdVpHbHVaMWRvYVhSbGMzQmhZMlVnS0dWc0tTQjdYRzRnSUNBZ0x5OGdjbVZ0YjNabElIUnlZV2xzYVc1bklIZG9hWFJsYzNCaFkyVWdibTlrWlZ4dUlDQWdJR2xtSUNnaGFXNVFjbVVwSUh0Y2JpQWdJQ0FnSUhaaGNpQnNZWE4wVG05a1pUdGNiaUFnSUNBZ0lIZG9hV3hsSUNoY2JpQWdJQ0FnSUNBZ0tHeGhjM1JPYjJSbElEMGdaV3d1WTJocGJHUnlaVzViWld3dVkyaHBiR1J5Wlc0dWJHVnVaM1JvSUMwZ01WMHBJQ1ltWEc0Z0lDQWdJQ0FnSUd4aGMzUk9iMlJsTG5SNWNHVWdQVDA5SURNZ0ppWmNiaUFnSUNBZ0lDQWdiR0Z6ZEU1dlpHVXVkR1Y0ZENBOVBUMGdKeUFuWEc0Z0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ1pXd3VZMmhwYkdSeVpXNHVjRzl3S0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1kyaGxZMnRTYjI5MFEyOXVjM1J5WVdsdWRITWdLR1ZzS1NCN1hHNGdJQ0FnYVdZZ0tHVnNMblJoWnlBOVBUMGdKM05zYjNRbklIeDhJR1ZzTG5SaFp5QTlQVDBnSjNSbGJYQnNZWFJsSnlrZ2UxeHVJQ0FnSUNBZ2QyRnliazl1WTJVb1hHNGdJQ0FnSUNBZ0lGd2lRMkZ1Ym05MElIVnpaU0E4WENJZ0t5QW9aV3d1ZEdGbktTQXJJRndpUGlCaGN5QmpiMjF3YjI1bGJuUWdjbTl2ZENCbGJHVnRaVzUwSUdKbFkyRjFjMlVnYVhRZ2JXRjVJRndpSUN0Y2JpQWdJQ0FnSUNBZ0oyTnZiblJoYVc0Z2JYVnNkR2x3YkdVZ2JtOWtaWE11Snl4Y2JpQWdJQ0FnSUNBZ2V5QnpkR0Z5ZERvZ1pXd3VjM1JoY25RZ2ZWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHVnNMbUYwZEhKelRXRndMbWhoYzA5M2JsQnliM0JsY25SNUtDZDJMV1p2Y2ljcEtTQjdYRzRnSUNBZ0lDQjNZWEp1VDI1alpTaGNiaUFnSUNBZ0lDQWdKME5oYm01dmRDQjFjMlVnZGkxbWIzSWdiMjRnYzNSaGRHVm1kV3dnWTI5dGNHOXVaVzUwSUhKdmIzUWdaV3hsYldWdWRDQmlaV05oZFhObElDY2dLMXh1SUNBZ0lDQWdJQ0FuYVhRZ2NtVnVaR1Z5Y3lCdGRXeDBhWEJzWlNCbGJHVnRaVzUwY3k0bkxGeHVJQ0FnSUNBZ0lDQmxiQzV5WVhkQmRIUnljMDFoY0ZzbmRpMW1iM0luWFZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCd1lYSnpaVWhVVFV3b2RHVnRjR3hoZEdVc0lIdGNiaUFnSUNCM1lYSnVPaUIzWVhKdUpESXNYRzRnSUNBZ1pYaHdaV04wU0ZSTlREb2diM0IwYVc5dWN5NWxlSEJsWTNSSVZFMU1MRnh1SUNBZ0lHbHpWVzVoY25sVVlXYzZJRzl3ZEdsdmJuTXVhWE5WYm1GeWVWUmhaeXhjYmlBZ0lDQmpZVzVDWlV4bFpuUlBjR1Z1VkdGbk9pQnZjSFJwYjI1ekxtTmhia0psVEdWbWRFOXdaVzVVWVdjc1hHNGdJQ0FnYzJodmRXeGtSR1ZqYjJSbFRtVjNiR2x1WlhNNklHOXdkR2x2Ym5NdWMyaHZkV3hrUkdWamIyUmxUbVYzYkdsdVpYTXNYRzRnSUNBZ2MyaHZkV3hrUkdWamIyUmxUbVYzYkdsdVpYTkdiM0pJY21WbU9pQnZjSFJwYjI1ekxuTm9iM1ZzWkVSbFkyOWtaVTVsZDJ4cGJtVnpSbTl5U0hKbFppeGNiaUFnSUNCemFHOTFiR1JMWldWd1EyOXRiV1Z1ZERvZ2IzQjBhVzl1Y3k1amIyMXRaVzUwY3l4Y2JpQWdJQ0J2ZFhSd2RYUlRiM1Z5WTJWU1lXNW5aVG9nYjNCMGFXOXVjeTV2ZFhSd2RYUlRiM1Z5WTJWU1lXNW5aU3hjYmlBZ0lDQnpkR0Z5ZERvZ1puVnVZM1JwYjI0Z2MzUmhjblFnS0hSaFp5d2dZWFIwY25Nc0lIVnVZWEo1TENCemRHRnlkQ1F4TENCbGJtUXBJSHRjYmlBZ0lDQWdJQzh2SUdOb1pXTnJJRzVoYldWemNHRmpaUzVjYmlBZ0lDQWdJQzh2SUdsdWFHVnlhWFFnY0dGeVpXNTBJRzV6SUdsbUlIUm9aWEpsSUdseklHOXVaVnh1SUNBZ0lDQWdkbUZ5SUc1eklEMGdLR04xY25KbGJuUlFZWEpsYm5RZ0ppWWdZM1Z5Y21WdWRGQmhjbVZ1ZEM1dWN5a2dmSHdnY0d4aGRHWnZjbTFIWlhSVVlXZE9ZVzFsYzNCaFkyVW9kR0ZuS1R0Y2JseHVJQ0FnSUNBZ0x5OGdhR0Z1Wkd4bElFbEZJSE4yWnlCaWRXZGNiaUFnSUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dUlDQWdJQ0FnYVdZZ0tHbHpTVVVnSmlZZ2JuTWdQVDA5SUNkemRtY25LU0I3WEc0Z0lDQWdJQ0FnSUdGMGRISnpJRDBnWjNWaGNtUkpSVk5XUjBKMVp5aGhkSFJ5Y3lrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIWmhjaUJsYkdWdFpXNTBJRDBnWTNKbFlYUmxRVk5VUld4bGJXVnVkQ2gwWVdjc0lHRjBkSEp6TENCamRYSnlaVzUwVUdGeVpXNTBLVHRjYmlBZ0lDQWdJR2xtSUNodWN5a2dlMXh1SUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbTV6SUQwZ2JuTTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWIzVjBjSFYwVTI5MWNtTmxVbUZ1WjJVcElIdGNiaUFnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbk4wWVhKMElEMGdjM1JoY25Ra01UdGNiaUFnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbVZ1WkNBOUlHVnVaRHRjYmlBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwTG5KaGQwRjBkSEp6VFdGd0lEMGdaV3hsYldWdWRDNWhkSFJ5YzB4cGMzUXVjbVZrZFdObEtHWjFibU4wYVc5dUlDaGpkVzExYkdGMFpXUXNJR0YwZEhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWJYVnNZWFJsWkZ0aGRIUnlMbTVoYldWZElEMGdZWFIwY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpkVzExYkdGMFpXUmNiaUFnSUNBZ0lDQWdJQ0I5TENCN2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWVhSMGNuTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ZWFIwY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNocGJuWmhiR2xrUVhSMGNtbGlkWFJsVWtVdWRHVnpkQ2hoZEhSeUxtNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzWVhKdUpESW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lTVzUyWVd4cFpDQmtlVzVoYldsaklHRnlaM1Z0Wlc1MElHVjRjSEpsYzNOcGIyNDZJR0YwZEhKcFluVjBaU0J1WVcxbGN5QmpZVzV1YjNRZ1kyOXVkR0ZwYmlCY0lpQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2ljM0JoWTJWekxDQnhkVzkwWlhNc0lEd3NJRDRzSUM4Z2IzSWdQUzVjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBPaUJoZEhSeUxuTjBZWEowSUNzZ1lYUjBjaTV1WVcxbExtbHVaR1Y0VDJZb1hDSmJYQ0lwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVpEb2dZWFIwY2k1emRHRnlkQ0FySUdGMGRISXVibUZ0WlM1c1pXNW5kR2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvYVhOR2IzSmlhV1JrWlc1VVlXY29aV3hsYldWdWRDa2dKaVlnSVdselUyVnlkbVZ5VW1WdVpHVnlhVzVuS0NrcElIdGNiaUFnSUNBZ0lDQWdaV3hsYldWdWRDNW1iM0ppYVdSa1pXNGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjNZWEp1SkRJb1hHNGdJQ0FnSUNBZ0lDQWdKMVJsYlhCc1lYUmxjeUJ6YUc5MWJHUWdiMjVzZVNCaVpTQnlaWE53YjI1emFXSnNaU0JtYjNJZ2JXRndjR2x1WnlCMGFHVWdjM1JoZEdVZ2RHOGdkR2hsSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2RWU1M0Z1FYWnZhV1FnY0d4aFkybHVaeUIwWVdkeklIZHBkR2dnYzJsa1pTMWxabVpsWTNSeklHbHVJSGx2ZFhJZ2RHVnRjR3hoZEdWekxDQnpkV05vSUdGeklDY2dLMXh1SUNBZ0lDQWdJQ0FnSUZ3aVBGd2lJQ3NnZEdGbklDc2dYQ0krWENJZ0t5QW5MQ0JoY3lCMGFHVjVJSGRwYkd3Z2JtOTBJR0psSUhCaGNuTmxaQzRuTEZ4dUlDQWdJQ0FnSUNBZ0lIc2djM1JoY25RNklHVnNaVzFsYm5RdWMzUmhjblFnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJoY0hCc2VTQndjbVV0ZEhKaGJuTm1iM0p0YzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCd2NtVlVjbUZ1YzJadmNtMXpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHVnNaVzFsYm5RZ1BTQndjbVZVY21GdWMyWnZjbTF6VzJsZEtHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcElIeDhJR1ZzWlcxbGJuUTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNnaGFXNVdVSEpsS1NCN1hHNGdJQ0FnSUNBZ0lIQnliMk5sYzNOUWNtVW9aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwTG5CeVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsdVZsQnlaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNod2JHRjBabTl5YlVselVISmxWR0ZuS0dWc1pXMWxiblF1ZEdGbktTa2dlMXh1SUNBZ0lDQWdJQ0JwYmxCeVpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9hVzVXVUhKbEtTQjdYRzRnSUNBZ0lDQWdJSEJ5YjJObGMzTlNZWGRCZEhSeWN5aGxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9JV1ZzWlcxbGJuUXVjSEp2WTJWemMyVmtLU0I3WEc0Z0lDQWdJQ0FnSUM4dklITjBjblZqZEhWeVlXd2daR2x5WldOMGFYWmxjMXh1SUNBZ0lDQWdJQ0J3Y205alpYTnpSbTl5S0dWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNCd2NtOWpaWE56U1dZb1pXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lIQnliMk5sYzNOUGJtTmxLR1ZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0lYSnZiM1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtOXZkQ0E5SUdWc1pXMWxiblE3WEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR1ZqYTFKdmIzUkRiMjV6ZEhKaGFXNTBjeWh5YjI5MEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0lYVnVZWEo1S1NCN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SUVlYSmxiblFnUFNCbGJHVnRaVzUwTzF4dUlDQWdJQ0FnSUNCemRHRmpheTV3ZFhOb0tHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1kyeHZjMlZGYkdWdFpXNTBLR1ZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmxibVE2SUdaMWJtTjBhVzl1SUdWdVpDQW9kR0ZuTENCemRHRnlkQ3dnWlc1a0pERXBJSHRjYmlBZ0lDQWdJSFpoY2lCbGJHVnRaVzUwSUQwZ2MzUmhZMnRiYzNSaFkyc3ViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdJQ0F2THlCd2IzQWdjM1JoWTJ0Y2JpQWdJQ0FnSUhOMFlXTnJMbXhsYm1kMGFDQXRQU0F4TzF4dUlDQWdJQ0FnWTNWeWNtVnVkRkJoY21WdWRDQTlJSE4wWVdOclczTjBZV05yTG14bGJtZDBhQ0F0SURGZE8xeHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXViM1YwY0hWMFUyOTFjbU5sVW1GdVoyVXBJSHRjYmlBZ0lDQWdJQ0FnWld4bGJXVnVkQzVsYm1RZ1BTQmxibVFrTVR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOc2IzTmxSV3hsYldWdWRDaGxiR1Z0Wlc1MEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kyaGhjbk02SUdaMWJtTjBhVzl1SUdOb1lYSnpJQ2gwWlhoMExDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXTjFjbkpsYm5SUVlYSmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMFpYaDBJRDA5UFNCMFpXMXdiR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJGeWJrOXVZMlVvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2REYjIxd2IyNWxiblFnZEdWdGNHeGhkR1VnY21WeGRXbHlaWE1nWVNCeWIyOTBJR1ZzWlcxbGJuUXNJSEpoZEdobGNpQjBhR0Z1SUdwMWMzUWdkR1Y0ZEM0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lITjBZWEowT2lCemRHRnlkQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0tIUmxlSFFnUFNCMFpYaDBMblJ5YVcwb0tTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZGhjbTVQYm1ObEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1hDSjBaWGgwSUZ4Y1hDSmNJaUFySUhSbGVIUWdLeUJjSWx4Y1hDSWdiM1YwYzJsa1pTQnliMjkwSUdWc1pXMWxiblFnZDJsc2JDQmlaU0JwWjI1dmNtVmtMbHdpS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCemRHRnlkRG9nYzNSaGNuUWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCSlJTQjBaWGgwWVhKbFlTQndiR0ZqWldodmJHUmxjaUJpZFdkY2JpQWdJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNBZ0lDQWdhV1lnS0dselNVVWdKaVpjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVkRkJoY21WdWRDNTBZV2NnUFQwOUlDZDBaWGgwWVhKbFlTY2dKaVpjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVkRkJoY21WdWRDNWhkSFJ5YzAxaGNDNXdiR0ZqWldodmJHUmxjaUE5UFQwZ2RHVjRkRnh1SUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkbUZ5SUdOb2FXeGtjbVZ1SUQwZ1kzVnljbVZ1ZEZCaGNtVnVkQzVqYUdsc1pISmxianRjYmlBZ0lDQWdJR2xtSUNocGJsQnlaU0I4ZkNCMFpYaDBMblJ5YVcwb0tTa2dlMXh1SUNBZ0lDQWdJQ0IwWlhoMElEMGdhWE5VWlhoMFZHRm5LR04xY25KbGJuUlFZWEpsYm5RcElEOGdkR1Y0ZENBNklHUmxZMjlrWlVoVVRVeERZV05vWldRb2RHVjRkQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGamFHbHNaSEpsYmk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdjbVZ0YjNabElIUm9aU0IzYUdsMFpYTndZV05sTFc5dWJIa2dibTlrWlNCeWFXZG9kQ0JoWm5SbGNpQmhiaUJ2Y0dWdWFXNW5JSFJoWjF4dUlDQWdJQ0FnSUNCMFpYaDBJRDBnSnljN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIZG9hWFJsYzNCaFkyVlBjSFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hkb2FYUmxjM0JoWTJWUGNIUnBiMjRnUFQwOUlDZGpiMjVrWlc1elpTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QnBiaUJqYjI1a1pXNXpaU0J0YjJSbExDQnlaVzF2ZG1VZ2RHaGxJSGRvYVhSbGMzQmhZMlVnYm05a1pTQnBaaUJwZENCamIyNTBZV2x1YzF4dUlDQWdJQ0FnSUNBZ0lDOHZJR3hwYm1VZ1luSmxZV3NzSUc5MGFHVnlkMmx6WlNCamIyNWtaVzV6WlNCMGJ5QmhJSE5wYm1kc1pTQnpjR0ZqWlZ4dUlDQWdJQ0FnSUNBZ0lIUmxlSFFnUFNCc2FXNWxRbkpsWVd0U1JTNTBaWE4wS0hSbGVIUXBJRDhnSnljZ09pQW5JQ2M3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHVjRkQ0E5SUNjZ0p6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR1Y0ZENBOUlIQnlaWE5sY25abFYyaHBkR1Z6Y0dGalpTQS9JQ2NnSnlBNklDY25PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hSbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBibEJ5WlNBbUppQjNhR2wwWlhOd1lXTmxUM0IwYVc5dUlEMDlQU0FuWTI5dVpHVnVjMlVuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnWTI5dVpHVnVjMlVnWTI5dWMyVmpkWFJwZG1VZ2QyaHBkR1Z6Y0dGalpYTWdhVzUwYnlCemFXNW5iR1VnYzNCaFkyVmNiaUFnSUNBZ0lDQWdJQ0IwWlhoMElEMGdkR1Y0ZEM1eVpYQnNZV05sS0hkb2FYUmxjM0JoWTJWU1JTUXhMQ0FuSUNjcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTTdYRzRnSUNBZ0lDQWdJSFpoY2lCamFHbHNaRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBibFpRY21VZ0ppWWdkR1Y0ZENBaFBUMGdKeUFuSUNZbUlDaHlaWE1nUFNCd1lYSnpaVlJsZUhRb2RHVjRkQ3dnWkdWc2FXMXBkR1Z5Y3lrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJocGJHUWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhod2NtVnpjMmx2YmpvZ2NtVnpMbVY0Y0hKbGMzTnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMnRsYm5NNklISmxjeTUwYjJ0bGJuTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUIwWlhoMFhHNGdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMFpYaDBJQ0U5UFNBbklDY2dmSHdnSVdOb2FXeGtjbVZ1TG14bGJtZDBhQ0I4ZkNCamFHbHNaSEpsYmx0amFHbHNaSEpsYmk1c1pXNW5kR2dnTFNBeFhTNTBaWGgwSUNFOVBTQW5JQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lCMFpYaDBYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWTJocGJHUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NXZkWFJ3ZFhSVGIzVnlZMlZTWVc1blpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaHBiR1F1YzNSaGNuUWdQU0J6ZEdGeWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb2FXeGtMbVZ1WkNBOUlHVnVaRHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdZMmhwYkdSeVpXNHVjSFZ6YUNoamFHbHNaQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dUlDQWdJR052YlcxbGJuUTZJR1oxYm1OMGFXOXVJR052YlcxbGJuUWdLSFJsZUhRc0lITjBZWEowTENCbGJtUXBJSHRjYmlBZ0lDQWdJQzh2SUdGa1pHbHVaeUJoYm5sMGFXNW5JR0Z6SUdFZ2MybGliR2x1WnlCMGJ5QjBhR1VnY205dmRDQnViMlJsSUdseklHWnZjbUpwWkdSbGJseHVJQ0FnSUNBZ0x5OGdZMjl0YldWdWRITWdjMmh2ZFd4a0lITjBhV3hzSUdKbElHRnNiRzkzWldRc0lHSjFkQ0JwWjI1dmNtVmtYRzRnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRkJoY21WdWRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1kyaHBiR1FnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ015eGNiaUFnSUNBZ0lDQWdJQ0IwWlhoME9pQjBaWGgwTEZ4dUlDQWdJQ0FnSUNBZ0lHbHpRMjl0YldWdWREb2dkSEoxWlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTV2ZFhSd2RYUlRiM1Z5WTJWU1lXNW5aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTm9hV3hrTG5OMFlYSjBJRDBnYzNSaGNuUTdYRzRnSUNBZ0lDQWdJQ0FnWTJocGJHUXVaVzVrSUQwZ1pXNWtPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJRWVhKbGJuUXVZMmhwYkdSeVpXNHVjSFZ6YUNoamFHbHNaQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUtUdGNiaUFnY21WMGRYSnVJSEp2YjNSY2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hKdlkyVnpjMUJ5WlNBb1pXd3BJSHRjYmlBZ2FXWWdLR2RsZEVGdVpGSmxiVzkyWlVGMGRISW9aV3dzSUNkMkxYQnlaU2NwSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0JsYkM1d2NtVWdQU0IwY25WbE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSEJ5YjJObGMzTlNZWGRCZEhSeWN5QW9aV3dwSUh0Y2JpQWdkbUZ5SUd4cGMzUWdQU0JsYkM1aGRIUnljMHhwYzNRN1hHNGdJSFpoY2lCc1pXNGdQU0JzYVhOMExteGxibWQwYUR0Y2JpQWdhV1lnS0d4bGJpa2dlMXh1SUNBZ0lIWmhjaUJoZEhSeWN5QTlJR1ZzTG1GMGRISnpJRDBnYm1WM0lFRnljbUY1S0d4bGJpazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdZWFIwY25OYmFWMGdQU0I3WEc0Z0lDQWdJQ0FnSUc1aGJXVTZJR3hwYzNSYmFWMHVibUZ0WlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUVwVFQwNHVjM1J5YVc1bmFXWjVLR3hwYzNSYmFWMHVkbUZzZFdVcFhHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2FXWWdLR3hwYzNSYmFWMHVjM1JoY25RZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQmhkSFJ5YzF0cFhTNXpkR0Z5ZENBOUlHeHBjM1JiYVYwdWMzUmhjblE3WEc0Z0lDQWdJQ0FnSUdGMGRISnpXMmxkTG1WdVpDQTlJR3hwYzNSYmFWMHVaVzVrTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDZ2haV3d1Y0hKbEtTQjdYRzRnSUNBZ0x5OGdibTl1SUhKdmIzUWdibTlrWlNCcGJpQndjbVVnWW14dlkydHpJSGRwZEdnZ2JtOGdZWFIwY21saWRYUmxjMXh1SUNBZ0lHVnNMbkJzWVdsdUlEMGdkSEoxWlR0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndjbTlqWlhOelJXeGxiV1Z1ZENBb1hHNGdJR1ZzWlcxbGJuUXNYRzRnSUc5d2RHbHZibk5jYmlrZ2UxeHVJQ0J3Y205alpYTnpTMlY1S0dWc1pXMWxiblFwTzF4dVhHNGdJQzh2SUdSbGRHVnliV2x1WlNCM2FHVjBhR1Z5SUhSb2FYTWdhWE1nWVNCd2JHRnBiaUJsYkdWdFpXNTBJR0ZtZEdWeVhHNGdJQzh2SUhKbGJXOTJhVzVuSUhOMGNuVmpkSFZ5WVd3Z1lYUjBjbWxpZFhSbGMxeHVJQ0JsYkdWdFpXNTBMbkJzWVdsdUlEMGdLRnh1SUNBZ0lDRmxiR1Z0Wlc1MExtdGxlU0FtSmx4dUlDQWdJQ0ZsYkdWdFpXNTBMbk5qYjNCbFpGTnNiM1J6SUNZbVhHNGdJQ0FnSVdWc1pXMWxiblF1WVhSMGNuTk1hWE4wTG14bGJtZDBhRnh1SUNBcE8xeHVYRzRnSUhCeWIyTmxjM05TWldZb1pXeGxiV1Z1ZENrN1hHNGdJSEJ5YjJObGMzTlRiRzkwUTI5dWRHVnVkQ2hsYkdWdFpXNTBLVHRjYmlBZ2NISnZZMlZ6YzFOc2IzUlBkWFJzWlhRb1pXeGxiV1Z1ZENrN1hHNGdJSEJ5YjJObGMzTkRiMjF3YjI1bGJuUW9aV3hsYldWdWRDazdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RISmhibk5tYjNKdGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR1ZzWlcxbGJuUWdQU0IwY21GdWMyWnZjbTF6VzJsZEtHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcElIeDhJR1ZzWlcxbGJuUTdYRzRnSUgxY2JpQWdjSEp2WTJWemMwRjBkSEp6S0dWc1pXMWxiblFwTzF4dUlDQnlaWFIxY200Z1pXeGxiV1Z1ZEZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ3Y205alpYTnpTMlY1SUNobGJDa2dlMXh1SUNCMllYSWdaWGh3SUQwZ1oyVjBRbWx1WkdsdVowRjBkSElvWld3c0lDZHJaWGtuS1R0Y2JpQWdhV1lnS0dWNGNDa2dlMXh1SUNBZ0lIdGNiaUFnSUNBZ0lHbG1JQ2hsYkM1MFlXY2dQVDA5SUNkMFpXMXdiR0YwWlNjcElIdGNiaUFnSUNBZ0lDQWdkMkZ5YmlReUtGeHVJQ0FnSUNBZ0lDQWdJRndpUEhSbGJYQnNZWFJsUGlCallXNXViM1FnWW1VZ2EyVjVaV1F1SUZCc1lXTmxJSFJvWlNCclpYa2diMjRnY21WaGJDQmxiR1Z0Wlc1MGN5QnBibk4wWldGa0xsd2lMRnh1SUNBZ0lDQWdJQ0FnSUdkbGRGSmhkMEpwYm1ScGJtZEJkSFJ5S0dWc0xDQW5hMlY1SnlsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2hsYkM1bWIzSXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbDBaWEpoZEc5eUlEMGdaV3d1YVhSbGNtRjBiM0l5SUh4OElHVnNMbWwwWlhKaGRHOXlNVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhjbVZ1ZENBOUlHVnNMbkJoY21WdWREdGNiaUFnSUNBZ0lDQWdhV1lnS0dsMFpYSmhkRzl5SUNZbUlHbDBaWEpoZEc5eUlEMDlQU0JsZUhBZ0ppWWdjR0Z5Wlc1MElDWW1JSEJoY21WdWRDNTBZV2NnUFQwOUlDZDBjbUZ1YzJsMGFXOXVMV2R5YjNWd0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhkaGNtNGtNaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lSRzhnYm05MElIVnpaU0IyTFdadmNpQnBibVJsZUNCaGN5QnJaWGtnYjI0Z1BIUnlZVzV6YVhScGIyNHRaM0p2ZFhBK0lHTm9hV3hrY21WdUxDQmNJaUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJblJvYVhNZ2FYTWdkR2hsSUhOaGJXVWdZWE1nYm05MElIVnphVzVuSUd0bGVYTXVYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm5aWFJTWVhkQ2FXNWthVzVuUVhSMGNpaGxiQ3dnSjJ0bGVTY3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjFaU0F2S2lCMGFYQWdLaTljYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdWc0xtdGxlU0E5SUdWNGNEdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ3Y205alpYTnpVbVZtSUNobGJDa2dlMXh1SUNCMllYSWdjbVZtSUQwZ1oyVjBRbWx1WkdsdVowRjBkSElvWld3c0lDZHlaV1luS1R0Y2JpQWdhV1lnS0hKbFppa2dlMXh1SUNBZ0lHVnNMbkpsWmlBOUlISmxaanRjYmlBZ0lDQmxiQzV5WldaSmJrWnZjaUE5SUdOb1pXTnJTVzVHYjNJb1pXd3BPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeWIyTmxjM05HYjNJZ0tHVnNLU0I3WEc0Z0lIWmhjaUJsZUhBN1hHNGdJR2xtSUNnb1pYaHdJRDBnWjJWMFFXNWtVbVZ0YjNabFFYUjBjaWhsYkN3Z0ozWXRabTl5SnlrcEtTQjdYRzRnSUNBZ2RtRnlJSEpsY3lBOUlIQmhjbk5sUm05eUtHVjRjQ2s3WEc0Z0lDQWdhV1lnS0hKbGN5a2dlMXh1SUNBZ0lDQWdaWGgwWlc1a0tHVnNMQ0J5WlhNcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IzWVhKdUpESW9YRzRnSUNBZ0lDQWdJQ2hjSWtsdWRtRnNhV1FnZGkxbWIzSWdaWGh3Y21WemMybHZiam9nWENJZ0t5QmxlSEFwTEZ4dUlDQWdJQ0FnSUNCbGJDNXlZWGRCZEhSeWMwMWhjRnNuZGkxbWIzSW5YVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1WEc1Y2JtWjFibU4wYVc5dUlIQmhjbk5sUm05eUlDaGxlSEFwSUh0Y2JpQWdkbUZ5SUdsdVRXRjBZMmdnUFNCbGVIQXViV0YwWTJnb1ptOXlRV3hwWVhOU1JTazdYRzRnSUdsbUlDZ2hhVzVOWVhSamFDa2dleUJ5WlhSMWNtNGdmVnh1SUNCMllYSWdjbVZ6SUQwZ2UzMDdYRzRnSUhKbGN5NW1iM0lnUFNCcGJrMWhkR05vV3pKZExuUnlhVzBvS1R0Y2JpQWdkbUZ5SUdGc2FXRnpJRDBnYVc1TllYUmphRnN4WFM1MGNtbHRLQ2t1Y21Wd2JHRmpaU2h6ZEhKcGNGQmhjbVZ1YzFKRkxDQW5KeWs3WEc0Z0lIWmhjaUJwZEdWeVlYUnZjazFoZEdOb0lEMGdZV3hwWVhNdWJXRjBZMmdvWm05eVNYUmxjbUYwYjNKU1JTazdYRzRnSUdsbUlDaHBkR1Z5WVhSdmNrMWhkR05vS1NCN1hHNGdJQ0FnY21WekxtRnNhV0Z6SUQwZ1lXeHBZWE11Y21Wd2JHRmpaU2htYjNKSmRHVnlZWFJ2Y2xKRkxDQW5KeWt1ZEhKcGJTZ3BPMXh1SUNBZ0lISmxjeTVwZEdWeVlYUnZjakVnUFNCcGRHVnlZWFJ2Y2sxaGRHTm9XekZkTG5SeWFXMG9LVHRjYmlBZ0lDQnBaaUFvYVhSbGNtRjBiM0pOWVhSamFGc3lYU2tnZTF4dUlDQWdJQ0FnY21WekxtbDBaWEpoZEc5eU1pQTlJR2wwWlhKaGRHOXlUV0YwWTJoYk1sMHVkSEpwYlNncE8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYTXVZV3hwWVhNZ1BTQmhiR2xoY3p0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WelhHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeWIyTmxjM05KWmlBb1pXd3BJSHRjYmlBZ2RtRnlJR1Y0Y0NBOUlHZGxkRUZ1WkZKbGJXOTJaVUYwZEhJb1pXd3NJQ2QyTFdsbUp5azdYRzRnSUdsbUlDaGxlSEFwSUh0Y2JpQWdJQ0JsYkM1cFppQTlJR1Y0Y0R0Y2JpQWdJQ0JoWkdSSlprTnZibVJwZEdsdmJpaGxiQ3dnZTF4dUlDQWdJQ0FnWlhod09pQmxlSEFzWEc0Z0lDQWdJQ0JpYkc5amF6b2daV3hjYmlBZ0lDQjlLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JwWmlBb1oyVjBRVzVrVW1WdGIzWmxRWFIwY2lobGJDd2dKM1l0Wld4elpTY3BJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR1ZzTG1Wc2MyVWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ1pXeHpaV2xtSUQwZ1oyVjBRVzVrVW1WdGIzWmxRWFIwY2lobGJDd2dKM1l0Wld4elpTMXBaaWNwTzF4dUlDQWdJR2xtSUNobGJITmxhV1lwSUh0Y2JpQWdJQ0FnSUdWc0xtVnNjMlZwWmlBOUlHVnNjMlZwWmp0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2NISnZZMlZ6YzBsbVEyOXVaR2wwYVc5dWN5QW9aV3dzSUhCaGNtVnVkQ2tnZTF4dUlDQjJZWElnY0hKbGRpQTlJR1pwYm1SUWNtVjJSV3hsYldWdWRDaHdZWEpsYm5RdVkyaHBiR1J5Wlc0cE8xeHVJQ0JwWmlBb2NISmxkaUFtSmlCd2NtVjJMbWxtS1NCN1hHNGdJQ0FnWVdSa1NXWkRiMjVrYVhScGIyNG9jSEpsZGl3Z2UxeHVJQ0FnSUNBZ1pYaHdPaUJsYkM1bGJITmxhV1lzWEc0Z0lDQWdJQ0JpYkc5amF6b2daV3hjYmlBZ0lDQjlLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IzWVhKdUpESW9YRzRnSUNBZ0lDQmNJbll0WENJZ0t5QW9aV3d1Wld4elpXbG1JRDhnS0NkbGJITmxMV2xtUFZ3aUp5QXJJR1ZzTG1Wc2MyVnBaaUFySUNkY0lpY3BJRG9nSjJWc2MyVW5LU0FySUZ3aUlGd2lJQ3RjYmlBZ0lDQWdJRndpZFhObFpDQnZiaUJsYkdWdFpXNTBJRHhjSWlBcklDaGxiQzUwWVdjcElDc2dYQ0krSUhkcGRHaHZkWFFnWTI5eWNtVnpjRzl1WkdsdVp5QjJMV2xtTGx3aUxGeHVJQ0FnSUNBZ1pXd3VjbUYzUVhSMGNuTk5ZWEJiWld3dVpXeHpaV2xtSUQ4Z0ozWXRaV3h6WlMxcFppY2dPaUFuZGkxbGJITmxKMTFjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdacGJtUlFjbVYyUld4bGJXVnVkQ0FvWTJocGJHUnlaVzRwSUh0Y2JpQWdkbUZ5SUdrZ1BTQmphR2xzWkhKbGJpNXNaVzVuZEdnN1hHNGdJSGRvYVd4bElDaHBMUzBwSUh0Y2JpQWdJQ0JwWmlBb1kyaHBiR1J5Wlc1YmFWMHVkSGx3WlNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR05vYVd4a2NtVnVXMmxkWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1JQ2hqYUdsc1pISmxibHRwWFM1MFpYaDBJQ0U5UFNBbklDY3BJSHRjYmlBZ0lDQWdJQ0FnZDJGeWJpUXlLRnh1SUNBZ0lDQWdJQ0FnSUZ3aWRHVjRkQ0JjWEZ3aVhDSWdLeUFvWTJocGJHUnlaVzViYVYwdWRHVjRkQzUwY21sdEtDa3BJQ3NnWENKY1hGd2lJR0psZEhkbFpXNGdkaTFwWmlCaGJtUWdkaTFsYkhObEtDMXBaaWtnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJRndpZDJsc2JDQmlaU0JwWjI1dmNtVmtMbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lHTm9hV3hrY21WdVcybGRYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JqYUdsc1pISmxiaTV3YjNBb0tUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZV1JrU1daRGIyNWthWFJwYjI0Z0tHVnNMQ0JqYjI1a2FYUnBiMjRwSUh0Y2JpQWdhV1lnS0NGbGJDNXBaa052Ym1ScGRHbHZibk1wSUh0Y2JpQWdJQ0JsYkM1cFprTnZibVJwZEdsdmJuTWdQU0JiWFR0Y2JpQWdmVnh1SUNCbGJDNXBaa052Ym1ScGRHbHZibk11Y0hWemFDaGpiMjVrYVhScGIyNHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndjbTlqWlhOelQyNWpaU0FvWld3cElIdGNiaUFnZG1GeUlHOXVZMlVrSkRFZ1BTQm5aWFJCYm1SU1pXMXZkbVZCZEhSeUtHVnNMQ0FuZGkxdmJtTmxKeWs3WEc0Z0lHbG1JQ2h2Ym1ObEpDUXhJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQmxiQzV2Ym1ObElEMGdkSEoxWlR0Y2JpQWdmVnh1ZlZ4dVhHNHZMeUJvWVc1a2JHVWdZMjl1ZEdWdWRDQmlaV2x1WnlCd1lYTnpaV1FnZEc4Z1lTQmpiMjF3YjI1bGJuUWdZWE1nYzJ4dmRDeGNiaTh2SUdVdVp5NGdQSFJsYlhCc1lYUmxJSE5zYjNROVhDSjRlSGhjSWo0c0lEeGthWFlnYzJ4dmRDMXpZMjl3WlQxY0luaDRlRndpUGx4dVpuVnVZM1JwYjI0Z2NISnZZMlZ6YzFOc2IzUkRiMjUwWlc1MElDaGxiQ2tnZTF4dUlDQjJZWElnYzJ4dmRGTmpiM0JsTzF4dUlDQnBaaUFvWld3dWRHRm5JRDA5UFNBbmRHVnRjR3hoZEdVbktTQjdYRzRnSUNBZ2MyeHZkRk5qYjNCbElEMGdaMlYwUVc1a1VtVnRiM1psUVhSMGNpaGxiQ3dnSjNOamIzQmxKeWs3WEc0Z0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJR2xtSUNvdlhHNGdJQ0FnYVdZZ0tITnNiM1JUWTI5d1pTa2dlMXh1SUNBZ0lDQWdkMkZ5YmlReUtGeHVJQ0FnSUNBZ0lDQmNJblJvWlNCY1hGd2ljMk52Y0dWY1hGd2lJR0YwZEhKcFluVjBaU0JtYjNJZ2MyTnZjR1ZrSUhOc2IzUnpJR2hoZG1VZ1ltVmxiaUJrWlhCeVpXTmhkR1ZrSUdGdVpDQmNJaUFyWEc0Z0lDQWdJQ0FnSUZ3aWNtVndiR0ZqWldRZ1lua2dYRnhjSW5Oc2IzUXRjMk52Y0dWY1hGd2lJSE5wYm1ObElESXVOUzRnVkdobElHNWxkeUJjWEZ3aWMyeHZkQzF6WTI5d1pWeGNYQ0lnWVhSMGNtbGlkWFJsSUZ3aUlDdGNiaUFnSUNBZ0lDQWdYQ0pqWVc0Z1lXeHpieUJpWlNCMWMyVmtJRzl1SUhCc1lXbHVJR1ZzWlcxbGJuUnpJR2x1SUdGa1pHbDBhVzl1SUhSdklEeDBaVzF3YkdGMFpUNGdkRzhnWENJZ0sxeHVJQ0FnSUNBZ0lDQmNJbVJsYm05MFpTQnpZMjl3WldRZ2MyeHZkSE11WENJc1hHNGdJQ0FnSUNBZ0lHVnNMbkpoZDBGMGRISnpUV0Z3V3lkelkyOXdaU2RkTEZ4dUlDQWdJQ0FnSUNCMGNuVmxYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnSUNCbGJDNXpiRzkwVTJOdmNHVWdQU0J6Ykc5MFUyTnZjR1VnZkh3Z1oyVjBRVzVrVW1WdGIzWmxRWFIwY2lobGJDd2dKM05zYjNRdGMyTnZjR1VuS1R0Y2JpQWdmU0JsYkhObElHbG1JQ2dvYzJ4dmRGTmpiM0JsSUQwZ1oyVjBRVzVrVW1WdGIzWmxRWFIwY2lobGJDd2dKM05zYjNRdGMyTnZjR1VuS1NrcElIdGNiaUFnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ0lDQnBaaUFvWld3dVlYUjBjbk5OWVhCYkozWXRabTl5SjEwcElIdGNiaUFnSUNBZ0lIZGhjbTRrTWloY2JpQWdJQ0FnSUNBZ1hDSkJiV0pwWjNWdmRYTWdZMjl0WW1sdVpXUWdkWE5oWjJVZ2IyWWdjMnh2ZEMxelkyOXdaU0JoYm1RZ2RpMW1iM0lnYjI0Z1BGd2lJQ3NnS0dWc0xuUmhaeWtnS3lCY0lqNGdYQ0lnSzF4dUlDQWdJQ0FnSUNCY0lpaDJMV1p2Y2lCMFlXdGxjeUJvYVdkb1pYSWdjSEpwYjNKcGRIa3BMaUJWYzJVZ1lTQjNjbUZ3Y0dWeUlEeDBaVzF3YkdGMFpUNGdabTl5SUhSb1pTQmNJaUFyWEc0Z0lDQWdJQ0FnSUZ3aWMyTnZjR1ZrSUhOc2IzUWdkRzhnYldGclpTQnBkQ0JqYkdWaGNtVnlMbHdpTEZ4dUlDQWdJQ0FnSUNCbGJDNXlZWGRCZEhSeWMwMWhjRnNuYzJ4dmRDMXpZMjl3WlNkZExGeHVJQ0FnSUNBZ0lDQjBjblZsWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ0lDQmxiQzV6Ykc5MFUyTnZjR1VnUFNCemJHOTBVMk52Y0dVN1hHNGdJSDFjYmx4dUlDQXZMeUJ6Ykc5MFBWd2llSGg0WENKY2JpQWdkbUZ5SUhOc2IzUlVZWEpuWlhRZ1BTQm5aWFJDYVc1a2FXNW5RWFIwY2lobGJDd2dKM05zYjNRbktUdGNiaUFnYVdZZ0tITnNiM1JVWVhKblpYUXBJSHRjYmlBZ0lDQmxiQzV6Ykc5MFZHRnlaMlYwSUQwZ2MyeHZkRlJoY21kbGRDQTlQVDBnSjF3aVhDSW5JRDhnSjF3aVpHVm1ZWFZzZEZ3aUp5QTZJSE5zYjNSVVlYSm5aWFE3WEc0Z0lDQWdaV3d1YzJ4dmRGUmhjbWRsZEVSNWJtRnRhV01nUFNBaElTaGxiQzVoZEhSeWMwMWhjRnNuT25Oc2IzUW5YU0I4ZkNCbGJDNWhkSFJ5YzAxaGNGc25kaTFpYVc1a09uTnNiM1FuWFNrN1hHNGdJQ0FnTHk4Z2NISmxjMlZ5ZG1VZ2MyeHZkQ0JoY3lCaGJpQmhkSFJ5YVdKMWRHVWdabTl5SUc1aGRHbDJaU0J6YUdGa2IzY2dSRTlOSUdOdmJYQmhkRnh1SUNBZ0lDOHZJRzl1YkhrZ1ptOXlJRzV2YmkxelkyOXdaV1FnYzJ4dmRITXVYRzRnSUNBZ2FXWWdLR1ZzTG5SaFp5QWhQVDBnSjNSbGJYQnNZWFJsSnlBbUppQWhaV3d1YzJ4dmRGTmpiM0JsS1NCN1hHNGdJQ0FnSUNCaFpHUkJkSFJ5S0dWc0xDQW5jMnh2ZENjc0lITnNiM1JVWVhKblpYUXNJR2RsZEZKaGQwSnBibVJwYm1kQmRIUnlLR1ZzTENBbmMyeHZkQ2NwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QXlMallnZGkxemJHOTBJSE41Ym5SaGVGeHVJQ0I3WEc0Z0lDQWdhV1lnS0dWc0xuUmhaeUE5UFQwZ0ozUmxiWEJzWVhSbEp5a2dlMXh1SUNBZ0lDQWdMeThnZGkxemJHOTBJRzl1SUR4MFpXMXdiR0YwWlQ1Y2JpQWdJQ0FnSUhaaGNpQnpiRzkwUW1sdVpHbHVaeUE5SUdkbGRFRnVaRkpsYlc5MlpVRjBkSEpDZVZKbFoyVjRLR1ZzTENCemJHOTBVa1VwTzF4dUlDQWdJQ0FnYVdZZ0tITnNiM1JDYVc1a2FXNW5LU0I3WEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWld3dWMyeHZkRlJoY21kbGRDQjhmQ0JsYkM1emJHOTBVMk52Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkaGNtNGtNaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pWYm1WNGNHVmpkR1ZrSUcxcGVHVmtJSFZ6WVdkbElHOW1JR1JwWm1abGNtVnVkQ0J6Ykc5MElITjViblJoZUdWekxsd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR1ZzTG5CaGNtVnVkQ0FtSmlBaGJXRjVZbVZEYjIxd2IyNWxiblFvWld3dWNHRnlaVzUwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJGeWJpUXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJangwWlcxd2JHRjBaU0IyTFhOc2IzUStJR05oYmlCdmJteDVJR0Z3Y0dWaGNpQmhkQ0IwYUdVZ2NtOXZkQ0JzWlhabGJDQnBibk5wWkdVZ1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJblJvWlNCeVpXTmxhWFpwYm1jZ2RHaGxJR052YlhCdmJtVnVkRndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUhKbFppQTlJR2RsZEZOc2IzUk9ZVzFsS0hOc2IzUkNhVzVrYVc1bktUdGNiaUFnSUNBZ0lDQWdkbUZ5SUc1aGJXVWdQU0J5WldZdWJtRnRaVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUjVibUZ0YVdNZ1BTQnlaV1l1WkhsdVlXMXBZenRjYmlBZ0lDQWdJQ0FnWld3dWMyeHZkRlJoY21kbGRDQTlJRzVoYldVN1hHNGdJQ0FnSUNBZ0lHVnNMbk5zYjNSVVlYSm5aWFJFZVc1aGJXbGpJRDBnWkhsdVlXMXBZenRjYmlBZ0lDQWdJQ0FnWld3dWMyeHZkRk5qYjNCbElEMGdjMnh2ZEVKcGJtUnBibWN1ZG1Gc2RXVWdmSHdnWlcxd2RIbFRiRzkwVTJOdmNHVlViMnRsYmpzZ0x5OGdabTl5WTJVZ2FYUWdhVzUwYnlCaElITmpiM0JsWkNCemJHOTBJR1p2Y2lCd1pYSm1YRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklIWXRjMnh2ZENCdmJpQmpiMjF3YjI1bGJuUXNJR1JsYm05MFpYTWdaR1ZtWVhWc2RDQnpiRzkwWEc0Z0lDQWdJQ0IyWVhJZ2MyeHZkRUpwYm1ScGJtY2tNU0E5SUdkbGRFRnVaRkpsYlc5MlpVRjBkSEpDZVZKbFoyVjRLR1ZzTENCemJHOTBVa1VwTzF4dUlDQWdJQ0FnYVdZZ0tITnNiM1JDYVc1a2FXNW5KREVwSUh0Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaGJXRjVZbVZEYjIxd2IyNWxiblFvWld3cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCM1lYSnVKRElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRndpZGkxemJHOTBJR05oYmlCdmJteDVJR0psSUhWelpXUWdiMjRnWTI5dGNHOXVaVzUwY3lCdmNpQThkR1Z0Y0d4aGRHVStMbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ykc5MFFtbHVaR2x1WnlReFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pXd3VjMnh2ZEZOamIzQmxJSHg4SUdWc0xuTnNiM1JVWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZGhjbTRrTWloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKVmJtVjRjR1ZqZEdWa0lHMXBlR1ZrSUhWellXZGxJRzltSUdScFptWmxjbVZ1ZENCemJHOTBJSE41Ym5SaGVHVnpMbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dWc0xuTmpiM0JsWkZOc2IzUnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNZWEp1SkRJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVZHOGdZWFp2YVdRZ2MyTnZjR1VnWVcxaWFXZDFhWFI1TENCMGFHVWdaR1ZtWVhWc2RDQnpiRzkwSUhOb2IzVnNaQ0JoYkhOdklIVnpaU0JjSWlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVBIUmxiWEJzWVhSbFBpQnplVzUwWVhnZ2QyaGxiaUIwYUdWeVpTQmhjbVVnYjNSb1pYSWdibUZ0WldRZ2MyeHZkSE11WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOc2IzUkNhVzVrYVc1bkpERmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklHRmtaQ0IwYUdVZ1kyOXRjRzl1Wlc1MEozTWdZMmhwYkdSeVpXNGdkRzhnYVhSeklHUmxabUYxYkhRZ2MyeHZkRnh1SUNBZ0lDQWdJQ0IyWVhJZ2MyeHZkSE1nUFNCbGJDNXpZMjl3WldSVGJHOTBjeUI4ZkNBb1pXd3VjMk52Y0dWa1UyeHZkSE1nUFNCN2ZTazdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXWWtNU0E5SUdkbGRGTnNiM1JPWVcxbEtITnNiM1JDYVc1a2FXNW5KREVwTzF4dUlDQWdJQ0FnSUNCMllYSWdibUZ0WlNReElEMGdjbVZtSkRFdWJtRnRaVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUjVibUZ0YVdNa01TQTlJSEpsWmlReExtUjVibUZ0YVdNN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6Ykc5MFEyOXVkR0ZwYm1WeUlEMGdjMnh2ZEhOYmJtRnRaU1F4WFNBOUlHTnlaV0YwWlVGVFZFVnNaVzFsYm5Rb0ozUmxiWEJzWVhSbEp5d2dXMTBzSUdWc0tUdGNiaUFnSUNBZ0lDQWdjMnh2ZEVOdmJuUmhhVzVsY2k1emJHOTBWR0Z5WjJWMElEMGdibUZ0WlNReE8xeHVJQ0FnSUNBZ0lDQnpiRzkwUTI5dWRHRnBibVZ5TG5Oc2IzUlVZWEpuWlhSRWVXNWhiV2xqSUQwZ1pIbHVZVzFwWXlReE8xeHVJQ0FnSUNBZ0lDQnpiRzkwUTI5dWRHRnBibVZ5TG1Ob2FXeGtjbVZ1SUQwZ1pXd3VZMmhwYkdSeVpXNHVabWxzZEdWeUtHWjFibU4wYVc5dUlDaGpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqTG5Oc2IzUlRZMjl3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWXk1d1lYSmxiblFnUFNCemJHOTBRMjl1ZEdGcGJtVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVmNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnpiRzkwUTI5dWRHRnBibVZ5TG5Oc2IzUlRZMjl3WlNBOUlITnNiM1JDYVc1a2FXNW5KREV1ZG1Gc2RXVWdmSHdnWlcxd2RIbFRiRzkwVTJOdmNHVlViMnRsYmp0Y2JpQWdJQ0FnSUNBZ0x5OGdjbVZ0YjNabElHTm9hV3hrY21WdUlHRnpJSFJvWlhrZ1lYSmxJSEpsZEhWeWJtVmtJR1p5YjIwZ2MyTnZjR1ZrVTJ4dmRITWdibTkzWEc0Z0lDQWdJQ0FnSUdWc0xtTm9hV3hrY21WdUlEMGdXMTA3WEc0Z0lDQWdJQ0FnSUM4dklHMWhjbXNnWld3Z2JtOXVMWEJzWVdsdUlITnZJR1JoZEdFZ1oyVjBjeUJuWlc1bGNtRjBaV1JjYmlBZ0lDQWdJQ0FnWld3dWNHeGhhVzRnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFUyeHZkRTVoYldVZ0tHSnBibVJwYm1jcElIdGNiaUFnZG1GeUlHNWhiV1VnUFNCaWFXNWthVzVuTG01aGJXVXVjbVZ3YkdGalpTaHpiRzkwVWtVc0lDY25LVHRjYmlBZ2FXWWdLQ0Z1WVcxbEtTQjdYRzRnSUNBZ2FXWWdLR0pwYm1ScGJtY3VibUZ0WlZzd1hTQWhQVDBnSnlNbktTQjdYRzRnSUNBZ0lDQnVZVzFsSUQwZ0oyUmxabUYxYkhRbk8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IzWVhKdUpESW9YRzRnSUNBZ0lDQWdJRndpZGkxemJHOTBJSE5vYjNKMGFHRnVaQ0J6ZVc1MFlYZ2djbVZ4ZFdseVpYTWdZU0J6Ykc5MElHNWhiV1V1WENJc1hHNGdJQ0FnSUNBZ0lHSnBibVJwYm1kY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJrZVc1aGJXbGpRWEpuVWtVdWRHVnpkQ2h1WVcxbEtWeHVJQ0FnSUM4dklHUjVibUZ0YVdNZ1cyNWhiV1ZkWEc0Z0lDQWdQeUI3SUc1aGJXVTZJRzVoYldVdWMyeHBZMlVvTVN3Z0xURXBMQ0JrZVc1aGJXbGpPaUIwY25WbElIMWNiaUFnSUNBdkx5QnpkR0YwYVdNZ2JtRnRaVnh1SUNBZ0lEb2dleUJ1WVcxbE9pQW9YQ0pjWEZ3aVhDSWdLeUJ1WVcxbElDc2dYQ0pjWEZ3aVhDSXBMQ0JrZVc1aGJXbGpPaUJtWVd4elpTQjlYRzU5WEc1Y2JpOHZJR2hoYm1Sc1pTQThjMnh2ZEM4K0lHOTFkR3hsZEhOY2JtWjFibU4wYVc5dUlIQnliMk5sYzNOVGJHOTBUM1YwYkdWMElDaGxiQ2tnZTF4dUlDQnBaaUFvWld3dWRHRm5JRDA5UFNBbmMyeHZkQ2NwSUh0Y2JpQWdJQ0JsYkM1emJHOTBUbUZ0WlNBOUlHZGxkRUpwYm1ScGJtZEJkSFJ5S0dWc0xDQW5ibUZ0WlNjcE8xeHVJQ0FnSUdsbUlDaGxiQzVyWlhrcElIdGNiaUFnSUNBZ0lIZGhjbTRrTWloY2JpQWdJQ0FnSUNBZ1hDSmdhMlY1WUNCa2IyVnpJRzV2ZENCM2IzSnJJRzl1SUR4emJHOTBQaUJpWldOaGRYTmxJSE5zYjNSeklHRnlaU0JoWW5OMGNtRmpkQ0J2ZFhSc1pYUnpJRndpSUN0Y2JpQWdJQ0FnSUNBZ1hDSmhibVFnWTJGdUlIQnZjM05wWW14NUlHVjRjR0Z1WkNCcGJuUnZJRzExYkhScGNHeGxJR1ZzWlcxbGJuUnpMaUJjSWlBclhHNGdJQ0FnSUNBZ0lGd2lWWE5sSUhSb1pTQnJaWGtnYjI0Z1lTQjNjbUZ3Y0dsdVp5QmxiR1Z0Wlc1MElHbHVjM1JsWVdRdVhDSXNYRzRnSUNBZ0lDQWdJR2RsZEZKaGQwSnBibVJwYm1kQmRIUnlLR1ZzTENBbmEyVjVKeWxjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeWIyTmxjM05EYjIxd2IyNWxiblFnS0dWc0tTQjdYRzRnSUhaaGNpQmlhVzVrYVc1bk8xeHVJQ0JwWmlBb0tHSnBibVJwYm1jZ1BTQm5aWFJDYVc1a2FXNW5RWFIwY2lobGJDd2dKMmx6SnlrcEtTQjdYRzRnSUNBZ1pXd3VZMjl0Y0c5dVpXNTBJRDBnWW1sdVpHbHVaenRjYmlBZ2ZWeHVJQ0JwWmlBb1oyVjBRVzVrVW1WdGIzWmxRWFIwY2lobGJDd2dKMmx1YkdsdVpTMTBaVzF3YkdGMFpTY3BJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQmxiQzVwYm14cGJtVlVaVzF3YkdGMFpTQTlJSFJ5ZFdVN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdjSEp2WTJWemMwRjBkSEp6SUNobGJDa2dlMXh1SUNCMllYSWdiR2x6ZENBOUlHVnNMbUYwZEhKelRHbHpkRHRjYmlBZ2RtRnlJR2tzSUd3c0lHNWhiV1VzSUhKaGQwNWhiV1VzSUhaaGJIVmxMQ0J0YjJScFptbGxjbk1zSUhONWJtTkhaVzRzSUdselJIbHVZVzFwWXp0Y2JpQWdabTl5SUNocElEMGdNQ3dnYkNBOUlHeHBjM1F1YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnYm1GdFpTQTlJSEpoZDA1aGJXVWdQU0JzYVhOMFcybGRMbTVoYldVN1hHNGdJQ0FnZG1Gc2RXVWdQU0JzYVhOMFcybGRMblpoYkhWbE8xeHVJQ0FnSUdsbUlDaGthWEpTUlM1MFpYTjBLRzVoYldVcEtTQjdYRzRnSUNBZ0lDQXZMeUJ0WVhKcklHVnNaVzFsYm5RZ1lYTWdaSGx1WVcxcFkxeHVJQ0FnSUNBZ1pXd3VhR0Z6UW1sdVpHbHVaM01nUFNCMGNuVmxPMXh1SUNBZ0lDQWdMeThnYlc5a2FXWnBaWEp6WEc0Z0lDQWdJQ0J0YjJScFptbGxjbk1nUFNCd1lYSnpaVTF2WkdsbWFXVnljeWh1WVcxbExuSmxjR3hoWTJVb1pHbHlVa1VzSUNjbktTazdYRzRnSUNBZ0lDQXZMeUJ6ZFhCd2IzSjBJQzVtYjI4Z2MyaHZjblJvWVc1a0lITjViblJoZUNCbWIzSWdkR2hsSUM1d2NtOXdJRzF2WkdsbWFXVnlYRzRnSUNBZ0lDQnBaaUFvYlc5a2FXWnBaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lHNWhiV1VnUFNCdVlXMWxMbkpsY0d4aFkyVW9iVzlrYVdacFpYSlNSU3dnSnljcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR0pwYm1SU1JTNTBaWE4wS0c1aGJXVXBLU0I3SUM4dklIWXRZbWx1WkZ4dUlDQWdJQ0FnSUNCdVlXMWxJRDBnYm1GdFpTNXlaWEJzWVdObEtHSnBibVJTUlN3Z0p5Y3BPMXh1SUNBZ0lDQWdJQ0IyWVd4MVpTQTlJSEJoY25ObFJtbHNkR1Z5Y3loMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUdselJIbHVZVzFwWXlBOUlHUjVibUZ0YVdOQmNtZFNSUzUwWlhOMEtHNWhiV1VwTzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5FZVc1aGJXbGpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtRnRaU0E5SUc1aGJXVXVjMnhwWTJVb01Td2dMVEVwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaUzUwY21sdEtDa3ViR1Z1WjNSb0lEMDlQU0F3WEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRoY200a01paGNiaUFnSUNBZ0lDQWdJQ0FnSUNoY0lsUm9aU0IyWVd4MVpTQm1iM0lnWVNCMkxXSnBibVFnWlhod2NtVnpjMmx2YmlCallXNXViM1FnWW1VZ1pXMXdkSGt1SUVadmRXNWtJR2x1SUZ4Y1hDSjJMV0pwYm1RNlhDSWdLeUJ1WVcxbElDc2dYQ0pjWEZ3aVhDSXBYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYlc5a2FXWnBaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0cxdlpHbG1hV1Z5Y3k1d2NtOXdJQ1ltSUNGcGMwUjVibUZ0YVdNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVWdQU0JqWVcxbGJHbDZaU2h1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVZVzFsSUQwOVBTQW5hVzV1WlhKSWRHMXNKeWtnZXlCdVlXMWxJRDBnSjJsdWJtVnlTRlJOVENjN0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRzF2WkdsbWFXVnljeTVqWVcxbGJDQW1KaUFoYVhORWVXNWhiV2xqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbElEMGdZMkZ0Wld4cGVtVW9ibUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHRiMlJwWm1sbGNuTXVjM2x1WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNsdVkwZGxiaUE5SUdkbGJrRnpjMmxuYm0xbGJuUkRiMlJsS0haaGJIVmxMQ0JjSWlSbGRtVnVkRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFYTkVlVzVoYldsaktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmtaRWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0Z3aWRYQmtZWFJsT2x3aUlDc2dLR05oYldWc2FYcGxLRzVoYldVcEtTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2x1WTBkbGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRoY200a01peGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhWE4wVzJsZFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9lWEJvWlc1aGRHVW9ibUZ0WlNrZ0lUMDlJR05oYldWc2FYcGxLRzVoYldVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLRndpZFhCa1lYUmxPbHdpSUNzZ0tHaDVjR2hsYm1GMFpTaHVZVzFsS1NrcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2x1WTBkbGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGhjbTRrTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1JiYVYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJvWVc1a2JHVnlJSGN2SUdSNWJtRnRhV01nWlhabGJuUWdibUZ0WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdSSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaGNJbHhjWENKMWNHUmhkR1U2WEZ4Y0lpc29YQ0lnS3lCdVlXMWxJQ3NnWENJcFhDSXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE41Ym1OSFpXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiblZzYkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzWVhKdUpESXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR2x6ZEZ0cFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjblZsSUM4dklHUjVibUZ0YVdOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0NodGIyUnBabWxsY25NZ0ppWWdiVzlrYVdacFpYSnpMbkJ5YjNBcElIeDhJQ2hjYmlBZ0lDQWdJQ0FnSUNBaFpXd3VZMjl0Y0c5dVpXNTBJQ1ltSUhCc1lYUm1iM0p0VFhWemRGVnpaVkJ5YjNBb1pXd3VkR0ZuTENCbGJDNWhkSFJ5YzAxaGNDNTBlWEJsTENCdVlXMWxLVnh1SUNBZ0lDQWdJQ0FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZV1JrVUhKdmNDaGxiQ3dnYm1GdFpTd2dkbUZzZFdVc0lHeHBjM1JiYVYwc0lHbHpSSGx1WVcxcFl5azdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnWVdSa1FYUjBjaWhsYkN3Z2JtRnRaU3dnZG1Gc2RXVXNJR3hwYzNSYmFWMHNJR2x6UkhsdVlXMXBZeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2IyNVNSUzUwWlhOMEtHNWhiV1VwS1NCN0lDOHZJSFl0YjI1Y2JpQWdJQ0FnSUNBZ2JtRnRaU0E5SUc1aGJXVXVjbVZ3YkdGalpTaHZibEpGTENBbkp5azdYRzRnSUNBZ0lDQWdJR2x6UkhsdVlXMXBZeUE5SUdSNWJtRnRhV05CY21kU1JTNTBaWE4wS0c1aGJXVXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkVlVzVoYldsaktTQjdYRzRnSUNBZ0lDQWdJQ0FnYm1GdFpTQTlJRzVoYldVdWMyeHBZMlVvTVN3Z0xURXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdGa1pFaGhibVJzWlhJb1pXd3NJRzVoYldVc0lIWmhiSFZsTENCdGIyUnBabWxsY25Nc0lHWmhiSE5sTENCM1lYSnVKRElzSUd4cGMzUmJhVjBzSUdselJIbHVZVzFwWXlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZXlBdkx5QnViM0p0WVd3Z1pHbHlaV04wYVhabGMxeHVJQ0FnSUNBZ0lDQnVZVzFsSUQwZ2JtRnRaUzV5WlhCc1lXTmxLR1JwY2xKRkxDQW5KeWs3WEc0Z0lDQWdJQ0FnSUM4dklIQmhjbk5sSUdGeVoxeHVJQ0FnSUNBZ0lDQjJZWElnWVhKblRXRjBZMmdnUFNCdVlXMWxMbTFoZEdOb0tHRnlaMUpGS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z5WnlBOUlHRnlaMDFoZEdOb0lDWW1JR0Z5WjAxaGRHTm9XekZkTzF4dUlDQWdJQ0FnSUNCcGMwUjVibUZ0YVdNZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0Z5WnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzVoYldVZ1BTQnVZVzFsTG5Oc2FXTmxLREFzSUMwb1lYSm5MbXhsYm1kMGFDQXJJREVwS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWkhsdVlXMXBZMEZ5WjFKRkxuUmxjM1FvWVhKbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5JRDBnWVhKbkxuTnNhV05sS0RFc0lDMHhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpSSGx1WVcxcFl5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdGa1pFUnBjbVZqZEdsMlpTaGxiQ3dnYm1GdFpTd2djbUYzVG1GdFpTd2dkbUZzZFdVc0lHRnlaeXdnYVhORWVXNWhiV2xqTENCdGIyUnBabWxsY25Nc0lHeHBjM1JiYVYwcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpTQTlQVDBnSjIxdlpHVnNKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTm9aV05yUm05eVFXeHBZWE5OYjJSbGJDaGxiQ3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDOHZJR3hwZEdWeVlXd2dZWFIwY21saWRYUmxYRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTWdQU0J3WVhKelpWUmxlSFFvZG1Gc2RXVXNJR1JsYkdsdGFYUmxjbk1wTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkMkZ5YmlReUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpTQXJJRndpUFZ4Y1hDSmNJaUFySUhaaGJIVmxJQ3NnWENKY1hGd2lPaUJjSWlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FuU1c1MFpYSndiMnhoZEdsdmJpQnBibk5wWkdVZ1lYUjBjbWxpZFhSbGN5Qm9ZWE1nWW1WbGJpQnlaVzF2ZG1Wa0xpQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFZjMlVnZGkxaWFXNWtJRzl5SUhSb1pTQmpiMnh2YmlCemFHOXlkR2hoYm1RZ2FXNXpkR1ZoWkM0Z1JtOXlJR1Y0WVcxd2JHVXNJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdKMmx1YzNSbFlXUWdiMllnUEdScGRpQnBaRDFjSW50N0lIWmhiQ0I5ZlZ3aVBpd2dkWE5sSUR4a2FYWWdPbWxrUFZ3aWRtRnNYQ0krTGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYVhOMFcybGRYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1lXUmtRWFIwY2lobGJDd2dibUZ0WlN3Z1NsTlBUaTV6ZEhKcGJtZHBabmtvZG1Gc2RXVXBMQ0JzYVhOMFcybGRLVHRjYmlBZ0lDQWdJQzh2SUNNMk9EZzNJR1pwY21WbWIzZ2daRzlsYzI0bmRDQjFjR1JoZEdVZ2JYVjBaV1FnYzNSaGRHVWdhV1lnYzJWMElIWnBZU0JoZEhSeWFXSjFkR1ZjYmlBZ0lDQWdJQzh2SUdWMlpXNGdhVzF0WldScFlYUmxiSGtnWVdaMFpYSWdaV3hsYldWdWRDQmpjbVZoZEdsdmJseHVJQ0FnSUNBZ2FXWWdLQ0ZsYkM1amIyMXdiMjVsYm5RZ0ppWmNiaUFnSUNBZ0lDQWdJQ0J1WVcxbElEMDlQU0FuYlhWMFpXUW5JQ1ltWEc0Z0lDQWdJQ0FnSUNBZ2NHeGhkR1p2Y20xTmRYTjBWWE5sVUhKdmNDaGxiQzUwWVdjc0lHVnNMbUYwZEhKelRXRndMblI1Y0dVc0lHNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lHRmtaRkJ5YjNBb1pXd3NJRzVoYldVc0lDZDBjblZsSnl3Z2JHbHpkRnRwWFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTm9aV05yU1c1R2IzSWdLR1ZzS1NCN1hHNGdJSFpoY2lCd1lYSmxiblFnUFNCbGJEdGNiaUFnZDJocGJHVWdLSEJoY21WdWRDa2dlMXh1SUNBZ0lHbG1JQ2h3WVhKbGJuUXVabTl5SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lDQWdmVnh1SUNBZ0lIQmhjbVZ1ZENBOUlIQmhjbVZ1ZEM1d1lYSmxiblE3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1poYkhObFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhCaGNuTmxUVzlrYVdacFpYSnpJQ2h1WVcxbEtTQjdYRzRnSUhaaGNpQnRZWFJqYUNBOUlHNWhiV1V1YldGMFkyZ29iVzlrYVdacFpYSlNSU2s3WEc0Z0lHbG1JQ2h0WVhSamFDa2dlMXh1SUNBZ0lIWmhjaUJ5WlhRZ1BTQjdmVHRjYmlBZ0lDQnRZWFJqYUM1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNodEtTQjdJSEpsZEZ0dExuTnNhV05sS0RFcFhTQTlJSFJ5ZFdVN0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCeVpYUmNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJ0WVd0bFFYUjBjbk5OWVhBZ0tHRjBkSEp6S1NCN1hHNGdJSFpoY2lCdFlYQWdQU0I3ZlR0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0JoZEhSeWN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0J0WVhCYllYUjBjbk5iYVYwdWJtRnRaVjBnSmlZZ0lXbHpTVVVnSmlZZ0lXbHpSV1JuWlZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnZDJGeWJpUXlLQ2RrZFhCc2FXTmhkR1VnWVhSMGNtbGlkWFJsT2lBbklDc2dZWFIwY25OYmFWMHVibUZ0WlN3Z1lYUjBjbk5iYVYwcE8xeHVJQ0FnSUgxY2JpQWdJQ0J0WVhCYllYUjBjbk5iYVYwdWJtRnRaVjBnUFNCaGRIUnljMXRwWFM1MllXeDFaVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiV0Z3WEc1OVhHNWNiaTh2SUdadmNpQnpZM0pwY0hRZ0tHVXVaeTRnZEhsd1pUMWNJbmd2ZEdWdGNHeGhkR1ZjSWlrZ2IzSWdjM1I1YkdVc0lHUnZJRzV2ZENCa1pXTnZaR1VnWTI5dWRHVnVkRnh1Wm5WdVkzUnBiMjRnYVhOVVpYaDBWR0ZuSUNobGJDa2dlMXh1SUNCeVpYUjFjbTRnWld3dWRHRm5JRDA5UFNBbmMyTnlhWEIwSnlCOGZDQmxiQzUwWVdjZ1BUMDlJQ2R6ZEhsc1pTZGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTkdiM0ppYVdSa1pXNVVZV2NnS0dWc0tTQjdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdaV3d1ZEdGbklEMDlQU0FuYzNSNWJHVW5JSHg4WEc0Z0lDQWdLR1ZzTG5SaFp5QTlQVDBnSjNOamNtbHdkQ2NnSmlZZ0tGeHVJQ0FnSUNBZ0lXVnNMbUYwZEhKelRXRndMblI1Y0dVZ2ZIeGNiaUFnSUNBZ0lHVnNMbUYwZEhKelRXRndMblI1Y0dVZ1BUMDlJQ2QwWlhoMEwycGhkbUZ6WTNKcGNIUW5YRzRnSUNBZ0tTbGNiaUFnS1Z4dWZWeHVYRzUyWVhJZ2FXVk9VMEoxWnlBOUlDOWVlRzFzYm5NNlRsTmNYR1FyTHp0Y2JuWmhjaUJwWlU1VFVISmxabWw0SUQwZ0wxNU9VMXhjWkNzNkx6dGNibHh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYm1aMWJtTjBhVzl1SUdkMVlYSmtTVVZUVmtkQ2RXY2dLR0YwZEhKektTQjdYRzRnSUhaaGNpQnlaWE1nUFNCYlhUdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaGRIUnljeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUhaaGNpQmhkSFJ5SUQwZ1lYUjBjbk5iYVYwN1hHNGdJQ0FnYVdZZ0tDRnBaVTVUUW5WbkxuUmxjM1FvWVhSMGNpNXVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ1lYUjBjaTV1WVcxbElEMGdZWFIwY2k1dVlXMWxMbkpsY0d4aFkyVW9hV1ZPVTFCeVpXWnBlQ3dnSnljcE8xeHVJQ0FnSUNBZ2NtVnpMbkIxYzJnb1lYUjBjaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE5jYm4xY2JseHVablZ1WTNScGIyNGdZMmhsWTJ0R2IzSkJiR2xoYzAxdlpHVnNJQ2hsYkN3Z2RtRnNkV1VwSUh0Y2JpQWdkbUZ5SUY5bGJDQTlJR1ZzTzF4dUlDQjNhR2xzWlNBb1gyVnNLU0I3WEc0Z0lDQWdhV1lnS0Y5bGJDNW1iM0lnSmlZZ1gyVnNMbUZzYVdGeklEMDlQU0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdkMkZ5YmlReUtGeHVJQ0FnSUNBZ0lDQmNJanhjSWlBcklDaGxiQzUwWVdjcElDc2dYQ0lnZGkxdGIyUmxiRDFjWEZ3aVhDSWdLeUIyWVd4MVpTQXJJRndpWEZ4Y0lqNDZJRndpSUN0Y2JpQWdJQ0FnSUNBZ1hDSlpiM1VnWVhKbElHSnBibVJwYm1jZ2RpMXRiMlJsYkNCa2FYSmxZM1JzZVNCMGJ5QmhJSFl0Wm05eUlHbDBaWEpoZEdsdmJpQmhiR2xoY3k0Z1hDSWdLMXh1SUNBZ0lDQWdJQ0JjSWxSb2FYTWdkMmxzYkNCdWIzUWdZbVVnWVdKc1pTQjBieUJ0YjJScFpua2dkR2hsSUhZdFptOXlJSE52ZFhKalpTQmhjbkpoZVNCaVpXTmhkWE5sSUZ3aUlDdGNiaUFnSUNBZ0lDQWdYQ0ozY21sMGFXNW5JSFJ2SUhSb1pTQmhiR2xoY3lCcGN5QnNhV3RsSUcxdlpHbG1lV2x1WnlCaElHWjFibU4wYVc5dUlHeHZZMkZzSUhaaGNtbGhZbXhsTGlCY0lpQXJYRzRnSUNBZ0lDQWdJRndpUTI5dWMybGtaWElnZFhOcGJtY2dZVzRnWVhKeVlYa2diMllnYjJKcVpXTjBjeUJoYm1RZ2RYTmxJSFl0Ylc5a1pXd2diMjRnWVc0Z2IySnFaV04wSUhCeWIzQmxjblI1SUdsdWMzUmxZV1F1WENJc1hHNGdJQ0FnSUNBZ0lHVnNMbkpoZDBGMGRISnpUV0Z3V3lkMkxXMXZaR1ZzSjExY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQWdJRjlsYkNBOUlGOWxiQzV3WVhKbGJuUTdYRzRnSUgxY2JuMWNibHh1THlvZ0lDb3ZYRzVjYm1aMWJtTjBhVzl1SUhCeVpWUnlZVzV6Wm05eWJVNXZaR1VnS0dWc0xDQnZjSFJwYjI1ektTQjdYRzRnSUdsbUlDaGxiQzUwWVdjZ1BUMDlJQ2RwYm5CMWRDY3BJSHRjYmlBZ0lDQjJZWElnYldGd0lEMGdaV3d1WVhSMGNuTk5ZWEE3WEc0Z0lDQWdhV1lnS0NGdFlYQmJKM1l0Ylc5a1pXd25YU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSFI1Y0dWQ2FXNWthVzVuTzF4dUlDQWdJR2xtSUNodFlYQmJKenAwZVhCbEoxMGdmSHdnYldGd1d5ZDJMV0pwYm1RNmRIbHdaU2RkS1NCN1hHNGdJQ0FnSUNCMGVYQmxRbWx1WkdsdVp5QTlJR2RsZEVKcGJtUnBibWRCZEhSeUtHVnNMQ0FuZEhsd1pTY3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JVzFoY0M1MGVYQmxJQ1ltSUNGMGVYQmxRbWx1WkdsdVp5QW1KaUJ0WVhCYkozWXRZbWx1WkNkZEtTQjdYRzRnSUNBZ0lDQjBlWEJsUW1sdVpHbHVaeUE5SUZ3aUtGd2lJQ3NnS0cxaGNGc25kaTFpYVc1a0oxMHBJQ3NnWENJcExuUjVjR1ZjSWp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVUpwYm1ScGJtY3BJSHRjYmlBZ0lDQWdJSFpoY2lCcFprTnZibVJwZEdsdmJpQTlJR2RsZEVGdVpGSmxiVzkyWlVGMGRISW9aV3dzSUNkMkxXbG1KeXdnZEhKMVpTazdYRzRnSUNBZ0lDQjJZWElnYVdaRGIyNWthWFJwYjI1RmVIUnlZU0E5SUdsbVEyOXVaR2wwYVc5dUlEOGdLRndpSmlZb1hDSWdLeUJwWmtOdmJtUnBkR2x2YmlBcklGd2lLVndpS1NBNklGd2lYQ0k3WEc0Z0lDQWdJQ0IyWVhJZ2FHRnpSV3h6WlNBOUlHZGxkRUZ1WkZKbGJXOTJaVUYwZEhJb1pXd3NJQ2QyTFdWc2MyVW5MQ0IwY25WbEtTQWhQU0J1ZFd4c08xeHVJQ0FnSUNBZ2RtRnlJR1ZzYzJWSlprTnZibVJwZEdsdmJpQTlJR2RsZEVGdVpGSmxiVzkyWlVGMGRISW9aV3dzSUNkMkxXVnNjMlV0YVdZbkxDQjBjblZsS1R0Y2JpQWdJQ0FnSUM4dklERXVJR05vWldOclltOTRYRzRnSUNBZ0lDQjJZWElnWW5KaGJtTm9NQ0E5SUdOc2IyNWxRVk5VUld4bGJXVnVkQ2hsYkNrN1hHNGdJQ0FnSUNBdkx5QndjbTlqWlhOeklHWnZjaUJ2YmlCMGFHVWdiV0ZwYmlCdWIyUmxYRzRnSUNBZ0lDQndjbTlqWlhOelJtOXlLR0p5WVc1amFEQXBPMXh1SUNBZ0lDQWdZV1JrVW1GM1FYUjBjaWhpY21GdVkyZ3dMQ0FuZEhsd1pTY3NJQ2RqYUdWamEySnZlQ2NwTzF4dUlDQWdJQ0FnY0hKdlkyVnpjMFZzWlcxbGJuUW9ZbkpoYm1Ob01Dd2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQmljbUZ1WTJnd0xuQnliMk5sYzNObFpDQTlJSFJ5ZFdVN0lDOHZJSEJ5WlhabGJuUWdhWFFnWm5KdmJTQmtiM1ZpYkdVdGNISnZZMlZ6YzJWa1hHNGdJQ0FnSUNCaWNtRnVZMmd3TG1sbUlEMGdYQ0lvWENJZ0t5QjBlWEJsUW1sdVpHbHVaeUFySUZ3aUtUMDlQU2RqYUdWamEySnZlQ2RjSWlBcklHbG1RMjl1WkdsMGFXOXVSWGgwY21FN1hHNGdJQ0FnSUNCaFpHUkpaa052Ym1ScGRHbHZiaWhpY21GdVkyZ3dMQ0I3WEc0Z0lDQWdJQ0FnSUdWNGNEb2dZbkpoYm1Ob01DNXBaaXhjYmlBZ0lDQWdJQ0FnWW14dlkyczZJR0p5WVc1amFEQmNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdMeThnTWk0Z1lXUmtJSEpoWkdsdklHVnNjMlV0YVdZZ1kyOXVaR2wwYVc5dVhHNGdJQ0FnSUNCMllYSWdZbkpoYm1Ob01TQTlJR05zYjI1bFFWTlVSV3hsYldWdWRDaGxiQ2s3WEc0Z0lDQWdJQ0JuWlhSQmJtUlNaVzF2ZG1WQmRIUnlLR0p5WVc1amFERXNJQ2QyTFdadmNpY3NJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ1lXUmtVbUYzUVhSMGNpaGljbUZ1WTJneExDQW5kSGx3WlNjc0lDZHlZV1JwYnljcE8xeHVJQ0FnSUNBZ2NISnZZMlZ6YzBWc1pXMWxiblFvWW5KaGJtTm9NU3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0JoWkdSSlprTnZibVJwZEdsdmJpaGljbUZ1WTJnd0xDQjdYRzRnSUNBZ0lDQWdJR1Y0Y0RvZ1hDSW9YQ0lnS3lCMGVYQmxRbWx1WkdsdVp5QXJJRndpS1QwOVBTZHlZV1JwYnlkY0lpQXJJR2xtUTI5dVpHbDBhVzl1UlhoMGNtRXNYRzRnSUNBZ0lDQWdJR0pzYjJOck9pQmljbUZ1WTJneFhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDOHZJRE11SUc5MGFHVnlYRzRnSUNBZ0lDQjJZWElnWW5KaGJtTm9NaUE5SUdOc2IyNWxRVk5VUld4bGJXVnVkQ2hsYkNrN1hHNGdJQ0FnSUNCblpYUkJibVJTWlcxdmRtVkJkSFJ5S0dKeVlXNWphRElzSUNkMkxXWnZjaWNzSUhSeWRXVXBPMXh1SUNBZ0lDQWdZV1JrVW1GM1FYUjBjaWhpY21GdVkyZ3lMQ0FuT25SNWNHVW5MQ0IwZVhCbFFtbHVaR2x1WnlrN1hHNGdJQ0FnSUNCd2NtOWpaWE56Uld4bGJXVnVkQ2hpY21GdVkyZ3lMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJR0ZrWkVsbVEyOXVaR2wwYVc5dUtHSnlZVzVqYURBc0lIdGNiaUFnSUNBZ0lDQWdaWGh3T2lCcFprTnZibVJwZEdsdmJpeGNiaUFnSUNBZ0lDQWdZbXh2WTJzNklHSnlZVzVqYURKY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQnBaaUFvYUdGelJXeHpaU2tnZTF4dUlDQWdJQ0FnSUNCaWNtRnVZMmd3TG1Wc2MyVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGxiSE5sU1daRGIyNWthWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdZbkpoYm1Ob01DNWxiSE5sYVdZZ1BTQmxiSE5sU1daRGIyNWthWFJwYjI0N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCaWNtRnVZMmd3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOc2IyNWxRVk5VUld4bGJXVnVkQ0FvWld3cElIdGNiaUFnY21WMGRYSnVJR055WldGMFpVRlRWRVZzWlcxbGJuUW9aV3d1ZEdGbkxDQmxiQzVoZEhSeWMweHBjM1F1YzJ4cFkyVW9LU3dnWld3dWNHRnlaVzUwS1Z4dWZWeHVYRzUyWVhJZ2JXOWtaV3drTVNBOUlIdGNiaUFnY0hKbFZISmhibk5tYjNKdFRtOWtaVG9nY0hKbFZISmhibk5tYjNKdFRtOWtaVnh1ZlR0Y2JseHVkbUZ5SUcxdlpIVnNaWE1rTVNBOUlGdGNiaUFnYTJ4aGMzTWtNU3hjYmlBZ2MzUjViR1VrTVN4Y2JpQWdiVzlrWld3a01WeHVYVHRjYmx4dUx5b2dJQ292WEc1Y2JtWjFibU4wYVc5dUlIUmxlSFFnS0dWc0xDQmthWElwSUh0Y2JpQWdhV1lnS0dScGNpNTJZV3gxWlNrZ2UxeHVJQ0FnSUdGa1pGQnliM0FvWld3c0lDZDBaWGgwUTI5dWRHVnVkQ2NzSUNoY0lsOXpLRndpSUNzZ0tHUnBjaTUyWVd4MVpTa2dLeUJjSWlsY0lpa3NJR1JwY2lrN1hHNGdJSDFjYm4xY2JseHVMeW9nSUNvdlhHNWNibVoxYm1OMGFXOXVJR2gwYld3Z0tHVnNMQ0JrYVhJcElIdGNiaUFnYVdZZ0tHUnBjaTUyWVd4MVpTa2dlMXh1SUNBZ0lHRmtaRkJ5YjNBb1pXd3NJQ2RwYm01bGNraFVUVXduTENBb1hDSmZjeWhjSWlBcklDaGthWEl1ZG1Gc2RXVXBJQ3NnWENJcFhDSXBMQ0JrYVhJcE8xeHVJQ0I5WEc1OVhHNWNiblpoY2lCa2FYSmxZM1JwZG1WekpERWdQU0I3WEc0Z0lHMXZaR1ZzT2lCdGIyUmxiQ3hjYmlBZ2RHVjRkRG9nZEdWNGRDeGNiaUFnYUhSdGJEb2dhSFJ0YkZ4dWZUdGNibHh1THlvZ0lDb3ZYRzVjYm5aaGNpQmlZWE5sVDNCMGFXOXVjeUE5SUh0Y2JpQWdaWGh3WldOMFNGUk5URG9nZEhKMVpTeGNiaUFnYlc5a2RXeGxjem9nYlc5a2RXeGxjeVF4TEZ4dUlDQmthWEpsWTNScGRtVnpPaUJrYVhKbFkzUnBkbVZ6SkRFc1hHNGdJR2x6VUhKbFZHRm5PaUJwYzFCeVpWUmhaeXhjYmlBZ2FYTlZibUZ5ZVZSaFp6b2dhWE5WYm1GeWVWUmhaeXhjYmlBZ2JYVnpkRlZ6WlZCeWIzQTZJRzExYzNSVmMyVlFjbTl3TEZ4dUlDQmpZVzVDWlV4bFpuUlBjR1Z1VkdGbk9pQmpZVzVDWlV4bFpuUlBjR1Z1VkdGbkxGeHVJQ0JwYzFKbGMyVnlkbVZrVkdGbk9pQnBjMUpsYzJWeWRtVmtWR0ZuTEZ4dUlDQm5aWFJVWVdkT1lXMWxjM0JoWTJVNklHZGxkRlJoWjA1aGJXVnpjR0ZqWlN4Y2JpQWdjM1JoZEdsalMyVjVjem9nWjJWdVUzUmhkR2xqUzJWNWN5aHRiMlIxYkdWekpERXBYRzU5TzF4dVhHNHZLaUFnS2k5Y2JseHVkbUZ5SUdselUzUmhkR2xqUzJWNU8xeHVkbUZ5SUdselVHeGhkR1p2Y20xU1pYTmxjblpsWkZSaFp6dGNibHh1ZG1GeUlHZGxibE4wWVhScFkwdGxlWE5EWVdOb1pXUWdQU0JqWVdOb1pXUW9aMlZ1VTNSaGRHbGpTMlY1Y3lReEtUdGNibHh1THlvcVhHNGdLaUJIYjJGc0lHOW1JSFJvWlNCdmNIUnBiV2w2WlhJNklIZGhiR3NnZEdobElHZGxibVZ5WVhSbFpDQjBaVzF3YkdGMFpTQkJVMVFnZEhKbFpWeHVJQ29nWVc1a0lHUmxkR1ZqZENCemRXSXRkSEpsWlhNZ2RHaGhkQ0JoY21VZ2NIVnlaV3g1SUhOMFlYUnBZeXdnYVM1bExpQndZWEowY3lCdlpseHVJQ29nZEdobElFUlBUU0IwYUdGMElHNWxkbVZ5SUc1bFpXUnpJSFJ2SUdOb1lXNW5aUzVjYmlBcVhHNGdLaUJQYm1ObElIZGxJR1JsZEdWamRDQjBhR1Z6WlNCemRXSXRkSEpsWlhNc0lIZGxJR05oYmpwY2JpQXFYRzRnS2lBeExpQkliMmx6ZENCMGFHVnRJR2x1ZEc4Z1kyOXVjM1JoYm5SekxDQnpieUIwYUdGMElIZGxJRzV2SUd4dmJtZGxjaUJ1WldWa0lIUnZYRzRnS2lBZ0lDQmpjbVZoZEdVZ1puSmxjMmdnYm05a1pYTWdabTl5SUhSb1pXMGdiMjRnWldGamFDQnlaUzF5Wlc1a1pYSTdYRzRnS2lBeUxpQkRiMjF3YkdWMFpXeDVJSE5yYVhBZ2RHaGxiU0JwYmlCMGFHVWdjR0YwWTJocGJtY2djSEp2WTJWemN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2IzQjBhVzFwZW1VZ0tISnZiM1FzSUc5d2RHbHZibk1wSUh0Y2JpQWdhV1lnS0NGeWIyOTBLU0I3SUhKbGRIVnliaUI5WEc0Z0lHbHpVM1JoZEdsalMyVjVJRDBnWjJWdVUzUmhkR2xqUzJWNWMwTmhZMmhsWkNodmNIUnBiMjV6TG5OMFlYUnBZMHRsZVhNZ2ZId2dKeWNwTzF4dUlDQnBjMUJzWVhSbWIzSnRVbVZ6WlhKMlpXUlVZV2NnUFNCdmNIUnBiMjV6TG1selVtVnpaWEoyWldSVVlXY2dmSHdnYm04N1hHNGdJQzh2SUdacGNuTjBJSEJoYzNNNklHMWhjbXNnWVd4c0lHNXZiaTF6ZEdGMGFXTWdibTlrWlhNdVhHNGdJRzFoY210VGRHRjBhV01rTVNoeWIyOTBLVHRjYmlBZ0x5OGdjMlZqYjI1a0lIQmhjM002SUcxaGNtc2djM1JoZEdsaklISnZiM1J6TGx4dUlDQnRZWEpyVTNSaGRHbGpVbTl2ZEhNb2NtOXZkQ3dnWm1Gc2MyVXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aVzVUZEdGMGFXTkxaWGx6SkRFZ0tHdGxlWE1wSUh0Y2JpQWdjbVYwZFhKdUlHMWhhMlZOWVhBb1hHNGdJQ0FnSjNSNWNHVXNkR0ZuTEdGMGRISnpUR2x6ZEN4aGRIUnljMDFoY0N4d2JHRnBiaXh3WVhKbGJuUXNZMmhwYkdSeVpXNHNZWFIwY25Nc2MzUmhjblFzWlc1a0xISmhkMEYwZEhKelRXRndKeUFyWEc0Z0lDQWdLR3RsZVhNZ1B5QW5MQ2NnS3lCclpYbHpJRG9nSnljcFhHNGdJQ2xjYm4xY2JseHVablZ1WTNScGIyNGdiV0Z5YTFOMFlYUnBZeVF4SUNodWIyUmxLU0I3WEc0Z0lHNXZaR1V1YzNSaGRHbGpJRDBnYVhOVGRHRjBhV01vYm05a1pTazdYRzRnSUdsbUlDaHViMlJsTG5SNWNHVWdQVDA5SURFcElIdGNiaUFnSUNBdkx5QmtieUJ1YjNRZ2JXRnJaU0JqYjIxd2IyNWxiblFnYzJ4dmRDQmpiMjUwWlc1MElITjBZWFJwWXk0Z2RHaHBjeUJoZG05cFpITmNiaUFnSUNBdkx5QXhMaUJqYjIxd2IyNWxiblJ6SUc1dmRDQmhZbXhsSUhSdklHMTFkR0YwWlNCemJHOTBJRzV2WkdWelhHNGdJQ0FnTHk4Z01pNGdjM1JoZEdsaklITnNiM1FnWTI5dWRHVnVkQ0JtWVdsc2N5Qm1iM0lnYUc5MExYSmxiRzloWkdsdVoxeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDRnBjMUJzWVhSbWIzSnRVbVZ6WlhKMlpXUlVZV2NvYm05a1pTNTBZV2NwSUNZbVhHNGdJQ0FnSUNCdWIyUmxMblJoWnlBaFBUMGdKM05zYjNRbklDWW1YRzRnSUNBZ0lDQnViMlJsTG1GMGRISnpUV0Z3V3lkcGJteHBibVV0ZEdWdGNHeGhkR1VuWFNBOVBTQnVkV3hzWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCdWIyUmxMbU5vYVd4a2NtVnVMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHTm9hV3hrSUQwZ2JtOWtaUzVqYUdsc1pISmxibHRwWFR0Y2JpQWdJQ0FnSUcxaGNtdFRkR0YwYVdNa01TaGphR2xzWkNrN1hHNGdJQ0FnSUNCcFppQW9JV05vYVd4a0xuTjBZWFJwWXlrZ2UxeHVJQ0FnSUNBZ0lDQnViMlJsTG5OMFlYUnBZeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9ibTlrWlM1cFprTnZibVJwZEdsdmJuTXBJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2trTVNBOUlERXNJR3drTVNBOUlHNXZaR1V1YVdaRGIyNWthWFJwYjI1ekxteGxibWQwYURzZ2FTUXhJRHdnYkNReE95QnBKREVyS3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWW14dlkyc2dQU0J1YjJSbExtbG1RMjl1WkdsMGFXOXVjMXRwSkRGZExtSnNiMk5yTzF4dUlDQWdJQ0FnSUNCdFlYSnJVM1JoZEdsakpERW9ZbXh2WTJzcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdKc2IyTnJMbk4wWVhScFl5a2dlMXh1SUNBZ0lDQWdJQ0FnSUc1dlpHVXVjM1JoZEdsaklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdiV0Z5YTFOMFlYUnBZMUp2YjNSeklDaHViMlJsTENCcGMwbHVSbTl5S1NCN1hHNGdJR2xtSUNodWIyUmxMblI1Y0dVZ1BUMDlJREVwSUh0Y2JpQWdJQ0JwWmlBb2JtOWtaUzV6ZEdGMGFXTWdmSHdnYm05a1pTNXZibU5sS1NCN1hHNGdJQ0FnSUNCdWIyUmxMbk4wWVhScFkwbHVSbTl5SUQwZ2FYTkpia1p2Y2p0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnUm05eUlHRWdibTlrWlNCMGJ5QnhkV0ZzYVdaNUlHRnpJR0VnYzNSaGRHbGpJSEp2YjNRc0lHbDBJSE5vYjNWc1pDQm9ZWFpsSUdOb2FXeGtjbVZ1SUhSb1lYUmNiaUFnSUNBdkx5QmhjbVVnYm05MElHcDFjM1FnYzNSaGRHbGpJSFJsZUhRdUlFOTBhR1Z5ZDJselpTQjBhR1VnWTI5emRDQnZaaUJvYjJsemRHbHVaeUJ2ZFhRZ2QybHNiRnh1SUNBZ0lDOHZJRzkxZEhkbGFXZG9JSFJvWlNCaVpXNWxabWwwY3lCaGJtUWdhWFFuY3lCaVpYUjBaWElnYjJabUlIUnZJR3AxYzNRZ1lXeDNZWGx6SUhKbGJtUmxjaUJwZENCbWNtVnphQzVjYmlBZ0lDQnBaaUFvYm05a1pTNXpkR0YwYVdNZ0ppWWdibTlrWlM1amFHbHNaSEpsYmk1c1pXNW5kR2dnSmlZZ0lTaGNiaUFnSUNBZ0lHNXZaR1V1WTJocGJHUnlaVzR1YkdWdVozUm9JRDA5UFNBeElDWW1YRzRnSUNBZ0lDQnViMlJsTG1Ob2FXeGtjbVZ1V3pCZExuUjVjR1VnUFQwOUlETmNiaUFnSUNBcEtTQjdYRzRnSUNBZ0lDQnViMlJsTG5OMFlYUnBZMUp2YjNRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUc1dlpHVXVjM1JoZEdsalVtOXZkQ0E5SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9ibTlrWlM1amFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQnViMlJsTG1Ob2FXeGtjbVZ1TG14bGJtZDBhRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnRZWEpyVTNSaGRHbGpVbTl2ZEhNb2JtOWtaUzVqYUdsc1pISmxibHRwWFN3Z2FYTkpia1p2Y2lCOGZDQWhJVzV2WkdVdVptOXlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRzV2WkdVdWFXWkRiMjVrYVhScGIyNXpLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSkRFZ1BTQXhMQ0JzSkRFZ1BTQnViMlJsTG1sbVEyOXVaR2wwYVc5dWN5NXNaVzVuZEdnN0lHa2tNU0E4SUd3a01Uc2dhU1F4S3lzcElIdGNiaUFnSUNBZ0lDQWdiV0Z5YTFOMFlYUnBZMUp2YjNSektHNXZaR1V1YVdaRGIyNWthWFJwYjI1elcya2tNVjB1WW14dlkyc3NJR2x6U1c1R2IzSXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzFOMFlYUnBZeUFvYm05a1pTa2dlMXh1SUNCcFppQW9ibTlrWlM1MGVYQmxJRDA5UFNBeUtTQjdJQzh2SUdWNGNISmxjM05wYjI1Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdmVnh1SUNCcFppQW9ibTlrWlM1MGVYQmxJRDA5UFNBektTQjdJQzh2SUhSbGVIUmNiaUFnSUNCeVpYUjFjbTRnZEhKMVpWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlBaElTaHViMlJsTG5CeVpTQjhmQ0FvWEc0Z0lDQWdJVzV2WkdVdWFHRnpRbWx1WkdsdVozTWdKaVlnTHk4Z2JtOGdaSGx1WVcxcFl5QmlhVzVrYVc1bmMxeHVJQ0FnSUNGdWIyUmxMbWxtSUNZbUlDRnViMlJsTG1admNpQW1KaUF2THlCdWIzUWdkaTFwWmlCdmNpQjJMV1p2Y2lCdmNpQjJMV1ZzYzJWY2JpQWdJQ0FoYVhOQ2RXbHNkRWx1VkdGbktHNXZaR1V1ZEdGbktTQW1KaUF2THlCdWIzUWdZU0JpZFdsc2RDMXBibHh1SUNBZ0lHbHpVR3hoZEdadmNtMVNaWE5sY25abFpGUmhaeWh1YjJSbExuUmhaeWtnSmlZZ0x5OGdibTkwSUdFZ1kyOXRjRzl1Wlc1MFhHNGdJQ0FnSVdselJHbHlaV04wUTJocGJHUlBabFJsYlhCc1lYUmxSbTl5S0c1dlpHVXBJQ1ltWEc0Z0lDQWdUMkpxWldOMExtdGxlWE1vYm05a1pTa3VaWFpsY25rb2FYTlRkR0YwYVdOTFpYa3BYRzRnSUNrcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdselJHbHlaV04wUTJocGJHUlBabFJsYlhCc1lYUmxSbTl5SUNodWIyUmxLU0I3WEc0Z0lIZG9hV3hsSUNodWIyUmxMbkJoY21WdWRDa2dlMXh1SUNBZ0lHNXZaR1VnUFNCdWIyUmxMbkJoY21WdWREdGNiaUFnSUNCcFppQW9ibTlrWlM1MFlXY2dJVDA5SUNkMFpXMXdiR0YwWlNjcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9ibTlrWlM1bWIzSXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQm1ZV3h6WlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1ZG1GeUlHWnVSWGh3VWtVZ1BTQXZYaWhiWEZ4M0pGOWRLM3hjWENoYlhpbGRLajljWENrcFhGeHpLajArZkY1bWRXNWpkR2x2Ymx4Y2N5b29QenBiWEZ4M0pGMHJLVDljWEhNcVhGd29MenRjYm5aaGNpQm1ia2x1ZG05clpWSkZJRDBnTDF4Y0tGdGVLVjBxUDF4Y0tUc3FKQzg3WEc1MllYSWdjMmx0Y0d4bFVHRjBhRkpGSUQwZ0wxNWJRUzFhWVMxNlh5UmRXMXhjZHlSZEtpZy9PbHhjTGx0QkxWcGhMWHBmSkYxYlhGeDNKRjBxZkZ4Y1d5ZGJYaWRkS2o4blhYeGNYRnRjSWx0ZVhDSmRLajljSWwxOFhGeGJYRnhrSzExOFhGeGJXMEV0V21FdGVsOGtYVnRjWEhja1hTcGRLU29rTHp0Y2JseHVMeThnUzJWNVltOWhjbVJGZG1WdWRDNXJaWGxEYjJSbElHRnNhV0Z6WlhOY2JuWmhjaUJyWlhsRGIyUmxjeUE5SUh0Y2JpQWdaWE5qT2lBeU55eGNiaUFnZEdGaU9pQTVMRnh1SUNCbGJuUmxjam9nTVRNc1hHNGdJSE53WVdObE9pQXpNaXhjYmlBZ2RYQTZJRE00TEZ4dUlDQnNaV1owT2lBek55eGNiaUFnY21sbmFIUTZJRE01TEZ4dUlDQmtiM2R1T2lBME1DeGNiaUFnSjJSbGJHVjBaU2M2SUZzNExDQTBObDFjYm4wN1hHNWNiaTh2SUV0bGVXSnZZWEprUlhabGJuUXVhMlY1SUdGc2FXRnpaWE5jYm5aaGNpQnJaWGxPWVcxbGN5QTlJSHRjYmlBZ0x5OGdJemM0T0RBNklFbEZNVEVnWVc1a0lFVmtaMlVnZFhObElHQkZjMk5nSUdadmNpQkZjMk5oY0dVZ2EyVjVJRzVoYldVdVhHNGdJR1Z6WXpvZ1d5ZEZjMk1uTENBblJYTmpZWEJsSjEwc1hHNGdJSFJoWWpvZ0oxUmhZaWNzWEc0Z0lHVnVkR1Z5T2lBblJXNTBaWEluTEZ4dUlDQXZMeUFqT1RFeE1qb2dTVVV4TVNCMWMyVnpJR0JUY0dGalpXSmhjbUFnWm05eUlGTndZV05sSUd0bGVTQnVZVzFsTGx4dUlDQnpjR0ZqWlRvZ1d5Y2dKeXdnSjFOd1lXTmxZbUZ5SjEwc1hHNGdJQzh2SUNNM09EQTJPaUJKUlRFeElIVnpaWE1nYTJWNUlHNWhiV1Z6SUhkcGRHaHZkWFFnWUVGeWNtOTNZQ0J3Y21WbWFYZ2dabTl5SUdGeWNtOTNJR3RsZVhNdVhHNGdJSFZ3T2lCYkoxVndKeXdnSjBGeWNtOTNWWEFuWFN4Y2JpQWdiR1ZtZERvZ1d5ZE1aV1owSnl3Z0owRnljbTkzVEdWbWRDZGRMRnh1SUNCeWFXZG9kRG9nV3lkU2FXZG9kQ2NzSUNkQmNuSnZkMUpwWjJoMEoxMHNYRzRnSUdSdmQyNDZJRnNuUkc5M2JpY3NJQ2RCY25KdmQwUnZkMjRuWFN4Y2JpQWdMeThnSXpreE1USTZJRWxGTVRFZ2RYTmxjeUJnUkdWc1lDQm1iM0lnUkdWc1pYUmxJR3RsZVNCdVlXMWxMbHh1SUNBblpHVnNaWFJsSnpvZ1d5ZENZV05yYzNCaFkyVW5MQ0FuUkdWc1pYUmxKeXdnSjBSbGJDZGRYRzU5TzF4dVhHNHZMeUFqTkRnMk9Eb2diVzlrYVdacFpYSnpJSFJvWVhRZ2NISmxkbVZ1ZENCMGFHVWdaWGhsWTNWMGFXOXVJRzltSUhSb1pTQnNhWE4wWlc1bGNseHVMeThnYm1WbFpDQjBieUJsZUhCc2FXTnBkR3g1SUhKbGRIVnliaUJ1ZFd4c0lITnZJSFJvWVhRZ2QyVWdZMkZ1SUdSbGRHVnliV2x1WlNCM2FHVjBhR1Z5SUhSdklISmxiVzkyWlZ4dUx5OGdkR2hsSUd4cGMzUmxibVZ5SUdadmNpQXViMjVqWlZ4dWRtRnlJR2RsYmtkMVlYSmtJRDBnWm5WdVkzUnBiMjRnS0dOdmJtUnBkR2x2YmlrZ2V5QnlaWFIxY200Z0tGd2lhV1lvWENJZ0t5QmpiMjVrYVhScGIyNGdLeUJjSWlseVpYUjFjbTRnYm5Wc2JEdGNJaWs3SUgwN1hHNWNiblpoY2lCdGIyUnBabWxsY2tOdlpHVWdQU0I3WEc0Z0lITjBiM0E2SUNja1pYWmxiblF1YzNSdmNGQnliM0JoWjJGMGFXOXVLQ2s3Snl4Y2JpQWdjSEpsZG1WdWREb2dKeVJsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE95Y3NYRzRnSUhObGJHWTZJR2RsYmtkMVlYSmtLRndpSkdWMlpXNTBMblJoY21kbGRDQWhQVDBnSkdWMlpXNTBMbU4xY25KbGJuUlVZWEpuWlhSY0lpa3NYRzRnSUdOMGNtdzZJR2RsYmtkMVlYSmtLRndpSVNSbGRtVnVkQzVqZEhKc1MyVjVYQ0lwTEZ4dUlDQnphR2xtZERvZ1oyVnVSM1ZoY21Rb1hDSWhKR1YyWlc1MExuTm9hV1owUzJWNVhDSXBMRnh1SUNCaGJIUTZJR2RsYmtkMVlYSmtLRndpSVNSbGRtVnVkQzVoYkhSTFpYbGNJaWtzWEc0Z0lHMWxkR0U2SUdkbGJrZDFZWEprS0Z3aUlTUmxkbVZ1ZEM1dFpYUmhTMlY1WENJcExGeHVJQ0JzWldaME9pQm5aVzVIZFdGeVpDaGNJaWRpZFhSMGIyNG5JR2x1SUNSbGRtVnVkQ0FtSmlBa1pYWmxiblF1WW5WMGRHOXVJQ0U5UFNBd1hDSXBMRnh1SUNCdGFXUmtiR1U2SUdkbGJrZDFZWEprS0Z3aUoySjFkSFJ2YmljZ2FXNGdKR1YyWlc1MElDWW1JQ1JsZG1WdWRDNWlkWFIwYjI0Z0lUMDlJREZjSWlrc1hHNGdJSEpwWjJoME9pQm5aVzVIZFdGeVpDaGNJaWRpZFhSMGIyNG5JR2x1SUNSbGRtVnVkQ0FtSmlBa1pYWmxiblF1WW5WMGRHOXVJQ0U5UFNBeVhDSXBYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQm5aVzVJWVc1a2JHVnljeUFvWEc0Z0lHVjJaVzUwY3l4Y2JpQWdhWE5PWVhScGRtVmNiaWtnZTF4dUlDQjJZWElnY0hKbFptbDRJRDBnYVhOT1lYUnBkbVVnUHlBbmJtRjBhWFpsVDI0Nkp5QTZJQ2R2Ympvbk8xeHVJQ0IyWVhJZ2MzUmhkR2xqU0dGdVpHeGxjbk1nUFNCY0lsd2lPMXh1SUNCMllYSWdaSGx1WVcxcFkwaGhibVJzWlhKeklEMGdYQ0pjSWp0Y2JpQWdabTl5SUNoMllYSWdibUZ0WlNCcGJpQmxkbVZ1ZEhNcElIdGNiaUFnSUNCMllYSWdhR0Z1Wkd4bGNrTnZaR1VnUFNCblpXNUlZVzVrYkdWeUtHVjJaVzUwYzF0dVlXMWxYU2s3WEc0Z0lDQWdhV1lnS0dWMlpXNTBjMXR1WVcxbFhTQW1KaUJsZG1WdWRITmJibUZ0WlYwdVpIbHVZVzFwWXlrZ2UxeHVJQ0FnSUNBZ1pIbHVZVzFwWTBoaGJtUnNaWEp6SUNzOUlHNWhiV1VnS3lCY0lpeGNJaUFySUdoaGJtUnNaWEpEYjJSbElDc2dYQ0lzWENJN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4wWVhScFkwaGhibVJzWlhKeklDczlJRndpWEZ4Y0lsd2lJQ3NnYm1GdFpTQXJJRndpWEZ4Y0lqcGNJaUFySUdoaGJtUnNaWEpEYjJSbElDc2dYQ0lzWENJN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhOMFlYUnBZMGhoYm1Sc1pYSnpJRDBnWENKN1hDSWdLeUFvYzNSaGRHbGpTR0Z1Wkd4bGNuTXVjMnhwWTJVb01Dd2dMVEVwS1NBcklGd2lmVndpTzF4dUlDQnBaaUFvWkhsdVlXMXBZMGhoYm1Sc1pYSnpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBcklGd2lYMlFvWENJZ0t5QnpkR0YwYVdOSVlXNWtiR1Z5Y3lBcklGd2lMRnRjSWlBcklDaGtlVzVoYldsalNHRnVaR3hsY25NdWMyeHBZMlVvTUN3Z0xURXBLU0FySUZ3aVhTbGNJbHh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQndjbVZtYVhnZ0t5QnpkR0YwYVdOSVlXNWtiR1Z5YzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxia2hoYm1Sc1pYSWdLR2hoYm1Sc1pYSXBJSHRjYmlBZ2FXWWdLQ0ZvWVc1a2JHVnlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDZG1kVzVqZEdsdmJpZ3BlMzBuWEc0Z0lIMWNibHh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNob1lXNWtiR1Z5S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvWENKYlhDSWdLeUFvYUdGdVpHeGxjaTV0WVhBb1puVnVZM1JwYjI0Z0tHaGhibVJzWlhJcElIc2djbVYwZFhKdUlHZGxia2hoYm1Sc1pYSW9hR0Z1Wkd4bGNpazdJSDBwTG1wdmFXNG9KeXduS1NrZ0t5QmNJbDFjSWlsY2JpQWdmVnh1WEc0Z0lIWmhjaUJwYzAxbGRHaHZaRkJoZEdnZ1BTQnphVzF3YkdWUVlYUm9Va1V1ZEdWemRDaG9ZVzVrYkdWeUxuWmhiSFZsS1R0Y2JpQWdkbUZ5SUdselJuVnVZM1JwYjI1RmVIQnlaWE56YVc5dUlEMGdabTVGZUhCU1JTNTBaWE4wS0doaGJtUnNaWEl1ZG1Gc2RXVXBPMXh1SUNCMllYSWdhWE5HZFc1amRHbHZia2x1ZG05allYUnBiMjRnUFNCemFXMXdiR1ZRWVhSb1VrVXVkR1Z6ZENob1lXNWtiR1Z5TG5aaGJIVmxMbkpsY0d4aFkyVW9abTVKYm5admEyVlNSU3dnSnljcEtUdGNibHh1SUNCcFppQW9JV2hoYm1Sc1pYSXViVzlrYVdacFpYSnpLU0I3WEc0Z0lDQWdhV1lnS0dselRXVjBhRzlrVUdGMGFDQjhmQ0JwYzBaMWJtTjBhVzl1Ulhod2NtVnpjMmx2YmlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdoaGJtUnNaWEl1ZG1Gc2RXVmNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJQ2hjSW1aMWJtTjBhVzl1S0NSbGRtVnVkQ2w3WENJZ0t5QW9hWE5HZFc1amRHbHZia2x1ZG05allYUnBiMjRnUHlBb1hDSnlaWFIxY200Z1hDSWdLeUFvYUdGdVpHeGxjaTUyWVd4MVpTa3BJRG9nYUdGdVpHeGxjaTUyWVd4MVpTa2dLeUJjSW4xY0lpa2dMeThnYVc1c2FXNWxJSE4wWVhSbGJXVnVkRnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFpoY2lCamIyUmxJRDBnSnljN1hHNGdJQ0FnZG1GeUlHZGxiazF2WkdsbWFXVnlRMjlrWlNBOUlDY25PMXh1SUNBZ0lIWmhjaUJyWlhseklEMGdXMTA3WEc0Z0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHaGhibVJzWlhJdWJXOWthV1pwWlhKektTQjdYRzRnSUNBZ0lDQnBaaUFvYlc5a2FXWnBaWEpEYjJSbFcydGxlVjBwSUh0Y2JpQWdJQ0FnSUNBZ1oyVnVUVzlrYVdacFpYSkRiMlJsSUNzOUlHMXZaR2xtYVdWeVEyOWtaVnRyWlhsZE8xeHVJQ0FnSUNBZ0lDQXZMeUJzWldaMEwzSnBaMmgwWEc0Z0lDQWdJQ0FnSUdsbUlDaHJaWGxEYjJSbGMxdHJaWGxkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhMlY1Y3k1d2RYTm9LR3RsZVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9hMlY1SUQwOVBTQW5aWGhoWTNRbktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdGIyUnBabWxsY25NZ1BTQW9hR0Z1Wkd4bGNpNXRiMlJwWm1sbGNuTXBPMXh1SUNBZ0lDQWdJQ0JuWlc1TmIyUnBabWxsY2tOdlpHVWdLejBnWjJWdVIzVmhjbVFvWEc0Z0lDQWdJQ0FnSUNBZ1d5ZGpkSEpzSnl3Z0ozTm9hV1owSnl3Z0oyRnNkQ2NzSUNkdFpYUmhKMTFjYmlBZ0lDQWdJQ0FnSUNBZ0lDNW1hV3gwWlhJb1puVnVZM1JwYjI0Z0tHdGxlVTF2WkdsbWFXVnlLU0I3SUhKbGRIVnliaUFoYlc5a2FXWnBaWEp6VzJ0bGVVMXZaR2xtYVdWeVhUc2dmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXRZWEFvWm5WdVkzUnBiMjRnS0d0bGVVMXZaR2xtYVdWeUtTQjdJSEpsZEhWeWJpQW9YQ0lrWlhabGJuUXVYQ0lnS3lCclpYbE5iMlJwWm1sbGNpQXJJRndpUzJWNVhDSXBPeUI5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbXB2YVc0b0ozeDhKeWxjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUd0bGVYTXVjSFZ6YUNoclpYa3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9hMlY1Y3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUdOdlpHVWdLejBnWjJWdVMyVjVSbWxzZEdWeUtHdGxlWE1wTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnYlc5a2FXWnBaWEp6SUd4cGEyVWdjSEpsZG1WdWRDQmhibVFnYzNSdmNDQm5aWFFnWlhobFkzVjBaV1FnWVdaMFpYSWdhMlY1SUdacGJIUmxjbWx1WjF4dUlDQWdJR2xtSUNoblpXNU5iMlJwWm1sbGNrTnZaR1VwSUh0Y2JpQWdJQ0FnSUdOdlpHVWdLejBnWjJWdVRXOWthV1pwWlhKRGIyUmxPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdhR0Z1Wkd4bGNrTnZaR1VnUFNCcGMwMWxkR2h2WkZCaGRHaGNiaUFnSUNBZ0lEOGdLRndpY21WMGRYSnVJRndpSUNzZ0tHaGhibVJzWlhJdWRtRnNkV1VwSUNzZ1hDSW9KR1YyWlc1MEtWd2lLVnh1SUNBZ0lDQWdPaUJwYzBaMWJtTjBhVzl1Ulhod2NtVnpjMmx2Ymx4dUlDQWdJQ0FnSUNBL0lDaGNJbkpsZEhWeWJpQW9YQ0lnS3lBb2FHRnVaR3hsY2k1MllXeDFaU2tnS3lCY0lpa29KR1YyWlc1MEtWd2lLVnh1SUNBZ0lDQWdJQ0E2SUdselJuVnVZM1JwYjI1SmJuWnZZMkYwYVc5dVhHNGdJQ0FnSUNBZ0lDQWdQeUFvWENKeVpYUjFjbTRnWENJZ0t5QW9hR0Z1Wkd4bGNpNTJZV3gxWlNrcFhHNGdJQ0FnSUNBZ0lDQWdPaUJvWVc1a2JHVnlMblpoYkhWbE8xeHVJQ0FnSUhKbGRIVnliaUFvWENKbWRXNWpkR2x2Ymlna1pYWmxiblFwZTF3aUlDc2dZMjlrWlNBcklHaGhibVJzWlhKRGIyUmxJQ3NnWENKOVhDSXBYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWdVMyVjVSbWxzZEdWeUlDaHJaWGx6S1NCN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ0x5OGdiV0ZyWlNCemRYSmxJSFJvWlNCclpYa2dabWxzZEdWeWN5QnZibXg1SUdGd2NHeDVJSFJ2SUV0bGVXSnZZWEprUlhabGJuUnpYRzRnSUNBZ0x5OGdJemswTkRFNklHTmhiaWQwSUhWelpTQW5hMlY1UTI5a1pTY2dhVzRnSkdWMlpXNTBJR0psWTJGMWMyVWdRMmh5YjIxbElHRjFkRzltYVd4c0lHWnBjbVZ6SUdaaGEyVmNiaUFnSUNBdkx5QnJaWGtnWlhabGJuUnpJSFJvWVhRZ1pHOGdibTkwSUdoaGRtVWdhMlY1UTI5a1pTQndjbTl3WlhKMGVTNHVMbHh1SUNBZ0lGd2lhV1lvSVNSbGRtVnVkQzUwZVhCbExtbHVaR1Y0VDJZb0oydGxlU2NwSmlaY0lpQXJYRzRnSUNBZ0tHdGxlWE11YldGd0tHZGxia1pwYkhSbGNrTnZaR1VwTG1wdmFXNG9KeVltSnlrcElDc2dYQ0lwY21WMGRYSnVJRzUxYkd3N1hDSmNiaUFnS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlc1R2FXeDBaWEpEYjJSbElDaHJaWGtwSUh0Y2JpQWdkbUZ5SUd0bGVWWmhiQ0E5SUhCaGNuTmxTVzUwS0d0bGVTd2dNVEFwTzF4dUlDQnBaaUFvYTJWNVZtRnNLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDaGNJaVJsZG1WdWRDNXJaWGxEYjJSbElUMDlYQ0lnS3lCclpYbFdZV3dwWEc0Z0lIMWNiaUFnZG1GeUlHdGxlVU52WkdVZ1BTQnJaWGxEYjJSbGMxdHJaWGxkTzF4dUlDQjJZWElnYTJWNVRtRnRaU0E5SUd0bGVVNWhiV1Z6VzJ0bGVWMDdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdYQ0pmYXlna1pYWmxiblF1YTJWNVEyOWtaU3hjSWlBclhHNGdJQ0FnS0VwVFQwNHVjM1J5YVc1bmFXWjVLR3RsZVNrcElDc2dYQ0lzWENJZ0sxeHVJQ0FnSUNoS1UwOU9Mbk4wY21sdVoybG1lU2hyWlhsRGIyUmxLU2tnS3lCY0lpeGNJaUFyWEc0Z0lDQWdYQ0lrWlhabGJuUXVhMlY1TEZ3aUlDdGNiaUFnSUNCY0lsd2lJQ3NnS0VwVFQwNHVjM1J5YVc1bmFXWjVLR3RsZVU1aGJXVXBLU0FyWEc0Z0lDQWdYQ0lwWENKY2JpQWdLVnh1ZlZ4dVhHNHZLaUFnS2k5Y2JseHVablZ1WTNScGIyNGdiMjRnS0dWc0xDQmthWElwSUh0Y2JpQWdhV1lnS0dScGNpNXRiMlJwWm1sbGNuTXBJSHRjYmlBZ0lDQjNZWEp1S0Z3aWRpMXZiaUIzYVhSb2IzVjBJR0Z5WjNWdFpXNTBJR1J2WlhNZ2JtOTBJSE4xY0hCdmNuUWdiVzlrYVdacFpYSnpMbHdpS1R0Y2JpQWdmVnh1SUNCbGJDNTNjbUZ3VEdsemRHVnVaWEp6SUQwZ1puVnVZM1JwYjI0Z0tHTnZaR1VwSUhzZ2NtVjBkWEp1SUNoY0lsOW5LRndpSUNzZ1kyOWtaU0FySUZ3aUxGd2lJQ3NnS0dScGNpNTJZV3gxWlNrZ0t5QmNJaWxjSWlrN0lIMDdYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNW1kVzVqZEdsdmJpQmlhVzVrSkRFZ0tHVnNMQ0JrYVhJcElIdGNiaUFnWld3dWQzSmhjRVJoZEdFZ1BTQm1kVzVqZEdsdmJpQW9ZMjlrWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvWENKZllpaGNJaUFySUdOdlpHVWdLeUJjSWl3blhDSWdLeUFvWld3dWRHRm5LU0FySUZ3aUp5eGNJaUFySUNoa2FYSXVkbUZzZFdVcElDc2dYQ0lzWENJZ0t5QW9aR2x5TG0xdlpHbG1hV1Z5Y3lBbUppQmthWEl1Ylc5a2FXWnBaWEp6TG5CeWIzQWdQeUFuZEhKMVpTY2dPaUFuWm1Gc2MyVW5LU0FySUNoa2FYSXViVzlrYVdacFpYSnpJQ1ltSUdScGNpNXRiMlJwWm1sbGNuTXVjM2x1WXlBL0lDY3NkSEoxWlNjZ09pQW5KeWtnS3lCY0lpbGNJaWxjYmlBZ2ZUdGNibjFjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJpWVhObFJHbHlaV04wYVhabGN5QTlJSHRjYmlBZ2IyNDZJRzl1TEZ4dUlDQmlhVzVrT2lCaWFXNWtKREVzWEc0Z0lHTnNiMkZyT2lCdWIyOXdYRzU5TzF4dVhHNHZLaUFnS2k5Y2JseHVYRzVjYmx4dVhHNTJZWElnUTI5a1pXZGxibE4wWVhSbElEMGdablZ1WTNScGIyNGdRMjlrWldkbGJsTjBZWFJsSUNodmNIUnBiMjV6S1NCN1hHNGdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NN1hHNGdJSFJvYVhNdWQyRnliaUE5SUc5d2RHbHZibk11ZDJGeWJpQjhmQ0JpWVhObFYyRnlianRjYmlBZ2RHaHBjeTUwY21GdWMyWnZjbTF6SUQwZ2NHeDFZMnROYjJSMWJHVkdkVzVqZEdsdmJpaHZjSFJwYjI1ekxtMXZaSFZzWlhNc0lDZDBjbUZ1YzJadmNtMURiMlJsSnlrN1hHNGdJSFJvYVhNdVpHRjBZVWRsYmtadWN5QTlJSEJzZFdOclRXOWtkV3hsUm5WdVkzUnBiMjRvYjNCMGFXOXVjeTV0YjJSMWJHVnpMQ0FuWjJWdVJHRjBZU2NwTzF4dUlDQjBhR2x6TG1ScGNtVmpkR2wyWlhNZ1BTQmxlSFJsYm1Rb1pYaDBaVzVrS0h0OUxDQmlZWE5sUkdseVpXTjBhWFpsY3lrc0lHOXdkR2x2Ym5NdVpHbHlaV04wYVhabGN5azdYRzRnSUhaaGNpQnBjMUpsYzJWeWRtVmtWR0ZuSUQwZ2IzQjBhVzl1Y3k1cGMxSmxjMlZ5ZG1Wa1ZHRm5JSHg4SUc1dk8xeHVJQ0IwYUdsekxtMWhlV0psUTI5dGNHOXVaVzUwSUQwZ1puVnVZM1JwYjI0Z0tHVnNLU0I3SUhKbGRIVnliaUFoSVdWc0xtTnZiWEJ2Ym1WdWRDQjhmQ0FoYVhOU1pYTmxjblpsWkZSaFp5aGxiQzUwWVdjcE95QjlPMXh1SUNCMGFHbHpMbTl1WTJWSlpDQTlJREE3WEc0Z0lIUm9hWE11YzNSaGRHbGpVbVZ1WkdWeVJtNXpJRDBnVzEwN1hHNGdJSFJvYVhNdWNISmxJRDBnWm1Gc2MyVTdYRzU5TzF4dVhHNWNibHh1Wm5WdVkzUnBiMjRnWjJWdVpYSmhkR1VnS0Z4dUlDQmhjM1FzWEc0Z0lHOXdkR2x2Ym5OY2Jpa2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQnVaWGNnUTI5a1pXZGxibE4wWVhSbEtHOXdkR2x2Ym5NcE8xeHVJQ0IyWVhJZ1kyOWtaU0E5SUdGemRDQS9JR2RsYmtWc1pXMWxiblFvWVhOMExDQnpkR0YwWlNrZ09pQW5YMk1vWENKa2FYWmNJaWtuTzF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUhKbGJtUmxjam9nS0Z3aWQybDBhQ2gwYUdsektYdHlaWFIxY200Z1hDSWdLeUJqYjJSbElDc2dYQ0o5WENJcExGeHVJQ0FnSUhOMFlYUnBZMUpsYm1SbGNrWnVjem9nYzNSaGRHVXVjM1JoZEdsalVtVnVaR1Z5Um01elhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaMlZ1Uld4bGJXVnVkQ0FvWld3c0lITjBZWFJsS1NCN1hHNGdJR2xtSUNobGJDNXdZWEpsYm5RcElIdGNiaUFnSUNCbGJDNXdjbVVnUFNCbGJDNXdjbVVnZkh3Z1pXd3VjR0Z5Wlc1MExuQnlaVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaGxiQzV6ZEdGMGFXTlNiMjkwSUNZbUlDRmxiQzV6ZEdGMGFXTlFjbTlqWlhOelpXUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1oyVnVVM1JoZEdsaktHVnNMQ0J6ZEdGMFpTbGNiaUFnZlNCbGJITmxJR2xtSUNobGJDNXZibU5sSUNZbUlDRmxiQzV2Ym1ObFVISnZZMlZ6YzJWa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkbGJrOXVZMlVvWld3c0lITjBZWFJsS1Z4dUlDQjlJR1ZzYzJVZ2FXWWdLR1ZzTG1admNpQW1KaUFoWld3dVptOXlVSEp2WTJWemMyVmtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZGxia1p2Y2lobGJDd2djM1JoZEdVcFhHNGdJSDBnWld4elpTQnBaaUFvWld3dWFXWWdKaVlnSVdWc0xtbG1VSEp2WTJWemMyVmtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZGxia2xtS0dWc0xDQnpkR0YwWlNsY2JpQWdmU0JsYkhObElHbG1JQ2hsYkM1MFlXY2dQVDA5SUNkMFpXMXdiR0YwWlNjZ0ppWWdJV1ZzTG5Oc2IzUlVZWEpuWlhRZ0ppWWdJWE4wWVhSbExuQnlaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm5aVzVEYUdsc1pISmxiaWhsYkN3Z2MzUmhkR1VwSUh4OElDZDJiMmxrSURBblhHNGdJSDBnWld4elpTQnBaaUFvWld3dWRHRm5JRDA5UFNBbmMyeHZkQ2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaMlZ1VTJ4dmRDaGxiQ3dnYzNSaGRHVXBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnWTI5dGNHOXVaVzUwSUc5eUlHVnNaVzFsYm5SY2JpQWdJQ0IyWVhJZ1kyOWtaVHRjYmlBZ0lDQnBaaUFvWld3dVkyOXRjRzl1Wlc1MEtTQjdYRzRnSUNBZ0lDQmpiMlJsSUQwZ1oyVnVRMjl0Y0c5dVpXNTBLR1ZzTG1OdmJYQnZibVZ1ZEN3Z1pXd3NJSE4wWVhSbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZG1GeUlHUmhkR0U3WEc0Z0lDQWdJQ0JwWmlBb0lXVnNMbkJzWVdsdUlIeDhJQ2hsYkM1d2NtVWdKaVlnYzNSaGRHVXViV0Y1WW1WRGIyMXdiMjVsYm5Rb1pXd3BLU2tnZTF4dUlDQWdJQ0FnSUNCa1lYUmhJRDBnWjJWdVJHRjBZU1F5S0dWc0xDQnpkR0YwWlNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIWmhjaUJqYUdsc1pISmxiaUE5SUdWc0xtbHViR2x1WlZSbGJYQnNZWFJsSUQ4Z2JuVnNiQ0E2SUdkbGJrTm9hV3hrY21WdUtHVnNMQ0J6ZEdGMFpTd2dkSEoxWlNrN1hHNGdJQ0FnSUNCamIyUmxJRDBnWENKZll5Z25YQ0lnS3lBb1pXd3VkR0ZuS1NBcklGd2lKMXdpSUNzZ0tHUmhkR0VnUHlBb1hDSXNYQ0lnS3lCa1lYUmhLU0E2SUNjbktTQXJJQ2hqYUdsc1pISmxiaUEvSUNoY0lpeGNJaUFySUdOb2FXeGtjbVZ1S1NBNklDY25LU0FySUZ3aUtWd2lPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnRiMlIxYkdVZ2RISmhibk5tYjNKdGMxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MzUmhkR1V1ZEhKaGJuTm1iM0p0Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdZMjlrWlNBOUlITjBZWFJsTG5SeVlXNXpabTl5YlhOYmFWMG9aV3dzSUdOdlpHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWTI5a1pWeHVJQ0I5WEc1OVhHNWNiaTh2SUdodmFYTjBJSE4wWVhScFl5QnpkV0l0ZEhKbFpYTWdiM1YwWEc1bWRXNWpkR2x2YmlCblpXNVRkR0YwYVdNZ0tHVnNMQ0J6ZEdGMFpTa2dlMXh1SUNCbGJDNXpkR0YwYVdOUWNtOWpaWE56WldRZ1BTQjBjblZsTzF4dUlDQXZMeUJUYjIxbElHVnNaVzFsYm5SeklDaDBaVzF3YkdGMFpYTXBJRzVsWldRZ2RHOGdZbVZvWVhabElHUnBabVpsY21WdWRHeDVJR2x1YzJsa1pTQnZaaUJoSUhZdGNISmxYRzRnSUM4dklHNXZaR1V1SUNCQmJHd2djSEpsSUc1dlpHVnpJR0Z5WlNCemRHRjBhV01nY205dmRITXNJSE52SUhkbElHTmhiaUIxYzJVZ2RHaHBjeUJoY3lCaElHeHZZMkYwYVc5dUlIUnZYRzRnSUM4dklIZHlZWEFnWVNCemRHRjBaU0JqYUdGdVoyVWdZVzVrSUhKbGMyVjBJR2wwSUhWd2IyNGdaWGhwZEdsdVp5QjBhR1VnY0hKbElHNXZaR1V1WEc0Z0lIWmhjaUJ2Y21sbmFXNWhiRkJ5WlZOMFlYUmxJRDBnYzNSaGRHVXVjSEpsTzF4dUlDQnBaaUFvWld3dWNISmxLU0I3WEc0Z0lDQWdjM1JoZEdVdWNISmxJRDBnWld3dWNISmxPMXh1SUNCOVhHNGdJSE4wWVhSbExuTjBZWFJwWTFKbGJtUmxja1p1Y3k1d2RYTm9LQ2hjSW5kcGRHZ29kR2hwY3lsN2NtVjBkWEp1SUZ3aUlDc2dLR2RsYmtWc1pXMWxiblFvWld3c0lITjBZWFJsS1NrZ0t5QmNJbjFjSWlrcE8xeHVJQ0J6ZEdGMFpTNXdjbVVnUFNCdmNtbG5hVzVoYkZCeVpWTjBZWFJsTzF4dUlDQnlaWFIxY200Z0tGd2lYMjBvWENJZ0t5QW9jM1JoZEdVdWMzUmhkR2xqVW1WdVpHVnlSbTV6TG14bGJtZDBhQ0F0SURFcElDc2dLR1ZzTG5OMFlYUnBZMGx1Um05eUlEOGdKeXgwY25WbEp5QTZJQ2NuS1NBcklGd2lLVndpS1Z4dWZWeHVYRzR2THlCMkxXOXVZMlZjYm1aMWJtTjBhVzl1SUdkbGJrOXVZMlVnS0dWc0xDQnpkR0YwWlNrZ2UxeHVJQ0JsYkM1dmJtTmxVSEp2WTJWemMyVmtJRDBnZEhKMVpUdGNiaUFnYVdZZ0tHVnNMbWxtSUNZbUlDRmxiQzVwWmxCeWIyTmxjM05sWkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJuWlc1SlppaGxiQ3dnYzNSaGRHVXBYRzRnSUgwZ1pXeHpaU0JwWmlBb1pXd3VjM1JoZEdsalNXNUdiM0lwSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVJRDBnSnljN1hHNGdJQ0FnZG1GeUlIQmhjbVZ1ZENBOUlHVnNMbkJoY21WdWREdGNiaUFnSUNCM2FHbHNaU0FvY0dGeVpXNTBLU0I3WEc0Z0lDQWdJQ0JwWmlBb2NHRnlaVzUwTG1admNpa2dlMXh1SUNBZ0lDQWdJQ0JyWlhrZ1BTQndZWEpsYm5RdWEyVjVPMXh1SUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NHRnlaVzUwSUQwZ2NHRnlaVzUwTG5CaGNtVnVkRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ0ZyWlhrcElIdGNiaUFnSUNBZ0lITjBZWFJsTG5kaGNtNG9YRzRnSUNBZ0lDQWdJRndpZGkxdmJtTmxJR05oYmlCdmJteDVJR0psSUhWelpXUWdhVzV6YVdSbElIWXRabTl5SUhSb1lYUWdhWE1nYTJWNVpXUXVJRndpTEZ4dUlDQWdJQ0FnSUNCbGJDNXlZWGRCZEhSeWMwMWhjRnNuZGkxdmJtTmxKMTFjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaMlZ1Uld4bGJXVnVkQ2hsYkN3Z2MzUmhkR1VwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlBb1hDSmZieWhjSWlBcklDaG5aVzVGYkdWdFpXNTBLR1ZzTENCemRHRjBaU2twSUNzZ1hDSXNYQ0lnS3lBb2MzUmhkR1V1YjI1alpVbGtLeXNwSUNzZ1hDSXNYQ0lnS3lCclpYa2dLeUJjSWlsY0lpbGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z1oyVnVVM1JoZEdsaktHVnNMQ0J6ZEdGMFpTbGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlc1SlppQW9YRzRnSUdWc0xGeHVJQ0J6ZEdGMFpTeGNiaUFnWVd4MFIyVnVMRnh1SUNCaGJIUkZiWEIwZVZ4dUtTQjdYRzRnSUdWc0xtbG1VSEp2WTJWemMyVmtJRDBnZEhKMVpUc2dMeThnWVhadmFXUWdjbVZqZFhKemFXOXVYRzRnSUhKbGRIVnliaUJuWlc1SlprTnZibVJwZEdsdmJuTW9aV3d1YVdaRGIyNWthWFJwYjI1ekxuTnNhV05sS0Nrc0lITjBZWFJsTENCaGJIUkhaVzRzSUdGc2RFVnRjSFI1S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlc1SlprTnZibVJwZEdsdmJuTWdLRnh1SUNCamIyNWthWFJwYjI1ekxGeHVJQ0J6ZEdGMFpTeGNiaUFnWVd4MFIyVnVMRnh1SUNCaGJIUkZiWEIwZVZ4dUtTQjdYRzRnSUdsbUlDZ2hZMjl1WkdsMGFXOXVjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1lXeDBSVzF3ZEhrZ2ZId2dKMTlsS0NrblhHNGdJSDFjYmx4dUlDQjJZWElnWTI5dVpHbDBhVzl1SUQwZ1kyOXVaR2wwYVc5dWN5NXphR2xtZENncE8xeHVJQ0JwWmlBb1kyOXVaR2wwYVc5dUxtVjRjQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9YQ0lvWENJZ0t5QW9ZMjl1WkdsMGFXOXVMbVY0Y0NrZ0t5QmNJaWsvWENJZ0t5QW9aMlZ1VkdWeWJtRnllVVY0Y0NoamIyNWthWFJwYjI0dVlteHZZMnNwS1NBcklGd2lPbHdpSUNzZ0tHZGxia2xtUTI5dVpHbDBhVzl1Y3loamIyNWthWFJwYjI1ekxDQnpkR0YwWlN3Z1lXeDBSMlZ1TENCaGJIUkZiWEIwZVNrcEtWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlBb1hDSmNJaUFySUNoblpXNVVaWEp1WVhKNVJYaHdLR052Ym1ScGRHbHZiaTVpYkc5amF5a3BLVnh1SUNCOVhHNWNiaUFnTHk4Z2RpMXBaaUIzYVhSb0lIWXRiMjVqWlNCemFHOTFiR1FnWjJWdVpYSmhkR1VnWTI5a1pTQnNhV3RsSUNoaEtUOWZiU2d3S1RwZmJTZ3hLVnh1SUNCbWRXNWpkR2x2YmlCblpXNVVaWEp1WVhKNVJYaHdJQ2hsYkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJoYkhSSFpXNWNiaUFnSUNBZ0lEOGdZV3gwUjJWdUtHVnNMQ0J6ZEdGMFpTbGNiaUFnSUNBZ0lEb2daV3d1YjI1alpWeHVJQ0FnSUNBZ0lDQS9JR2RsYms5dVkyVW9aV3dzSUhOMFlYUmxLVnh1SUNBZ0lDQWdJQ0E2SUdkbGJrVnNaVzFsYm5Rb1pXd3NJSE4wWVhSbEtWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsYmtadmNpQW9YRzRnSUdWc0xGeHVJQ0J6ZEdGMFpTeGNiaUFnWVd4MFIyVnVMRnh1SUNCaGJIUklaV3h3WlhKY2Jpa2dlMXh1SUNCMllYSWdaWGh3SUQwZ1pXd3VabTl5TzF4dUlDQjJZWElnWVd4cFlYTWdQU0JsYkM1aGJHbGhjenRjYmlBZ2RtRnlJR2wwWlhKaGRHOXlNU0E5SUdWc0xtbDBaWEpoZEc5eU1TQS9JQ2hjSWl4Y0lpQXJJQ2hsYkM1cGRHVnlZWFJ2Y2pFcEtTQTZJQ2NuTzF4dUlDQjJZWElnYVhSbGNtRjBiM0l5SUQwZ1pXd3VhWFJsY21GMGIzSXlJRDhnS0Z3aUxGd2lJQ3NnS0dWc0xtbDBaWEpoZEc5eU1pa3BJRG9nSnljN1hHNWNiaUFnYVdZZ0tITjBZWFJsTG0xaGVXSmxRMjl0Y0c5dVpXNTBLR1ZzS1NBbUpseHVJQ0FnSUdWc0xuUmhaeUFoUFQwZ0ozTnNiM1FuSUNZbVhHNGdJQ0FnWld3dWRHRm5JQ0U5UFNBbmRHVnRjR3hoZEdVbklDWW1YRzRnSUNBZ0lXVnNMbXRsZVZ4dUlDQXBJSHRjYmlBZ0lDQnpkR0YwWlM1M1lYSnVLRnh1SUNBZ0lDQWdYQ0k4WENJZ0t5QW9aV3d1ZEdGbktTQXJJRndpSUhZdFptOXlQVnhjWENKY0lpQXJJR0ZzYVdGeklDc2dYQ0lnYVc0Z1hDSWdLeUJsZUhBZ0t5QmNJbHhjWENJK09pQmpiMjF3YjI1bGJuUWdiR2x6ZEhNZ2NtVnVaR1Z5WldRZ2QybDBhQ0JjSWlBclhHNGdJQ0FnSUNCY0luWXRabTl5SUhOb2IzVnNaQ0JvWVhabElHVjRjR3hwWTJsMElHdGxlWE11SUZ3aUlDdGNiaUFnSUNBZ0lGd2lVMlZsSUdoMGRIQnpPaTh2ZG5WbGFuTXViM0puTDJkMWFXUmxMMnhwYzNRdWFIUnRiQ05yWlhrZ1ptOXlJRzF2Y21VZ2FXNW1ieTVjSWl4Y2JpQWdJQ0FnSUdWc0xuSmhkMEYwZEhKelRXRndXeWQyTFdadmNpZGRMRnh1SUNBZ0lDQWdkSEoxWlNBdktpQjBhWEFnS2k5Y2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ1pXd3VabTl5VUhKdlkyVnpjMlZrSUQwZ2RISjFaVHNnTHk4Z1lYWnZhV1FnY21WamRYSnphVzl1WEc0Z0lISmxkSFZ5YmlBb1lXeDBTR1ZzY0dWeUlIeDhJQ2RmYkNjcElDc2dYQ0lvS0Z3aUlDc2daWGh3SUNzZ1hDSXBMRndpSUN0Y2JpQWdJQ0JjSW1aMWJtTjBhVzl1S0Z3aUlDc2dZV3hwWVhNZ0t5QnBkR1Z5WVhSdmNqRWdLeUJwZEdWeVlYUnZjaklnS3lCY0lpbDdYQ0lnSzF4dUlDQWdJQ0FnWENKeVpYUjFjbTRnWENJZ0t5QW9LR0ZzZEVkbGJpQjhmQ0JuWlc1RmJHVnRaVzUwS1NobGJDd2djM1JoZEdVcEtTQXJYRzRnSUNBZ0ozMHBKMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aVzVFWVhSaEpESWdLR1ZzTENCemRHRjBaU2tnZTF4dUlDQjJZWElnWkdGMFlTQTlJQ2Q3Snp0Y2JseHVJQ0F2THlCa2FYSmxZM1JwZG1WeklHWnBjbk4wTGx4dUlDQXZMeUJrYVhKbFkzUnBkbVZ6SUcxaGVTQnRkWFJoZEdVZ2RHaGxJR1ZzSjNNZ2IzUm9aWElnY0hKdmNHVnlkR2xsY3lCaVpXWnZjbVVnZEdobGVTQmhjbVVnWjJWdVpYSmhkR1ZrTGx4dUlDQjJZWElnWkdseWN5QTlJR2RsYmtScGNtVmpkR2wyWlhNb1pXd3NJSE4wWVhSbEtUdGNiaUFnYVdZZ0tHUnBjbk1wSUhzZ1pHRjBZU0FyUFNCa2FYSnpJQ3NnSnl3bk95QjlYRzVjYmlBZ0x5OGdhMlY1WEc0Z0lHbG1JQ2hsYkM1clpYa3BJSHRjYmlBZ0lDQmtZWFJoSUNzOUlGd2lhMlY1T2x3aUlDc2dLR1ZzTG10bGVTa2dLeUJjSWl4Y0lqdGNiaUFnZlZ4dUlDQXZMeUJ5WldaY2JpQWdhV1lnS0dWc0xuSmxaaWtnZTF4dUlDQWdJR1JoZEdFZ0t6MGdYQ0p5WldZNlhDSWdLeUFvWld3dWNtVm1LU0FySUZ3aUxGd2lPMXh1SUNCOVhHNGdJR2xtSUNobGJDNXlaV1pKYmtadmNpa2dlMXh1SUNBZ0lHUmhkR0VnS3owZ1hDSnlaV1pKYmtadmNqcDBjblZsTEZ3aU8xeHVJQ0I5WEc0Z0lDOHZJSEJ5WlZ4dUlDQnBaaUFvWld3dWNISmxLU0I3WEc0Z0lDQWdaR0YwWVNBclBTQmNJbkJ5WlRwMGNuVmxMRndpTzF4dUlDQjlYRzRnSUM4dklISmxZMjl5WkNCdmNtbG5hVzVoYkNCMFlXY2dibUZ0WlNCbWIzSWdZMjl0Y0c5dVpXNTBjeUIxYzJsdVp5QmNJbWx6WENJZ1lYUjBjbWxpZFhSbFhHNGdJR2xtSUNobGJDNWpiMjF3YjI1bGJuUXBJSHRjYmlBZ0lDQmtZWFJoSUNzOUlGd2lkR0ZuT2x4Y1hDSmNJaUFySUNobGJDNTBZV2NwSUNzZ1hDSmNYRndpTEZ3aU8xeHVJQ0I5WEc0Z0lDOHZJRzF2WkhWc1pTQmtZWFJoSUdkbGJtVnlZWFJwYjI0Z1puVnVZM1JwYjI1elhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzNSaGRHVXVaR0YwWVVkbGJrWnVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUdSaGRHRWdLejBnYzNSaGRHVXVaR0YwWVVkbGJrWnVjMXRwWFNobGJDazdYRzRnSUgxY2JpQWdMeThnWVhSMGNtbGlkWFJsYzF4dUlDQnBaaUFvWld3dVlYUjBjbk1wSUh0Y2JpQWdJQ0JrWVhSaElDczlJRndpWVhSMGNuTTZYQ0lnS3lBb1oyVnVVSEp2Y0hNb1pXd3VZWFIwY25NcEtTQXJJRndpTEZ3aU8xeHVJQ0I5WEc0Z0lDOHZJRVJQVFNCd2NtOXdjMXh1SUNCcFppQW9aV3d1Y0hKdmNITXBJSHRjYmlBZ0lDQmtZWFJoSUNzOUlGd2laRzl0VUhKdmNITTZYQ0lnS3lBb1oyVnVVSEp2Y0hNb1pXd3VjSEp2Y0hNcEtTQXJJRndpTEZ3aU8xeHVJQ0I5WEc0Z0lDOHZJR1YyWlc1MElHaGhibVJzWlhKelhHNGdJR2xtSUNobGJDNWxkbVZ1ZEhNcElIdGNiaUFnSUNCa1lYUmhJQ3M5SUNoblpXNUlZVzVrYkdWeWN5aGxiQzVsZG1WdWRITXNJR1poYkhObEtTa2dLeUJjSWl4Y0lqdGNiaUFnZlZ4dUlDQnBaaUFvWld3dWJtRjBhWFpsUlhabGJuUnpLU0I3WEc0Z0lDQWdaR0YwWVNBclBTQW9aMlZ1U0dGdVpHeGxjbk1vWld3dWJtRjBhWFpsUlhabGJuUnpMQ0IwY25WbEtTa2dLeUJjSWl4Y0lqdGNiaUFnZlZ4dUlDQXZMeUJ6Ykc5MElIUmhjbWRsZEZ4dUlDQXZMeUJ2Ym14NUlHWnZjaUJ1YjI0dGMyTnZjR1ZrSUhOc2IzUnpYRzRnSUdsbUlDaGxiQzV6Ykc5MFZHRnlaMlYwSUNZbUlDRmxiQzV6Ykc5MFUyTnZjR1VwSUh0Y2JpQWdJQ0JrWVhSaElDczlJRndpYzJ4dmREcGNJaUFySUNobGJDNXpiRzkwVkdGeVoyVjBLU0FySUZ3aUxGd2lPMXh1SUNCOVhHNGdJQzh2SUhOamIzQmxaQ0J6Ykc5MGMxeHVJQ0JwWmlBb1pXd3VjMk52Y0dWa1UyeHZkSE1wSUh0Y2JpQWdJQ0JrWVhSaElDczlJQ2huWlc1VFkyOXdaV1JUYkc5MGN5aGxiQ3dnWld3dWMyTnZjR1ZrVTJ4dmRITXNJSE4wWVhSbEtTa2dLeUJjSWl4Y0lqdGNiaUFnZlZ4dUlDQXZMeUJqYjIxd2IyNWxiblFnZGkxdGIyUmxiRnh1SUNCcFppQW9aV3d1Ylc5a1pXd3BJSHRjYmlBZ0lDQmtZWFJoSUNzOUlGd2liVzlrWld3NmUzWmhiSFZsT2x3aUlDc2dLR1ZzTG0xdlpHVnNMblpoYkhWbEtTQXJJRndpTEdOaGJHeGlZV05yT2x3aUlDc2dLR1ZzTG0xdlpHVnNMbU5oYkd4aVlXTnJLU0FySUZ3aUxHVjRjSEpsYzNOcGIyNDZYQ0lnS3lBb1pXd3ViVzlrWld3dVpYaHdjbVZ6YzJsdmJpa2dLeUJjSW4wc1hDSTdYRzRnSUgxY2JpQWdMeThnYVc1c2FXNWxMWFJsYlhCc1lYUmxYRzRnSUdsbUlDaGxiQzVwYm14cGJtVlVaVzF3YkdGMFpTa2dlMXh1SUNBZ0lIWmhjaUJwYm14cGJtVlVaVzF3YkdGMFpTQTlJR2RsYmtsdWJHbHVaVlJsYlhCc1lYUmxLR1ZzTENCemRHRjBaU2s3WEc0Z0lDQWdhV1lnS0dsdWJHbHVaVlJsYlhCc1lYUmxLU0I3WEc0Z0lDQWdJQ0JrWVhSaElDczlJR2x1YkdsdVpWUmxiWEJzWVhSbElDc2dYQ0lzWENJN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdSaGRHRWdQU0JrWVhSaExuSmxjR3hoWTJVb0x5d2tMeXdnSnljcElDc2dKMzBuTzF4dUlDQXZMeUIyTFdKcGJtUWdaSGx1WVcxcFl5QmhjbWQxYldWdWRDQjNjbUZ3WEc0Z0lDOHZJSFl0WW1sdVpDQjNhWFJvSUdSNWJtRnRhV01nWVhKbmRXMWxiblJ6SUcxMWMzUWdZbVVnWVhCd2JHbGxaQ0IxYzJsdVp5QjBhR1VnYzJGdFpTQjJMV0pwYm1RZ2IySnFaV04wWEc0Z0lDOHZJRzFsY21kbElHaGxiSEJsY2lCemJ5QjBhR0YwSUdOc1lYTnpMM04wZVd4bEwyMTFjM1JWYzJWUWNtOXdJR0YwZEhKeklHRnlaU0JvWVc1a2JHVmtJR052Y25KbFkzUnNlUzVjYmlBZ2FXWWdLR1ZzTG1SNWJtRnRhV05CZEhSeWN5a2dlMXh1SUNBZ0lHUmhkR0VnUFNCY0lsOWlLRndpSUNzZ1pHRjBZU0FySUZ3aUxGeGNYQ0pjSWlBcklDaGxiQzUwWVdjcElDc2dYQ0pjWEZ3aUxGd2lJQ3NnS0dkbGJsQnliM0J6S0dWc0xtUjVibUZ0YVdOQmRIUnljeWtwSUNzZ1hDSXBYQ0k3WEc0Z0lIMWNiaUFnTHk4Z2RpMWlhVzVrSUdSaGRHRWdkM0poY0Z4dUlDQnBaaUFvWld3dWQzSmhjRVJoZEdFcElIdGNiaUFnSUNCa1lYUmhJRDBnWld3dWQzSmhjRVJoZEdFb1pHRjBZU2s3WEc0Z0lIMWNiaUFnTHk4Z2RpMXZiaUJrWVhSaElIZHlZWEJjYmlBZ2FXWWdLR1ZzTG5keVlYQk1hWE4wWlc1bGNuTXBJSHRjYmlBZ0lDQmtZWFJoSUQwZ1pXd3VkM0poY0V4cGMzUmxibVZ5Y3loa1lYUmhLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdaR0YwWVZ4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlc1RWFYSmxZM1JwZG1WeklDaGxiQ3dnYzNSaGRHVXBJSHRjYmlBZ2RtRnlJR1JwY25NZ1BTQmxiQzVrYVhKbFkzUnBkbVZ6TzF4dUlDQnBaaUFvSVdScGNuTXBJSHNnY21WMGRYSnVJSDFjYmlBZ2RtRnlJSEpsY3lBOUlDZGthWEpsWTNScGRtVnpPbHNuTzF4dUlDQjJZWElnYUdGelVuVnVkR2x0WlNBOUlHWmhiSE5sTzF4dUlDQjJZWElnYVN3Z2JDd2daR2x5TENCdVpXVmtVblZ1ZEdsdFpUdGNiaUFnWm05eUlDaHBJRDBnTUN3Z2JDQTlJR1JwY25NdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ1pHbHlJRDBnWkdseWMxdHBYVHRjYmlBZ0lDQnVaV1ZrVW5WdWRHbHRaU0E5SUhSeWRXVTdYRzRnSUNBZ2RtRnlJR2RsYmlBOUlITjBZWFJsTG1ScGNtVmpkR2wyWlhOYlpHbHlMbTVoYldWZE8xeHVJQ0FnSUdsbUlDaG5aVzRwSUh0Y2JpQWdJQ0FnSUM4dklHTnZiWEJwYkdVdGRHbHRaU0JrYVhKbFkzUnBkbVVnZEdoaGRDQnRZVzVwY0hWc1lYUmxjeUJCVTFRdVhHNGdJQ0FnSUNBdkx5QnlaWFIxY201eklIUnlkV1VnYVdZZ2FYUWdZV3h6YnlCdVpXVmtjeUJoSUhKMWJuUnBiV1VnWTI5MWJuUmxjbkJoY25RdVhHNGdJQ0FnSUNCdVpXVmtVblZ1ZEdsdFpTQTlJQ0VoWjJWdUtHVnNMQ0JrYVhJc0lITjBZWFJsTG5kaGNtNHBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9ibVZsWkZKMWJuUnBiV1VwSUh0Y2JpQWdJQ0FnSUdoaGMxSjFiblJwYldVZ1BTQjBjblZsTzF4dUlDQWdJQ0FnY21WeklDczlJRndpZTI1aGJXVTZYRnhjSWx3aUlDc2dLR1JwY2k1dVlXMWxLU0FySUZ3aVhGeGNJaXh5WVhkT1lXMWxPbHhjWENKY0lpQXJJQ2hrYVhJdWNtRjNUbUZ0WlNrZ0t5QmNJbHhjWENKY0lpQXJJQ2hrYVhJdWRtRnNkV1VnUHlBb1hDSXNkbUZzZFdVNktGd2lJQ3NnS0dScGNpNTJZV3gxWlNrZ0t5QmNJaWtzWlhod2NtVnpjMmx2YmpwY0lpQXJJQ2hLVTA5T0xuTjBjbWx1WjJsbWVTaGthWEl1ZG1Gc2RXVXBLU2tnT2lBbkp5a2dLeUFvWkdseUxtRnlaeUEvSUNoY0lpeGhjbWM2WENJZ0t5QW9aR2x5TG1selJIbHVZVzFwWTBGeVp5QS9JR1JwY2k1aGNtY2dPaUFvWENKY1hGd2lYQ0lnS3lBb1pHbHlMbUZ5WnlrZ0t5QmNJbHhjWENKY0lpa3BLU0E2SUNjbktTQXJJQ2hrYVhJdWJXOWthV1pwWlhKeklEOGdLRndpTEcxdlpHbG1hV1Z5Y3pwY0lpQXJJQ2hLVTA5T0xuTjBjbWx1WjJsbWVTaGthWEl1Ylc5a2FXWnBaWEp6S1NrcElEb2dKeWNwSUNzZ1hDSjlMRndpTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JwWmlBb2FHRnpVblZ1ZEdsdFpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCeVpYTXVjMnhwWTJVb01Dd2dMVEVwSUNzZ0oxMG5YRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWdVNXNXNhVzVsVkdWdGNHeGhkR1VnS0dWc0xDQnpkR0YwWlNrZ2UxeHVJQ0IyWVhJZ1lYTjBJRDBnWld3dVkyaHBiR1J5Wlc1Yk1GMDdYRzRnSUdsbUlDaGxiQzVqYUdsc1pISmxiaTVzWlc1bmRHZ2dJVDA5SURFZ2ZId2dZWE4wTG5SNWNHVWdJVDA5SURFcElIdGNiaUFnSUNCemRHRjBaUzUzWVhKdUtGeHVJQ0FnSUNBZ0owbHViR2x1WlMxMFpXMXdiR0YwWlNCamIyMXdiMjVsYm5SeklHMTFjM1FnYUdGMlpTQmxlR0ZqZEd4NUlHOXVaU0JqYUdsc1pDQmxiR1Z0Wlc1MExpY3NYRzRnSUNBZ0lDQjdJSE4wWVhKME9pQmxiQzV6ZEdGeWRDQjlYRzRnSUNBZ0tUdGNiaUFnZlZ4dUlDQnBaaUFvWVhOMElDWW1JR0Z6ZEM1MGVYQmxJRDA5UFNBeEtTQjdYRzRnSUNBZ2RtRnlJR2x1YkdsdVpWSmxibVJsY2tadWN5QTlJR2RsYm1WeVlYUmxLR0Z6ZEN3Z2MzUmhkR1V1YjNCMGFXOXVjeWs3WEc0Z0lDQWdjbVYwZFhKdUlDaGNJbWx1YkdsdVpWUmxiWEJzWVhSbE9udHlaVzVrWlhJNlpuVnVZM1JwYjI0b0tYdGNJaUFySUNocGJteHBibVZTWlc1a1pYSkdibk11Y21WdVpHVnlLU0FySUZ3aWZTeHpkR0YwYVdOU1pXNWtaWEpHYm5NNlcxd2lJQ3NnS0dsdWJHbHVaVkpsYm1SbGNrWnVjeTV6ZEdGMGFXTlNaVzVrWlhKR2JuTXViV0Z3S0daMWJtTjBhVzl1SUNoamIyUmxLU0I3SUhKbGRIVnliaUFvWENKbWRXNWpkR2x2YmlncGUxd2lJQ3NnWTI5a1pTQXJJRndpZlZ3aUtUc2dmU2t1YW05cGJpZ25MQ2NwS1NBcklGd2lYWDFjSWlsY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aVzVUWTI5d1pXUlRiRzkwY3lBb1hHNGdJR1ZzTEZ4dUlDQnpiRzkwY3l4Y2JpQWdjM1JoZEdWY2Jpa2dlMXh1SUNBdkx5QmllU0JrWldaaGRXeDBJSE5qYjNCbFpDQnpiRzkwY3lCaGNtVWdZMjl1YzJsa1pYSmxaQ0JjSW5OMFlXSnNaVndpTENCMGFHbHpJR0ZzYkc5M2N5QmphR2xzWkZ4dUlDQXZMeUJqYjIxd2IyNWxiblJ6SUhkcGRHZ2diMjVzZVNCelkyOXdaV1FnYzJ4dmRITWdkRzhnYzJ0cGNDQm1iM0pqWldRZ2RYQmtZWFJsY3lCbWNtOXRJSEJoY21WdWRDNWNiaUFnTHk4Z1luVjBJR2x1SUhOdmJXVWdZMkZ6WlhNZ2QyVWdhR0YyWlNCMGJ5QmlZV2xzTFc5MWRDQnZaaUIwYUdseklHOXdkR2x0YVhwaGRHbHZibHh1SUNBdkx5Qm1iM0lnWlhoaGJYQnNaU0JwWmlCMGFHVWdjMnh2ZENCamIyNTBZV2x1Y3lCa2VXNWhiV2xqSUc1aGJXVnpMQ0JvWVhNZ2RpMXBaaUJ2Y2lCMkxXWnZjaUJ2YmlCMGFHVnRMaTR1WEc0Z0lIWmhjaUJ1WldWa2MwWnZjbU5sVlhCa1lYUmxJRDBnWld3dVptOXlJSHg4SUU5aWFtVmpkQzVyWlhsektITnNiM1J6S1M1emIyMWxLR1oxYm1OMGFXOXVJQ2hyWlhrcElIdGNiaUFnSUNCMllYSWdjMnh2ZENBOUlITnNiM1J6VzJ0bGVWMDdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUhOc2IzUXVjMnh2ZEZSaGNtZGxkRVI1Ym1GdGFXTWdmSHhjYmlBZ0lDQWdJSE5zYjNRdWFXWWdmSHhjYmlBZ0lDQWdJSE5zYjNRdVptOXlJSHg4WEc0Z0lDQWdJQ0JqYjI1MFlXbHVjMU5zYjNSRGFHbHNaQ2h6Ykc5MEtTQXZMeUJwY3lCd1lYTnphVzVuSUdSdmQyNGdjMnh2ZENCbWNtOXRJSEJoY21WdWRDQjNhR2xqYUNCdFlYa2dZbVVnWkhsdVlXMXBZMXh1SUNBZ0lDbGNiaUFnZlNrN1hHNWNiaUFnTHk4Z0l6azFNelE2SUdsbUlHRWdZMjl0Y0c5dVpXNTBJSGRwZEdnZ2MyTnZjR1ZrSUhOc2IzUnpJR2x6SUdsdWMybGtaU0JoSUdOdmJtUnBkR2x2Ym1Gc0lHSnlZVzVqYUN4Y2JpQWdMeThnYVhRbmN5QndiM056YVdKc1pTQm1iM0lnZEdobElITmhiV1VnWTI5dGNHOXVaVzUwSUhSdklHSmxJSEpsZFhObFpDQmlkWFFnZDJsMGFDQmthV1ptWlhKbGJuUmNiaUFnTHk4Z1kyOXRjR2xzWldRZ2MyeHZkQ0JqYjI1MFpXNTBMaUJVYnlCaGRtOXBaQ0IwYUdGMExDQjNaU0JuWlc1bGNtRjBaU0JoSUhWdWFYRjFaU0JyWlhrZ1ltRnpaV1FnYjI1Y2JpQWdMeThnZEdobElHZGxibVZ5WVhSbFpDQmpiMlJsSUc5bUlHRnNiQ0IwYUdVZ2MyeHZkQ0JqYjI1MFpXNTBjeTVjYmlBZ2RtRnlJRzVsWldSelMyVjVJRDBnSVNGbGJDNXBaanRjYmx4dUlDQXZMeUJQVWlCM2FHVnVJR2wwSUdseklHbHVjMmxrWlNCaGJtOTBhR1Z5SUhOamIzQmxaQ0J6Ykc5MElHOXlJSFl0Wm05eUlDaDBhR1VnY21WaFkzUnBkbWwwZVNCdFlYa2dZbVZjYmlBZ0x5OGdaR2x6WTI5dWJtVmpkR1ZrSUdSMVpTQjBieUIwYUdVZ2FXNTBaWEp0WldScFlYUmxJSE5qYjNCbElIWmhjbWxoWW14bEtWeHVJQ0F2THlBak9UUXpPQ3dnSXprMU1EWmNiaUFnTHk4Z1ZFOUVUem9nZEdocGN5QmpZVzRnWW1VZ1puVnlkR2hsY2lCdmNIUnBiV2w2WldRZ1lua2djSEp2Y0dWeWJIa2dZVzVoYkhsNmFXNW5JR2x1TFhOamIzQmxJR0pwYm1ScGJtZHpYRzRnSUM4dklHRnVaQ0J6YTJsd0lHWnZjbU5sSUhWd1pHRjBhVzVuSUc5dVpYTWdkR2hoZENCa2J5QnViM1FnWVdOMGRXRnNiSGtnZFhObElITmpiM0JsSUhaaGNtbGhZbXhsY3k1Y2JpQWdhV1lnS0NGdVpXVmtjMFp2Y21ObFZYQmtZWFJsS1NCN1hHNGdJQ0FnZG1GeUlIQmhjbVZ1ZENBOUlHVnNMbkJoY21WdWREdGNiaUFnSUNCM2FHbHNaU0FvY0dGeVpXNTBLU0I3WEc0Z0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDaHdZWEpsYm5RdWMyeHZkRk5qYjNCbElDWW1JSEJoY21WdWRDNXpiRzkwVTJOdmNHVWdJVDA5SUdWdGNIUjVVMnh2ZEZOamIzQmxWRzlyWlc0cElIeDhYRzRnSUNBZ0lDQWdJSEJoY21WdWRDNW1iM0pjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCdVpXVmtjMFp2Y21ObFZYQmtZWFJsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2h3WVhKbGJuUXVhV1lwSUh0Y2JpQWdJQ0FnSUNBZ2JtVmxaSE5MWlhrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY0dGeVpXNTBJRDBnY0dGeVpXNTBMbkJoY21WdWREdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQjJZWElnWjJWdVpYSmhkR1ZrVTJ4dmRITWdQU0JQWW1wbFkzUXVhMlY1Y3loemJHOTBjeWxjYmlBZ0lDQXViV0Z3S0daMWJtTjBhVzl1SUNoclpYa3BJSHNnY21WMGRYSnVJR2RsYmxOamIzQmxaRk5zYjNRb2MyeHZkSE5iYTJWNVhTd2djM1JoZEdVcE95QjlLVnh1SUNBZ0lDNXFiMmx1S0Njc0p5azdYRzVjYmlBZ2NtVjBkWEp1SUNoY0luTmpiM0JsWkZOc2IzUnpPbDkxS0Z0Y0lpQXJJR2RsYm1WeVlYUmxaRk5zYjNSeklDc2dYQ0pkWENJZ0t5QW9ibVZsWkhOR2IzSmpaVlZ3WkdGMFpTQS9JRndpTEc1MWJHd3NkSEoxWlZ3aUlEb2dYQ0pjSWlrZ0t5QW9JVzVsWldSelJtOXlZMlZWY0dSaGRHVWdKaVlnYm1WbFpITkxaWGtnUHlBb1hDSXNiblZzYkN4bVlXeHpaU3hjSWlBcklDaG9ZWE5vS0dkbGJtVnlZWFJsWkZOc2IzUnpLU2twSURvZ1hDSmNJaWtnS3lCY0lpbGNJaWxjYm4xY2JseHVablZ1WTNScGIyNGdhR0Z6YUNoemRISXBJSHRjYmlBZ2RtRnlJR2hoYzJnZ1BTQTFNemd4TzF4dUlDQjJZWElnYVNBOUlITjBjaTVzWlc1bmRHZzdYRzRnSUhkb2FXeGxLR2twSUh0Y2JpQWdJQ0JvWVhOb0lEMGdLR2hoYzJnZ0tpQXpNeWtnWGlCemRISXVZMmhoY2tOdlpHVkJkQ2d0TFdrcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCb1lYTm9JRDQrUGlBd1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdOdmJuUmhhVzV6VTJ4dmRFTm9hV3hrSUNobGJDa2dlMXh1SUNCcFppQW9aV3d1ZEhsd1pTQTlQVDBnTVNrZ2UxeHVJQ0FnSUdsbUlDaGxiQzUwWVdjZ1BUMDlJQ2R6Ykc5MEp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1ZjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdWc0xtTm9hV3hrY21WdUxuTnZiV1VvWTI5dWRHRnBibk5UYkc5MFEyaHBiR1FwWEc0Z0lIMWNiaUFnY21WMGRYSnVJR1poYkhObFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGJsTmpiM0JsWkZOc2IzUWdLRnh1SUNCbGJDeGNiaUFnYzNSaGRHVmNiaWtnZTF4dUlDQjJZWElnYVhOTVpXZGhZM2xUZVc1MFlYZ2dQU0JsYkM1aGRIUnljMDFoY0ZzbmMyeHZkQzF6WTI5d1pTZGRPMXh1SUNCcFppQW9aV3d1YVdZZ0ppWWdJV1ZzTG1sbVVISnZZMlZ6YzJWa0lDWW1JQ0ZwYzB4bFoyRmplVk41Ym5SaGVDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCblpXNUpaaWhsYkN3Z2MzUmhkR1VzSUdkbGJsTmpiM0JsWkZOc2IzUXNJRndpYm5Wc2JGd2lLVnh1SUNCOVhHNGdJR2xtSUNobGJDNW1iM0lnSmlZZ0lXVnNMbVp2Y2xCeWIyTmxjM05sWkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJuWlc1R2IzSW9aV3dzSUhOMFlYUmxMQ0JuWlc1VFkyOXdaV1JUYkc5MEtWeHVJQ0I5WEc0Z0lIWmhjaUJ6Ykc5MFUyTnZjR1VnUFNCbGJDNXpiRzkwVTJOdmNHVWdQVDA5SUdWdGNIUjVVMnh2ZEZOamIzQmxWRzlyWlc1Y2JpQWdJQ0EvSUZ3aVhDSmNiaUFnSUNBNklGTjBjbWx1WnlobGJDNXpiRzkwVTJOdmNHVXBPMXh1SUNCMllYSWdabTRnUFNCY0ltWjFibU4wYVc5dUtGd2lJQ3NnYzJ4dmRGTmpiM0JsSUNzZ1hDSXBlMXdpSUN0Y2JpQWdJQ0JjSW5KbGRIVnliaUJjSWlBcklDaGxiQzUwWVdjZ1BUMDlJQ2QwWlcxd2JHRjBaU2RjYmlBZ0lDQWdJRDhnWld3dWFXWWdKaVlnYVhOTVpXZGhZM2xUZVc1MFlYaGNiaUFnSUNBZ0lDQWdQeUFvWENJb1hDSWdLeUFvWld3dWFXWXBJQ3NnWENJcFAxd2lJQ3NnS0dkbGJrTm9hV3hrY21WdUtHVnNMQ0J6ZEdGMFpTa2dmSHdnSjNWdVpHVm1hVzVsWkNjcElDc2dYQ0k2ZFc1a1pXWnBibVZrWENJcFhHNGdJQ0FnSUNBZ0lEb2daMlZ1UTJocGJHUnlaVzRvWld3c0lITjBZWFJsS1NCOGZDQW5kVzVrWldacGJtVmtKMXh1SUNBZ0lDQWdPaUJuWlc1RmJHVnRaVzUwS0dWc0xDQnpkR0YwWlNrcElDc2dYQ0o5WENJN1hHNGdJQzh2SUhKbGRtVnljMlVnY0hKdmVIa2dkaTF6Ykc5MElIZHBkR2h2ZFhRZ2MyTnZjR1VnYjI0Z2RHaHBjeTRrYzJ4dmRITmNiaUFnZG1GeUlISmxkbVZ5YzJWUWNtOTRlU0E5SUhOc2IzUlRZMjl3WlNBL0lGd2lYQ0lnT2lCY0lpeHdjbTk0ZVRwMGNuVmxYQ0k3WEc0Z0lISmxkSFZ5YmlBb1hDSjdhMlY1T2x3aUlDc2dLR1ZzTG5Oc2IzUlVZWEpuWlhRZ2ZId2dYQ0pjWEZ3aVpHVm1ZWFZzZEZ4Y1hDSmNJaWtnS3lCY0lpeG1ianBjSWlBcklHWnVJQ3NnY21WMlpYSnpaVkJ5YjNoNUlDc2dYQ0o5WENJcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGJrTm9hV3hrY21WdUlDaGNiaUFnWld3c1hHNGdJSE4wWVhSbExGeHVJQ0JqYUdWamExTnJhWEFzWEc0Z0lHRnNkRWRsYmtWc1pXMWxiblFzWEc0Z0lHRnNkRWRsYms1dlpHVmNiaWtnZTF4dUlDQjJZWElnWTJocGJHUnlaVzRnUFNCbGJDNWphR2xzWkhKbGJqdGNiaUFnYVdZZ0tHTm9hV3hrY21WdUxteGxibWQwYUNrZ2UxeHVJQ0FnSUhaaGNpQmxiQ1F4SUQwZ1kyaHBiR1J5Wlc1Yk1GMDdYRzRnSUNBZ0x5OGdiM0IwYVcxcGVtVWdjMmx1WjJ4bElIWXRabTl5WEc0Z0lDQWdhV1lnS0dOb2FXeGtjbVZ1TG14bGJtZDBhQ0E5UFQwZ01TQW1KbHh1SUNBZ0lDQWdaV3drTVM1bWIzSWdKaVpjYmlBZ0lDQWdJR1ZzSkRFdWRHRm5JQ0U5UFNBbmRHVnRjR3hoZEdVbklDWW1YRzRnSUNBZ0lDQmxiQ1F4TG5SaFp5QWhQVDBnSjNOc2IzUW5YRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjJZWElnYm05eWJXRnNhWHBoZEdsdmJsUjVjR1VnUFNCamFHVmphMU5yYVhCY2JpQWdJQ0FnSUNBZ1B5QnpkR0YwWlM1dFlYbGlaVU52YlhCdmJtVnVkQ2hsYkNReEtTQS9JRndpTERGY0lpQTZJRndpTERCY0lseHVJQ0FnSUNBZ0lDQTZJRndpWENJN1hHNGdJQ0FnSUNCeVpYUjFjbTRnS0Z3aVhDSWdLeUFvS0dGc2RFZGxia1ZzWlcxbGJuUWdmSHdnWjJWdVJXeGxiV1Z1ZENrb1pXd2tNU3dnYzNSaGRHVXBLU0FySUc1dmNtMWhiR2w2WVhScGIyNVVlWEJsS1Z4dUlDQWdJSDFjYmlBZ0lDQjJZWElnYm05eWJXRnNhWHBoZEdsdmJsUjVjR1VrTVNBOUlHTm9aV05yVTJ0cGNGeHVJQ0FnSUNBZ1B5Qm5aWFJPYjNKdFlXeHBlbUYwYVc5dVZIbHdaU2hqYUdsc1pISmxiaXdnYzNSaGRHVXViV0Y1WW1WRGIyMXdiMjVsYm5RcFhHNGdJQ0FnSUNBNklEQTdYRzRnSUNBZ2RtRnlJR2RsYmlBOUlHRnNkRWRsYms1dlpHVWdmSHdnWjJWdVRtOWtaVHRjYmlBZ0lDQnlaWFIxY200Z0tGd2lXMXdpSUNzZ0tHTm9hV3hrY21WdUxtMWhjQ2htZFc1amRHbHZiaUFvWXlrZ2V5QnlaWFIxY200Z1oyVnVLR01zSUhOMFlYUmxLVHNnZlNrdWFtOXBiaWduTENjcEtTQXJJRndpWFZ3aUlDc2dLRzV2Y20xaGJHbDZZWFJwYjI1VWVYQmxKREVnUHlBb1hDSXNYQ0lnS3lCdWIzSnRZV3hwZW1GMGFXOXVWSGx3WlNReEtTQTZJQ2NuS1NsY2JpQWdmVnh1ZlZ4dVhHNHZMeUJrWlhSbGNtMXBibVVnZEdobElHNXZjbTFoYkdsNllYUnBiMjRnYm1WbFpHVmtJR1p2Y2lCMGFHVWdZMmhwYkdSeVpXNGdZWEp5WVhrdVhHNHZMeUF3T2lCdWJ5QnViM0p0WVd4cGVtRjBhVzl1SUc1bFpXUmxaRnh1THk4Z01Ub2djMmx0Y0d4bElHNXZjbTFoYkdsNllYUnBiMjRnYm1WbFpHVmtJQ2h3YjNOemFXSnNaU0F4TFd4bGRtVnNJR1JsWlhBZ2JtVnpkR1ZrSUdGeWNtRjVLVnh1THk4Z01qb2dablZzYkNCdWIzSnRZV3hwZW1GMGFXOXVJRzVsWldSbFpGeHVablZ1WTNScGIyNGdaMlYwVG05eWJXRnNhWHBoZEdsdmJsUjVjR1VnS0Z4dUlDQmphR2xzWkhKbGJpeGNiaUFnYldGNVltVkRiMjF3YjI1bGJuUmNiaWtnZTF4dUlDQjJZWElnY21WeklEMGdNRHRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmphR2xzWkhKbGJpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCbGJDQTlJR05vYVd4a2NtVnVXMmxkTzF4dUlDQWdJR2xtSUNobGJDNTBlWEJsSUNFOVBTQXhLU0I3WEc0Z0lDQWdJQ0JqYjI1MGFXNTFaVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9ibVZsWkhOT2IzSnRZV3hwZW1GMGFXOXVLR1ZzS1NCOGZGeHVJQ0FnSUNBZ0lDQW9aV3d1YVdaRGIyNWthWFJwYjI1eklDWW1JR1ZzTG1sbVEyOXVaR2wwYVc5dWN5NXpiMjFsS0daMWJtTjBhVzl1SUNoaktTQjdJSEpsZEhWeWJpQnVaV1ZrYzA1dmNtMWhiR2w2WVhScGIyNG9ZeTVpYkc5amF5azdJSDBwS1NrZ2UxeHVJQ0FnSUNBZ2NtVnpJRDBnTWp0Y2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHRZWGxpWlVOdmJYQnZibVZ1ZENobGJDa2dmSHhjYmlBZ0lDQWdJQ0FnS0dWc0xtbG1RMjl1WkdsMGFXOXVjeUFtSmlCbGJDNXBaa052Ym1ScGRHbHZibk11YzI5dFpTaG1kVzVqZEdsdmJpQW9ZeWtnZXlCeVpYUjFjbTRnYldGNVltVkRiMjF3YjI1bGJuUW9ZeTVpYkc5amF5azdJSDBwS1NrZ2UxeHVJQ0FnSUNBZ2NtVnpJRDBnTVR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsYzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ1WldWa2MwNXZjbTFoYkdsNllYUnBiMjRnS0dWc0tTQjdYRzRnSUhKbGRIVnliaUJsYkM1bWIzSWdJVDA5SUhWdVpHVm1hVzVsWkNCOGZDQmxiQzUwWVdjZ1BUMDlJQ2QwWlcxd2JHRjBaU2NnZkh3Z1pXd3VkR0ZuSUQwOVBTQW5jMnh2ZENkY2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWdVRtOWtaU0FvYm05a1pTd2djM1JoZEdVcElIdGNiaUFnYVdZZ0tHNXZaR1V1ZEhsd1pTQTlQVDBnTVNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJuWlc1RmJHVnRaVzUwS0c1dlpHVXNJSE4wWVhSbEtWeHVJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXVkSGx3WlNBOVBUMGdNeUFtSmlCdWIyUmxMbWx6UTI5dGJXVnVkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm5aVzVEYjIxdFpXNTBLRzV2WkdVcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkbGJsUmxlSFFvYm05a1pTbGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlc1VVpYaDBJQ2gwWlhoMEtTQjdYRzRnSUhKbGRIVnliaUFvWENKZmRpaGNJaUFySUNoMFpYaDBMblI1Y0dVZ1BUMDlJREpjYmlBZ0lDQS9JSFJsZUhRdVpYaHdjbVZ6YzJsdmJpQXZMeUJ1YnlCdVpXVmtJR1p2Y2lBb0tTQmlaV05oZFhObElHRnNjbVZoWkhrZ2QzSmhjSEJsWkNCcGJpQmZjeWdwWEc0Z0lDQWdPaUIwY21GdWMyWnZjbTFUY0dWamFXRnNUbVYzYkdsdVpYTW9TbE5QVGk1emRISnBibWRwWm5rb2RHVjRkQzUwWlhoMEtTa3BJQ3NnWENJcFhDSXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxia052YlcxbGJuUWdLR052YlcxbGJuUXBJSHRjYmlBZ2NtVjBkWEp1SUNoY0lsOWxLRndpSUNzZ0tFcFRUMDR1YzNSeWFXNW5hV1o1S0dOdmJXMWxiblF1ZEdWNGRDa3BJQ3NnWENJcFhDSXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxibE5zYjNRZ0tHVnNMQ0J6ZEdGMFpTa2dlMXh1SUNCMllYSWdjMnh2ZEU1aGJXVWdQU0JsYkM1emJHOTBUbUZ0WlNCOGZDQW5YQ0prWldaaGRXeDBYQ0luTzF4dUlDQjJZWElnWTJocGJHUnlaVzRnUFNCblpXNURhR2xzWkhKbGJpaGxiQ3dnYzNSaGRHVXBPMXh1SUNCMllYSWdjbVZ6SUQwZ1hDSmZkQ2hjSWlBcklITnNiM1JPWVcxbElDc2dLR05vYVd4a2NtVnVJRDhnS0Z3aUxGd2lJQ3NnWTJocGJHUnlaVzRwSURvZ0p5Y3BPMXh1SUNCMllYSWdZWFIwY25NZ1BTQmxiQzVoZEhSeWN5QjhmQ0JsYkM1a2VXNWhiV2xqUVhSMGNuTmNiaUFnSUNBL0lHZGxibEJ5YjNCektDaGxiQzVoZEhSeWN5QjhmQ0JiWFNrdVkyOXVZMkYwS0dWc0xtUjVibUZ0YVdOQmRIUnljeUI4ZkNCYlhTa3ViV0Z3S0daMWJtTjBhVzl1SUNoaGRIUnlLU0I3SUhKbGRIVnliaUFvZTF4dUlDQWdJQ0FnSUNBdkx5QnpiRzkwSUhCeWIzQnpJR0Z5WlNCallXMWxiR2w2WldSY2JpQWdJQ0FnSUNBZ2JtRnRaVG9nWTJGdFpXeHBlbVVvWVhSMGNpNXVZVzFsS1N4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUdGMGRISXVkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lHUjVibUZ0YVdNNklHRjBkSEl1WkhsdVlXMXBZMXh1SUNBZ0lDQWdmU2s3SUgwcEtWeHVJQ0FnSURvZ2JuVnNiRHRjYmlBZ2RtRnlJR0pwYm1Ra0pERWdQU0JsYkM1aGRIUnljMDFoY0ZzbmRpMWlhVzVrSjEwN1hHNGdJR2xtSUNnb1lYUjBjbk1nZkh3Z1ltbHVaQ1FrTVNrZ0ppWWdJV05vYVd4a2NtVnVLU0I3WEc0Z0lDQWdjbVZ6SUNzOUlGd2lMRzUxYkd4Y0lqdGNiaUFnZlZ4dUlDQnBaaUFvWVhSMGNuTXBJSHRjYmlBZ0lDQnlaWE1nS3owZ1hDSXNYQ0lnS3lCaGRIUnljenRjYmlBZ2ZWeHVJQ0JwWmlBb1ltbHVaQ1FrTVNrZ2UxeHVJQ0FnSUhKbGN5QXJQU0FvWVhSMGNuTWdQeUFuSnlBNklDY3NiblZzYkNjcElDc2dYQ0lzWENJZ0t5QmlhVzVrSkNReE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTWdLeUFuS1NkY2JuMWNibHh1THk4Z1kyOXRjRzl1Wlc1MFRtRnRaU0JwY3lCbGJDNWpiMjF3YjI1bGJuUXNJSFJoYTJVZ2FYUWdZWE1nWVhKbmRXMWxiblFnZEc4Z2MyaDFiaUJtYkc5M0ozTWdjR1Z6YzJsdGFYTjBhV01nY21WbWFXNWxiV1Z1ZEZ4dVpuVnVZM1JwYjI0Z1oyVnVRMjl0Y0c5dVpXNTBJQ2hjYmlBZ1kyOXRjRzl1Wlc1MFRtRnRaU3hjYmlBZ1pXd3NYRzRnSUhOMFlYUmxYRzRwSUh0Y2JpQWdkbUZ5SUdOb2FXeGtjbVZ1SUQwZ1pXd3VhVzVzYVc1bFZHVnRjR3hoZEdVZ1B5QnVkV3hzSURvZ1oyVnVRMmhwYkdSeVpXNG9aV3dzSUhOMFlYUmxMQ0IwY25WbEtUdGNiaUFnY21WMGRYSnVJQ2hjSWw5aktGd2lJQ3NnWTI5dGNHOXVaVzUwVG1GdFpTQXJJRndpTEZ3aUlDc2dLR2RsYmtSaGRHRWtNaWhsYkN3Z2MzUmhkR1VwS1NBcklDaGphR2xzWkhKbGJpQS9JQ2hjSWl4Y0lpQXJJR05vYVd4a2NtVnVLU0E2SUNjbktTQXJJRndpS1Z3aUtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpXNVFjbTl3Y3lBb2NISnZjSE1wSUh0Y2JpQWdkbUZ5SUhOMFlYUnBZMUJ5YjNCeklEMGdYQ0pjSWp0Y2JpQWdkbUZ5SUdSNWJtRnRhV05RY205d2N5QTlJRndpWENJN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0hKdmNITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0IyWVhJZ2NISnZjQ0E5SUhCeWIzQnpXMmxkTzF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUhSeVlXNXpabTl5YlZOd1pXTnBZV3hPWlhkc2FXNWxjeWh3Y205d0xuWmhiSFZsS1R0Y2JpQWdJQ0JwWmlBb2NISnZjQzVrZVc1aGJXbGpLU0I3WEc0Z0lDQWdJQ0JrZVc1aGJXbGpVSEp2Y0hNZ0t6MGdLSEJ5YjNBdWJtRnRaU2tnS3lCY0lpeGNJaUFySUhaaGJIVmxJQ3NnWENJc1hDSTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhOMFlYUnBZMUJ5YjNCeklDczlJRndpWEZ4Y0lsd2lJQ3NnS0hCeWIzQXVibUZ0WlNrZ0t5QmNJbHhjWENJNlhDSWdLeUIyWVd4MVpTQXJJRndpTEZ3aU8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCemRHRjBhV05RY205d2N5QTlJRndpZTF3aUlDc2dLSE4wWVhScFkxQnliM0J6TG5Oc2FXTmxLREFzSUMweEtTa2dLeUJjSW4xY0lqdGNiaUFnYVdZZ0tHUjVibUZ0YVdOUWNtOXdjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQW9YQ0pmWkNoY0lpQXJJSE4wWVhScFkxQnliM0J6SUNzZ1hDSXNXMXdpSUNzZ0tHUjVibUZ0YVdOUWNtOXdjeTV6YkdsalpTZ3dMQ0F0TVNrcElDc2dYQ0pkS1Z3aUtWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCemRHRjBhV05RY205d2MxeHVJQ0I5WEc1OVhHNWNiaTh2SUNNek9EazFMQ0FqTkRJMk9GeHVablZ1WTNScGIyNGdkSEpoYm5ObWIzSnRVM0JsWTJsaGJFNWxkMnhwYm1WeklDaDBaWGgwS1NCN1hHNGdJSEpsZEhWeWJpQjBaWGgwWEc0Z0lDQWdMbkpsY0d4aFkyVW9MMXhjZFRJd01qZ3ZaeXdnSjF4Y1hGeDFNakF5T0NjcFhHNGdJQ0FnTG5KbGNHeGhZMlVvTDF4Y2RUSXdNamt2Wnl3Z0oxeGNYRngxTWpBeU9TY3BYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNWNibHh1THk4Z2RHaGxjMlVnYTJWNWQyOXlaSE1nYzJodmRXeGtJRzV2ZENCaGNIQmxZWElnYVc1emFXUmxJR1Y0Y0hKbGMzTnBiMjV6TENCaWRYUWdiM0JsY21GMGIzSnpJR3hwYTJWY2JpOHZJSFI1Y0dWdlppd2dhVzV6ZEdGdVkyVnZaaUJoYm1RZ2FXNGdZWEpsSUdGc2JHOTNaV1JjYm5aaGNpQndjbTlvYVdKcGRHVmtTMlY1ZDI5eVpGSkZJRDBnYm1WM0lGSmxaMFY0Y0NnblhGeGNYR0luSUNzZ0tGeHVJQ0FuWkc4c2FXWXNabTl5TEd4bGRDeHVaWGNzZEhKNUxIWmhjaXhqWVhObExHVnNjMlVzZDJsMGFDeGhkMkZwZEN4aWNtVmhheXhqWVhSamFDeGpiR0Z6Y3l4amIyNXpkQ3duSUN0Y2JpQWdKM04xY0dWeUxIUm9jbTkzTEhkb2FXeGxMSGxwWld4a0xHUmxiR1YwWlN4bGVIQnZjblFzYVcxd2IzSjBMSEpsZEhWeWJpeHpkMmwwWTJnc1pHVm1ZWFZzZEN3bklDdGNiaUFnSjJWNGRHVnVaSE1zWm1sdVlXeHNlU3hqYjI1MGFXNTFaU3hrWldKMVoyZGxjaXhtZFc1amRHbHZiaXhoY21kMWJXVnVkSE1uWEc0cExuTndiR2wwS0Njc0p5a3VhbTlwYmlnblhGeGNYR0o4WEZ4Y1hHSW5LU0FySUNkY1hGeGNZaWNwTzF4dVhHNHZMeUIwYUdWelpTQjFibUZ5ZVNCdmNHVnlZWFJ2Y25NZ2MyaHZkV3hrSUc1dmRDQmlaU0IxYzJWa0lHRnpJSEJ5YjNCbGNuUjVMMjFsZEdodlpDQnVZVzFsYzF4dWRtRnlJSFZ1WVhKNVQzQmxjbUYwYjNKelVrVWdQU0J1WlhjZ1VtVm5SWGh3S0NkY1hGeGNZaWNnS3lBb1hHNGdJQ2RrWld4bGRHVXNkSGx3Wlc5bUxIWnZhV1FuWEc0cExuTndiR2wwS0Njc0p5a3VhbTlwYmlnblhGeGNYSE1xWEZ4Y1hDaGJYbHhjWEZ3cFhTcGNYRnhjS1h4Y1hGeGNZaWNwSUNzZ0oxeGNYRnh6S2x4Y1hGd29XMTVjWEZ4Y0tWMHFYRnhjWENrbktUdGNibHh1THk4Z2MzUnlhWEFnYzNSeWFXNW5jeUJwYmlCbGVIQnlaWE56YVc5dWMxeHVkbUZ5SUhOMGNtbHdVM1J5YVc1blVrVWdQU0F2SnlnL09sdGVKMXhjWEZ4ZGZGeGNYRnd1S1NvbmZGd2lLRDg2VzE1Y0lseGNYRnhkZkZ4Y1hGd3VLU3BjSW54Z0tEODZXMTVnWEZ4Y1hGMThYRnhjWEM0cEtseGNKRnhjZTN4Y1hIMG9QenBiWG1CY1hGeGNYWHhjWEZ4Y0xpa3FZSHhnS0Q4NlcxNWdYRnhjWEYxOFhGeGNYQzRwS21Bdlp6dGNibHh1THk4Z1pHVjBaV04wSUhCeWIySnNaVzFoZEdsaklHVjRjSEpsYzNOcGIyNXpJR2x1SUdFZ2RHVnRjR3hoZEdWY2JtWjFibU4wYVc5dUlHUmxkR1ZqZEVWeWNtOXljeUFvWVhOMExDQjNZWEp1S1NCN1hHNGdJR2xtSUNoaGMzUXBJSHRjYmlBZ0lDQmphR1ZqYTA1dlpHVW9ZWE4wTENCM1lYSnVLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamFHVmphMDV2WkdVZ0tHNXZaR1VzSUhkaGNtNHBJSHRjYmlBZ2FXWWdLRzV2WkdVdWRIbHdaU0E5UFQwZ01Ta2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHNWhiV1VnYVc0Z2JtOWtaUzVoZEhSeWMwMWhjQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tHUnBjbEpGTG5SbGMzUW9ibUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnYm05a1pTNWhkSFJ5YzAxaGNGdHVZVzFsWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlISmhibWRsSUQwZ2JtOWtaUzV5WVhkQmRIUnljMDFoY0Z0dVlXMWxYVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ibUZ0WlNBOVBUMGdKM1l0Wm05eUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRHYjNJb2JtOWtaU3dnS0Z3aWRpMW1iM0k5WEZ4Y0lsd2lJQ3NnZG1Gc2RXVWdLeUJjSWx4Y1hDSmNJaWtzSUhkaGNtNHNJSEpoYm1kbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c5dVVrVXVkR1Z6ZENodVlXMWxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhsWTJ0RmRtVnVkQ2gyWVd4MVpTd2dLRzVoYldVZ0t5QmNJajFjWEZ3aVhDSWdLeUIyWVd4MVpTQXJJRndpWEZ4Y0lsd2lLU3dnZDJGeWJpd2djbUZ1WjJVcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHVmphMFY0Y0hKbGMzTnBiMjRvZG1Gc2RXVXNJQ2h1WVcxbElDc2dYQ0k5WEZ4Y0lsd2lJQ3NnZG1Gc2RXVWdLeUJjSWx4Y1hDSmNJaWtzSUhkaGNtNHNJSEpoYm1kbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0c1dlpHVXVZMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYm05a1pTNWphR2xzWkhKbGJpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCamFHVmphMDV2WkdVb2JtOWtaUzVqYUdsc1pISmxibHRwWFN3Z2QyRnliaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tHNXZaR1V1ZEhsd1pTQTlQVDBnTWlrZ2UxeHVJQ0FnSUdOb1pXTnJSWGh3Y21WemMybHZiaWh1YjJSbExtVjRjSEpsYzNOcGIyNHNJRzV2WkdVdWRHVjRkQ3dnZDJGeWJpd2dibTlrWlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZMmhsWTJ0RmRtVnVkQ0FvWlhod0xDQjBaWGgwTENCM1lYSnVMQ0J5WVc1blpTa2dlMXh1SUNCMllYSWdjM1JwY0hCbFpDQTlJR1Y0Y0M1eVpYQnNZV05sS0hOMGNtbHdVM1J5YVc1blVrVXNJQ2NuS1R0Y2JpQWdkbUZ5SUd0bGVYZHZjbVJOWVhSamFDQTlJSE4wYVhCd1pXUXViV0YwWTJnb2RXNWhjbmxQY0dWeVlYUnZjbk5TUlNrN1hHNGdJR2xtSUNoclpYbDNiM0prVFdGMFkyZ2dKaVlnYzNScGNIQmxaQzVqYUdGeVFYUW9hMlY1ZDI5eVpFMWhkR05vTG1sdVpHVjRJQzBnTVNrZ0lUMDlJQ2NrSnlrZ2UxeHVJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQmNJbUYyYjJsa0lIVnphVzVuSUVwaGRtRlRZM0pwY0hRZ2RXNWhjbmtnYjNCbGNtRjBiM0lnWVhNZ2NISnZjR1Z5ZEhrZ2JtRnRaVG9nWENJZ0sxeHVJQ0FnSUNBZ1hDSmNYRndpWENJZ0t5QW9hMlY1ZDI5eVpFMWhkR05vV3pCZEtTQXJJRndpWEZ4Y0lpQnBiaUJsZUhCeVpYTnphVzl1SUZ3aUlDc2dLSFJsZUhRdWRISnBiU2dwS1N4Y2JpQWdJQ0FnSUhKaGJtZGxYRzRnSUNBZ0tUdGNiaUFnZlZ4dUlDQmphR1ZqYTBWNGNISmxjM05wYjI0b1pYaHdMQ0IwWlhoMExDQjNZWEp1TENCeVlXNW5aU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR05vWldOclJtOXlJQ2h1YjJSbExDQjBaWGgwTENCM1lYSnVMQ0J5WVc1blpTa2dlMXh1SUNCamFHVmphMFY0Y0hKbGMzTnBiMjRvYm05a1pTNW1iM0lnZkh3Z0p5Y3NJSFJsZUhRc0lIZGhjbTRzSUhKaGJtZGxLVHRjYmlBZ1kyaGxZMnRKWkdWdWRHbG1hV1Z5S0c1dlpHVXVZV3hwWVhNc0lDZDJMV1p2Y2lCaGJHbGhjeWNzSUhSbGVIUXNJSGRoY200c0lISmhibWRsS1R0Y2JpQWdZMmhsWTJ0SlpHVnVkR2xtYVdWeUtHNXZaR1V1YVhSbGNtRjBiM0l4TENBbmRpMW1iM0lnYVhSbGNtRjBiM0luTENCMFpYaDBMQ0IzWVhKdUxDQnlZVzVuWlNrN1hHNGdJR05vWldOclNXUmxiblJwWm1sbGNpaHViMlJsTG1sMFpYSmhkRzl5TWl3Z0ozWXRabTl5SUdsMFpYSmhkRzl5Snl3Z2RHVjRkQ3dnZDJGeWJpd2djbUZ1WjJVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamFHVmphMGxrWlc1MGFXWnBaWElnS0Z4dUlDQnBaR1Z1ZEN4Y2JpQWdkSGx3WlN4Y2JpQWdkR1Y0ZEN4Y2JpQWdkMkZ5Yml4Y2JpQWdjbUZ1WjJWY2Jpa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHbGtaVzUwSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0J1WlhjZ1JuVnVZM1JwYjI0b0tGd2lkbUZ5SUZ3aUlDc2dhV1JsYm5RZ0t5QmNJajFmWENJcEtUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQjNZWEp1S0NoY0ltbHVkbUZzYVdRZ1hDSWdLeUIwZVhCbElDc2dYQ0lnWEZ4Y0lsd2lJQ3NnYVdSbGJuUWdLeUJjSWx4Y1hDSWdhVzRnWlhod2NtVnpjMmx2YmpvZ1hDSWdLeUFvZEdWNGRDNTBjbWx0S0NrcEtTd2djbUZ1WjJVcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmphR1ZqYTBWNGNISmxjM05wYjI0Z0tHVjRjQ3dnZEdWNGRDd2dkMkZ5Yml3Z2NtRnVaMlVwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0J1WlhjZ1JuVnVZM1JwYjI0b0tGd2ljbVYwZFhKdUlGd2lJQ3NnWlhod0tTazdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCMllYSWdhMlY1ZDI5eVpFMWhkR05vSUQwZ1pYaHdMbkpsY0d4aFkyVW9jM1J5YVhCVGRISnBibWRTUlN3Z0p5Y3BMbTFoZEdOb0tIQnliMmhwWW1sMFpXUkxaWGwzYjNKa1VrVXBPMXh1SUNBZ0lHbG1JQ2hyWlhsM2IzSmtUV0YwWTJncElIdGNiaUFnSUNBZ0lIZGhjbTRvWEc0Z0lDQWdJQ0FnSUZ3aVlYWnZhV1FnZFhOcGJtY2dTbUYyWVZOamNtbHdkQ0JyWlhsM2IzSmtJR0Z6SUhCeWIzQmxjblI1SUc1aGJXVTZJRndpSUN0Y2JpQWdJQ0FnSUNBZ1hDSmNYRndpWENJZ0t5QW9hMlY1ZDI5eVpFMWhkR05vV3pCZEtTQXJJRndpWEZ4Y0lseGNiaUFnVW1GM0lHVjRjSEpsYzNOcGIyNDZJRndpSUNzZ0tIUmxlSFF1ZEhKcGJTZ3BLU3hjYmlBZ0lDQWdJQ0FnY21GdVoyVmNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhkaGNtNG9YRzRnSUNBZ0lDQWdJRndpYVc1MllXeHBaQ0JsZUhCeVpYTnphVzl1T2lCY0lpQXJJQ2hsTG0xbGMzTmhaMlVwSUNzZ1hDSWdhVzVjWEc1Y1hHNWNJaUFyWEc0Z0lDQWdJQ0FnSUZ3aUlDQWdJRndpSUNzZ1pYaHdJQ3NnWENKY1hHNWNYRzVjSWlBclhHNGdJQ0FnSUNBZ0lGd2lJQ0JTWVhjZ1pYaHdjbVZ6YzJsdmJqb2dYQ0lnS3lBb2RHVjRkQzUwY21sdEtDa3BJQ3NnWENKY1hHNWNJaXhjYmlBZ0lDQWdJQ0FnY21GdVoyVmNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNiaThxSUNBcUwxeHVYRzUyWVhJZ2NtRnVaMlVnUFNBeU8xeHVYRzVtZFc1amRHbHZiaUJuWlc1bGNtRjBaVU52WkdWR2NtRnRaU0FvWEc0Z0lITnZkWEpqWlN4Y2JpQWdjM1JoY25Rc1hHNGdJR1Z1WkZ4dUtTQjdYRzRnSUdsbUlDZ2djM1JoY25RZ1BUMDlJSFp2YVdRZ01DQXBJSE4wWVhKMElEMGdNRHRjYmlBZ2FXWWdLQ0JsYm1RZ1BUMDlJSFp2YVdRZ01DQXBJR1Z1WkNBOUlITnZkWEpqWlM1c1pXNW5kR2c3WEc1Y2JpQWdkbUZ5SUd4cGJtVnpJRDBnYzI5MWNtTmxMbk53YkdsMEtDOWNYSEkvWEZ4dUx5azdYRzRnSUhaaGNpQmpiM1Z1ZENBOUlEQTdYRzRnSUhaaGNpQnlaWE1nUFNCYlhUdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc2FXNWxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUdOdmRXNTBJQ3M5SUd4cGJtVnpXMmxkTG14bGJtZDBhQ0FySURFN1hHNGdJQ0FnYVdZZ0tHTnZkVzUwSUQ0OUlITjBZWEowS1NCN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdhU0F0SUhKaGJtZGxPeUJxSUR3OUlHa2dLeUJ5WVc1blpTQjhmQ0JsYm1RZ1BpQmpiM1Z1ZERzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHFJRHdnTUNCOGZDQnFJRDQ5SUd4cGJtVnpMbXhsYm1kMGFDa2dleUJqYjI1MGFXNTFaU0I5WEc0Z0lDQWdJQ0FnSUhKbGN5NXdkWE5vS0NoY0lsd2lJQ3NnS0dvZ0t5QXhLU0FySUNoeVpYQmxZWFFrTVNoY0lpQmNJaXdnTXlBdElGTjBjbWx1WnlocUlDc2dNU2t1YkdWdVozUm9LU2tnS3lCY0lud2dJRndpSUNzZ0tHeHBibVZ6VzJwZEtTa3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JHbHVaVXhsYm1kMGFDQTlJR3hwYm1WelcycGRMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdhV1lnS0dvZ1BUMDlJR2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJ3ZFhOb0lIVnVaR1Z5YkdsdVpWeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCd1lXUWdQU0J6ZEdGeWRDQXRJQ2hqYjNWdWRDQXRJR3hwYm1WTVpXNW5kR2dwSUNzZ01UdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1pXNWtJRDRnWTI5MWJuUWdQeUJzYVc1bFRHVnVaM1JvSUMwZ2NHRmtJRG9nWlc1a0lDMGdjM1JoY25RN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6TG5CMWMyZ29YQ0lnSUNCOElDQmNJaUFySUhKbGNHVmhkQ1F4S0Z3aUlGd2lMQ0J3WVdRcElDc2djbVZ3WldGMEpERW9YQ0plWENJc0lHeGxibWQwYUNrcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR29nUGlCcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnVaQ0ErSUdOdmRXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYkdWdVozUm9KREVnUFNCTllYUm9MbTFwYmlobGJtUWdMU0JqYjNWdWRDd2diR2x1WlV4bGJtZDBhQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE11Y0hWemFDaGNJaUFnSUh3Z0lGd2lJQ3NnY21Wd1pXRjBKREVvWENKZVhDSXNJR3hsYm1kMGFDUXhLU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR052ZFc1MElDczlJR3hwYm1WTVpXNW5kR2dnS3lBeE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmljbVZoYTF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6TG1wdmFXNG9KMXhjYmljcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGNHVmhkQ1F4SUNoemRISXNJRzRwSUh0Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUNjbk8xeHVJQ0JwWmlBb2JpQStJREFwSUh0Y2JpQWdJQ0IzYUdsc1pTQW9kSEoxWlNrZ2V5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsWEc0Z0lDQWdJQ0JwWmlBb2JpQW1JREVwSUhzZ2NtVnpkV3gwSUNzOUlITjBjanNnZlZ4dUlDQWdJQ0FnYmlBK1BqNDlJREU3WEc0Z0lDQWdJQ0JwWmlBb2JpQThQU0F3S1NCN0lHSnlaV0ZySUgxY2JpQWdJQ0FnSUhOMGNpQXJQU0J6ZEhJN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUmNibjFjYmx4dUx5b2dJQ292WEc1Y2JseHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVkdkVzVqZEdsdmJpQW9ZMjlrWlN3Z1pYSnliM0p6S1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCR2RXNWpkR2x2YmloamIyUmxLVnh1SUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQmxjbkp2Y25NdWNIVnphQ2g3SUdWeWNqb2daWEp5TENCamIyUmxPaUJqYjJSbElIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCdWIyOXdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMjl0Y0dsc1pWUnZSblZ1WTNScGIyNUdiaUFvWTI5dGNHbHNaU2tnZTF4dUlDQjJZWElnWTJGamFHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dVhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQmpiMjF3YVd4bFZHOUdkVzVqZEdsdmJuTWdLRnh1SUNBZ0lIUmxiWEJzWVhSbExGeHVJQ0FnSUc5d2RHbHZibk1zWEc0Z0lDQWdkbTFjYmlBZ0tTQjdYRzRnSUNBZ2IzQjBhVzl1Y3lBOUlHVjRkR1Z1WkNoN2ZTd2diM0IwYVc5dWN5azdYRzRnSUNBZ2RtRnlJSGRoY200a0pERWdQU0J2Y0hScGIyNXpMbmRoY200Z2ZId2dkMkZ5Ymp0Y2JpQWdJQ0JrWld4bGRHVWdiM0IwYVc5dWN5NTNZWEp1TzF4dVhHNGdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0x5OGdaR1YwWldOMElIQnZjM05wWW14bElFTlRVQ0J5WlhOMGNtbGpkR2x2Ymx4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdibVYzSUVaMWJtTjBhVzl1S0NkeVpYUjFjbTRnTVNjcE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pTNTBiMU4wY21sdVp5Z3BMbTFoZEdOb0tDOTFibk5oWm1VdFpYWmhiSHhEVTFBdktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhkaGNtNGtKREVvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5TWFFnYzJWbGJYTWdlVzkxSUdGeVpTQjFjMmx1WnlCMGFHVWdjM1JoYm1SaGJHOXVaU0JpZFdsc1pDQnZaaUJXZFdVdWFuTWdhVzRnWVc0Z0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBblpXNTJhWEp2Ym0xbGJuUWdkMmwwYUNCRGIyNTBaVzUwSUZObFkzVnlhWFI1SUZCdmJHbGplU0IwYUdGMElIQnliMmhwWW1sMGN5QjFibk5oWm1VdFpYWmhiQzRnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FuVkdobElIUmxiWEJzWVhSbElHTnZiWEJwYkdWeUlHTmhibTV2ZENCM2IzSnJJR2x1SUhSb2FYTWdaVzUyYVhKdmJtMWxiblF1SUVOdmJuTnBaR1Z5SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSjNKbGJHRjRhVzVuSUhSb1pTQndiMnhwWTNrZ2RHOGdZV3hzYjNjZ2RXNXpZV1psTFdWMllXd2diM0lnY0hKbExXTnZiWEJwYkdsdVp5QjViM1Z5SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSjNSbGJYQnNZWFJsY3lCcGJuUnZJSEpsYm1SbGNpQm1kVzVqZEdsdmJuTXVKMXh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QmphR1ZqYXlCallXTm9aVnh1SUNBZ0lIWmhjaUJyWlhrZ1BTQnZjSFJwYjI1ekxtUmxiR2x0YVhSbGNuTmNiaUFnSUNBZ0lEOGdVM1J5YVc1bktHOXdkR2x2Ym5NdVpHVnNhVzFwZEdWeWN5a2dLeUIwWlcxd2JHRjBaVnh1SUNBZ0lDQWdPaUIwWlcxd2JHRjBaVHRjYmlBZ0lDQnBaaUFvWTJGamFHVmJhMlY1WFNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxXMnRsZVYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCamIyMXdhV3hsWEc0Z0lDQWdkbUZ5SUdOdmJYQnBiR1ZrSUQwZ1kyOXRjR2xzWlNoMFpXMXdiR0YwWlN3Z2IzQjBhVzl1Y3lrN1hHNWNiaUFnSUNBdkx5QmphR1ZqYXlCamIyMXdhV3hoZEdsdmJpQmxjbkp2Y25NdmRHbHdjMXh1SUNBZ0lIdGNiaUFnSUNBZ0lHbG1JQ2hqYjIxd2FXeGxaQzVsY25KdmNuTWdKaVlnWTI5dGNHbHNaV1F1WlhKeWIzSnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1dmRYUndkWFJUYjNWeVkyVlNZVzVuWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052YlhCcGJHVmtMbVZ5Y205eWN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNZWEp1SkNReEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0lrVnljbTl5SUdOdmJYQnBiR2x1WnlCMFpXMXdiR0YwWlRwY1hHNWNYRzVjSWlBcklDaGxMbTF6WnlrZ0t5QmNJbHhjYmx4Y2Jsd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlZ1WlhKaGRHVkRiMlJsUm5KaGJXVW9kR1Z0Y0d4aGRHVXNJR1V1YzNSaGNuUXNJR1V1Wlc1a0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtMWNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2QyRnliaVFrTVNoY2JpQWdJQ0FnSUNBZ0lDQWdJRndpUlhKeWIzSWdZMjl0Y0dsc2FXNW5JSFJsYlhCc1lYUmxPbHhjYmx4Y2Jsd2lJQ3NnZEdWdGNHeGhkR1VnS3lCY0lseGNibHhjYmx3aUlDdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJYQnBiR1ZrTG1WeWNtOXljeTV0WVhBb1puVnVZM1JwYjI0Z0tHVXBJSHNnY21WMGRYSnVJQ2hjSWkwZ1hDSWdLeUJsS1RzZ2ZTa3VhbTlwYmlnblhGeHVKeWtnS3lBblhGeHVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnRYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR052YlhCcGJHVmtMblJwY0hNZ0ppWWdZMjl0Y0dsc1pXUXVkR2x3Y3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXViM1YwY0hWMFUyOTFjbU5sVW1GdVoyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyMXdhV3hsWkM1MGFYQnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR1VwSUhzZ2NtVjBkWEp1SUhScGNDaGxMbTF6Wnl3Z2RtMHBPeUI5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjF3YVd4bFpDNTBhWEJ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0cxelp5a2dleUJ5WlhSMWNtNGdkR2x3S0cxelp5d2dkbTBwT3lCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSFIxY200Z1kyOWtaU0JwYm5SdklHWjFibU4wYVc5dWMxeHVJQ0FnSUhaaGNpQnlaWE1nUFNCN2ZUdGNiaUFnSUNCMllYSWdabTVIWlc1RmNuSnZjbk1nUFNCYlhUdGNiaUFnSUNCeVpYTXVjbVZ1WkdWeUlEMGdZM0psWVhSbFJuVnVZM1JwYjI0b1kyOXRjR2xzWldRdWNtVnVaR1Z5TENCbWJrZGxia1Z5Y205eWN5azdYRzRnSUNBZ2NtVnpMbk4wWVhScFkxSmxibVJsY2tadWN5QTlJR052YlhCcGJHVmtMbk4wWVhScFkxSmxibVJsY2tadWN5NXRZWEFvWm5WdVkzUnBiMjRnS0dOdlpHVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpjbVZoZEdWR2RXNWpkR2x2YmloamIyUmxMQ0JtYmtkbGJrVnljbTl5Y3lsY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4dklHTm9aV05ySUdaMWJtTjBhVzl1SUdkbGJtVnlZWFJwYjI0Z1pYSnliM0p6TGx4dUlDQWdJQzh2SUhSb2FYTWdjMmh2ZFd4a0lHOXViSGtnYUdGd2NHVnVJR2xtSUhSb1pYSmxJR2x6SUdFZ1luVm5JR2x1SUhSb1pTQmpiMjF3YVd4bGNpQnBkSE5sYkdZdVhHNGdJQ0FnTHk4Z2JXOXpkR3g1SUdadmNpQmpiMlJsWjJWdUlHUmxkbVZzYjNCdFpXNTBJSFZ6WlZ4dUlDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0FnSUh0Y2JpQWdJQ0FnSUdsbUlDZ29JV052YlhCcGJHVmtMbVZ5Y205eWN5QjhmQ0FoWTI5dGNHbHNaV1F1WlhKeWIzSnpMbXhsYm1kMGFDa2dKaVlnWm01SFpXNUZjbkp2Y25NdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTRrSkRFb1hHNGdJQ0FnSUNBZ0lDQWdYQ0pHWVdsc1pXUWdkRzhnWjJWdVpYSmhkR1VnY21WdVpHVnlJR1oxYm1OMGFXOXVPbHhjYmx4Y2Jsd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNCbWJrZGxia1Z5Y205eWN5NXRZWEFvWm5WdVkzUnBiMjRnS0hKbFppa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z5Y2lBOUlISmxaaTVsY25JN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyOWtaU0E5SUhKbFppNWpiMlJsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLQ2hsY25JdWRHOVRkSEpwYm1jb0tTa2dLeUJjSWlCcGJseGNibHhjYmx3aUlDc2dZMjlrWlNBcklGd2lYRnh1WENJcE8xeHVJQ0FnSUNBZ0lDQjlLUzVxYjJsdUtDZGNYRzRuS1N4Y2JpQWdJQ0FnSUNBZ0lDQjJiVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQW9ZMkZqYUdWYmEyVjVYU0E5SUhKbGN5bGNiaUFnZlZ4dWZWeHVYRzR2S2lBZ0tpOWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRMjl0Y0dsc1pYSkRjbVZoZEc5eUlDaGlZWE5sUTI5dGNHbHNaU2tnZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1kzSmxZWFJsUTI5dGNHbHNaWElnS0dKaGMyVlBjSFJwYjI1ektTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1kyOXRjR2xzWlNBb1hHNGdJQ0FnSUNCMFpXMXdiR0YwWlN4Y2JpQWdJQ0FnSUc5d2RHbHZibk5jYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJSFpoY2lCbWFXNWhiRTl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHSmhjMlZQY0hScGIyNXpLVHRjYmlBZ0lDQWdJSFpoY2lCbGNuSnZjbk1nUFNCYlhUdGNiaUFnSUNBZ0lIWmhjaUIwYVhCeklEMGdXMTA3WEc1Y2JpQWdJQ0FnSUhaaGNpQjNZWEp1SUQwZ1puVnVZM1JwYjI0Z0tHMXpaeXdnY21GdVoyVXNJSFJwY0NrZ2UxeHVJQ0FnSUNBZ0lDQW9kR2x3SUQ4Z2RHbHdjeUE2SUdWeWNtOXljeWt1Y0hWemFDaHRjMmNwTzF4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWIzVjBjSFYwVTI5MWNtTmxVbUZ1WjJVcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlBa1pteHZkeTFrYVhOaFlteGxMV3hwYm1WY2JpQWdJQ0FnSUNBZ0lDQjJZWElnYkdWaFpHbHVaMU53WVdObFRHVnVaM1JvSUQwZ2RHVnRjR3hoZEdVdWJXRjBZMmdvTDE1Y1hITXFMeWxiTUYwdWJHVnVaM1JvTzF4dVhHNGdJQ0FnSUNBZ0lDQWdkMkZ5YmlBOUlHWjFibU4wYVc5dUlDaHRjMmNzSUhKaGJtZGxMQ0IwYVhBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtZWFJoSUQwZ2V5QnRjMmM2SUcxelp5QjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpoYm1kbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WVc1blpTNXpkR0Z5ZENBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZUzV6ZEdGeWRDQTlJSEpoYm1kbExuTjBZWEowSUNzZ2JHVmhaR2x1WjFOd1lXTmxUR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlZVzVuWlM1bGJtUWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFdVpXNWtJRDBnY21GdVoyVXVaVzVrSUNzZ2JHVmhaR2x1WjFOd1lXTmxUR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQW9kR2x3SUQ4Z2RHbHdjeUE2SUdWeWNtOXljeWt1Y0hWemFDaGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklHMWxjbWRsSUdOMWMzUnZiU0J0YjJSMWJHVnpYRzRnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG0xdlpIVnNaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQm1hVzVoYkU5d2RHbHZibk11Ylc5a2RXeGxjeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQW9ZbUZ6WlU5d2RHbHZibk11Ylc5a2RXeGxjeUI4ZkNCYlhTa3VZMjl1WTJGMEtHOXdkR2x2Ym5NdWJXOWtkV3hsY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnYldWeVoyVWdZM1Z6ZEc5dElHUnBjbVZqZEdsMlpYTmNiaUFnSUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11WkdseVpXTjBhWFpsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1pwYm1Gc1QzQjBhVzl1Y3k1a2FYSmxZM1JwZG1WeklEMGdaWGgwWlc1a0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbU55WldGMFpTaGlZWE5sVDNCMGFXOXVjeTVrYVhKbFkzUnBkbVZ6SUh4OElHNTFiR3dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NWthWEpsWTNScGRtVnpYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJqYjNCNUlHOTBhR1Z5SUc5d2RHbHZibk5jYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hMlY1SUNFOVBTQW5iVzlrZFd4bGN5Y2dKaVlnYTJWNUlDRTlQU0FuWkdseVpXTjBhWFpsY3ljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdacGJtRnNUM0IwYVc5dWMxdHJaWGxkSUQwZ2IzQjBhVzl1YzF0clpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQm1hVzVoYkU5d2RHbHZibk11ZDJGeWJpQTlJSGRoY200N1hHNWNiaUFnSUNBZ0lIWmhjaUJqYjIxd2FXeGxaQ0E5SUdKaGMyVkRiMjF3YVd4bEtIUmxiWEJzWVhSbExuUnlhVzBvS1N3Z1ptbHVZV3hQY0hScGIyNXpLVHRjYmlBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnWkdWMFpXTjBSWEp5YjNKektHTnZiWEJwYkdWa0xtRnpkQ3dnZDJGeWJpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpiMjF3YVd4bFpDNWxjbkp2Y25NZ1BTQmxjbkp2Y25NN1hHNGdJQ0FnSUNCamIyMXdhV3hsWkM1MGFYQnpJRDBnZEdsd2N6dGNiaUFnSUNBZ0lISmxkSFZ5YmlCamIyMXdhV3hsWkZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQmpiMjF3YVd4bE9pQmpiMjF3YVd4bExGeHVJQ0FnSUNBZ1kyOXRjR2xzWlZSdlJuVnVZM1JwYjI1ek9pQmpjbVZoZEdWRGIyMXdhV3hsVkc5R2RXNWpkR2x2YmtadUtHTnZiWEJwYkdVcFhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JpOHFJQ0FxTDF4dVhHNHZMeUJnWTNKbFlYUmxRMjl0Y0dsc1pYSkRjbVZoZEc5eVlDQmhiR3h2ZDNNZ1kzSmxZWFJwYm1jZ1kyOXRjR2xzWlhKeklIUm9ZWFFnZFhObElHRnNkR1Z5Ym1GMGFYWmxYRzR2THlCd1lYSnpaWEl2YjNCMGFXMXBlbVZ5TDJOdlpHVm5aVzRzSUdVdVp5QjBhR1VnVTFOU0lHOXdkR2x0YVhwcGJtY2dZMjl0Y0dsc1pYSXVYRzR2THlCSVpYSmxJSGRsSUdwMWMzUWdaWGh3YjNKMElHRWdaR1ZtWVhWc2RDQmpiMjF3YVd4bGNpQjFjMmx1WnlCMGFHVWdaR1ZtWVhWc2RDQndZWEowY3k1Y2JuWmhjaUJqY21WaGRHVkRiMjF3YVd4bGNpQTlJR055WldGMFpVTnZiWEJwYkdWeVEzSmxZWFJ2Y2lobWRXNWpkR2x2YmlCaVlYTmxRMjl0Y0dsc1pTQW9YRzRnSUhSbGJYQnNZWFJsTEZ4dUlDQnZjSFJwYjI1elhHNHBJSHRjYmlBZ2RtRnlJR0Z6ZENBOUlIQmhjbk5sS0hSbGJYQnNZWFJsTG5SeWFXMG9LU3dnYjNCMGFXOXVjeWs3WEc0Z0lHbG1JQ2h2Y0hScGIyNXpMbTl3ZEdsdGFYcGxJQ0U5UFNCbVlXeHpaU2tnZTF4dUlDQWdJRzl3ZEdsdGFYcGxLR0Z6ZEN3Z2IzQjBhVzl1Y3lrN1hHNGdJSDFjYmlBZ2RtRnlJR052WkdVZ1BTQm5aVzVsY21GMFpTaGhjM1FzSUc5d2RHbHZibk1wTzF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdGemREb2dZWE4wTEZ4dUlDQWdJSEpsYm1SbGNqb2dZMjlrWlM1eVpXNWtaWElzWEc0Z0lDQWdjM1JoZEdsalVtVnVaR1Z5Um01ek9pQmpiMlJsTG5OMFlYUnBZMUpsYm1SbGNrWnVjMXh1SUNCOVhHNTlLVHRjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJ5WldZa01TQTlJR055WldGMFpVTnZiWEJwYkdWeUtHSmhjMlZQY0hScGIyNXpLVHRjYm5aaGNpQmpiMjF3YVd4bElEMGdjbVZtSkRFdVkyOXRjR2xzWlR0Y2JuWmhjaUJqYjIxd2FXeGxWRzlHZFc1amRHbHZibk1nUFNCeVpXWWtNUzVqYjIxd2FXeGxWRzlHZFc1amRHbHZibk03WEc1Y2JpOHFJQ0FxTDF4dVhHNHZMeUJqYUdWamF5QjNhR1YwYUdWeUlHTjFjbkpsYm5RZ1luSnZkM05sY2lCbGJtTnZaR1Z6SUdFZ1kyaGhjaUJwYm5OcFpHVWdZWFIwY21saWRYUmxJSFpoYkhWbGMxeHVkbUZ5SUdScGRqdGNibVoxYm1OMGFXOXVJR2RsZEZOb2IzVnNaRVJsWTI5a1pTQW9hSEpsWmlrZ2UxeHVJQ0JrYVhZZ1BTQmthWFlnZkh3Z1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5azdYRzRnSUdScGRpNXBibTVsY2toVVRVd2dQU0JvY21WbUlEOGdYQ0k4WVNCb2NtVm1QVnhjWENKY1hHNWNYRndpTHo1Y0lpQTZJRndpUEdScGRpQmhQVnhjWENKY1hHNWNYRndpTHo1Y0lqdGNiaUFnY21WMGRYSnVJR1JwZGk1cGJtNWxja2hVVFV3dWFXNWtaWGhQWmlnbkppTXhNRHNuS1NBK0lEQmNibjFjYmx4dUx5OGdJek0yTmpNNklFbEZJR1Z1WTI5a1pYTWdibVYzYkdsdVpYTWdhVzV6YVdSbElHRjBkSEpwWW5WMFpTQjJZV3gxWlhNZ2QyaHBiR1VnYjNSb1pYSWdZbkp2ZDNObGNuTWdaRzl1SjNSY2JuWmhjaUJ6YUc5MWJHUkVaV052WkdWT1pYZHNhVzVsY3lBOUlHbHVRbkp2ZDNObGNpQS9JR2RsZEZOb2IzVnNaRVJsWTI5a1pTaG1ZV3h6WlNrZ09pQm1ZV3h6WlR0Y2JpOHZJQ00yT0RJNE9pQmphSEp2YldVZ1pXNWpiMlJsY3lCamIyNTBaVzUwSUdsdUlHRmJhSEpsWmwxY2JuWmhjaUJ6YUc5MWJHUkVaV052WkdWT1pYZHNhVzVsYzBadmNraHlaV1lnUFNCcGJrSnliM2R6WlhJZ1B5Qm5aWFJUYUc5MWJHUkVaV052WkdVb2RISjFaU2tnT2lCbVlXeHpaVHRjYmx4dUx5b2dJQ292WEc1Y2JuWmhjaUJwWkZSdlZHVnRjR3hoZEdVZ1BTQmpZV05vWldRb1puVnVZM1JwYjI0Z0tHbGtLU0I3WEc0Z0lIWmhjaUJsYkNBOUlIRjFaWEo1S0dsa0tUdGNiaUFnY21WMGRYSnVJR1ZzSUNZbUlHVnNMbWx1Ym1WeVNGUk5URnh1ZlNrN1hHNWNiblpoY2lCdGIzVnVkQ0E5SUZaMVpTNXdjbTkwYjNSNWNHVXVKRzF2ZFc1ME8xeHVWblZsTG5CeWIzUnZkSGx3WlM0a2JXOTFiblFnUFNCbWRXNWpkR2x2YmlBb1hHNGdJR1ZzTEZ4dUlDQm9lV1J5WVhScGJtZGNiaWtnZTF4dUlDQmxiQ0E5SUdWc0lDWW1JSEYxWlhKNUtHVnNLVHRjYmx4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdhV1lnS0dWc0lEMDlQU0JrYjJOMWJXVnVkQzVpYjJSNUlIeDhJR1ZzSUQwOVBTQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RcElIdGNiaUFnSUNCM1lYSnVLRnh1SUNBZ0lDQWdYQ0pFYnlCdWIzUWdiVzkxYm5RZ1ZuVmxJSFJ2SUR4b2RHMXNQaUJ2Y2lBOFltOWtlVDRnTFNCdGIzVnVkQ0IwYnlCdWIzSnRZV3dnWld4bGJXVnVkSE1nYVc1emRHVmhaQzVjSWx4dUlDQWdJQ2s3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZWeHVYRzRnSUhaaGNpQnZjSFJwYjI1eklEMGdkR2hwY3k0a2IzQjBhVzl1Y3p0Y2JpQWdMeThnY21WemIyeDJaU0IwWlcxd2JHRjBaUzlsYkNCaGJtUWdZMjl1ZG1WeWRDQjBieUJ5Wlc1a1pYSWdablZ1WTNScGIyNWNiaUFnYVdZZ0tDRnZjSFJwYjI1ekxuSmxibVJsY2lrZ2UxeHVJQ0FnSUhaaGNpQjBaVzF3YkdGMFpTQTlJRzl3ZEdsdmJuTXVkR1Z0Y0d4aGRHVTdYRzRnSUNBZ2FXWWdLSFJsYlhCc1lYUmxLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhSbGJYQnNZWFJsSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHVnRjR3hoZEdVdVkyaGhja0YwS0RBcElEMDlQU0FuSXljcElIdGNiaUFnSUNBZ0lDQWdJQ0IwWlcxd2JHRjBaU0E5SUdsa1ZHOVVaVzF3YkdGMFpTaDBaVzF3YkdGMFpTazdYRzRnSUNBZ0lDQWdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBaVzF3YkdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyRnliaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdLRndpVkdWdGNHeGhkR1VnWld4bGJXVnVkQ0J1YjNRZ1ptOTFibVFnYjNJZ2FYTWdaVzF3ZEhrNklGd2lJQ3NnS0c5d2RHbHZibk11ZEdWdGNHeGhkR1VwS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdWdGNHeGhkR1V1Ym05a1pWUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHVnRjR3hoZEdVZ1BTQjBaVzF3YkdGMFpTNXBibTVsY2toVVRVdzdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnZDJGeWJpZ25hVzUyWVd4cFpDQjBaVzF3YkdGMFpTQnZjSFJwYjI0Nkp5QXJJSFJsYlhCc1lYUmxMQ0IwYUdsektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvWld3cElIdGNiaUFnSUNBZ0lIUmxiWEJzWVhSbElEMGdaMlYwVDNWMFpYSklWRTFNS0dWc0tUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUmxiWEJzWVhSbEtTQjdYRzRnSUNBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JpQWdJQ0FnSUdsbUlDaGpiMjVtYVdjdWNHVnlabTl5YldGdVkyVWdKaVlnYldGeWF5a2dlMXh1SUNBZ0lDQWdJQ0J0WVhKcktDZGpiMjF3YVd4bEp5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFpoY2lCeVpXWWdQU0JqYjIxd2FXeGxWRzlHZFc1amRHbHZibk1vZEdWdGNHeGhkR1VzSUh0Y2JpQWdJQ0FnSUNBZ2IzVjBjSFYwVTI5MWNtTmxVbUZ1WjJVNklGd2laR1YyWld4dmNHMWxiblJjSWlBaFBUMGdKM0J5YjJSMVkzUnBiMjRuTEZ4dUlDQWdJQ0FnSUNCemFHOTFiR1JFWldOdlpHVk9aWGRzYVc1bGN6b2djMmh2ZFd4a1JHVmpiMlJsVG1WM2JHbHVaWE1zWEc0Z0lDQWdJQ0FnSUhOb2IzVnNaRVJsWTI5a1pVNWxkMnhwYm1WelJtOXlTSEpsWmpvZ2MyaHZkV3hrUkdWamIyUmxUbVYzYkdsdVpYTkdiM0pJY21WbUxGeHVJQ0FnSUNBZ0lDQmtaV3hwYldsMFpYSnpPaUJ2Y0hScGIyNXpMbVJsYkdsdGFYUmxjbk1zWEc0Z0lDQWdJQ0FnSUdOdmJXMWxiblJ6T2lCdmNIUnBiMjV6TG1OdmJXMWxiblJ6WEc0Z0lDQWdJQ0I5TENCMGFHbHpLVHRjYmlBZ0lDQWdJSFpoY2lCeVpXNWtaWElnUFNCeVpXWXVjbVZ1WkdWeU8xeHVJQ0FnSUNBZ2RtRnlJSE4wWVhScFkxSmxibVJsY2tadWN5QTlJSEpsWmk1emRHRjBhV05TWlc1a1pYSkdibk03WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbkpsYm1SbGNpQTlJSEpsYm1SbGNqdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NdWMzUmhkR2xqVW1WdVpHVnlSbTV6SUQwZ2MzUmhkR2xqVW1WdVpHVnlSbTV6TzF4dVhHNGdJQ0FnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWWdLaTljYmlBZ0lDQWdJR2xtSUNoamIyNW1hV2N1Y0dWeVptOXliV0Z1WTJVZ0ppWWdiV0Z5YXlrZ2UxeHVJQ0FnSUNBZ0lDQnRZWEpyS0NkamIyMXdhV3hsSUdWdVpDY3BPMXh1SUNBZ0lDQWdJQ0J0WldGemRYSmxLQ2hjSW5aMVpTQmNJaUFySUNoMGFHbHpMbDl1WVcxbEtTQXJJRndpSUdOdmJYQnBiR1ZjSWlrc0lDZGpiMjF3YVd4bEp5d2dKMk52YlhCcGJHVWdaVzVrSnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ0YjNWdWRDNWpZV3hzS0hSb2FYTXNJR1ZzTENCb2VXUnlZWFJwYm1jcFhHNTlPMXh1WEc0dktpcGNiaUFxSUVkbGRDQnZkWFJsY2toVVRVd2diMllnWld4bGJXVnVkSE1zSUhSaGEybHVaeUJqWVhKbFhHNGdLaUJ2WmlCVFZrY2daV3hsYldWdWRITWdhVzRnU1VVZ1lYTWdkMlZzYkM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFQzVjBaWEpJVkUxTUlDaGxiQ2tnZTF4dUlDQnBaaUFvWld3dWIzVjBaWEpJVkUxTUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWc0xtOTFkR1Z5U0ZSTlRGeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIWmhjaUJqYjI1MFlXbHVaWElnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktUdGNiaUFnSUNCamIyNTBZV2x1WlhJdVlYQndaVzVrUTJocGJHUW9aV3d1WTJ4dmJtVk9iMlJsS0hSeWRXVXBLVHRjYmlBZ0lDQnlaWFIxY200Z1kyOXVkR0ZwYm1WeUxtbHVibVZ5U0ZSTlRGeHVJQ0I5WEc1OVhHNWNibFoxWlM1amIyMXdhV3hsSUQwZ1kyOXRjR2xzWlZSdlJuVnVZM1JwYjI1ek8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRloxWlR0Y2JpSXNJbWxtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQTlQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk5MmRXVXVZMjl0Ylc5dUxuQnliMlF1YW5NbktWeHVmU0JsYkhObElIdGNiaUFnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDNaMVpTNWpiMjF0YjI0dVpHVjJMbXB6SnlsY2JuMWNiaUlzSWk4cUlWeHVJQ29nVm5WbExtcHpJSFl5TGpZdU1UQmNiaUFxSUNoaktTQXlNREUwTFRJd01Ua2dSWFpoYmlCWmIzVmNiaUFxSUZKbGJHVmhjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdUR2xqWlc1elpTNWNiaUFxTDF4dVhDSjFjMlVnYzNSeWFXTjBYQ0k3ZG1GeUlHVTlUMkpxWldOMExtWnlaV1Y2WlNoN2ZTazdablZ1WTNScGIyNGdkQ2hsS1h0eVpYUjFjbTRnYm5Wc2JEMDlaWDFtZFc1amRHbHZiaUJ1S0dVcGUzSmxkSFZ5YmlCdWRXeHNJVDFsZldaMWJtTjBhVzl1SUhJb1pTbDdjbVYwZFhKdUlUQTlQVDFsZldaMWJtTjBhVzl1SUdrb1pTbDdjbVYwZFhKdVhDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHVjhmRndpYm5WdFltVnlYQ0k5UFhSNWNHVnZaaUJsZkh4Y0luTjViV0p2YkZ3aVBUMTBlWEJsYjJZZ1pYeDhYQ0ppYjI5c1pXRnVYQ0k5UFhSNWNHVnZaaUJsZldaMWJtTjBhVzl1SUc4b1pTbDdjbVYwZFhKdUlHNTFiR3doUFQxbEppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdaWDEyWVhJZ1lUMVBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bk8yWjFibU4wYVc5dUlITW9aU2w3Y21WMGRYSnVYQ0piYjJKcVpXTjBJRTlpYW1WamRGMWNJajA5UFdFdVkyRnNiQ2hsS1gxbWRXNWpkR2x2YmlCaktHVXBlM1poY2lCMFBYQmhjbk5sUm14dllYUW9VM1J5YVc1bktHVXBLVHR5WlhSMWNtNGdkRDQ5TUNZbVRXRjBhQzVtYkc5dmNpaDBLVDA5UFhRbUptbHpSbWx1YVhSbEtHVXBmV1oxYm1OMGFXOXVJSFVvWlNsN2NtVjBkWEp1SUc0b1pTa21KbHdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVdWRHaGxiaVltWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1pTNWpZWFJqYUgxbWRXNWpkR2x2YmlCc0tHVXBlM0psZEhWeWJpQnVkV3hzUFQxbFAxd2lYQ0k2UVhKeVlYa3VhWE5CY25KaGVTaGxLWHg4Y3lobEtTWW1aUzUwYjFOMGNtbHVaejA5UFdFL1NsTlBUaTV6ZEhKcGJtZHBabmtvWlN4dWRXeHNMRElwT2xOMGNtbHVaeWhsS1gxbWRXNWpkR2x2YmlCbUtHVXBlM1poY2lCMFBYQmhjbk5sUm14dllYUW9aU2s3Y21WMGRYSnVJR2x6VG1GT0tIUXBQMlU2ZEgxbWRXNWpkR2x2YmlCd0tHVXNkQ2w3Wm05eUtIWmhjaUJ1UFU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrc2NqMWxMbk53YkdsMEtGd2lMRndpS1N4cFBUQTdhVHh5TG14bGJtZDBhRHRwS3lzcGJsdHlXMmxkWFQwaE1EdHlaWFIxY200Z2REOW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdibHRsTG5SdlRHOTNaWEpEWVhObEtDbGRmVHBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYmx0bFhYMTlkbUZ5SUdROWNDaGNJbk5zYjNRc1kyOXRjRzl1Wlc1MFhDSXNJVEFwTEhZOWNDaGNJbXRsZVN4eVpXWXNjMnh2ZEN4emJHOTBMWE5qYjNCbExHbHpYQ0lwTzJaMWJtTjBhVzl1SUdnb1pTeDBLWHRwWmlobExteGxibWQwYUNsN2RtRnlJRzQ5WlM1cGJtUmxlRTltS0hRcE8ybG1LRzQrTFRFcGNtVjBkWEp1SUdVdWMzQnNhV05sS0c0c01TbDlmWFpoY2lCdFBVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGs3Wm5WdVkzUnBiMjRnZVNobExIUXBlM0psZEhWeWJpQnRMbU5oYkd3b1pTeDBLWDFtZFc1amRHbHZiaUJuS0dVcGUzWmhjaUIwUFU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0c0cGUzSmxkSFZ5YmlCMFcyNWRmSHdvZEZ0dVhUMWxLRzRwS1gxOWRtRnlJRjg5THkwb1hGeDNLUzluTEdJOVp5aG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdaUzV5WlhCc1lXTmxLRjhzWm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200Z2REOTBMblJ2VlhCd1pYSkRZWE5sS0NrNlhDSmNJbjBwZlNrc0pEMW5LR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsTG1Ob1lYSkJkQ2d3S1M1MGIxVndjR1Z5UTJGelpTZ3BLMlV1YzJ4cFkyVW9NU2w5S1N4M1BTOWNYRUlvVzBFdFdsMHBMMmNzUXoxbktHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQmxMbkpsY0d4aFkyVW9keXhjSWkwa01Wd2lLUzUwYjB4dmQyVnlRMkZ6WlNncGZTazdkbUZ5SUhnOVJuVnVZM1JwYjI0dWNISnZkRzkwZVhCbExtSnBibVEvWm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200Z1pTNWlhVzVrS0hRcGZUcG1kVzVqZEdsdmJpaGxMSFFwZTJaMWJtTjBhVzl1SUc0b2JpbDdkbUZ5SUhJOVlYSm5kVzFsYm5SekxteGxibWQwYUR0eVpYUjFjbTRnY2o5eVBqRS9aUzVoY0hCc2VTaDBMR0Z5WjNWdFpXNTBjeWs2WlM1allXeHNLSFFzYmlrNlpTNWpZV3hzS0hRcGZYSmxkSFZ5YmlCdUxsOXNaVzVuZEdnOVpTNXNaVzVuZEdnc2JuMDdablZ1WTNScGIyNGdheWhsTEhRcGUzUTlkSHg4TUR0bWIzSW9kbUZ5SUc0OVpTNXNaVzVuZEdndGRDeHlQVzVsZHlCQmNuSmhlU2h1S1R0dUxTMDdLWEpiYmwwOVpWdHVLM1JkTzNKbGRIVnliaUJ5ZldaMWJtTjBhVzl1SUVFb1pTeDBLWHRtYjNJb2RtRnlJRzRnYVc0Z2RDbGxXMjVkUFhSYmJsMDdjbVYwZFhKdUlHVjlablZ1WTNScGIyNGdUeWhsS1h0bWIzSW9kbUZ5SUhROWUzMHNiajB3TzI0OFpTNXNaVzVuZEdnN2Jpc3JLV1ZiYmwwbUprRW9kQ3hsVzI1ZEtUdHlaWFIxY200Z2RIMW1kVzVqZEdsdmJpQlRLR1VzZEN4dUtYdDlkbUZ5SUZROVpuVnVZM1JwYjI0b1pTeDBMRzRwZTNKbGRIVnliaUV4ZlN4RlBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQmxmVHRtZFc1amRHbHZiaUJPS0dVc2RDbDdhV1lvWlQwOVBYUXBjbVYwZFhKdUlUQTdkbUZ5SUc0OWJ5aGxLU3h5UFc4b2RDazdhV1lvSVc1OGZDRnlLWEpsZEhWeWJpRnVKaVloY2lZbVUzUnlhVzVuS0dVcFBUMDlVM1J5YVc1bktIUXBPM1J5ZVh0MllYSWdhVDFCY25KaGVTNXBjMEZ5Y21GNUtHVXBMR0U5UVhKeVlYa3VhWE5CY25KaGVTaDBLVHRwWmlocEppWmhLWEpsZEhWeWJpQmxMbXhsYm1kMGFEMDlQWFF1YkdWdVozUm9KaVpsTG1WMlpYSjVLR1oxYm1OMGFXOXVLR1VzYmlsN2NtVjBkWEp1SUU0b1pTeDBXMjVkS1gwcE8ybG1LR1VnYVc1emRHRnVZMlZ2WmlCRVlYUmxKaVowSUdsdWMzUmhibU5sYjJZZ1JHRjBaU2x5WlhSMWNtNGdaUzVuWlhSVWFXMWxLQ2s5UFQxMExtZGxkRlJwYldVb0tUdHBaaWhwZkh4aEtYSmxkSFZ5YmlFeE8zWmhjaUJ6UFU5aWFtVmpkQzVyWlhsektHVXBMR005VDJKcVpXTjBMbXRsZVhNb2RDazdjbVYwZFhKdUlITXViR1Z1WjNSb1BUMDlZeTVzWlc1bmRHZ21Kbk11WlhabGNua29ablZ1WTNScGIyNG9iaWw3Y21WMGRYSnVJRTRvWlZ0dVhTeDBXMjVkS1gwcGZXTmhkR05vS0dVcGUzSmxkSFZ5YmlFeGZYMW1kVzVqZEdsdmJpQnFLR1VzZENsN1ptOXlLSFpoY2lCdVBUQTdianhsTG14bGJtZDBhRHR1S3lzcGFXWW9UaWhsVzI1ZExIUXBLWEpsZEhWeWJpQnVPM0psZEhWeWJpMHhmV1oxYm1OMGFXOXVJRVFvWlNsN2RtRnlJSFE5SVRFN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NsN2RIeDhLSFE5SVRBc1pTNWhjSEJzZVNoMGFHbHpMR0Z5WjNWdFpXNTBjeWtwZlgxMllYSWdURDFjSW1SaGRHRXRjMlZ5ZG1WeUxYSmxibVJsY21Wa1hDSXNUVDFiWENKamIyMXdiMjVsYm5SY0lpeGNJbVJwY21WamRHbDJaVndpTEZ3aVptbHNkR1Z5WENKZExFazlXMXdpWW1WbWIzSmxRM0psWVhSbFhDSXNYQ0pqY21WaGRHVmtYQ0lzWENKaVpXWnZjbVZOYjNWdWRGd2lMRndpYlc5MWJuUmxaRndpTEZ3aVltVm1iM0psVlhCa1lYUmxYQ0lzWENKMWNHUmhkR1ZrWENJc1hDSmlaV1p2Y21WRVpYTjBjbTk1WENJc1hDSmtaWE4wY205NVpXUmNJaXhjSW1GamRHbDJZWFJsWkZ3aUxGd2laR1ZoWTNScGRtRjBaV1JjSWl4Y0ltVnljbTl5UTJGd2RIVnlaV1JjSWl4Y0luTmxjblpsY2xCeVpXWmxkR05vWENKZExFWTllMjl3ZEdsdmJrMWxjbWRsVTNSeVlYUmxaMmxsY3pwUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cExITnBiR1Z1ZERvaE1TeHdjbTlrZFdOMGFXOXVWR2x3T2lFeExHUmxkblJ2YjJ4ek9pRXhMSEJsY21admNtMWhibU5sT2lFeExHVnljbTl5U0dGdVpHeGxjanB1ZFd4c0xIZGhjbTVJWVc1a2JHVnlPbTUxYkd3c2FXZHViM0psWkVWc1pXMWxiblJ6T2x0ZExHdGxlVU52WkdWek9rOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDa3NhWE5TWlhObGNuWmxaRlJoWnpwVUxHbHpVbVZ6WlhKMlpXUkJkSFJ5T2xRc2FYTlZibXR1YjNkdVJXeGxiV1Z1ZERwVUxHZGxkRlJoWjA1aGJXVnpjR0ZqWlRwVExIQmhjbk5sVUd4aGRHWnZjbTFVWVdkT1lXMWxPa1VzYlhWemRGVnpaVkJ5YjNBNlZDeGhjM2x1WXpvaE1DeGZiR2xtWldONVkyeGxTRzl2YTNNNlNYMHNVRDB2WVMxNlFTMWFYRngxTURCQ04xeGNkVEF3UXpBdFhGeDFNREJFTmx4Y2RUQXdSRGd0WEZ4MU1EQkdObHhjZFRBd1JqZ3RYRngxTURNM1JGeGNkVEF6TjBZdFhGeDFNVVpHUmx4Y2RUSXdNRU10WEZ4MU1qQXdSRnhjZFRJd00wWXRYRngxTWpBME1GeGNkVEl3TnpBdFhGeDFNakU0Umx4Y2RUSkRNREF0WEZ4MU1rWkZSbHhjZFRNd01ERXRYRngxUkRkR1JseGNkVVk1TURBdFhGeDFSa1JEUmx4Y2RVWkVSakF0WEZ4MVJrWkdSQzg3Wm5WdVkzUnBiMjRnVWlobExIUXNiaXh5S1h0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aU3gwTEh0MllXeDFaVHB1TEdWdWRXMWxjbUZpYkdVNklTRnlMSGR5YVhSaFlteGxPaUV3TEdOdmJtWnBaM1Z5WVdKc1pUb2hNSDBwZlhaaGNpQklQVzVsZHlCU1pXZEZlSEFvWENKYlhsd2lLMUF1YzI5MWNtTmxLMXdpTGlSZlhGeGNYR1JkWENJcE8zWmhjaUJDTEZVOVhDSmZYM0J5YjNSdlgxOWNJbWx1ZTMwc2VqMWNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnZDJsdVpHOTNMRlk5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlGZFlSVzUyYVhKdmJtMWxiblFtSmlFaFYxaEZiblpwY205dWJXVnVkQzV3YkdGMFptOXliU3hMUFZZbUpsZFlSVzUyYVhKdmJtMWxiblF1Y0d4aGRHWnZjbTB1ZEc5TWIzZGxja05oYzJVb0tTeEtQWG9tSm5kcGJtUnZkeTV1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwTG5SdlRHOTNaWEpEWVhObEtDa3NjVDFLSmlZdmJYTnBaWHgwY21sa1pXNTBMeTUwWlhOMEtFb3BMRmM5U2lZbVNpNXBibVJsZUU5bUtGd2liWE5wWlNBNUxqQmNJaWsrTUN4YVBVb21Ka291YVc1a1pYaFBaaWhjSW1Wa1oyVXZYQ0lwUGpBc1J6MG9TaVltU2k1cGJtUmxlRTltS0Z3aVlXNWtjbTlwWkZ3aUtTeEtKaVl2YVhCb2IyNWxmR2x3WVdSOGFYQnZaSHhwYjNNdkxuUmxjM1FvU2lsOGZGd2lhVzl6WENJOVBUMUxLU3hZUFNoS0ppWXZZMmh5YjIxbFhGd3ZYRnhrS3k4dWRHVnpkQ2hLS1N4S0ppWXZjR2hoYm5SdmJXcHpMeTUwWlhOMEtFb3BMRW9tSmtvdWJXRjBZMmdvTDJacGNtVm1iM2hjWEM4b1hGeGtLeWt2S1Nrc1dUMTdmUzUzWVhSamFDeFJQU0V4TzJsbUtIb3BkSEo1ZTNaaGNpQmxaVDE3ZlR0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aV1VzWENKd1lYTnphWFpsWENJc2UyZGxkRHBtZFc1amRHbHZiaWdwZTFFOUlUQjlmU2tzZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0owWlhOMExYQmhjM05wZG1WY0lpeHVkV3hzTEdWbEtYMWpZWFJqYUNobEtYdDlkbUZ5SUhSbFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIWnZhV1FnTUQwOVBVSW1KaWhDUFNGNkppWWhWaVltWENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHZHNiMkpoYkNZbUtHZHNiMkpoYkM1d2NtOWpaWE56SmlaY0luTmxjblpsY2x3aVBUMDlaMnh2WW1Gc0xuQnliMk5sYzNNdVpXNTJMbFpWUlY5RlRsWXBLU3hDZlN4dVpUMTZKaVozYVc1a2IzY3VYMTlXVlVWZlJFVldWRTlQVEZOZlIweFBRa0ZNWDBoUFQwdGZYenRtZFc1amRHbHZiaUJ5WlNobEtYdHlaWFIxY201Y0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmxKaVl2Ym1GMGFYWmxJR052WkdVdkxuUmxjM1FvWlM1MGIxTjBjbWx1WnlncEtYMTJZWElnYVdVc2IyVTlYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUZONWJXSnZiQ1ltY21Vb1UzbHRZbTlzS1NZbVhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JRkpsWm14bFkzUW1KbkpsS0ZKbFpteGxZM1F1YjNkdVMyVjVjeWs3YVdVOVhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JRk5sZENZbWNtVW9VMlYwS1Q5VFpYUTZablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0NsN2RHaHBjeTV6WlhROVQySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tYMXlaWFIxY200Z1pTNXdjbTkwYjNSNWNHVXVhR0Z6UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlFd1BUMDlkR2hwY3k1elpYUmJaVjE5TEdVdWNISnZkRzkwZVhCbExtRmtaRDFtZFc1amRHbHZiaWhsS1h0MGFHbHpMbk5sZEZ0bFhUMGhNSDBzWlM1d2NtOTBiM1I1Y0dVdVkyeGxZWEk5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbk5sZEQxUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cGZTeGxmU2dwTzNaaGNpQmhaVDFUTEhObFBUQXNZMlU5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbWxrUFhObEt5c3NkR2hwY3k1emRXSnpQVnRkZlR0alpTNXdjbTkwYjNSNWNHVXVZV1JrVTNWaVBXWjFibU4wYVc5dUtHVXBlM1JvYVhNdWMzVmljeTV3ZFhOb0tHVXBmU3hqWlM1d2NtOTBiM1I1Y0dVdWNtVnRiM1psVTNWaVBXWjFibU4wYVc5dUtHVXBlMmdvZEdocGN5NXpkV0p6TEdVcGZTeGpaUzV3Y205MGIzUjVjR1V1WkdWd1pXNWtQV1oxYm1OMGFXOXVLQ2w3WTJVdWRHRnlaMlYwSmlaalpTNTBZWEpuWlhRdVlXUmtSR1Z3S0hSb2FYTXBmU3hqWlM1d2NtOTBiM1I1Y0dVdWJtOTBhV1o1UFdaMWJtTjBhVzl1S0NsN1ptOXlLSFpoY2lCbFBYUm9hWE11YzNWaWN5NXpiR2xqWlNncExIUTlNQ3h1UFdVdWJHVnVaM1JvTzNROGJqdDBLeXNwWlZ0MFhTNTFjR1JoZEdVb0tYMHNZMlV1ZEdGeVoyVjBQVzUxYkd3N2RtRnlJSFZsUFZ0ZE8yWjFibU4wYVc5dUlHeGxLR1VwZTNWbExuQjFjMmdvWlNrc1kyVXVkR0Z5WjJWMFBXVjlablZ1WTNScGIyNGdabVVvS1h0MVpTNXdiM0FvS1N4alpTNTBZWEpuWlhROWRXVmJkV1V1YkdWdVozUm9MVEZkZlhaaGNpQndaVDFtZFc1amRHbHZiaWhsTEhRc2JpeHlMR2tzYnl4aExITXBlM1JvYVhNdWRHRm5QV1VzZEdocGN5NWtZWFJoUFhRc2RHaHBjeTVqYUdsc1pISmxiajF1TEhSb2FYTXVkR1Y0ZEQxeUxIUm9hWE11Wld4dFBXa3NkR2hwY3k1dWN6MTJiMmxrSURBc2RHaHBjeTVqYjI1MFpYaDBQVzhzZEdocGN5NW1ia052Ym5SbGVIUTlkbTlwWkNBd0xIUm9hWE11Wm01UGNIUnBiMjV6UFhadmFXUWdNQ3gwYUdsekxtWnVVMk52Y0dWSlpEMTJiMmxrSURBc2RHaHBjeTVyWlhrOWRDWW1kQzVyWlhrc2RHaHBjeTVqYjIxd2IyNWxiblJQY0hScGIyNXpQV0VzZEdocGN5NWpiMjF3YjI1bGJuUkpibk4wWVc1alpUMTJiMmxrSURBc2RHaHBjeTV3WVhKbGJuUTlkbTlwWkNBd0xIUm9hWE11Y21GM1BTRXhMSFJvYVhNdWFYTlRkR0YwYVdNOUlURXNkR2hwY3k1cGMxSnZiM1JKYm5ObGNuUTlJVEFzZEdocGN5NXBjME52YlcxbGJuUTlJVEVzZEdocGN5NXBjME5zYjI1bFpEMGhNU3gwYUdsekxtbHpUMjVqWlQwaE1TeDBhR2x6TG1GemVXNWpSbUZqZEc5eWVUMXpMSFJvYVhNdVlYTjVibU5OWlhSaFBYWnZhV1FnTUN4MGFHbHpMbWx6UVhONWJtTlFiR0ZqWldodmJHUmxjajBoTVgwc1pHVTllMk5vYVd4a09udGpiMjVtYVdkMWNtRmliR1U2SVRCOWZUdGtaUzVqYUdsc1pDNW5aWFE5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGN5NWpiMjF3YjI1bGJuUkpibk4wWVc1alpYMHNUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb2NHVXVjSEp2ZEc5MGVYQmxMR1JsS1R0MllYSWdkbVU5Wm5WdVkzUnBiMjRvWlNsN2RtOXBaQ0F3UFQwOVpTWW1LR1U5WENKY0lpazdkbUZ5SUhROWJtVjNJSEJsTzNKbGRIVnliaUIwTG5SbGVIUTlaU3gwTG1selEyOXRiV1Z1ZEQwaE1DeDBmVHRtZFc1amRHbHZiaUJvWlNobEtYdHlaWFIxY200Z2JtVjNJSEJsS0hadmFXUWdNQ3gyYjJsa0lEQXNkbTlwWkNBd0xGTjBjbWx1WnlobEtTbDlablZ1WTNScGIyNGdiV1VvWlNsN2RtRnlJSFE5Ym1WM0lIQmxLR1V1ZEdGbkxHVXVaR0YwWVN4bExtTm9hV3hrY21WdUppWmxMbU5vYVd4a2NtVnVMbk5zYVdObEtDa3NaUzUwWlhoMExHVXVaV3h0TEdVdVkyOXVkR1Y0ZEN4bExtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5Nc1pTNWhjM2x1WTBaaFkzUnZjbmtwTzNKbGRIVnliaUIwTG01elBXVXVibk1zZEM1cGMxTjBZWFJwWXoxbExtbHpVM1JoZEdsakxIUXVhMlY1UFdVdWEyVjVMSFF1YVhORGIyMXRaVzUwUFdVdWFYTkRiMjF0Wlc1MExIUXVabTVEYjI1MFpYaDBQV1V1Wm01RGIyNTBaWGgwTEhRdVptNVBjSFJwYjI1elBXVXVabTVQY0hScGIyNXpMSFF1Wm01VFkyOXdaVWxrUFdVdVptNVRZMjl3WlVsa0xIUXVZWE41Ym1OTlpYUmhQV1V1WVhONWJtTk5aWFJoTEhRdWFYTkRiRzl1WldROUlUQXNkSDEyWVhJZ2VXVTlRWEp5WVhrdWNISnZkRzkwZVhCbExHZGxQVTlpYW1WamRDNWpjbVZoZEdVb2VXVXBPMXRjSW5CMWMyaGNJaXhjSW5CdmNGd2lMRndpYzJocFpuUmNJaXhjSW5WdWMyaHBablJjSWl4Y0luTndiR2xqWlZ3aUxGd2ljMjl5ZEZ3aUxGd2ljbVYyWlhKelpWd2lYUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQWGxsVzJWZE8xSW9aMlVzWlN4bWRXNWpkR2x2YmlncGUyWnZjaWgyWVhJZ2JqMWJYU3h5UFdGeVozVnRaVzUwY3k1c1pXNW5kR2c3Y2kwdE95bHVXM0pkUFdGeVozVnRaVzUwYzF0eVhUdDJZWElnYVN4dlBYUXVZWEJ3Ykhrb2RHaHBjeXh1S1N4aFBYUm9hWE11WDE5dllsOWZPM04zYVhSamFDaGxLWHRqWVhObFhDSndkWE5vWENJNlkyRnpaVndpZFc1emFHbG1kRndpT21rOWJqdGljbVZoYXp0allYTmxYQ0p6Y0d4cFkyVmNJanBwUFc0dWMyeHBZMlVvTWlsOWNtVjBkWEp1SUdrbUptRXViMkp6WlhKMlpVRnljbUY1S0drcExHRXVaR1Z3TG01dmRHbG1lU2dwTEc5OUtYMHBPM1poY2lCZlpUMVBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aG5aU2tzWW1VOUlUQTdablZ1WTNScGIyNGdKR1VvWlNsN1ltVTlaWDEyWVhJZ2QyVTlablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTdkR2hwY3k1MllXeDFaVDFsTEhSb2FYTXVaR1Z3UFc1bGR5QmpaU3gwYUdsekxuWnRRMjkxYm5ROU1DeFNLR1VzWENKZlgyOWlYMTljSWl4MGFHbHpLU3hCY25KaGVTNXBjMEZ5Y21GNUtHVXBQeWhWUHloMFBXZGxMR1V1WDE5d2NtOTBiMTlmUFhRcE9tWjFibU4wYVc5dUtHVXNkQ3h1S1h0bWIzSW9kbUZ5SUhJOU1DeHBQVzR1YkdWdVozUm9PM0k4YVR0eUt5c3BlM1poY2lCdlBXNWJjbDA3VWlobExHOHNkRnR2WFNsOWZTaGxMR2RsTEY5bEtTeDBhR2x6TG05aWMyVnlkbVZCY25KaGVTaGxLU2s2ZEdocGN5NTNZV3hyS0dVcGZUdG1kVzVqZEdsdmJpQkRaU2hsTEhRcGUzWmhjaUJ1TzJsbUtHOG9aU2ttSmlFb1pTQnBibk4wWVc1alpXOW1JSEJsS1NseVpYUjFjbTRnZVNobExGd2lYMTl2WWw5ZlhDSXBKaVpsTGw5ZmIySmZYeUJwYm5OMFlXNWpaVzltSUhkbFAyNDlaUzVmWDI5aVgxODZZbVVtSmlGMFpTZ3BKaVlvUVhKeVlYa3VhWE5CY25KaGVTaGxLWHg4Y3lobEtTa21KazlpYW1WamRDNXBjMFY0ZEdWdWMybGliR1VvWlNrbUppRmxMbDlwYzFaMVpTWW1LRzQ5Ym1WM0lIZGxLR1VwS1N4MEppWnVKaVp1TG5adFEyOTFiblFyS3l4dWZXWjFibU4wYVc5dUlIaGxLR1VzZEN4dUxISXNhU2w3ZG1GeUlHODlibVYzSUdObExHRTlUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lobExIUXBPMmxtS0NGaGZId2hNU0U5UFdFdVkyOXVabWxuZFhKaFlteGxLWHQyWVhJZ2N6MWhKaVpoTG1kbGRDeGpQV0VtSm1FdWMyVjBPM01tSmlGamZId3lJVDA5WVhKbmRXMWxiblJ6TG14bGJtZDBhSHg4S0c0OVpWdDBYU2s3ZG1GeUlIVTlJV2ttSmtObEtHNHBPMDlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobExIUXNlMlZ1ZFcxbGNtRmliR1U2SVRBc1kyOXVabWxuZFhKaFlteGxPaUV3TEdkbGREcG1kVzVqZEdsdmJpZ3BlM1poY2lCMFBYTS9jeTVqWVd4c0tHVXBPbTQ3Y21WMGRYSnVJR05sTG5SaGNtZGxkQ1ltS0c4dVpHVndaVzVrS0Nrc2RTWW1LSFV1WkdWd0xtUmxjR1Z1WkNncExFRnljbUY1TG1selFYSnlZWGtvZENrbUptWjFibU4wYVc5dUlHVW9kQ2w3Wm05eUtIWmhjaUJ1UFhadmFXUWdNQ3h5UFRBc2FUMTBMbXhsYm1kMGFEdHlQR2s3Y2lzcktTaHVQWFJiY2wwcEppWnVMbDlmYjJKZlh5WW1iaTVmWDI5aVgxOHVaR1Z3TG1SbGNHVnVaQ2dwTEVGeWNtRjVMbWx6UVhKeVlYa29iaWttSm1Vb2JpbDlLSFFwS1Nrc2RIMHNjMlYwT21aMWJtTjBhVzl1S0hRcGUzWmhjaUJ5UFhNL2N5NWpZV3hzS0dVcE9tNDdkRDA5UFhKOGZIUWhQWFFtSm5JaFBYSjhmSE1tSmlGamZId29ZejlqTG1OaGJHd29aU3gwS1RwdVBYUXNkVDBoYVNZbVEyVW9kQ2tzYnk1dWIzUnBabmtvS1NsOWZTbDlmV1oxYm1OMGFXOXVJR3RsS0dVc2RDeHVLWHRwWmloQmNuSmhlUzVwYzBGeWNtRjVLR1VwSmlaaktIUXBLWEpsZEhWeWJpQmxMbXhsYm1kMGFEMU5ZWFJvTG0xaGVDaGxMbXhsYm1kMGFDeDBLU3hsTG5Od2JHbGpaU2gwTERFc2Jpa3NianRwWmloMElHbHVJR1VtSmlFb2RDQnBiaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxLU2x5WlhSMWNtNGdaVnQwWFQxdUxHNDdkbUZ5SUhJOVpTNWZYMjlpWDE4N2NtVjBkWEp1SUdVdVgybHpWblZsZkh4eUppWnlMblp0UTI5MWJuUS9ianB5UHloNFpTaHlMblpoYkhWbExIUXNiaWtzY2k1a1pYQXVibTkwYVdaNUtDa3NiaWs2S0dWYmRGMDliaXh1S1gxbWRXNWpkR2x2YmlCQlpTaGxMSFFwZTJsbUtFRnljbUY1TG1selFYSnlZWGtvWlNrbUptTW9kQ2twWlM1emNHeHBZMlVvZEN3eEtUdGxiSE5sZTNaaGNpQnVQV1V1WDE5dllsOWZPMlV1WDJselZuVmxmSHh1SmladUxuWnRRMjkxYm5SOGZIa29aU3gwS1NZbUtHUmxiR1YwWlNCbFczUmRMRzRtSm00dVpHVndMbTV2ZEdsbWVTZ3BLWDE5ZDJVdWNISnZkRzkwZVhCbExuZGhiR3M5Wm5WdVkzUnBiMjRvWlNsN1ptOXlLSFpoY2lCMFBVOWlhbVZqZEM1clpYbHpLR1VwTEc0OU1EdHVQSFF1YkdWdVozUm9PMjRyS3lsNFpTaGxMSFJiYmwwcGZTeDNaUzV3Y205MGIzUjVjR1V1YjJKelpYSjJaVUZ5Y21GNVBXWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkRDB3TEc0OVpTNXNaVzVuZEdnN2REeHVPM1FyS3lsRFpTaGxXM1JkS1gwN2RtRnlJRTlsUFVZdWIzQjBhVzl1VFdWeVoyVlRkSEpoZEdWbmFXVnpPMloxYm1OMGFXOXVJRk5sS0dVc2RDbDdhV1lvSVhRcGNtVjBkWEp1SUdVN1ptOXlLSFpoY2lCdUxISXNhU3h2UFc5bFAxSmxabXhsWTNRdWIzZHVTMlY1Y3loMEtUcFBZbXBsWTNRdWEyVjVjeWgwS1N4aFBUQTdZVHh2TG14bGJtZDBhRHRoS3lzcFhDSmZYMjlpWDE5Y0lpRTlQU2h1UFc5YllWMHBKaVlvY2oxbFcyNWRMR2s5ZEZ0dVhTeDVLR1VzYmlrL2NpRTlQV2ttSm5Nb2Npa21Kbk1vYVNrbUpsTmxLSElzYVNrNmEyVW9aU3h1TEdrcEtUdHlaWFIxY200Z1pYMW1kVzVqZEdsdmJpQlVaU2hsTEhRc2JpbDdjbVYwZFhKdUlHNC9ablZ1WTNScGIyNG9LWHQyWVhJZ2NqMWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUIwUDNRdVkyRnNiQ2h1TEc0cE9uUXNhVDFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbFAyVXVZMkZzYkNodUxHNHBPbVU3Y21WMGRYSnVJSEkvVTJVb2NpeHBLVHBwZlRwMFAyVS9ablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdVMlVvWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2REOTBMbU5oYkd3b2RHaHBjeXgwYUdsektUcDBMRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVL1pTNWpZV3hzS0hSb2FYTXNkR2hwY3lrNlpTbDlPblE2WlgxbWRXNWpkR2x2YmlCRlpTaGxMSFFwZTNaaGNpQnVQWFEvWlQ5bExtTnZibU5oZENoMEtUcEJjbkpoZVM1cGMwRnljbUY1S0hRcFAzUTZXM1JkT21VN2NtVjBkWEp1SUc0L1puVnVZM1JwYjI0b1pTbDdabTl5S0haaGNpQjBQVnRkTEc0OU1EdHVQR1V1YkdWdVozUm9PMjRyS3lrdE1UMDlQWFF1YVc1a1pYaFBaaWhsVzI1ZEtTWW1kQzV3ZFhOb0tHVmJibDBwTzNKbGRIVnliaUIwZlNodUtUcHVmV1oxYm1OMGFXOXVJRTVsS0dVc2RDeHVMSElwZTNaaGNpQnBQVTlpYW1WamRDNWpjbVZoZEdVb1pYeDhiblZzYkNrN2NtVjBkWEp1SUhRL1FTaHBMSFFwT21sOVQyVXVaR0YwWVQxbWRXNWpkR2x2YmlobExIUXNiaWw3Y21WMGRYSnVJRzQvVkdVb1pTeDBMRzRwT25RbUpsd2lablZ1WTNScGIyNWNJaUU5ZEhsd1pXOW1JSFEvWlRwVVpTaGxMSFFwZlN4SkxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pTbDdUMlZiWlYwOVJXVjlLU3hOTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvWlNsN1QyVmJaU3RjSW5OY0lsMDlUbVY5S1N4UFpTNTNZWFJqYUQxbWRXNWpkR2x2YmlobExIUXNiaXh5S1h0cFppaGxQVDA5V1NZbUtHVTlkbTlwWkNBd0tTeDBQVDA5V1NZbUtIUTlkbTlwWkNBd0tTd2hkQ2x5WlhSMWNtNGdUMkpxWldOMExtTnlaV0YwWlNobGZIeHVkV3hzS1R0cFppZ2haU2x5WlhSMWNtNGdkRHQyWVhJZ2FUMTdmVHRtYjNJb2RtRnlJRzhnYVc0Z1FTaHBMR1VwTEhRcGUzWmhjaUJoUFdsYmIxMHNjejEwVzI5ZE8yRW1KaUZCY25KaGVTNXBjMEZ5Y21GNUtHRXBKaVlvWVQxYllWMHBMR2xiYjEwOVlUOWhMbU52Ym1OaGRDaHpLVHBCY25KaGVTNXBjMEZ5Y21GNUtITXBQM002VzNOZGZYSmxkSFZ5YmlCcGZTeFBaUzV3Y205d2N6MVBaUzV0WlhSb2IyUnpQVTlsTG1sdWFtVmpkRDFQWlM1amIyMXdkWFJsWkQxbWRXNWpkR2x2YmlobExIUXNiaXh5S1h0cFppZ2haU2x5WlhSMWNtNGdkRHQyWVhJZ2FUMVBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPM0psZEhWeWJpQkJLR2tzWlNrc2RDWW1RU2hwTEhRcExHbDlMRTlsTG5CeWIzWnBaR1U5VkdVN2RtRnlJR3BsUFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlIWnZhV1FnTUQwOVBYUS9aVHAwZlR0bWRXNWpkR2x2YmlCRVpTaGxMSFFzYmlsN2FXWW9YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnZENZbUtIUTlkQzV2Y0hScGIyNXpLU3htZFc1amRHbHZiaWhsTEhRcGUzWmhjaUJ1UFdVdWNISnZjSE03YVdZb2JpbDdkbUZ5SUhJc2FTeHZQWHQ5TzJsbUtFRnljbUY1TG1selFYSnlZWGtvYmlrcFptOXlLSEk5Ymk1c1pXNW5kR2c3Y2kwdE95bGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWW9hVDF1VzNKZEtTWW1LRzliWWlocEtWMDllM1I1Y0dVNmJuVnNiSDBwTzJWc2MyVWdhV1lvY3lodUtTbG1iM0lvZG1GeUlHRWdhVzRnYmlscFBXNWJZVjBzYjF0aUtHRXBYVDF6S0drcFAyazZlM1I1Y0dVNmFYMDdaUzV3Y205d2N6MXZmWDBvZENrc1puVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2JqMWxMbWx1YW1WamREdHBaaWh1S1h0MllYSWdjajFsTG1sdWFtVmpkRDE3ZlR0cFppaEJjbkpoZVM1cGMwRnljbUY1S0c0cEtXWnZjaWgyWVhJZ2FUMHdPMms4Ymk1c1pXNW5kR2c3YVNzcktYSmJibHRwWFYwOWUyWnliMjA2Ymx0cFhYMDdaV3h6WlNCcFppaHpLRzRwS1dadmNpaDJZWElnYnlCcGJpQnVLWHQyWVhJZ1lUMXVXMjlkTzNKYmIxMDljeWhoS1Q5QktIdG1jbTl0T205OUxHRXBPbnRtY205dE9tRjlmWDE5S0hRcExHWjFibU4wYVc5dUtHVXBlM1poY2lCMFBXVXVaR2x5WldOMGFYWmxjenRwWmloMEtXWnZjaWgyWVhJZ2JpQnBiaUIwS1h0MllYSWdjajEwVzI1ZE8xd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSEltSmloMFcyNWRQWHRpYVc1a09uSXNkWEJrWVhSbE9uSjlLWDE5S0hRcExDRjBMbDlpWVhObEppWW9kQzVsZUhSbGJtUnpKaVlvWlQxRVpTaGxMSFF1WlhoMFpXNWtjeXh1S1Nrc2RDNXRhWGhwYm5NcEtXWnZjaWgyWVhJZ2NqMHdMR2s5ZEM1dGFYaHBibk11YkdWdVozUm9PM0k4YVR0eUt5c3BaVDFFWlNobExIUXViV2w0YVc1elczSmRMRzRwTzNaaGNpQnZMR0U5ZTMwN1ptOXlLRzhnYVc0Z1pTbGpLRzhwTzJadmNpaHZJR2x1SUhRcGVTaGxMRzhwZkh4aktHOHBPMloxYm1OMGFXOXVJR01vY2lsN2RtRnlJR2s5VDJWYmNsMThmR3BsTzJGYmNsMDlhU2hsVzNKZExIUmJjbDBzYml4eUtYMXlaWFIxY200Z1lYMW1kVzVqZEdsdmJpQk1aU2hsTEhRc2JpeHlLWHRwWmloY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2JpbDdkbUZ5SUdrOVpWdDBYVHRwWmloNUtHa3NiaWtwY21WMGRYSnVJR2xiYmwwN2RtRnlJRzg5WWlodUtUdHBaaWg1S0drc2J5a3BjbVYwZFhKdUlHbGJiMTA3ZG1GeUlHRTlKQ2h2S1R0eVpYUjFjbTRnZVNocExHRXBQMmxiWVYwNmFWdHVYWHg4YVZ0dlhYeDhhVnRoWFgxOVpuVnVZM1JwYjI0Z1RXVW9aU3gwTEc0c2NpbDdkbUZ5SUdrOWRGdGxYU3h2UFNGNUtHNHNaU2tzWVQxdVcyVmRMSE05VUdVb1FtOXZiR1ZoYml4cExuUjVjR1VwTzJsbUtITStMVEVwYVdZb2J5WW1JWGtvYVN4Y0ltUmxabUYxYkhSY0lpa3BZVDBoTVR0bGJITmxJR2xtS0Z3aVhDSTlQVDFoZkh4aFBUMDlReWhsS1NsN2RtRnlJR005VUdVb1UzUnlhVzVuTEdrdWRIbHdaU2s3S0dNOE1IeDhjenhqS1NZbUtHRTlJVEFwZldsbUtIWnZhV1FnTUQwOVBXRXBlMkU5Wm5WdVkzUnBiMjRvWlN4MExHNHBlMmxtS0NGNUtIUXNYQ0prWldaaGRXeDBYQ0lwS1hKbGRIVnlianQyWVhJZ2NqMTBMbVJsWm1GMWJIUTdhV1lvWlNZbVpTNGtiM0IwYVc5dWN5NXdjbTl3YzBSaGRHRW1Kblp2YVdRZ01EMDlQV1V1Skc5d2RHbHZibk11Y0hKdmNITkVZWFJoVzI1ZEppWjJiMmxrSURBaFBUMWxMbDl3Y205d2MxdHVYU2x5WlhSMWNtNGdaUzVmY0hKdmNITmJibDA3Y21WMGRYSnVYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnY2lZbVhDSkdkVzVqZEdsdmJsd2lJVDA5U1dVb2RDNTBlWEJsS1Q5eUxtTmhiR3dvWlNrNmNuMG9jaXhwTEdVcE8zWmhjaUIxUFdKbE95UmxLQ0V3S1N4RFpTaGhLU3drWlNoMUtYMXlaWFIxY200Z1lYMW1kVzVqZEdsdmJpQkpaU2hsS1h0MllYSWdkRDFsSmlabExuUnZVM1J5YVc1bktDa3ViV0YwWTJnb0wxNWNYSE1xWm5WdVkzUnBiMjRnS0Z4Y2R5c3BMeWs3Y21WMGRYSnVJSFEvZEZzeFhUcGNJbHdpZldaMWJtTjBhVzl1SUVabEtHVXNkQ2w3Y21WMGRYSnVJRWxsS0dVcFBUMDlTV1VvZENsOVpuVnVZM1JwYjI0Z1VHVW9aU3gwS1h0cFppZ2hRWEp5WVhrdWFYTkJjbkpoZVNoMEtTbHlaWFIxY200Z1JtVW9kQ3hsS1Q4d09pMHhPMlp2Y2loMllYSWdiajB3TEhJOWRDNXNaVzVuZEdnN2JqeHlPMjRyS3lscFppaEdaU2gwVzI1ZExHVXBLWEpsZEhWeWJpQnVPM0psZEhWeWJpMHhmV1oxYm1OMGFXOXVJRkpsS0dVc2RDeHVLWHRzWlNncE8zUnllWHRwWmloMEtXWnZjaWgyWVhJZ2NqMTBPM0k5Y2k0a2NHRnlaVzUwT3lsN2RtRnlJR2s5Y2k0a2IzQjBhVzl1Y3k1bGNuSnZja05oY0hSMWNtVmtPMmxtS0drcFptOXlLSFpoY2lCdlBUQTdienhwTG14bGJtZDBhRHR2S3lzcGRISjVlMmxtS0NFeFBUMDlhVnR2WFM1allXeHNLSElzWlN4MExHNHBLWEpsZEhWeWJuMWpZWFJqYUNobEtYdENaU2hsTEhJc1hDSmxjbkp2Y2tOaGNIUjFjbVZrSUdodmIydGNJaWw5ZlVKbEtHVXNkQ3h1S1gxbWFXNWhiR3g1ZTJabEtDbDlmV1oxYm1OMGFXOXVJRWhsS0dVc2RDeHVMSElzYVNsN2RtRnlJRzg3ZEhKNWV5aHZQVzQvWlM1aGNIQnNlU2gwTEc0cE9tVXVZMkZzYkNoMEtTa21KaUZ2TGw5cGMxWjFaU1ltZFNodktTWW1JVzh1WDJoaGJtUnNaV1FtSmlodkxtTmhkR05vS0daMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCU1pTaGxMSElzYVN0Y0lpQW9VSEp2YldselpTOWhjM2x1WXlsY0lpbDlLU3h2TGw5b1lXNWtiR1ZrUFNFd0tYMWpZWFJqYUNobEtYdFNaU2hsTEhJc2FTbDljbVYwZFhKdUlHOTlablZ1WTNScGIyNGdRbVVvWlN4MExHNHBlMmxtS0VZdVpYSnliM0pJWVc1a2JHVnlLWFJ5ZVh0eVpYUjFjbTRnUmk1bGNuSnZja2hoYm1Sc1pYSXVZMkZzYkNodWRXeHNMR1VzZEN4dUtYMWpZWFJqYUNoMEtYdDBJVDA5WlNZbVZXVW9kQ3h1ZFd4c0xGd2lZMjl1Wm1sbkxtVnljbTl5U0dGdVpHeGxjbHdpS1gxVlpTaGxMSFFzYmlsOVpuVnVZM1JwYjI0Z1ZXVW9aU3gwTEc0cGUybG1LQ0Y2SmlZaFZueDhYQ0oxYm1SbFptbHVaV1JjSWowOWRIbHdaVzltSUdOdmJuTnZiR1VwZEdoeWIzY2daVHRqYjI1emIyeGxMbVZ5Y205eUtHVXBmWFpoY2lCNlpTeFdaVDBoTVN4TFpUMWJYU3hLWlQwaE1UdG1kVzVqZEdsdmJpQnhaU2dwZTBwbFBTRXhPM1poY2lCbFBVdGxMbk5zYVdObEtEQXBPMHRsTG14bGJtZDBhRDB3TzJadmNpaDJZWElnZEQwd08zUThaUzVzWlc1bmRHZzdkQ3NyS1dWYmRGMG9LWDFwWmloY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdVSEp2YldselpTWW1jbVVvVUhKdmJXbHpaU2twZTNaaGNpQlhaVDFRY205dGFYTmxMbkpsYzI5c2RtVW9LVHQ2WlQxbWRXNWpkR2x2YmlncGUxZGxMblJvWlc0b2NXVXBMRWNtSm5ObGRGUnBiV1Z2ZFhRb1V5bDlMRlpsUFNFd2ZXVnNjMlVnYVdZb2NYeDhYQ0oxYm1SbFptbHVaV1JjSWowOWRIbHdaVzltSUUxMWRHRjBhVzl1VDJKelpYSjJaWEo4ZkNGeVpTaE5kWFJoZEdsdmJrOWljMlZ5ZG1WeUtTWW1YQ0piYjJKcVpXTjBJRTExZEdGMGFXOXVUMkp6WlhKMlpYSkRiMjV6ZEhKMVkzUnZjbDFjSWlFOVBVMTFkR0YwYVc5dVQySnpaWEoyWlhJdWRHOVRkSEpwYm1jb0tTbDZaVDFjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2MyVjBTVzF0WldScFlYUmxKaVp5WlNoelpYUkpiVzFsWkdsaGRHVXBQMloxYm1OMGFXOXVLQ2w3YzJWMFNXMXRaV1JwWVhSbEtIRmxLWDA2Wm5WdVkzUnBiMjRvS1h0elpYUlVhVzFsYjNWMEtIRmxMREFwZlR0bGJITmxlM1poY2lCYVpUMHhMRWRsUFc1bGR5Qk5kWFJoZEdsdmJrOWljMlZ5ZG1WeUtIRmxLU3hZWlQxa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVWlhoMFRtOWtaU2hUZEhKcGJtY29XbVVwS1R0SFpTNXZZbk5sY25abEtGaGxMSHRqYUdGeVlXTjBaWEpFWVhSaE9pRXdmU2tzZW1VOVpuVnVZM1JwYjI0b0tYdGFaVDBvV21Vck1Ta2xNaXhZWlM1a1lYUmhQVk4wY21sdVp5aGFaU2w5TEZabFBTRXdmV1oxYm1OMGFXOXVJRmxsS0dVc2RDbDdkbUZ5SUc0N2FXWW9TMlV1Y0hWemFDaG1kVzVqZEdsdmJpZ3BlMmxtS0dVcGRISjVlMlV1WTJGc2JDaDBLWDFqWVhSamFDaGxLWHRTWlNobExIUXNYQ0p1WlhoMFZHbGphMXdpS1gxbGJITmxJRzRtSm00b2RDbDlLU3hLWlh4OEtFcGxQU0V3TEhwbEtDa3BMQ0ZsSmlaY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdVSEp2YldselpTbHlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9aU2w3YmoxbGZTbDlkbUZ5SUZGbFBXNWxkeUJwWlR0bWRXNWpkR2x2YmlCbGRDaGxLWHNoWm5WdVkzUnBiMjRnWlNoMExHNHBlM1poY2lCeUxHazdkbUZ5SUdFOVFYSnlZWGt1YVhOQmNuSmhlU2gwS1R0cFppZ2hZU1ltSVc4b2RDbDhmRTlpYW1WamRDNXBjMFp5YjNwbGJpaDBLWHg4ZENCcGJuTjBZVzVqWlc5bUlIQmxLWEpsZEhWeWJqdHBaaWgwTGw5ZmIySmZYeWw3ZG1GeUlITTlkQzVmWDI5aVgxOHVaR1Z3TG1sa08ybG1LRzR1YUdGektITXBLWEpsZEhWeWJqdHVMbUZrWkNoektYMXBaaWhoS1dadmNpaHlQWFF1YkdWdVozUm9PM0l0TFRzcFpTaDBXM0pkTEc0cE8yVnNjMlVnWm05eUtHazlUMkpxWldOMExtdGxlWE1vZENrc2NqMXBMbXhsYm1kMGFEdHlMUzA3S1dVb2RGdHBXM0pkWFN4dUtYMG9aU3hSWlNrc1VXVXVZMnhsWVhJb0tYMTJZWElnZEhROVp5aG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMWNJaVpjSWowOVBXVXVZMmhoY2tGMEtEQXBMRzQ5WENKK1hDSTlQVDBvWlQxMFAyVXVjMnhwWTJVb01TazZaU2t1WTJoaGNrRjBLREFwTEhJOVhDSWhYQ0k5UFQwb1pUMXVQMlV1YzJ4cFkyVW9NU2s2WlNrdVkyaGhja0YwS0RBcE8zSmxkSFZ5Ym50dVlXMWxPbVU5Y2o5bExuTnNhV05sS0RFcE9tVXNiMjVqWlRwdUxHTmhjSFIxY21VNmNpeHdZWE56YVhabE9uUjlmU2s3Wm5WdVkzUnBiMjRnYm5Rb1pTeDBLWHRtZFc1amRHbHZiaUJ1S0NsN2RtRnlJR1U5WVhKbmRXMWxiblJ6TEhJOWJpNW1ibk03YVdZb0lVRnljbUY1TG1selFYSnlZWGtvY2lrcGNtVjBkWEp1SUVobEtISXNiblZzYkN4aGNtZDFiV1Z1ZEhNc2RDeGNJbll0YjI0Z2FHRnVaR3hsY2x3aUtUdG1iM0lvZG1GeUlHazljaTV6YkdsalpTZ3BMRzg5TUR0dlBHa3ViR1Z1WjNSb08yOHJLeWxJWlNocFcyOWRMRzUxYkd3c1pTeDBMRndpZGkxdmJpQm9ZVzVrYkdWeVhDSXBmWEpsZEhWeWJpQnVMbVp1Y3oxbExHNTlablZ1WTNScGIyNGdjblFvWlN4dUxHa3NieXhoTEhNcGUzWmhjaUJqTEhVc2JDeG1PMlp2Y2loaklHbHVJR1VwZFQxbFcyTmRMR3c5Ymx0alhTeG1QWFIwS0dNcExIUW9kU2w4ZkNoMEtHd3BQeWgwS0hVdVptNXpLU1ltS0hVOVpWdGpYVDF1ZENoMUxITXBLU3h5S0dZdWIyNWpaU2ttSmloMVBXVmJZMTA5WVNobUxtNWhiV1VzZFN4bUxtTmhjSFIxY21VcEtTeHBLR1l1Ym1GdFpTeDFMR1l1WTJGd2RIVnlaU3htTG5CaGMzTnBkbVVzWmk1d1lYSmhiWE1wS1RwMUlUMDliQ1ltS0d3dVptNXpQWFVzWlZ0alhUMXNLU2s3Wm05eUtHTWdhVzRnYmlsMEtHVmJZMTBwSmladktDaG1QWFIwS0dNcEtTNXVZVzFsTEc1YlkxMHNaaTVqWVhCMGRYSmxLWDFtZFc1amRHbHZiaUJwZENobExHa3NieWw3ZG1GeUlHRTdaU0JwYm5OMFlXNWpaVzltSUhCbEppWW9aVDFsTG1SaGRHRXVhRzl2YTN4OEtHVXVaR0YwWVM1b2IyOXJQWHQ5S1NrN2RtRnlJSE05WlZ0cFhUdG1kVzVqZEdsdmJpQmpLQ2w3Ynk1aGNIQnNlU2gwYUdsekxHRnlaM1Z0Wlc1MGN5a3NhQ2hoTG1adWN5eGpLWDEwS0hNcFAyRTliblFvVzJOZEtUcHVLSE11Wm01ektTWW1jaWh6TG0xbGNtZGxaQ2svS0dFOWN5a3VabTV6TG5CMWMyZ29ZeWs2WVQxdWRDaGJjeXhqWFNrc1lTNXRaWEpuWldROUlUQXNaVnRwWFQxaGZXWjFibU4wYVc5dUlHOTBLR1VzZEN4eUxHa3NieWw3YVdZb2JpaDBLU2w3YVdZb2VTaDBMSElwS1hKbGRIVnliaUJsVzNKZFBYUmJjbDBzYjN4OFpHVnNaWFJsSUhSYmNsMHNJVEE3YVdZb2VTaDBMR2twS1hKbGRIVnliaUJsVzNKZFBYUmJhVjBzYjN4OFpHVnNaWFJsSUhSYmFWMHNJVEI5Y21WMGRYSnVJVEY5Wm5WdVkzUnBiMjRnWVhRb1pTbDdjbVYwZFhKdUlHa29aU2svVzJobEtHVXBYVHBCY25KaGVTNXBjMEZ5Y21GNUtHVXBQMloxYm1OMGFXOXVJR1VvYnl4aEtYdDJZWElnY3oxYlhUdDJZWElnWXl4MUxHd3NaanRtYjNJb1l6MHdPMk04Ynk1c1pXNW5kR2c3WXlzcktYUW9kVDF2VzJOZEtYeDhYQ0ppYjI5c1pXRnVYQ0k5UFhSNWNHVnZaaUIxZkh3b2JEMXpMbXhsYm1kMGFDMHhMR1k5YzF0c1hTeEJjbkpoZVM1cGMwRnljbUY1S0hVcFAzVXViR1Z1WjNSb1BqQW1KaWh6ZENnb2RUMWxLSFVzS0dGOGZGd2lYQ0lwSzF3aVgxd2lLMk1wS1Zzd1hTa21Kbk4wS0dZcEppWW9jMXRzWFQxb1pTaG1MblJsZUhRcmRWc3dYUzUwWlhoMEtTeDFMbk5vYVdaMEtDa3BMSE11Y0hWemFDNWhjSEJzZVNoekxIVXBLVHBwS0hVcFAzTjBLR1lwUDNOYmJGMDlhR1VvWmk1MFpYaDBLM1VwT2x3aVhDSWhQVDExSmlaekxuQjFjMmdvYUdVb2RTa3BPbk4wS0hVcEppWnpkQ2htS1Q5elcyeGRQV2hsS0dZdWRHVjRkQ3QxTG5SbGVIUXBPaWh5S0c4dVgybHpWa3hwYzNRcEppWnVLSFV1ZEdGbktTWW1kQ2gxTG10bGVTa21KbTRvWVNrbUppaDFMbXRsZVQxY0lsOWZkbXhwYzNSY0lpdGhLMXdpWDF3aUsyTXJYQ0pmWDF3aUtTeHpMbkIxYzJnb2RTa3BLVHR5WlhSMWNtNGdjMzBvWlNrNmRtOXBaQ0F3ZldaMWJtTjBhVzl1SUhOMEtHVXBlM0psZEhWeWJpQnVLR1VwSmladUtHVXVkR1Y0ZENrbUppRXhQVDA5WlM1cGMwTnZiVzFsYm5SOVpuVnVZM1JwYjI0Z1kzUW9aU3gwS1h0cFppaGxLWHRtYjNJb2RtRnlJRzQ5VDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1N4eVBXOWxQMUpsWm14bFkzUXViM2R1UzJWNWN5aGxLVHBQWW1wbFkzUXVhMlY1Y3lobEtTeHBQVEE3YVR4eUxteGxibWQwYUR0cEt5c3BlM1poY2lCdlBYSmJhVjA3YVdZb1hDSmZYMjlpWDE5Y0lpRTlQVzhwZTJadmNpaDJZWElnWVQxbFcyOWRMbVp5YjIwc2N6MTBPM003S1h0cFppaHpMbDl3Y205MmFXUmxaQ1ltZVNoekxsOXdjbTkyYVdSbFpDeGhLU2w3Ymx0dlhUMXpMbDl3Y205MmFXUmxaRnRoWFR0aWNtVmhhMzF6UFhNdUpIQmhjbVZ1ZEgxcFppZ2hjeVltWENKa1pXWmhkV3gwWENKcGJpQmxXMjlkS1h0MllYSWdZejFsVzI5ZExtUmxabUYxYkhRN2JsdHZYVDFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCalAyTXVZMkZzYkNoMEtUcGpmWDE5Y21WMGRYSnVJRzU5ZldaMWJtTjBhVzl1SUhWMEtHVXNkQ2w3YVdZb0lXVjhmQ0ZsTG14bGJtZDBhQ2x5WlhSMWNtNTdmVHRtYjNJb2RtRnlJRzQ5ZTMwc2NqMHdMR2s5WlM1c1pXNW5kR2c3Y2p4cE8zSXJLeWw3ZG1GeUlHODlaVnR5WFN4aFBXOHVaR0YwWVR0cFppaGhKaVpoTG1GMGRISnpKaVpoTG1GMGRISnpMbk5zYjNRbUptUmxiR1YwWlNCaExtRjBkSEp6TG5Oc2IzUXNieTVqYjI1MFpYaDBJVDA5ZENZbWJ5NW1ia052Ym5SbGVIUWhQVDEwZkh3aFlYeDhiblZzYkQwOVlTNXpiRzkwS1NodUxtUmxabUYxYkhSOGZDaHVMbVJsWm1GMWJIUTlXMTBwS1M1d2RYTm9LRzhwTzJWc2MyVjdkbUZ5SUhNOVlTNXpiRzkwTEdNOWJsdHpYWHg4S0c1YmMxMDlXMTBwTzF3aWRHVnRjR3hoZEdWY0lqMDlQVzh1ZEdGblAyTXVjSFZ6YUM1aGNIQnNlU2hqTEc4dVkyaHBiR1J5Wlc1OGZGdGRLVHBqTG5CMWMyZ29ieWw5ZldadmNpaDJZWElnZFNCcGJpQnVLVzViZFYwdVpYWmxjbmtvYkhRcEppWmtaV3hsZEdVZ2JsdDFYVHR5WlhSMWNtNGdibjFtZFc1amRHbHZiaUJzZENobEtYdHlaWFIxY200Z1pTNXBjME52YlcxbGJuUW1KaUZsTG1GemVXNWpSbUZqZEc5eWVYeDhYQ0lnWENJOVBUMWxMblJsZUhSOVpuVnVZM1JwYjI0Z1puUW9kQ3h1TEhJcGUzWmhjaUJwTEc4OVQySnFaV04wTG10bGVYTW9iaWt1YkdWdVozUm9QakFzWVQxMFB5RWhkQzRrYzNSaFlteGxPaUZ2TEhNOWRDWW1kQzRrYTJWNU8ybG1LSFFwZTJsbUtIUXVYMjV2Y20xaGJHbDZaV1FwY21WMGRYSnVJSFF1WDI1dmNtMWhiR2w2WldRN2FXWW9ZU1ltY2lZbWNpRTlQV1VtSm5NOVBUMXlMaVJyWlhrbUppRnZKaVloY2k0a2FHRnpUbTl5YldGc0tYSmxkSFZ5YmlCeU8yWnZjaWgyWVhJZ1l5QnBiaUJwUFh0OUxIUXBkRnRqWFNZbVhDSWtYQ0loUFQxald6QmRKaVlvYVZ0alhUMXdkQ2h1TEdNc2RGdGpYU2twZldWc2MyVWdhVDE3ZlR0bWIzSW9kbUZ5SUhVZ2FXNGdiaWwxSUdsdUlHbDhmQ2hwVzNWZFBXUjBLRzRzZFNrcE8zSmxkSFZ5YmlCMEppWlBZbXBsWTNRdWFYTkZlSFJsYm5OcFlteGxLSFFwSmlZb2RDNWZibTl5YldGc2FYcGxaRDFwS1N4U0tHa3NYQ0lrYzNSaFlteGxYQ0lzWVNrc1VpaHBMRndpSkd0bGVWd2lMSE1wTEZJb2FTeGNJaVJvWVhOT2IzSnRZV3hjSWl4dktTeHBmV1oxYm1OMGFXOXVJSEIwS0dVc2RDeHVLWHQyWVhJZ2NqMW1kVzVqZEdsdmJpZ3BlM1poY2lCbFBXRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnL2JpNWhjSEJzZVNodWRXeHNMR0Z5WjNWdFpXNTBjeWs2YmloN2ZTazdjbVYwZFhKdUtHVTlaU1ltWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUdVbUppRkJjbkpoZVM1cGMwRnljbUY1S0dVcFAxdGxYVHBoZENobEtTa21KaWd3UFQwOVpTNXNaVzVuZEdoOGZERTlQVDFsTG14bGJtZDBhQ1ltWlZzd1hTNXBjME52YlcxbGJuUXBQM1p2YVdRZ01EcGxmVHR5WlhSMWNtNGdiaTV3Y205NGVTWW1UMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dVc2RDeDdaMlYwT25Jc1pXNTFiV1Z5WVdKc1pUb2hNQ3hqYjI1bWFXZDFjbUZpYkdVNklUQjlLU3h5ZldaMWJtTjBhVzl1SUdSMEtHVXNkQ2w3Y21WMGRYSnVJR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR1ZiZEYxOWZXWjFibU4wYVc5dUlIWjBLR1VzZENsN2RtRnlJSElzYVN4aExITXNZenRwWmloQmNuSmhlUzVwYzBGeWNtRjVLR1VwZkh4Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ1pTbG1iM0lvY2oxdVpYY2dRWEp5WVhrb1pTNXNaVzVuZEdncExHazlNQ3hoUFdVdWJHVnVaM1JvTzJrOFlUdHBLeXNwY2x0cFhUMTBLR1ZiYVYwc2FTazdaV3h6WlNCcFppaGNJbTUxYldKbGNsd2lQVDEwZVhCbGIyWWdaU2xtYjNJb2NqMXVaWGNnUVhKeVlYa29aU2tzYVQwd08yazhaVHRwS3lzcGNsdHBYVDEwS0drck1TeHBLVHRsYkhObElHbG1LRzhvWlNrcGFXWW9iMlVtSm1WYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNsN2NqMWJYVHRtYjNJb2RtRnlJSFU5WlZ0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0Nrc2JEMTFMbTVsZUhRb0tUc2hiQzVrYjI1bE95bHlMbkIxYzJnb2RDaHNMblpoYkhWbExISXViR1Z1WjNSb0tTa3NiRDExTG01bGVIUW9LWDFsYkhObElHWnZjaWh6UFU5aWFtVmpkQzVyWlhsektHVXBMSEk5Ym1WM0lFRnljbUY1S0hNdWJHVnVaM1JvS1N4cFBUQXNZVDF6TG14bGJtZDBhRHRwUEdFN2FTc3JLV005YzF0cFhTeHlXMmxkUFhRb1pWdGpYU3hqTEdrcE8zSmxkSFZ5YmlCdUtISXBmSHdvY2oxYlhTa3NjaTVmYVhOV1RHbHpkRDBoTUN4eWZXWjFibU4wYVc5dUlHaDBLR1VzZEN4dUxISXBlM1poY2lCcExHODlkR2hwY3k0a2MyTnZjR1ZrVTJ4dmRITmJaVjA3Yno4b2JqMXVmSHg3ZlN4eUppWW9iajFCS0VFb2UzMHNjaWtzYmlrcExHazlieWh1S1h4OGRDazZhVDEwYUdsekxpUnpiRzkwYzF0bFhYeDhkRHQyWVhJZ1lUMXVKaVp1TG5Oc2IzUTdjbVYwZFhKdUlHRS9kR2hwY3k0a1kzSmxZWFJsUld4bGJXVnVkQ2hjSW5SbGJYQnNZWFJsWENJc2UzTnNiM1E2WVgwc2FTazZhWDFtZFc1amRHbHZiaUJ0ZENobEtYdHlaWFIxY200Z1RHVW9kR2hwY3k0a2IzQjBhVzl1Y3l4Y0ltWnBiSFJsY25OY0lpeGxLWHg4UlgxbWRXNWpkR2x2YmlCNWRDaGxMSFFwZTNKbGRIVnliaUJCY25KaGVTNXBjMEZ5Y21GNUtHVXBQeTB4UFQwOVpTNXBibVJsZUU5bUtIUXBPbVVoUFQxMGZXWjFibU4wYVc5dUlHZDBLR1VzZEN4dUxISXNhU2w3ZG1GeUlHODlSaTVyWlhsRGIyUmxjMXQwWFh4OGJqdHlaWFIxY200Z2FTWW1jaVltSVVZdWEyVjVRMjlrWlhOYmRGMC9lWFFvYVN4eUtUcHZQM2wwS0c4c1pTazZjajlES0hJcElUMDlkRHAyYjJsa0lEQjlablZ1WTNScGIyNGdYM1FvWlN4MExHNHNjaXhwS1h0cFppaHVLV2xtS0c4b2Jpa3BlM1poY2lCaE8wRnljbUY1TG1selFYSnlZWGtvYmlrbUppaHVQVThvYmlrcE8zWmhjaUJ6UFdaMWJtTjBhVzl1S0c4cGUybG1LRndpWTJ4aGMzTmNJajA5UFc5OGZGd2ljM1I1YkdWY0lqMDlQVzk4ZkhZb2J5a3BZVDFsTzJWc2MyVjdkbUZ5SUhNOVpTNWhkSFJ5Y3lZbVpTNWhkSFJ5Y3k1MGVYQmxPMkU5Y254OFJpNXRkWE4wVlhObFVISnZjQ2gwTEhNc2J5ay9aUzVrYjIxUWNtOXdjM3g4S0dVdVpHOXRVSEp2Y0hNOWUzMHBPbVV1WVhSMGNuTjhmQ2hsTG1GMGRISnpQWHQ5S1gxMllYSWdZejFpS0c4cExIVTlReWh2S1R0aklHbHVJR0Y4ZkhVZ2FXNGdZWHg4S0dGYmIxMDlibHR2WFN4cEppWW9LR1V1YjI1OGZDaGxMbTl1UFh0OUtTbGJYQ0oxY0dSaGRHVTZYQ0lyYjEwOVpuVnVZM1JwYjI0b1pTbDdibHR2WFQxbGZTa3BmVHRtYjNJb2RtRnlJR01nYVc0Z2JpbHpLR01wZldWc2MyVTdjbVYwZFhKdUlHVjlablZ1WTNScGIyNGdZblFvWlN4MEtYdDJZWElnYmoxMGFHbHpMbDl6ZEdGMGFXTlVjbVZsYzN4OEtIUm9hWE11WDNOMFlYUnBZMVJ5WldWelBWdGRLU3h5UFc1YlpWMDdjbVYwZFhKdUlISW1KaUYwUDNJNktIZDBLSEk5Ymx0bFhUMTBhR2x6TGlSdmNIUnBiMjV6TG5OMFlYUnBZMUpsYm1SbGNrWnVjMXRsWFM1allXeHNLSFJvYVhNdVgzSmxibVJsY2xCeWIzaDVMRzUxYkd3c2RHaHBjeWtzWENKZlgzTjBZWFJwWTE5ZlhDSXJaU3doTVNrc2NpbDlablZ1WTNScGIyNGdKSFFvWlN4MExHNHBlM0psZEhWeWJpQjNkQ2hsTEZ3aVgxOXZibU5sWDE5Y0lpdDBLeWh1UDF3aVgxd2lLMjQ2WENKY0lpa3NJVEFwTEdWOVpuVnVZM1JwYjI0Z2QzUW9aU3gwTEc0cGUybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa3BabTl5S0haaGNpQnlQVEE3Y2p4bExteGxibWQwYUR0eUt5c3BaVnR5WFNZbVhDSnpkSEpwYm1kY0lpRTlkSGx3Wlc5bUlHVmJjbDBtSmtOMEtHVmJjbDBzZEN0Y0lsOWNJaXR5TEc0cE8yVnNjMlVnUTNRb1pTeDBMRzRwZldaMWJtTjBhVzl1SUVOMEtHVXNkQ3h1S1h0bExtbHpVM1JoZEdsalBTRXdMR1V1YTJWNVBYUXNaUzVwYzA5dVkyVTlibjFtZFc1amRHbHZiaUI0ZENobExIUXBlMmxtS0hRcGFXWW9jeWgwS1NsN2RtRnlJRzQ5WlM1dmJqMWxMbTl1UDBFb2UzMHNaUzV2YmlrNmUzMDdabTl5S0haaGNpQnlJR2x1SUhRcGUzWmhjaUJwUFc1YmNsMHNiejEwVzNKZE8yNWJjbDA5YVQ5YlhTNWpiMjVqWVhRb2FTeHZLVHB2ZlgxbGJITmxPM0psZEhWeWJpQmxmV1oxYm1OMGFXOXVJR3QwS0dVc2RDeHVMSElwZTNROWRIeDhleVJ6ZEdGaWJHVTZJVzU5TzJadmNpaDJZWElnYVQwd08yazhaUzVzWlc1bmRHZzdhU3NyS1h0MllYSWdiejFsVzJsZE8wRnljbUY1TG1selFYSnlZWGtvYnlrL2EzUW9ieXgwTEc0cE9tOG1KaWh2TG5CeWIzaDVKaVlvYnk1bWJpNXdjbTk0ZVQwaE1Da3NkRnR2TG10bGVWMDlieTVtYmlsOWNtVjBkWEp1SUhJbUppaDBMaVJyWlhrOWNpa3NkSDFtZFc1amRHbHZiaUJCZENobExIUXBlMlp2Y2loMllYSWdiajB3TzI0OGRDNXNaVzVuZEdnN2JpczlNaWw3ZG1GeUlISTlkRnR1WFR0Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2NpWW1jaVltS0dWYmRGdHVYVjA5ZEZ0dUt6RmRLWDF5WlhSMWNtNGdaWDFtZFc1amRHbHZiaUJQZENobExIUXBlM0psZEhWeWJsd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmxQM1FyWlRwbGZXWjFibU4wYVc5dUlGTjBLR1VwZTJVdVgyODlKSFFzWlM1ZmJqMW1MR1V1WDNNOWJDeGxMbDlzUFhaMExHVXVYM1E5YUhRc1pTNWZjVDFPTEdVdVgyazlhaXhsTGw5dFBXSjBMR1V1WDJZOWJYUXNaUzVmYXoxbmRDeGxMbDlpUFY5MExHVXVYM1k5YUdVc1pTNWZaVDEyWlN4bExsOTFQV3QwTEdVdVgyYzllSFFzWlM1ZlpEMUJkQ3hsTGw5d1BVOTBmV1oxYm1OMGFXOXVJRlIwS0hRc2JpeHBMRzhzWVNsN2RtRnlJSE1zWXoxMGFHbHpMSFU5WVM1dmNIUnBiMjV6TzNrb2J5eGNJbDkxYVdSY0lpay9LSE05VDJKcVpXTjBMbU55WldGMFpTaHZLU2t1WDI5eWFXZHBibUZzUFc4NktITTlieXh2UFc4dVgyOXlhV2RwYm1Gc0tUdDJZWElnYkQxeUtIVXVYMk52YlhCcGJHVmtLU3htUFNGc08zUm9hWE11WkdGMFlUMTBMSFJvYVhNdWNISnZjSE05Yml4MGFHbHpMbU5vYVd4a2NtVnVQV2tzZEdocGN5NXdZWEpsYm5ROWJ5eDBhR2x6TG14cGMzUmxibVZ5Y3oxMExtOXVmSHhsTEhSb2FYTXVhVzVxWldOMGFXOXVjejFqZENoMUxtbHVhbVZqZEN4dktTeDBhR2x6TG5Oc2IzUnpQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR011SkhOc2IzUnpmSHhtZENoMExuTmpiM0JsWkZOc2IzUnpMR011SkhOc2IzUnpQWFYwS0drc2J5a3BMR011SkhOc2IzUnpmU3hQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXhjSW5OamIzQmxaRk5zYjNSelhDSXNlMlZ1ZFcxbGNtRmliR1U2SVRBc1oyVjBPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR1owS0hRdWMyTnZjR1ZrVTJ4dmRITXNkR2hwY3k1emJHOTBjeWdwS1gxOUtTeHNKaVlvZEdocGN5NGtiM0IwYVc5dWN6MTFMSFJvYVhNdUpITnNiM1J6UFhSb2FYTXVjMnh2ZEhNb0tTeDBhR2x6TGlSelkyOXdaV1JUYkc5MGN6MW1kQ2gwTG5OamIzQmxaRk5zYjNSekxIUm9hWE11SkhOc2IzUnpLU2tzZFM1ZmMyTnZjR1ZKWkQ5MGFHbHpMbDlqUFdaMWJtTjBhVzl1S0dVc2RDeHVMSElwZTNaaGNpQnBQVkIwS0hNc1pTeDBMRzRzY2l4bUtUdHlaWFIxY200Z2FTWW1JVUZ5Y21GNUxtbHpRWEp5WVhrb2FTa21KaWhwTG1adVUyTnZjR1ZKWkQxMUxsOXpZMjl3WlVsa0xHa3VabTVEYjI1MFpYaDBQVzhwTEdsOU9uUm9hWE11WDJNOVpuVnVZM1JwYjI0b1pTeDBMRzRzY2lsN2NtVjBkWEp1SUZCMEtITXNaU3gwTEc0c2NpeG1LWDE5Wm5WdVkzUnBiMjRnUlhRb1pTeDBMRzRzY2l4cEtYdDJZWElnYnoxdFpTaGxLVHR5WlhSMWNtNGdieTVtYmtOdmJuUmxlSFE5Yml4dkxtWnVUM0IwYVc5dWN6MXlMSFF1YzJ4dmRDWW1LQ2h2TG1SaGRHRjhmQ2h2TG1SaGRHRTllMzBwS1M1emJHOTBQWFF1YzJ4dmRDa3NiMzFtZFc1amRHbHZiaUJPZENobExIUXBlMlp2Y2loMllYSWdiaUJwYmlCMEtXVmJZaWh1S1YwOWRGdHVYWDFUZENoVWRDNXdjbTkwYjNSNWNHVXBPM1poY2lCcWREMTdhVzVwZERwbWRXNWpkR2x2YmlobExIUXBlMmxtS0dVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVbUppRmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxMbDlwYzBSbGMzUnliM2xsWkNZbVpTNWtZWFJoTG10bFpYQkJiR2wyWlNsN2RtRnlJSEk5WlR0cWRDNXdjbVZ3WVhSamFDaHlMSElwZldWc2MyVjdLR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlU5Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2oxN1gybHpRMjl0Y0c5dVpXNTBPaUV3TEY5d1lYSmxiblJXYm05a1pUcGxMSEJoY21WdWREcDBmU3hwUFdVdVpHRjBZUzVwYm14cGJtVlVaVzF3YkdGMFpUdHVLR2twSmlZb2NpNXlaVzVrWlhJOWFTNXlaVzVrWlhJc2NpNXpkR0YwYVdOU1pXNWtaWEpHYm5NOWFTNXpkR0YwYVdOU1pXNWtaWEpHYm5NcE8zSmxkSFZ5YmlCdVpYY2daUzVqYjIxd2IyNWxiblJQY0hScGIyNXpMa04wYjNJb2NpbDlLR1VzVjNRcEtTNGtiVzkxYm5Rb2REOWxMbVZzYlRwMmIybGtJREFzZENsOWZTeHdjbVZ3WVhSamFEcG1kVzVqZEdsdmJpaDBMRzRwZTNaaGNpQnlQVzR1WTI5dGNHOXVaVzUwVDNCMGFXOXVjenNoWm5WdVkzUnBiMjRvZEN4dUxISXNhU3h2S1h0MllYSWdZVDFwTG1SaGRHRXVjMk52Y0dWa1UyeHZkSE1zY3oxMExpUnpZMjl3WldSVGJHOTBjeXhqUFNFaEtHRW1KaUZoTGlSemRHRmliR1Y4ZkhNaFBUMWxKaVloY3k0a2MzUmhZbXhsZkh4aEppWjBMaVJ6WTI5d1pXUlRiRzkwY3k0a2EyVjVJVDA5WVM0a2EyVjVLU3gxUFNFaEtHOThmSFF1Skc5d2RHbHZibk11WDNKbGJtUmxja05vYVd4a2NtVnVmSHhqS1R0MExpUnZjSFJwYjI1ekxsOXdZWEpsYm5SV2JtOWtaVDFwTEhRdUpIWnViMlJsUFdrc2RDNWZkbTV2WkdVbUppaDBMbDkyYm05a1pTNXdZWEpsYm5ROWFTazdhV1lvZEM0a2IzQjBhVzl1Y3k1ZmNtVnVaR1Z5UTJocGJHUnlaVzQ5Ynl4MExpUmhkSFJ5Y3oxcExtUmhkR0V1WVhSMGNuTjhmR1VzZEM0a2JHbHpkR1Z1WlhKelBYSjhmR1VzYmlZbWRDNGtiM0IwYVc5dWN5NXdjbTl3Y3lsN0pHVW9JVEVwTzJadmNpaDJZWElnYkQxMExsOXdjbTl3Y3l4bVBYUXVKRzl3ZEdsdmJuTXVYM0J5YjNCTFpYbHpmSHhiWFN4d1BUQTdjRHhtTG14bGJtZDBhRHR3S3lzcGUzWmhjaUJrUFdaYmNGMHNkajEwTGlSdmNIUnBiMjV6TG5CeWIzQnpPMnhiWkYwOVRXVW9aQ3gyTEc0c2RDbDlKR1VvSVRBcExIUXVKRzl3ZEdsdmJuTXVjSEp2Y0hORVlYUmhQVzU5Y2oxeWZIeGxPM1poY2lCb1BYUXVKRzl3ZEdsdmJuTXVYM0JoY21WdWRFeHBjM1JsYm1WeWN6dDBMaVJ2Y0hScGIyNXpMbDl3WVhKbGJuUk1hWE4wWlc1bGNuTTljaXh4ZENoMExISXNhQ2tzZFNZbUtIUXVKSE5zYjNSelBYVjBLRzhzYVM1amIyNTBaWGgwS1N4MExpUm1iM0pqWlZWd1pHRjBaU2dwS1gwb2JpNWpiMjF3YjI1bGJuUkpibk4wWVc1alpUMTBMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxMSEl1Y0hKdmNITkVZWFJoTEhJdWJHbHpkR1Z1WlhKekxHNHNjaTVqYUdsc1pISmxiaWw5TEdsdWMyVnlkRHBtZFc1amRHbHZiaWhsS1h0MllYSWdkQ3h1UFdVdVkyOXVkR1Y0ZEN4eVBXVXVZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVTdjaTVmYVhOTmIzVnVkR1ZrZkh3b2NpNWZhWE5OYjNWdWRHVmtQU0V3TEZsMEtISXNYQ0p0YjNWdWRHVmtYQ0lwS1N4bExtUmhkR0V1YTJWbGNFRnNhWFpsSmlZb2JpNWZhWE5OYjNWdWRHVmtQeWdvZEQxeUtTNWZhVzVoWTNScGRtVTlJVEVzWlc0dWNIVnphQ2gwS1NrNldIUW9jaXdoTUNrcGZTeGtaWE4wY205NU9tWjFibU4wYVc5dUtHVXBlM1poY2lCMFBXVXVZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVTdkQzVmYVhORVpYTjBjbTk1WldSOGZDaGxMbVJoZEdFdWEyVmxjRUZzYVhabFAyWjFibU4wYVc5dUlHVW9kQ3h1S1h0cFppaHVKaVlvZEM1ZlpHbHlaV04wU1c1aFkzUnBkbVU5SVRBc1IzUW9kQ2twS1hKbGRIVnlianRwWmlnaGRDNWZhVzVoWTNScGRtVXBlM1F1WDJsdVlXTjBhWFpsUFNFd08yWnZjaWgyWVhJZ2NqMHdPM0k4ZEM0a1kyaHBiR1J5Wlc0dWJHVnVaM1JvTzNJckt5bGxLSFF1SkdOb2FXeGtjbVZ1VzNKZEtUdFpkQ2gwTEZ3aVpHVmhZM1JwZG1GMFpXUmNJaWw5ZlNoMExDRXdLVHAwTGlSa1pYTjBjbTk1S0NrcGZYMHNSSFE5VDJKcVpXTjBMbXRsZVhNb2FuUXBPMloxYm1OMGFXOXVJRXgwS0drc1lTeHpMR01zYkNsN2FXWW9JWFFvYVNrcGUzWmhjaUJtUFhNdUpHOXdkR2x2Ym5NdVgySmhjMlU3YVdZb2J5aHBLU1ltS0drOVppNWxlSFJsYm1Rb2FTa3BMRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdrcGUzWmhjaUJ3TzJsbUtIUW9hUzVqYVdRcEppWjJiMmxrSURBOVBUMG9hVDFtZFc1amRHbHZiaWhsTEdrcGUybG1LSElvWlM1bGNuSnZjaWttSm00b1pTNWxjbkp2Y2tOdmJYQXBLWEpsZEhWeWJpQmxMbVZ5Y205eVEyOXRjRHRwWmlodUtHVXVjbVZ6YjJ4MlpXUXBLWEpsZEhWeWJpQmxMbkpsYzI5c2RtVmtPM1poY2lCaFBVaDBPMkVtSm00b1pTNXZkMjVsY25NcEppWXRNVDA5UFdVdWIzZHVaWEp6TG1sdVpHVjRUMllvWVNrbUptVXViM2R1WlhKekxuQjFjMmdvWVNrN2FXWW9jaWhsTG14dllXUnBibWNwSmladUtHVXViRzloWkdsdVowTnZiWEFwS1hKbGRIVnliaUJsTG14dllXUnBibWREYjIxd08ybG1LR0VtSmlGdUtHVXViM2R1WlhKektTbDdkbUZ5SUhNOVpTNXZkMjVsY25NOVcyRmRMR005SVRBc2JEMXVkV3hzTEdZOWJuVnNiRHRoTGlSdmJpaGNJbWh2YjJzNlpHVnpkSEp2ZVdWa1hDSXNablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdhQ2h6TEdFcGZTazdkbUZ5SUhBOVpuVnVZM1JwYjI0b1pTbDdabTl5S0haaGNpQjBQVEFzYmoxekxteGxibWQwYUR0MFBHNDdkQ3NyS1hOYmRGMHVKR1p2Y21ObFZYQmtZWFJsS0NrN1pTWW1LSE11YkdWdVozUm9QVEFzYm5Wc2JDRTlQV3dtSmloamJHVmhjbFJwYldWdmRYUW9iQ2tzYkQxdWRXeHNLU3h1ZFd4c0lUMDlaaVltS0dOc1pXRnlWR2x0Wlc5MWRDaG1LU3htUFc1MWJHd3BLWDBzWkQxRUtHWjFibU4wYVc5dUtIUXBlMlV1Y21WemIyeDJaV1E5UW5Rb2RDeHBLU3hqUDNNdWJHVnVaM1JvUFRBNmNDZ2hNQ2w5S1N4MlBVUW9ablZ1WTNScGIyNG9kQ2w3YmlobExtVnljbTl5UTI5dGNDa21KaWhsTG1WeWNtOXlQU0V3TEhBb0lUQXBLWDBwTEcwOVpTaGtMSFlwTzNKbGRIVnliaUJ2S0cwcEppWW9kU2h0S1Q5MEtHVXVjbVZ6YjJ4MlpXUXBKaVp0TG5Sb1pXNG9aQ3gyS1RwMUtHMHVZMjl0Y0c5dVpXNTBLU1ltS0cwdVkyOXRjRzl1Wlc1MExuUm9aVzRvWkN4MktTeHVLRzB1WlhKeWIzSXBKaVlvWlM1bGNuSnZja052YlhBOVFuUW9iUzVsY25KdmNpeHBLU2tzYmlodExteHZZV1JwYm1jcEppWW9aUzVzYjJGa2FXNW5RMjl0Y0QxQ2RDaHRMbXh2WVdScGJtY3NhU2tzTUQwOVBXMHVaR1ZzWVhrL1pTNXNiMkZrYVc1blBTRXdPbXc5YzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncGUydzliblZzYkN4MEtHVXVjbVZ6YjJ4MlpXUXBKaVowS0dVdVpYSnliM0lwSmlZb1pTNXNiMkZrYVc1blBTRXdMSEFvSVRFcEtYMHNiUzVrWld4aGVYeDhNakF3S1Nrc2JpaHRMblJwYldWdmRYUXBKaVlvWmoxelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdaajF1ZFd4c0xIUW9aUzV5WlhOdmJIWmxaQ2ttSm5Zb2JuVnNiQ2w5TEcwdWRHbHRaVzkxZENrcEtTa3NZejBoTVN4bExteHZZV1JwYm1jL1pTNXNiMkZrYVc1blEyOXRjRHBsTG5KbGMyOXNkbVZrZlgwb2NEMXBMR1lwS1NseVpYUjFjbTRnWm5WdVkzUnBiMjRvWlN4MExHNHNjaXhwS1h0MllYSWdiejEyWlNncE8zSmxkSFZ5YmlCdkxtRnplVzVqUm1GamRHOXllVDFsTEc4dVlYTjVibU5OWlhSaFBYdGtZWFJoT25Rc1kyOXVkR1Y0ZERwdUxHTm9hV3hrY21WdU9uSXNkR0ZuT21sOUxHOTlLSEFzWVN4ekxHTXNiQ2s3WVQxaGZIeDdmU3drYmlocEtTeHVLR0V1Ylc5a1pXd3BKaVptZFc1amRHbHZiaWhsTEhRcGUzWmhjaUJ5UFdVdWJXOWtaV3dtSm1VdWJXOWtaV3d1Y0hKdmNIeDhYQ0oyWVd4MVpWd2lMR2s5WlM1dGIyUmxiQ1ltWlM1dGIyUmxiQzVsZG1WdWRIeDhYQ0pwYm5CMWRGd2lPeWgwTG1GMGRISnpmSHdvZEM1aGRIUnljejE3ZlNrcFczSmRQWFF1Ylc5a1pXd3VkbUZzZFdVN2RtRnlJRzg5ZEM1dmJueDhLSFF1YjI0OWUzMHBMR0U5YjF0cFhTeHpQWFF1Ylc5a1pXd3VZMkZzYkdKaFkyczdiaWhoS1Q4b1FYSnlZWGt1YVhOQmNuSmhlU2hoS1Q4dE1UMDlQV0V1YVc1a1pYaFBaaWh6S1RwaElUMDljeWttSmlodlcybGRQVnR6WFM1amIyNWpZWFFvWVNrcE9tOWJhVjA5YzMwb2FTNXZjSFJwYjI1ekxHRXBPM1poY2lCa1BXWjFibU4wYVc5dUtHVXNjaXhwS1h0MllYSWdiejF5TG05d2RHbHZibk11Y0hKdmNITTdhV1lvSVhRb2J5a3BlM1poY2lCaFBYdDlMSE05WlM1aGRIUnljeXhqUFdVdWNISnZjSE03YVdZb2JpaHpLWHg4YmloaktTbG1iM0lvZG1GeUlIVWdhVzRnYnlsN2RtRnlJR3c5UXloMUtUdHZkQ2hoTEdNc2RTeHNMQ0V3S1h4OGIzUW9ZU3h6TEhVc2JDd2hNU2w5Y21WMGRYSnVJR0Y5ZlNoaExHa3BPMmxtS0hJb2FTNXZjSFJwYjI1ekxtWjFibU4wYVc5dVlXd3BLWEpsZEhWeWJpQm1kVzVqZEdsdmJpaDBMSElzYVN4dkxHRXBlM1poY2lCelBYUXViM0IwYVc5dWN5eGpQWHQ5TEhVOWN5NXdjbTl3Y3p0cFppaHVLSFVwS1dadmNpaDJZWElnYkNCcGJpQjFLV05iYkYwOVRXVW9iQ3gxTEhKOGZHVXBPMlZzYzJVZ2JpaHBMbUYwZEhKektTWW1UblFvWXl4cExtRjBkSEp6S1N4dUtHa3VjSEp2Y0hNcEppWk9kQ2hqTEdrdWNISnZjSE1wTzNaaGNpQm1QVzVsZHlCVWRDaHBMR01zWVN4dkxIUXBMSEE5Y3k1eVpXNWtaWEl1WTJGc2JDaHVkV3hzTEdZdVgyTXNaaWs3YVdZb2NDQnBibk4wWVc1alpXOW1JSEJsS1hKbGRIVnliaUJGZENod0xHa3NaaTV3WVhKbGJuUXNjeWs3YVdZb1FYSnlZWGt1YVhOQmNuSmhlU2h3S1NsN1ptOXlLSFpoY2lCa1BXRjBLSEFwZkh4YlhTeDJQVzVsZHlCQmNuSmhlU2hrTG14bGJtZDBhQ2tzYUQwd08yZzhaQzVzWlc1bmRHZzdhQ3NyS1haYmFGMDlSWFFvWkZ0b1hTeHBMR1l1Y0dGeVpXNTBMSE1wTzNKbGRIVnliaUIyZlgwb2FTeGtMR0VzY3l4aktUdDJZWElnZGoxaExtOXVPMmxtS0dFdWIyNDlZUzV1WVhScGRtVlBiaXh5S0drdWIzQjBhVzl1Y3k1aFluTjBjbUZqZENrcGUzWmhjaUJ0UFdFdWMyeHZkRHRoUFh0OUxHMG1KaWhoTG5Oc2IzUTliU2w5SVdaMWJtTjBhVzl1S0dVcGUyWnZjaWgyWVhJZ2REMWxMbWh2YjJ0OGZDaGxMbWh2YjJzOWUzMHBMRzQ5TUR0dVBFUjBMbXhsYm1kMGFEdHVLeXNwZTNaaGNpQnlQVVIwVzI1ZExHazlkRnR5WFN4dlBXcDBXM0pkTzJrOVBUMXZmSHhwSmlacExsOXRaWEpuWldSOGZDaDBXM0pkUFdrL1RYUW9ieXhwS1RwdktYMTlLR0VwTzNaaGNpQjVQV2t1YjNCMGFXOXVjeTV1WVcxbGZIeHNPM0psZEhWeWJpQnVaWGNnY0dVb1hDSjJkV1V0WTI5dGNHOXVaVzUwTFZ3aUsya3VZMmxrS3loNVAxd2lMVndpSzNrNlhDSmNJaWtzWVN4MmIybGtJREFzZG05cFpDQXdMSFp2YVdRZ01DeHpMSHREZEc5eU9ta3NjSEp2Y0hORVlYUmhPbVFzYkdsemRHVnVaWEp6T25Zc2RHRm5PbXdzWTJocGJHUnlaVzQ2WTMwc2NDbDlmWDFtZFc1amRHbHZiaUJOZENobExIUXBlM1poY2lCdVBXWjFibU4wYVc5dUtHNHNjaWw3WlNodUxISXBMSFFvYml4eUtYMDdjbVYwZFhKdUlHNHVYMjFsY21kbFpEMGhNQ3h1ZlhaaGNpQkpkRDB4TEVaMFBUSTdablZ1WTNScGIyNGdVSFFvWlN4aExITXNZeXgxTEd3cGUzSmxkSFZ5YmloQmNuSmhlUzVwYzBGeWNtRjVLSE1wZkh4cEtITXBLU1ltS0hVOVl5eGpQWE1zY3oxMmIybGtJREFwTEhJb2JDa21KaWgxUFVaMEtTeG1kVzVqZEdsdmJpaGxMR2tzWVN4ekxHTXBlMmxtS0c0b1lTa21KbTRvWVM1ZlgyOWlYMThwS1hKbGRIVnliaUIyWlNncE8yNG9ZU2ttSm00b1lTNXBjeWttSmlocFBXRXVhWE1wTzJsbUtDRnBLWEpsZEhWeWJpQjJaU2dwTzBGeWNtRjVMbWx6UVhKeVlYa29jeWttSmx3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlITmJNRjBtSmlnb1lUMWhmSHg3ZlNrdWMyTnZjR1ZrVTJ4dmRITTllMlJsWm1GMWJIUTZjMXN3WFgwc2N5NXNaVzVuZEdnOU1DazdZejA5UFVaMFAzTTlZWFFvY3lrNll6MDlQVWwwSmlZb2N6MW1kVzVqZEdsdmJpaGxLWHRtYjNJb2RtRnlJSFE5TUR0MFBHVXViR1Z1WjNSb08zUXJLeWxwWmloQmNuSmhlUzVwYzBGeWNtRjVLR1ZiZEYwcEtYSmxkSFZ5YmlCQmNuSmhlUzV3Y205MGIzUjVjR1V1WTI5dVkyRjBMbUZ3Y0d4NUtGdGRMR1VwTzNKbGRIVnliaUJsZlNoektTazdkbUZ5SUhVc2JEdHBaaWhjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnYVNsN2RtRnlJR1k3YkQxbExpUjJibTlrWlNZbVpTNGtkbTV2WkdVdWJuTjhmRVl1WjJWMFZHRm5UbUZ0WlhOd1lXTmxLR2twTEhVOVJpNXBjMUpsYzJWeWRtVmtWR0ZuS0drcFAyNWxkeUJ3WlNoR0xuQmhjbk5sVUd4aGRHWnZjbTFVWVdkT1lXMWxLR2twTEdFc2N5eDJiMmxrSURBc2RtOXBaQ0F3TEdVcE9tRW1KbUV1Y0hKbGZId2hiaWhtUFV4bEtHVXVKRzl3ZEdsdmJuTXNYQ0pqYjIxd2IyNWxiblJ6WENJc2FTa3BQMjVsZHlCd1pTaHBMR0VzY3l4MmIybGtJREFzZG05cFpDQXdMR1VwT2t4MEtHWXNZU3hsTEhNc2FTbDlaV3h6WlNCMVBVeDBLR2tzWVN4bExITXBPM0psZEhWeWJpQkJjbkpoZVM1cGMwRnljbUY1S0hVcFAzVTZiaWgxS1Q4b2JpaHNLU1ltWm5WdVkzUnBiMjRnWlNocExHOHNZU2w3YVM1dWN6MXZPMXdpWm05eVpXbG5iazlpYW1WamRGd2lQVDA5YVM1MFlXY21KaWh2UFhadmFXUWdNQ3hoUFNFd0tUdHBaaWh1S0drdVkyaHBiR1J5Wlc0cEtXWnZjaWgyWVhJZ2N6MHdMR005YVM1amFHbHNaSEpsYmk1c1pXNW5kR2c3Y3p4ak8zTXJLeWw3ZG1GeUlIVTlhUzVqYUdsc1pISmxibHR6WFR0dUtIVXVkR0ZuS1NZbUtIUW9kUzV1Y3lsOGZISW9ZU2ttSmx3aWMzWm5YQ0loUFQxMUxuUmhaeWttSm1Vb2RTeHZMR0VwZlgwb2RTeHNLU3h1S0dFcEppWm1kVzVqZEdsdmJpaGxLWHR2S0dVdWMzUjViR1VwSmlabGRDaGxMbk4wZVd4bEtUdHZLR1V1WTJ4aGMzTXBKaVpsZENobExtTnNZWE56S1gwb1lTa3NkU2s2ZG1Vb0tYMG9aU3hoTEhNc1l5eDFLWDEyWVhJZ1VuUXNTSFE5Ym5Wc2JEdG1kVzVqZEdsdmJpQkNkQ2hsTEhRcGUzSmxkSFZ5YmlobExsOWZaWE5OYjJSMWJHVjhmRzlsSmlaY0lrMXZaSFZzWlZ3aVBUMDlaVnRUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2RkS1NZbUtHVTlaUzVrWldaaGRXeDBLU3h2S0dVcFAzUXVaWGgwWlc1a0tHVXBPbVY5Wm5WdVkzUnBiMjRnVlhRb1pTbDdjbVYwZFhKdUlHVXVhWE5EYjIxdFpXNTBKaVpsTG1GemVXNWpSbUZqZEc5eWVYMW1kVzVqZEdsdmJpQjZkQ2hsS1h0cFppaEJjbkpoZVM1cGMwRnljbUY1S0dVcEtXWnZjaWgyWVhJZ2REMHdPM1E4WlM1c1pXNW5kR2c3ZENzcktYdDJZWElnY2oxbFczUmRPMmxtS0c0b2Npa21KaWh1S0hJdVkyOXRjRzl1Wlc1MFQzQjBhVzl1Y3lsOGZGVjBLSElwS1NseVpYUjFjbTRnY24xOVpuVnVZM1JwYjI0Z1ZuUW9aU3gwS1h0U2RDNGtiMjRvWlN4MEtYMW1kVzVqZEdsdmJpQkxkQ2hsTEhRcGUxSjBMaVJ2Wm1Zb1pTeDBLWDFtZFc1amRHbHZiaUJLZENobExIUXBlM1poY2lCdVBWSjBPM0psZEhWeWJpQm1kVzVqZEdsdmJpQnlLQ2w3Ym5Wc2JDRTlQWFF1WVhCd2JIa29iblZzYkN4aGNtZDFiV1Z1ZEhNcEppWnVMaVJ2Wm1Zb1pTeHlLWDE5Wm5WdVkzUnBiMjRnY1hRb1pTeDBMRzRwZTFKMFBXVXNjblFvZEN4dWZIeDdmU3hXZEN4TGRDeEtkQ3hsS1N4U2REMTJiMmxrSURCOWRtRnlJRmQwUFc1MWJHdzdablZ1WTNScGIyNGdXblFvWlNsN2RtRnlJSFE5VjNRN2NtVjBkWEp1SUZkMFBXVXNablZ1WTNScGIyNG9LWHRYZEQxMGZYMW1kVzVqZEdsdmJpQkhkQ2hsS1h0bWIzSW9PMlVtSmlobFBXVXVKSEJoY21WdWRDazdLV2xtS0dVdVgybHVZV04wYVhabEtYSmxkSFZ5YmlFd08zSmxkSFZ5YmlFeGZXWjFibU4wYVc5dUlGaDBLR1VzZENsN2FXWW9kQ2w3YVdZb1pTNWZaR2x5WldOMFNXNWhZM1JwZG1VOUlURXNSM1FvWlNrcGNtVjBkWEp1ZldWc2MyVWdhV1lvWlM1ZlpHbHlaV04wU1c1aFkzUnBkbVVwY21WMGRYSnVPMmxtS0dVdVgybHVZV04wYVhabGZIeHVkV3hzUFQwOVpTNWZhVzVoWTNScGRtVXBlMlV1WDJsdVlXTjBhWFpsUFNFeE8yWnZjaWgyWVhJZ2JqMHdPMjQ4WlM0a1kyaHBiR1J5Wlc0dWJHVnVaM1JvTzI0ckt5bFlkQ2hsTGlSamFHbHNaSEpsYmx0dVhTazdXWFFvWlN4Y0ltRmpkR2wyWVhSbFpGd2lLWDE5Wm5WdVkzUnBiMjRnV1hRb1pTeDBLWHRzWlNncE8zWmhjaUJ1UFdVdUpHOXdkR2x2Ym5OYmRGMHNjajEwSzF3aUlHaHZiMnRjSWp0cFppaHVLV1p2Y2loMllYSWdhVDB3TEc4OWJpNXNaVzVuZEdnN2FUeHZPMmtyS3lsSVpTaHVXMmxkTEdVc2JuVnNiQ3hsTEhJcE8yVXVYMmhoYzBodmIydEZkbVZ1ZENZbVpTNGtaVzFwZENoY0ltaHZiMnM2WENJcmRDa3NabVVvS1gxMllYSWdVWFE5VzEwc1pXNDlXMTBzZEc0OWUzMHNibTQ5SVRFc2NtNDlJVEVzYjI0OU1EdDJZWElnWVc0OU1DeHpiajFFWVhSbExtNXZkenRwWmloNkppWWhjU2w3ZG1GeUlHTnVQWGRwYm1SdmR5NXdaWEptYjNKdFlXNWpaVHRqYmlZbVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdZMjR1Ym05M0ppWnpiaWdwUG1SdlkzVnRaVzUwTG1OeVpXRjBaVVYyWlc1MEtGd2lSWFpsYm5SY0lpa3VkR2x0WlZOMFlXMXdKaVlvYzI0OVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1kyNHVibTkzS0NsOUtYMW1kVzVqZEdsdmJpQjFiaWdwZTNaaGNpQmxMSFE3Wm05eUtHRnVQWE51S0Nrc2NtNDlJVEFzVVhRdWMyOXlkQ2htZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCbExtbGtMWFF1YVdSOUtTeHZiajB3TzI5dVBGRjBMbXhsYm1kMGFEdHZiaXNyS1NobFBWRjBXMjl1WFNrdVltVm1iM0psSmlabExtSmxabTl5WlNncExIUTlaUzVwWkN4MGJsdDBYVDF1ZFd4c0xHVXVjblZ1S0NrN2RtRnlJRzQ5Wlc0dWMyeHBZMlVvS1N4eVBWRjBMbk5zYVdObEtDazdiMjQ5VVhRdWJHVnVaM1JvUFdWdUxteGxibWQwYUQwd0xIUnVQWHQ5TEc1dVBYSnVQU0V4TEdaMWJtTjBhVzl1S0dVcGUyWnZjaWgyWVhJZ2REMHdPM1E4WlM1c1pXNW5kR2c3ZENzcktXVmJkRjB1WDJsdVlXTjBhWFpsUFNFd0xGaDBLR1ZiZEYwc0lUQXBmU2h1S1N4bWRXNWpkR2x2YmlobEtYdDJZWElnZEQxbExteGxibWQwYUR0bWIzSW9PM1F0TFRzcGUzWmhjaUJ1UFdWYmRGMHNjajF1TG5adE8zSXVYM2RoZEdOb1pYSTlQVDF1SmlaeUxsOXBjMDF2ZFc1MFpXUW1KaUZ5TGw5cGMwUmxjM1J5YjNsbFpDWW1XWFFvY2l4Y0luVndaR0YwWldSY0lpbDlmU2h5S1N4dVpTWW1SaTVrWlhaMGIyOXNjeVltYm1VdVpXMXBkQ2hjSW1ac2RYTm9YQ0lwZlhaaGNpQnNiajB3TEdadVBXWjFibU4wYVc5dUtHVXNkQ3h1TEhJc2FTbDdkR2hwY3k1MmJUMWxMR2ttSmlobExsOTNZWFJqYUdWeVBYUm9hWE1wTEdVdVgzZGhkR05vWlhKekxuQjFjMmdvZEdocGN5a3NjajhvZEdocGN5NWtaV1Z3UFNFaGNpNWtaV1Z3TEhSb2FYTXVkWE5sY2owaElYSXVkWE5sY2l4MGFHbHpMbXhoZW5rOUlTRnlMbXhoZW5rc2RHaHBjeTV6ZVc1alBTRWhjaTV6ZVc1akxIUm9hWE11WW1WbWIzSmxQWEl1WW1WbWIzSmxLVHAwYUdsekxtUmxaWEE5ZEdocGN5NTFjMlZ5UFhSb2FYTXViR0Y2ZVQxMGFHbHpMbk41Ym1NOUlURXNkR2hwY3k1allqMXVMSFJvYVhNdWFXUTlLeXRzYml4MGFHbHpMbUZqZEdsMlpUMGhNQ3gwYUdsekxtUnBjblI1UFhSb2FYTXViR0Y2ZVN4MGFHbHpMbVJsY0hNOVcxMHNkR2hwY3k1dVpYZEVaWEJ6UFZ0ZExIUm9hWE11WkdWd1NXUnpQVzVsZHlCcFpTeDBhR2x6TG01bGQwUmxjRWxrY3oxdVpYY2dhV1VzZEdocGN5NWxlSEJ5WlhOemFXOXVQVndpWENJc1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdkRDkwYUdsekxtZGxkSFJsY2oxME9paDBhR2x6TG1kbGRIUmxjajFtZFc1amRHbHZiaWhsS1h0cFppZ2hTQzUwWlhOMEtHVXBLWHQyWVhJZ2REMWxMbk53YkdsMEtGd2lMbHdpS1R0eVpYUjFjbTRnWm5WdVkzUnBiMjRvWlNsN1ptOXlLSFpoY2lCdVBUQTdiangwTG14bGJtZDBhRHR1S3lzcGUybG1LQ0ZsS1hKbGRIVnlianRsUFdWYmRGdHVYVjE5Y21WMGRYSnVJR1Y5Zlgwb2RDa3NkR2hwY3k1blpYUjBaWEo4ZkNoMGFHbHpMbWRsZEhSbGNqMVRLU2tzZEdocGN5NTJZV3gxWlQxMGFHbHpMbXhoZW5rL2RtOXBaQ0F3T25Sb2FYTXVaMlYwS0NsOU8yWnVMbkJ5YjNSdmRIbHdaUzVuWlhROVpuVnVZM1JwYjI0b0tYdDJZWElnWlR0c1pTaDBhR2x6S1R0MllYSWdkRDEwYUdsekxuWnRPM1J5ZVh0bFBYUm9hWE11WjJWMGRHVnlMbU5oYkd3b2RDeDBLWDFqWVhSamFDaGxLWHRwWmlnaGRHaHBjeTUxYzJWeUtYUm9jbTkzSUdVN1VtVW9aU3gwTENkblpYUjBaWElnWm05eUlIZGhkR05vWlhJZ1hDSW5LM1JvYVhNdVpYaHdjbVZ6YzJsdmJpc25YQ0luS1gxbWFXNWhiR3g1ZTNSb2FYTXVaR1ZsY0NZbVpYUW9aU2tzWm1Vb0tTeDBhR2x6TG1Oc1pXRnVkWEJFWlhCektDbDljbVYwZFhKdUlHVjlMR1p1TG5CeWIzUnZkSGx3WlM1aFpHUkVaWEE5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5WlM1cFpEdDBhR2x6TG01bGQwUmxjRWxrY3k1b1lYTW9kQ2w4ZkNoMGFHbHpMbTVsZDBSbGNFbGtjeTVoWkdRb2RDa3NkR2hwY3k1dVpYZEVaWEJ6TG5CMWMyZ29aU2tzZEdocGN5NWtaWEJKWkhNdWFHRnpLSFFwZkh4bExtRmtaRk4xWWloMGFHbHpLU2w5TEdadUxuQnliM1J2ZEhsd1pTNWpiR1ZoYm5Wd1JHVndjejFtZFc1amRHbHZiaWdwZTJadmNpaDJZWElnWlQxMGFHbHpMbVJsY0hNdWJHVnVaM1JvTzJVdExUc3BlM1poY2lCMFBYUm9hWE11WkdWd2MxdGxYVHQwYUdsekxtNWxkMFJsY0Vsa2N5NW9ZWE1vZEM1cFpDbDhmSFF1Y21WdGIzWmxVM1ZpS0hSb2FYTXBmWFpoY2lCdVBYUm9hWE11WkdWd1NXUnpPM1JvYVhNdVpHVndTV1J6UFhSb2FYTXVibVYzUkdWd1NXUnpMSFJvYVhNdWJtVjNSR1Z3U1dSelBXNHNkR2hwY3k1dVpYZEVaWEJKWkhNdVkyeGxZWElvS1N4dVBYUm9hWE11WkdWd2N5eDBhR2x6TG1SbGNITTlkR2hwY3k1dVpYZEVaWEJ6TEhSb2FYTXVibVYzUkdWd2N6MXVMSFJvYVhNdWJtVjNSR1Z3Y3k1c1pXNW5kR2c5TUgwc1ptNHVjSEp2ZEc5MGVYQmxMblZ3WkdGMFpUMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdWJHRjZlVDkwYUdsekxtUnBjblI1UFNFd09uUm9hWE11YzNsdVl6OTBhR2x6TG5KMWJpZ3BPbVoxYm1OMGFXOXVLR1VwZTNaaGNpQjBQV1V1YVdRN2FXWW9iblZzYkQwOWRHNWJkRjBwZTJsbUtIUnVXM1JkUFNFd0xISnVLWHRtYjNJb2RtRnlJRzQ5VVhRdWJHVnVaM1JvTFRFN2JqNXZiaVltVVhSYmJsMHVhV1ErWlM1cFpEc3BiaTB0TzFGMExuTndiR2xqWlNodUt6RXNNQ3hsS1gxbGJITmxJRkYwTG5CMWMyZ29aU2s3Ym01OGZDaHViajBoTUN4WlpTaDFiaWtwZlgwb2RHaHBjeWw5TEdadUxuQnliM1J2ZEhsd1pTNXlkVzQ5Wm5WdVkzUnBiMjRvS1h0cFppaDBhR2x6TG1GamRHbDJaU2w3ZG1GeUlHVTlkR2hwY3k1blpYUW9LVHRwWmlobElUMDlkR2hwY3k1MllXeDFaWHg4YnlobEtYeDhkR2hwY3k1a1pXVndLWHQyWVhJZ2REMTBhR2x6TG5aaGJIVmxPMmxtS0hSb2FYTXVkbUZzZFdVOVpTeDBhR2x6TG5WelpYSXBkSEo1ZTNSb2FYTXVZMkl1WTJGc2JDaDBhR2x6TG5adExHVXNkQ2w5WTJGMFkyZ29aU2w3VW1Vb1pTeDBhR2x6TG5adExDZGpZV3hzWW1GamF5Qm1iM0lnZDJGMFkyaGxjaUJjSWljcmRHaHBjeTVsZUhCeVpYTnphVzl1S3lkY0lpY3BmV1ZzYzJVZ2RHaHBjeTVqWWk1allXeHNLSFJvYVhNdWRtMHNaU3gwS1gxOWZTeG1iaTV3Y205MGIzUjVjR1V1WlhaaGJIVmhkR1U5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMblpoYkhWbFBYUm9hWE11WjJWMEtDa3NkR2hwY3k1a2FYSjBlVDBoTVgwc1ptNHVjSEp2ZEc5MGVYQmxMbVJsY0dWdVpEMW1kVzVqZEdsdmJpZ3BlMlp2Y2loMllYSWdaVDEwYUdsekxtUmxjSE11YkdWdVozUm9PMlV0TFRzcGRHaHBjeTVrWlhCelcyVmRMbVJsY0dWdVpDZ3BmU3htYmk1d2NtOTBiM1I1Y0dVdWRHVmhjbVJ2ZDI0OVpuVnVZM1JwYjI0b0tYdHBaaWgwYUdsekxtRmpkR2wyWlNsN2RHaHBjeTUyYlM1ZmFYTkNaV2x1WjBSbGMzUnliM2xsWkh4OGFDaDBhR2x6TG5adExsOTNZWFJqYUdWeWN5eDBhR2x6S1R0bWIzSW9kbUZ5SUdVOWRHaHBjeTVrWlhCekxteGxibWQwYUR0bExTMDdLWFJvYVhNdVpHVndjMXRsWFM1eVpXMXZkbVZUZFdJb2RHaHBjeWs3ZEdocGN5NWhZM1JwZG1VOUlURjlmVHQyWVhJZ2NHNDllMlZ1ZFcxbGNtRmliR1U2SVRBc1kyOXVabWxuZFhKaFlteGxPaUV3TEdkbGREcFRMSE5sZERwVGZUdG1kVzVqZEdsdmJpQmtiaWhsTEhRc2JpbDdjRzR1WjJWMFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE5iZEYxYmJsMTlMSEJ1TG5ObGREMW1kVzVqZEdsdmJpaGxLWHQwYUdselczUmRXMjVkUFdWOUxFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsTEc0c2NHNHBmV1oxYm1OMGFXOXVJSFp1S0dVcGUyVXVYM2RoZEdOb1pYSnpQVnRkTzNaaGNpQjBQV1V1Skc5d2RHbHZibk03ZEM1d2NtOXdjeVltWm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnYmoxbExpUnZjSFJwYjI1ekxuQnliM0J6UkdGMFlYeDhlMzBzY2oxbExsOXdjbTl3Y3oxN2ZTeHBQV1V1Skc5d2RHbHZibk11WDNCeWIzQkxaWGx6UFZ0ZE8yVXVKSEJoY21WdWRDWW1KR1VvSVRFcE8zWmhjaUJ2UFdaMWJtTjBhVzl1S0c4cGUya3VjSFZ6YUNodktUdDJZWElnWVQxTlpTaHZMSFFzYml4bEtUdDRaU2h5TEc4c1lTa3NieUJwYmlCbGZIeGtiaWhsTEZ3aVgzQnliM0J6WENJc2J5bDlPMlp2Y2loMllYSWdZU0JwYmlCMEtXOG9ZU2s3SkdVb0lUQXBmU2hsTEhRdWNISnZjSE1wTEhRdWJXVjBhRzlrY3lZbVpuVnVZM1JwYjI0b1pTeDBLWHRsTGlSdmNIUnBiMjV6TG5CeWIzQnpPMlp2Y2loMllYSWdiaUJwYmlCMEtXVmJibDA5WENKbWRXNWpkR2x2Ymx3aUlUMTBlWEJsYjJZZ2RGdHVYVDlUT25nb2RGdHVYU3hsS1gwb1pTeDBMbTFsZEdodlpITXBMSFF1WkdGMFlUOW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMWxMaVJ2Y0hScGIyNXpMbVJoZEdFN2N5aDBQV1V1WDJSaGRHRTlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnZEQ5bWRXNWpkR2x2YmlobExIUXBlMnhsS0NrN2RISjVlM0psZEhWeWJpQmxMbU5oYkd3b2RDeDBLWDFqWVhSamFDaGxLWHR5WlhSMWNtNGdVbVVvWlN4MExGd2laR0YwWVNncFhDSXBMSHQ5ZldacGJtRnNiSGw3Wm1Vb0tYMTlLSFFzWlNrNmRIeDhlMzBwZkh3b2REMTdmU2s3ZG1GeUlHNDlUMkpxWldOMExtdGxlWE1vZENrc2NqMWxMaVJ2Y0hScGIyNXpMbkJ5YjNCekxHazlLR1V1Skc5d2RHbHZibk11YldWMGFHOWtjeXh1TG14bGJtZDBhQ2s3Wm05eUtEdHBMUzA3S1h0MllYSWdiejF1VzJsZE8zSW1KbmtvY2l4dktYeDhLR0U5ZG05cFpDQXdMRE0ySVQwOUtHRTlLRzhyWENKY0lpa3VZMmhoY2tOdlpHVkJkQ2d3S1NrbUpqazFJVDA5WVNZbVpHNG9aU3hjSWw5a1lYUmhYQ0lzYnlrcGZYWmhjaUJoTzBObEtIUXNJVEFwZlNobEtUcERaU2hsTGw5a1lYUmhQWHQ5TENFd0tTeDBMbU52YlhCMWRHVmtKaVptZFc1amRHbHZiaWhsTEhRcGUzWmhjaUJ1UFdVdVgyTnZiWEIxZEdWa1YyRjBZMmhsY25NOVQySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tTeHlQWFJsS0NrN1ptOXlLSFpoY2lCcElHbHVJSFFwZTNaaGNpQnZQWFJiYVYwc1lUMWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJ2UDI4NmJ5NW5aWFE3Y254OEtHNWJhVjA5Ym1WM0lHWnVLR1VzWVh4OFV5eFRMR2h1S1Nrc2FTQnBiaUJsZkh4dGJpaGxMR2tzYnlsOWZTaGxMSFF1WTI5dGNIVjBaV1FwTEhRdWQyRjBZMmdtSm5RdWQyRjBZMmdoUFQxWkppWm1kVzVqZEdsdmJpaGxMSFFwZTJadmNpaDJZWElnYmlCcGJpQjBLWHQyWVhJZ2NqMTBXMjVkTzJsbUtFRnljbUY1TG1selFYSnlZWGtvY2lrcFptOXlLSFpoY2lCcFBUQTdhVHh5TG14bGJtZDBhRHRwS3lzcFgyNG9aU3h1TEhKYmFWMHBPMlZzYzJVZ1gyNG9aU3h1TEhJcGZYMG9aU3gwTG5kaGRHTm9LWDEyWVhJZ2FHNDllMnhoZW5rNklUQjlPMloxYm1OMGFXOXVJRzF1S0dVc2RDeHVLWHQyWVhJZ2NqMGhkR1VvS1R0Y0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnVQeWh3Ymk1blpYUTljajk1YmloMEtUcG5iaWh1S1N4d2JpNXpaWFE5VXlrNktIQnVMbWRsZEQxdUxtZGxkRDl5SmlZaE1TRTlQVzR1WTJGamFHVS9lVzRvZENrNloyNG9iaTVuWlhRcE9sTXNjRzR1YzJWMFBXNHVjMlYwZkh4VEtTeFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlN4MExIQnVLWDFtZFc1amRHbHZiaUI1YmlobEtYdHlaWFIxY200Z1puVnVZM1JwYjI0b0tYdDJZWElnZEQxMGFHbHpMbDlqYjIxd2RYUmxaRmRoZEdOb1pYSnpKaVowYUdsekxsOWpiMjF3ZFhSbFpGZGhkR05vWlhKelcyVmRPMmxtS0hRcGNtVjBkWEp1SUhRdVpHbHlkSGttSm5RdVpYWmhiSFZoZEdVb0tTeGpaUzUwWVhKblpYUW1KblF1WkdWd1pXNWtLQ2tzZEM1MllXeDFaWDE5Wm5WdVkzUnBiMjRnWjI0b1pTbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHVXVZMkZzYkNoMGFHbHpMSFJvYVhNcGZYMW1kVzVqZEdsdmJpQmZiaWhsTEhRc2JpeHlLWHR5WlhSMWNtNGdjeWh1S1NZbUtISTliaXh1UFc0dWFHRnVaR3hsY2lrc1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHNG1KaWh1UFdWYmJsMHBMR1V1SkhkaGRHTm9LSFFzYml4eUtYMTJZWElnWW00OU1EdG1kVzVqZEdsdmJpQWtiaWhsS1h0MllYSWdkRDFsTG05d2RHbHZibk03YVdZb1pTNXpkWEJsY2lsN2RtRnlJRzQ5Skc0b1pTNXpkWEJsY2lrN2FXWW9iaUU5UFdVdWMzVndaWEpQY0hScGIyNXpLWHRsTG5OMWNHVnlUM0IwYVc5dWN6MXVPM1poY2lCeVBXWjFibU4wYVc5dUtHVXBlM1poY2lCMExHNDlaUzV2Y0hScGIyNXpMSEk5WlM1elpXRnNaV1JQY0hScGIyNXpPMlp2Y2loMllYSWdhU0JwYmlCdUtXNWJhVjBoUFQxeVcybGRKaVlvZEh4OEtIUTllMzBwTEhSYmFWMDlibHRwWFNrN2NtVjBkWEp1SUhSOUtHVXBPM0ltSmtFb1pTNWxlSFJsYm1SUGNIUnBiMjV6TEhJcExDaDBQV1V1YjNCMGFXOXVjejFFWlNodUxHVXVaWGgwWlc1a1QzQjBhVzl1Y3lrcExtNWhiV1VtSmloMExtTnZiWEJ2Ym1WdWRITmJkQzV1WVcxbFhUMWxLWDE5Y21WMGRYSnVJSFI5Wm5WdVkzUnBiMjRnZDI0b1pTbDdkR2hwY3k1ZmFXNXBkQ2hsS1gxbWRXNWpkR2x2YmlCRGJpaGxLWHRsTG1OcFpEMHdPM1poY2lCMFBURTdaUzVsZUhSbGJtUTlablZ1WTNScGIyNG9aU2w3WlQxbGZIeDdmVHQyWVhJZ2JqMTBhR2x6TEhJOWJpNWphV1FzYVQxbExsOURkRzl5Zkh3b1pTNWZRM1J2Y2oxN2ZTazdhV1lvYVZ0eVhTbHlaWFIxY200Z2FWdHlYVHQyWVhJZ2J6MWxMbTVoYldWOGZHNHViM0IwYVc5dWN5NXVZVzFsTEdFOVpuVnVZM1JwYjI0b1pTbDdkR2hwY3k1ZmFXNXBkQ2hsS1gwN2NtVjBkWEp1S0dFdWNISnZkRzkwZVhCbFBVOWlhbVZqZEM1amNtVmhkR1VvYmk1d2NtOTBiM1I1Y0dVcEtTNWpiMjV6ZEhKMVkzUnZjajFoTEdFdVkybGtQWFFyS3l4aExtOXdkR2x2Ym5NOVJHVW9iaTV2Y0hScGIyNXpMR1VwTEdFdWMzVndaWEk5Yml4aExtOXdkR2x2Ym5NdWNISnZjSE1tSm1aMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFdVdWIzQjBhVzl1Y3k1d2NtOXdjenRtYjNJb2RtRnlJRzRnYVc0Z2RDbGtiaWhsTG5CeWIzUnZkSGx3WlN4Y0lsOXdjbTl3YzF3aUxHNHBmU2hoS1N4aExtOXdkR2x2Ym5NdVkyOXRjSFYwWldRbUptWjFibU4wYVc5dUtHVXBlM1poY2lCMFBXVXViM0IwYVc5dWN5NWpiMjF3ZFhSbFpEdG1iM0lvZG1GeUlHNGdhVzRnZENsdGJpaGxMbkJ5YjNSdmRIbHdaU3h1TEhSYmJsMHBmU2hoS1N4aExtVjRkR1Z1WkQxdUxtVjRkR1Z1WkN4aExtMXBlR2x1UFc0dWJXbDRhVzRzWVM1MWMyVTliaTUxYzJVc1RTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHVXBlMkZiWlYwOWJsdGxYWDBwTEc4bUppaGhMbTl3ZEdsdmJuTXVZMjl0Y0c5dVpXNTBjMXR2WFQxaEtTeGhMbk4xY0dWeVQzQjBhVzl1Y3oxdUxtOXdkR2x2Ym5Nc1lTNWxlSFJsYm1SUGNIUnBiMjV6UFdVc1lTNXpaV0ZzWldSUGNIUnBiMjV6UFVFb2UzMHNZUzV2Y0hScGIyNXpLU3hwVzNKZFBXRXNZWDE5Wm5WdVkzUnBiMjRnZUc0b1pTbDdjbVYwZFhKdUlHVW1KaWhsTGtOMGIzSXViM0IwYVc5dWN5NXVZVzFsZkh4bExuUmhaeWw5Wm5WdVkzUnBiMjRnYTI0b1pTeDBLWHR5WlhSMWNtNGdRWEp5WVhrdWFYTkJjbkpoZVNobEtUOWxMbWx1WkdWNFQyWW9kQ2srTFRFNlhDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHVS9aUzV6Y0d4cGRDaGNJaXhjSWlrdWFXNWtaWGhQWmloMEtUNHRNVG9vYmoxbExGd2lXMjlpYW1WamRDQlNaV2RGZUhCZFhDSTlQVDFoTG1OaGJHd29iaWttSm1VdWRHVnpkQ2gwS1NrN2RtRnlJRzU5Wm5WdVkzUnBiMjRnUVc0b1pTeDBLWHQyWVhJZ2JqMWxMbU5oWTJobExISTlaUzVyWlhsekxHazlaUzVmZG01dlpHVTdabTl5S0haaGNpQnZJR2x1SUc0cGUzWmhjaUJoUFc1YmIxMDdhV1lvWVNsN2RtRnlJSE05ZUc0b1lTNWpiMjF3YjI1bGJuUlBjSFJwYjI1ektUdHpKaVloZENoektTWW1UMjRvYml4dkxISXNhU2w5ZlgxbWRXNWpkR2x2YmlCUGJpaGxMSFFzYml4eUtYdDJZWElnYVQxbFczUmRPeUZwZkh4eUppWnBMblJoWnowOVBYSXVkR0ZuZkh4cExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObExpUmtaWE4wY205NUtDa3NaVnQwWFQxdWRXeHNMR2dvYml4MEtYMGhablZ1WTNScGIyNG9kQ2w3ZEM1d2NtOTBiM1I1Y0dVdVgybHVhWFE5Wm5WdVkzUnBiMjRvZENsN2RtRnlJRzQ5ZEdocGN6dHVMbDkxYVdROVltNHJLeXh1TGw5cGMxWjFaVDBoTUN4MEppWjBMbDlwYzBOdmJYQnZibVZ1ZEQ5bWRXNWpkR2x2YmlobExIUXBlM1poY2lCdVBXVXVKRzl3ZEdsdmJuTTlUMkpxWldOMExtTnlaV0YwWlNobExtTnZibk4wY25WamRHOXlMbTl3ZEdsdmJuTXBMSEk5ZEM1ZmNHRnlaVzUwVm01dlpHVTdiaTV3WVhKbGJuUTlkQzV3WVhKbGJuUXNiaTVmY0dGeVpXNTBWbTV2WkdVOWNqdDJZWElnYVQxeUxtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NN2JpNXdjbTl3YzBSaGRHRTlhUzV3Y205d2MwUmhkR0VzYmk1ZmNHRnlaVzUwVEdsemRHVnVaWEp6UFdrdWJHbHpkR1Z1WlhKekxHNHVYM0psYm1SbGNrTm9hV3hrY21WdVBXa3VZMmhwYkdSeVpXNHNiaTVmWTI5dGNHOXVaVzUwVkdGblBXa3VkR0ZuTEhRdWNtVnVaR1Z5SmlZb2JpNXlaVzVrWlhJOWRDNXlaVzVrWlhJc2JpNXpkR0YwYVdOU1pXNWtaWEpHYm5NOWRDNXpkR0YwYVdOU1pXNWtaWEpHYm5NcGZTaHVMSFFwT200dUpHOXdkR2x2Ym5NOVJHVW9KRzRvYmk1amIyNXpkSEoxWTNSdmNpa3NkSHg4ZTMwc2Jpa3NiaTVmY21WdVpHVnlVSEp2ZUhrOWJpeHVMbDl6Wld4bVBXNHNablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlaUzRrYjNCMGFXOXVjeXh1UFhRdWNHRnlaVzUwTzJsbUtHNG1KaUYwTG1GaWMzUnlZV04wS1h0bWIzSW9PMjR1Skc5d2RHbHZibk11WVdKemRISmhZM1FtSm00dUpIQmhjbVZ1ZERzcGJqMXVMaVJ3WVhKbGJuUTdiaTRrWTJocGJHUnlaVzR1Y0hWemFDaGxLWDFsTGlSd1lYSmxiblE5Yml4bExpUnliMjkwUFc0L2JpNGtjbTl2ZERwbExHVXVKR05vYVd4a2NtVnVQVnRkTEdVdUpISmxabk05ZTMwc1pTNWZkMkYwWTJobGNqMXVkV3hzTEdVdVgybHVZV04wYVhabFBXNTFiR3dzWlM1ZlpHbHlaV04wU1c1aFkzUnBkbVU5SVRFc1pTNWZhWE5OYjNWdWRHVmtQU0V4TEdVdVgybHpSR1Z6ZEhKdmVXVmtQU0V4TEdVdVgybHpRbVZwYm1kRVpYTjBjbTk1WldROUlURjlLRzRwTEdaMWJtTjBhVzl1S0dVcGUyVXVYMlYyWlc1MGN6MVBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BMR1V1WDJoaGMwaHZiMnRGZG1WdWREMGhNVHQyWVhJZ2REMWxMaVJ2Y0hScGIyNXpMbDl3WVhKbGJuUk1hWE4wWlc1bGNuTTdkQ1ltY1hRb1pTeDBLWDBvYmlrc1puVnVZM1JwYjI0b2RDbDdkQzVmZG01dlpHVTliblZzYkN4MExsOXpkR0YwYVdOVWNtVmxjejF1ZFd4c08zWmhjaUJ1UFhRdUpHOXdkR2x2Ym5Nc2NqMTBMaVIyYm05a1pUMXVMbDl3WVhKbGJuUldibTlrWlN4cFBYSW1Kbkl1WTI5dWRHVjRkRHQwTGlSemJHOTBjejExZENodUxsOXlaVzVrWlhKRGFHbHNaSEpsYml4cEtTeDBMaVJ6WTI5d1pXUlRiRzkwY3oxbExIUXVYMk05Wm5WdVkzUnBiMjRvWlN4dUxISXNhU2w3Y21WMGRYSnVJRkIwS0hRc1pTeHVMSElzYVN3aE1TbDlMSFF1SkdOeVpXRjBaVVZzWlcxbGJuUTlablZ1WTNScGIyNG9aU3h1TEhJc2FTbDdjbVYwZFhKdUlGQjBLSFFzWlN4dUxISXNhU3doTUNsOU8zWmhjaUJ2UFhJbUpuSXVaR0YwWVR0NFpTaDBMRndpSkdGMGRISnpYQ0lzYnlZbWJ5NWhkSFJ5YzN4OFpTeHVkV3hzTENFd0tTeDRaU2gwTEZ3aUpHeHBjM1JsYm1WeWMxd2lMRzR1WDNCaGNtVnVkRXhwYzNSbGJtVnljM3g4WlN4dWRXeHNMQ0V3S1gwb2Jpa3NXWFFvYml4Y0ltSmxabTl5WlVOeVpXRjBaVndpS1N4bWRXNWpkR2x2YmlobEtYdDJZWElnZEQxamRDaGxMaVJ2Y0hScGIyNXpMbWx1YW1WamRDeGxLVHQwSmlZb0pHVW9JVEVwTEU5aWFtVmpkQzVyWlhsektIUXBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9iaWw3ZUdVb1pTeHVMSFJiYmwwcGZTa3NKR1VvSVRBcEtYMG9iaWtzZG00b2Jpa3NablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlaUzRrYjNCMGFXOXVjeTV3Y205MmFXUmxPM1FtSmlobExsOXdjbTkyYVdSbFpEMWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUIwUDNRdVkyRnNiQ2hsS1RwMEtYMG9iaWtzV1hRb2JpeGNJbU55WldGMFpXUmNJaWtzYmk0a2IzQjBhVzl1Y3k1bGJDWW1iaTRrYlc5MWJuUW9iaTRrYjNCMGFXOXVjeTVsYkNsOWZTaDNiaWtzWm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5ZTJkbGREcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TGw5a1lYUmhmWDBzYmoxN1oyVjBPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdVgzQnliM0J6ZlgwN1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1V1Y0hKdmRHOTBlWEJsTEZ3aUpHUmhkR0ZjSWl4MEtTeFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlM1d2NtOTBiM1I1Y0dVc1hDSWtjSEp2Y0hOY0lpeHVLU3hsTG5CeWIzUnZkSGx3WlM0a2MyVjBQV3RsTEdVdWNISnZkRzkwZVhCbExpUmtaV3hsZEdVOVFXVXNaUzV3Y205MGIzUjVjR1V1SkhkaGRHTm9QV1oxYm1OMGFXOXVLR1VzZEN4dUtYdHBaaWh6S0hRcEtYSmxkSFZ5YmlCZmJpaDBhR2x6TEdVc2RDeHVLVHNvYmoxdWZIeDdmU2t1ZFhObGNqMGhNRHQyWVhJZ2NqMXVaWGNnWm00b2RHaHBjeXhsTEhRc2JpazdhV1lvYmk1cGJXMWxaR2xoZEdVcGRISjVlM1F1WTJGc2JDaDBhR2x6TEhJdWRtRnNkV1VwZldOaGRHTm9LR1VwZTFKbEtHVXNkR2hwY3l3blkyRnNiR0poWTJzZ1ptOXlJR2x0YldWa2FXRjBaU0IzWVhSamFHVnlJRndpSnl0eUxtVjRjSEpsYzNOcGIyNHJKMXdpSnlsOWNtVjBkWEp1SUdaMWJtTjBhVzl1S0NsN2NpNTBaV0Z5Wkc5M2JpZ3BmWDE5S0hkdUtTeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMHZYbWh2YjJzNkx6dGxMbkJ5YjNSdmRIbHdaUzRrYjI0OVpuVnVZM1JwYjI0b1pTeHVLWHQyWVhJZ2NqMTBhR2x6TzJsbUtFRnljbUY1TG1selFYSnlZWGtvWlNrcFptOXlLSFpoY2lCcFBUQXNiejFsTG14bGJtZDBhRHRwUEc4N2FTc3JLWEl1Skc5dUtHVmJhVjBzYmlrN1pXeHpaU2h5TGw5bGRtVnVkSE5iWlYxOGZDaHlMbDlsZG1WdWRITmJaVjA5VzEwcEtTNXdkWE5vS0c0cExIUXVkR1Z6ZENobEtTWW1LSEl1WDJoaGMwaHZiMnRGZG1WdWREMGhNQ2s3Y21WMGRYSnVJSEo5TEdVdWNISnZkRzkwZVhCbExpUnZibU5sUFdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUc0OWRHaHBjenRtZFc1amRHbHZiaUJ5S0NsN2JpNGtiMlptS0dVc2Npa3NkQzVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5Y21WMGRYSnVJSEl1Wm00OWRDeHVMaVJ2YmlobExISXBMRzU5TEdVdWNISnZkRzkwZVhCbExpUnZabVk5Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnYmoxMGFHbHpPMmxtS0NGaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1hKbGRIVnliaUJ1TGw5bGRtVnVkSE05VDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1N4dU8ybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa3BlMlp2Y2loMllYSWdjajB3TEdrOVpTNXNaVzVuZEdnN2NqeHBPM0lyS3lsdUxpUnZabVlvWlZ0eVhTeDBLVHR5WlhSMWNtNGdibjEyWVhJZ2J5eGhQVzR1WDJWMlpXNTBjMXRsWFR0cFppZ2hZU2x5WlhSMWNtNGdianRwWmlnaGRDbHlaWFIxY200Z2JpNWZaWFpsYm5SelcyVmRQVzUxYkd3c2JqdG1iM0lvZG1GeUlITTlZUzVzWlc1bmRHZzdjeTB0T3lscFppZ29iejFoVzNOZEtUMDlQWFI4Zkc4dVptNDlQVDEwS1h0aExuTndiR2xqWlNoekxERXBPMkp5WldGcmZYSmxkSFZ5YmlCdWZTeGxMbkJ5YjNSdmRIbHdaUzRrWlcxcGREMW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMTBhR2x6TGw5bGRtVnVkSE5iWlYwN2FXWW9kQ2w3ZEQxMExteGxibWQwYUQ0eFAyc29kQ2s2ZER0bWIzSW9kbUZ5SUc0OWF5aGhjbWQxYldWdWRITXNNU2tzY2owblpYWmxiblFnYUdGdVpHeGxjaUJtYjNJZ1hDSW5LMlVySjF3aUp5eHBQVEFzYnoxMExteGxibWQwYUR0cFBHODdhU3NyS1VobEtIUmJhVjBzZEdocGN5eHVMSFJvYVhNc2NpbDljbVYwZFhKdUlIUm9hWE45ZlNoM2Jpa3NablZ1WTNScGIyNG9aU2w3WlM1d2NtOTBiM1I1Y0dVdVgzVndaR0YwWlQxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCdVBYUm9hWE1zY2oxdUxpUmxiQ3hwUFc0dVgzWnViMlJsTEc4OVduUW9iaWs3Ymk1ZmRtNXZaR1U5WlN4dUxpUmxiRDFwUDI0dVgxOXdZWFJqYUY5ZktHa3NaU2s2Ymk1ZlgzQmhkR05vWDE4b2JpNGtaV3dzWlN4MExDRXhLU3h2S0Nrc2NpWW1LSEl1WDE5MmRXVmZYejF1ZFd4c0tTeHVMaVJsYkNZbUtHNHVKR1ZzTGw5ZmRuVmxYMTg5Ymlrc2JpNGtkbTV2WkdVbUptNHVKSEJoY21WdWRDWW1iaTRrZG01dlpHVTlQVDF1TGlSd1lYSmxiblF1WDNadWIyUmxKaVlvYmk0a2NHRnlaVzUwTGlSbGJEMXVMaVJsYkNsOUxHVXVjSEp2ZEc5MGVYQmxMaVJtYjNKalpWVndaR0YwWlQxbWRXNWpkR2x2YmlncGUzUm9hWE11WDNkaGRHTm9aWEltSm5Sb2FYTXVYM2RoZEdOb1pYSXVkWEJrWVhSbEtDbDlMR1V1Y0hKdmRHOTBlWEJsTGlSa1pYTjBjbTk1UFdaMWJtTjBhVzl1S0NsN2RtRnlJR1U5ZEdocGN6dHBaaWdoWlM1ZmFYTkNaV2x1WjBSbGMzUnliM2xsWkNsN1dYUW9aU3hjSW1KbFptOXlaVVJsYzNSeWIzbGNJaWtzWlM1ZmFYTkNaV2x1WjBSbGMzUnliM2xsWkQwaE1EdDJZWElnZEQxbExpUndZWEpsYm5RN0lYUjhmSFF1WDJselFtVnBibWRFWlhOMGNtOTVaV1I4ZkdVdUpHOXdkR2x2Ym5NdVlXSnpkSEpoWTNSOGZHZ29kQzRrWTJocGJHUnlaVzRzWlNrc1pTNWZkMkYwWTJobGNpWW1aUzVmZDJGMFkyaGxjaTUwWldGeVpHOTNiaWdwTzJadmNpaDJZWElnYmoxbExsOTNZWFJqYUdWeWN5NXNaVzVuZEdnN2JpMHRPeWxsTGw5M1lYUmphR1Z5YzF0dVhTNTBaV0Z5Wkc5M2JpZ3BPMlV1WDJSaGRHRXVYMTl2WWw5ZkppWmxMbDlrWVhSaExsOWZiMkpmWHk1MmJVTnZkVzUwTFMwc1pTNWZhWE5FWlhOMGNtOTVaV1E5SVRBc1pTNWZYM0JoZEdOb1gxOG9aUzVmZG01dlpHVXNiblZzYkNrc1dYUW9aU3hjSW1SbGMzUnliM2xsWkZ3aUtTeGxMaVJ2Wm1Zb0tTeGxMaVJsYkNZbUtHVXVKR1ZzTGw5ZmRuVmxYMTg5Ym5Wc2JDa3NaUzRrZG01dlpHVW1KaWhsTGlSMmJtOWtaUzV3WVhKbGJuUTliblZzYkNsOWZYMG9kMjRwTEdaMWJtTjBhVzl1S0dVcGUxTjBLR1V1Y0hKdmRHOTBlWEJsS1N4bExuQnliM1J2ZEhsd1pTNGtibVY0ZEZScFkyczlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRmxsS0dVc2RHaHBjeWw5TEdVdWNISnZkRzkwZVhCbExsOXlaVzVrWlhJOVpuVnVZM1JwYjI0b0tYdDJZWElnWlN4MFBYUm9hWE1zYmoxMExpUnZjSFJwYjI1ekxISTliaTV5Wlc1a1pYSXNhVDF1TGw5d1lYSmxiblJXYm05a1pUdHBKaVlvZEM0a2MyTnZjR1ZrVTJ4dmRITTlablFvYVM1a1lYUmhMbk5qYjNCbFpGTnNiM1J6TEhRdUpITnNiM1J6TEhRdUpITmpiM0JsWkZOc2IzUnpLU2tzZEM0a2RtNXZaR1U5YVR0MGNubDdTSFE5ZEN4bFBYSXVZMkZzYkNoMExsOXlaVzVrWlhKUWNtOTRlU3gwTGlSamNtVmhkR1ZGYkdWdFpXNTBLWDFqWVhSamFDaHVLWHRTWlNodUxIUXNYQ0p5Wlc1a1pYSmNJaWtzWlQxMExsOTJibTlrWlgxbWFXNWhiR3g1ZTBoMFBXNTFiR3g5Y21WMGRYSnVJRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa21KakU5UFQxbExteGxibWQwYUNZbUtHVTlaVnN3WFNrc1pTQnBibk4wWVc1alpXOW1JSEJsZkh3b1pUMTJaU2dwS1N4bExuQmhjbVZ1ZEQxcExHVjlmU2gzYmlrN2RtRnlJRk51UFZ0VGRISnBibWNzVW1WblJYaHdMRUZ5Y21GNVhTeFViajE3UzJWbGNFRnNhWFpsT250dVlXMWxPbHdpYTJWbGNDMWhiR2wyWlZ3aUxHRmljM1J5WVdOME9pRXdMSEJ5YjNCek9udHBibU5zZFdSbE9sTnVMR1Y0WTJ4MVpHVTZVMjRzYldGNE9sdFRkSEpwYm1jc1RuVnRZbVZ5WFgwc1kzSmxZWFJsWkRwbWRXNWpkR2x2YmlncGUzUm9hWE11WTJGamFHVTlUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLU3gwYUdsekxtdGxlWE05VzExOUxHUmxjM1J5YjNsbFpEcG1kVzVqZEdsdmJpZ3BlMlp2Y2loMllYSWdaU0JwYmlCMGFHbHpMbU5oWTJobEtVOXVLSFJvYVhNdVkyRmphR1VzWlN4MGFHbHpMbXRsZVhNcGZTeHRiM1Z1ZEdWa09tWjFibU4wYVc5dUtDbDdkbUZ5SUdVOWRHaHBjenQwYUdsekxpUjNZWFJqYUNoY0ltbHVZMngxWkdWY0lpeG1kVzVqZEdsdmJpaDBLWHRCYmlobExHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnJiaWgwTEdVcGZTbDlLU3gwYUdsekxpUjNZWFJqYUNoY0ltVjRZMngxWkdWY0lpeG1kVzVqZEdsdmJpaDBLWHRCYmlobExHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpRnJiaWgwTEdVcGZTbDlLWDBzY21WdVpHVnlPbVoxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlkR2hwY3k0a2MyeHZkSE11WkdWbVlYVnNkQ3gwUFhwMEtHVXBMRzQ5ZENZbWRDNWpiMjF3YjI1bGJuUlBjSFJwYjI1ek8ybG1LRzRwZTNaaGNpQnlQWGh1S0c0cExHazlkR2hwY3k1cGJtTnNkV1JsTEc4OWRHaHBjeTVsZUdOc2RXUmxPMmxtS0drbUppZ2hjbng4SVd0dUtHa3NjaWtwZkh4dkppWnlKaVpyYmlodkxISXBLWEpsZEhWeWJpQjBPM1poY2lCaFBYUm9hWE11WTJGamFHVXNjejEwYUdsekxtdGxlWE1zWXoxdWRXeHNQVDEwTG10bGVUOXVMa04wYjNJdVkybGtLeWh1TG5SaFp6OWNJam82WENJcmJpNTBZV2M2WENKY0lpazZkQzVyWlhrN1lWdGpYVDhvZEM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlQxaFcyTmRMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxMR2dvY3l4aktTeHpMbkIxYzJnb1l5a3BPaWhoVzJOZFBYUXNjeTV3ZFhOb0tHTXBMSFJvYVhNdWJXRjRKaVp6TG14bGJtZDBhRDV3WVhKelpVbHVkQ2gwYUdsekxtMWhlQ2ttSms5dUtHRXNjMXN3WFN4ekxIUm9hWE11WDNadWIyUmxLU2tzZEM1a1lYUmhMbXRsWlhCQmJHbDJaVDBoTUgxeVpYUjFjbTRnZEh4OFpTWW1aVnN3WFgxOWZUc2hablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTllMmRsZERwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCR2ZYMDdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dVc1hDSmpiMjVtYVdkY0lpeDBLU3hsTG5WMGFXdzllM2RoY200NllXVXNaWGgwWlc1a09rRXNiV1Z5WjJWUGNIUnBiMjV6T2tSbExHUmxabWx1WlZKbFlXTjBhWFpsT25obGZTeGxMbk5sZEQxclpTeGxMbVJsYkdWMFpUMUJaU3hsTG01bGVIUlVhV05yUFZsbExHVXViMkp6WlhKMllXSnNaVDFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnUTJVb1pTa3NaWDBzWlM1dmNIUnBiMjV6UFU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrc1RTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtIUXBlMlV1YjNCMGFXOXVjMXQwSzF3aWMxd2lYVDFQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwZlNrc1pTNXZjSFJwYjI1ekxsOWlZWE5sUFdVc1FTaGxMbTl3ZEdsdmJuTXVZMjl0Y0c5dVpXNTBjeXhVYmlrc1puVnVZM1JwYjI0b1pTbDdaUzUxYzJVOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROWRHaHBjeTVmYVc1emRHRnNiR1ZrVUd4MVoybHVjM3g4S0hSb2FYTXVYMmx1YzNSaGJHeGxaRkJzZFdkcGJuTTlXMTBwTzJsbUtIUXVhVzVrWlhoUFppaGxLVDR0TVNseVpYUjFjbTRnZEdocGN6dDJZWElnYmoxcktHRnlaM1Z0Wlc1MGN5d3hLVHR5WlhSMWNtNGdiaTUxYm5Ob2FXWjBLSFJvYVhNcExGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1V1YVc1emRHRnNiRDlsTG1sdWMzUmhiR3d1WVhCd2JIa29aU3h1S1RwY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmxKaVpsTG1Gd2NHeDVLRzUxYkd3c2Jpa3NkQzV3ZFhOb0tHVXBMSFJvYVhOOWZTaGxLU3htZFc1amRHbHZiaWhsS1h0bExtMXBlR2x1UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCMGFHbHpMbTl3ZEdsdmJuTTlSR1VvZEdocGN5NXZjSFJwYjI1ekxHVXBMSFJvYVhOOWZTaGxLU3hEYmlobEtTeG1kVzVqZEdsdmJpaGxLWHROTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZENsN1pWdDBYVDFtZFc1amRHbHZiaWhsTEc0cGUzSmxkSFZ5YmlCdVB5aGNJbU52YlhCdmJtVnVkRndpUFQwOWRDWW1jeWh1S1NZbUtHNHVibUZ0WlQxdUxtNWhiV1Y4ZkdVc2JqMTBhR2x6TG05d2RHbHZibk11WDJKaGMyVXVaWGgwWlc1a0tHNHBLU3hjSW1ScGNtVmpkR2wyWlZ3aVBUMDlkQ1ltWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2JpWW1LRzQ5ZTJKcGJtUTZiaXgxY0dSaGRHVTZibjBwTEhSb2FYTXViM0IwYVc5dWMxdDBLMXdpYzF3aVhWdGxYVDF1TEc0cE9uUm9hWE11YjNCMGFXOXVjMXQwSzF3aWMxd2lYVnRsWFgxOUtYMG9aU2w5S0hkdUtTeFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZDI0dWNISnZkRzkwZVhCbExGd2lKR2x6VTJWeWRtVnlYQ0lzZTJkbGREcDBaWDBwTEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDNiaTV3Y205MGIzUjVjR1VzWENJa2MzTnlRMjl1ZEdWNGRGd2lMSHRuWlhRNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RHaHBjeTRrZG01dlpHVW1KblJvYVhNdUpIWnViMlJsTG5OemNrTnZiblJsZUhSOWZTa3NUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hkdUxGd2lSblZ1WTNScGIyNWhiRkpsYm1SbGNrTnZiblJsZUhSY0lpeDdkbUZzZFdVNlZIUjlLU3gzYmk1MlpYSnphVzl1UFZ3aU1pNDJMakV3WENJN2RtRnlJRVZ1UFhBb1hDSnpkSGxzWlN4amJHRnpjMXdpS1N4T2JqMXdLRndpYVc1d2RYUXNkR1Y0ZEdGeVpXRXNiM0IwYVc5dUxITmxiR1ZqZEN4d2NtOW5jbVZ6YzF3aUtTeHFiajFtZFc1amRHbHZiaWhsTEhRc2JpbDdjbVYwZFhKdVhDSjJZV3gxWlZ3aVBUMDliaVltVG00b1pTa21KbHdpWW5WMGRHOXVYQ0loUFQxMGZIeGNJbk5sYkdWamRHVmtYQ0k5UFQxdUppWmNJbTl3ZEdsdmJsd2lQVDA5Wlh4OFhDSmphR1ZqYTJWa1hDSTlQVDF1SmlaY0ltbHVjSFYwWENJOVBUMWxmSHhjSW0xMWRHVmtYQ0k5UFQxdUppWmNJblpwWkdWdlhDSTlQVDFsZlN4RWJqMXdLRndpWTI5dWRHVnVkR1ZrYVhSaFlteGxMR1J5WVdkbllXSnNaU3h6Y0dWc2JHTm9aV05yWENJcExFeHVQWEFvWENKbGRtVnVkSE1zWTJGeVpYUXNkSGx3YVc1bkxIQnNZV2x1ZEdWNGRDMXZibXg1WENJcExFMXVQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUVodUtIUXBmSHhjSW1aaGJITmxYQ0k5UFQxMFAxd2labUZzYzJWY0lqcGNJbU52Ym5SbGJuUmxaR2wwWVdKc1pWd2lQVDA5WlNZbVRHNG9kQ2svZERwY0luUnlkV1ZjSW4wc1NXNDljQ2hjSW1Gc2JHOTNablZzYkhOamNtVmxiaXhoYzNsdVl5eGhkWFJ2Wm05amRYTXNZWFYwYjNCc1lYa3NZMmhsWTJ0bFpDeGpiMjF3WVdOMExHTnZiblJ5YjJ4ekxHUmxZMnhoY21Vc1pHVm1ZWFZzZEN4a1pXWmhkV3gwWTJobFkydGxaQ3hrWldaaGRXeDBiWFYwWldRc1pHVm1ZWFZzZEhObGJHVmpkR1ZrTEdSbFptVnlMR1JwYzJGaWJHVmtMR1Z1WVdKc1pXUXNabTl5Ylc1dmRtRnNhV1JoZEdVc2FHbGtaR1Z1TEdsdVpHVjBaWEp0YVc1aGRHVXNhVzVsY25Rc2FYTnRZWEFzYVhSbGJYTmpiM0JsTEd4dmIzQXNiWFZzZEdsd2JHVXNiWFYwWldRc2JtOW9jbVZtTEc1dmNtVnphWHBsTEc1dmMyaGhaR1VzYm05MllXeHBaR0YwWlN4dWIzZHlZWEFzYjNCbGJpeHdZWFZ6Wlc5dVpYaHBkQ3h5WldGa2IyNXNlU3h5WlhGMWFYSmxaQ3h5WlhabGNuTmxaQ3h6WTI5d1pXUXNjMlZoYld4bGMzTXNjMlZzWldOMFpXUXNjMjl5ZEdGaWJHVXNkSEpoYm5Oc1lYUmxMSFJ5ZFdWemNHVmxaQ3gwZVhCbGJYVnpkRzFoZEdOb0xIWnBjMmxpYkdWY0lpa3NSbTQ5WENKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eE9UazVMM2hzYVc1clhDSXNVRzQ5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1WENJNlhDSTlQVDFsTG1Ob1lYSkJkQ2cxS1NZbVhDSjRiR2x1YTF3aVBUMDlaUzV6YkdsalpTZ3dMRFVwZlN4U2JqMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdVRzRvWlNrL1pTNXpiR2xqWlNnMkxHVXViR1Z1WjNSb0tUcGNJbHdpZlN4SWJqMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdiblZzYkQwOVpYeDhJVEU5UFQxbGZUdG1kVzVqZEdsdmJpQkNiaWhsS1h0bWIzSW9kbUZ5SUhROVpTNWtZWFJoTEhJOVpTeHBQV1U3YmlocExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObEtUc3BLR2s5YVM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlM1ZmRtNXZaR1VwSmlacExtUmhkR0VtSmloMFBWVnVLR2t1WkdGMFlTeDBLU2s3Wm05eUtEdHVLSEk5Y2k1d1lYSmxiblFwT3lseUppWnlMbVJoZEdFbUppaDBQVlZ1S0hRc2NpNWtZWFJoS1NrN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvYmlobEtYeDhiaWgwS1NseVpYUjFjbTRnZW00b1pTeFdiaWgwS1NrN2NtVjBkWEp1WENKY0luMG9kQzV6ZEdGMGFXTkRiR0Z6Y3l4MExtTnNZWE56S1gxbWRXNWpkR2x2YmlCVmJpaGxMSFFwZTNKbGRIVnlibnR6ZEdGMGFXTkRiR0Z6Y3pwNmJpaGxMbk4wWVhScFkwTnNZWE56TEhRdWMzUmhkR2xqUTJ4aGMzTXBMR05zWVhOek9tNG9aUzVqYkdGemN5ay9XMlV1WTJ4aGMzTXNkQzVqYkdGemMxMDZkQzVqYkdGemMzMTlablZ1WTNScGIyNGdlbTRvWlN4MEtYdHlaWFIxY200Z1pUOTBQMlVyWENJZ1hDSXJkRHBsT25SOGZGd2lYQ0o5Wm5WdVkzUnBiMjRnVm00b1pTbDdjbVYwZFhKdUlFRnljbUY1TG1selFYSnlZWGtvWlNrL1puVnVZM1JwYjI0b1pTbDdabTl5S0haaGNpQjBMSEk5WENKY0lpeHBQVEFzYnoxbExteGxibWQwYUR0cFBHODdhU3NyS1c0b2REMVdiaWhsVzJsZEtTa21KbHdpWENJaFBUMTBKaVlvY2lZbUtISXJQVndpSUZ3aUtTeHlLejEwS1R0eVpYUjFjbTRnY24wb1pTazZieWhsS1Q5bWRXNWpkR2x2YmlobEtYdDJZWElnZEQxY0lsd2lPMlp2Y2loMllYSWdiaUJwYmlCbEtXVmJibDBtSmloMEppWW9kQ3M5WENJZ1hDSXBMSFFyUFc0cE8zSmxkSFZ5YmlCMGZTaGxLVHBjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWlQ5bE9sd2lYQ0o5ZG1GeUlFdHVQWHR6ZG1jNlhDSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3TDNOMloxd2lMRzFoZEdnNlhDSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs0TDAxaGRHZ3ZUV0YwYUUxTVhDSjlMRXB1UFhBb1hDSm9kRzFzTEdKdlpIa3NZbUZ6WlN4b1pXRmtMR3hwYm1zc2JXVjBZU3h6ZEhsc1pTeDBhWFJzWlN4aFpHUnlaWE56TEdGeWRHbGpiR1VzWVhOcFpHVXNabTl2ZEdWeUxHaGxZV1JsY2l4b01TeG9NaXhvTXl4b05DeG9OU3hvTml4b1ozSnZkWEFzYm1GMkxITmxZM1JwYjI0c1pHbDJMR1JrTEdSc0xHUjBMR1pwWjJOaGNIUnBiMjRzWm1sbmRYSmxMSEJwWTNSMWNtVXNhSElzYVcxbkxHeHBMRzFoYVc0c2Iyd3NjQ3h3Y21Vc2RXd3NZU3hpTEdGaVluSXNZbVJwTEdKa2J5eGljaXhqYVhSbExHTnZaR1VzWkdGMFlTeGtabTRzWlcwc2FTeHJZbVFzYldGeWF5eHhMSEp3TEhKMExISjBZeXh5ZFdKNUxITXNjMkZ0Y0N4emJXRnNiQ3h6Y0dGdUxITjBjbTl1Wnl4emRXSXNjM1Z3TEhScGJXVXNkU3gyWVhJc2QySnlMR0Z5WldFc1lYVmthVzhzYldGd0xIUnlZV05yTEhacFpHVnZMR1Z0WW1Wa0xHOWlhbVZqZEN4d1lYSmhiU3h6YjNWeVkyVXNZMkZ1ZG1GekxITmpjbWx3ZEN4dWIzTmpjbWx3ZEN4a1pXd3NhVzV6TEdOaGNIUnBiMjRzWTI5c0xHTnZiR2R5YjNWd0xIUmhZbXhsTEhSb1pXRmtMSFJpYjJSNUxIUmtMSFJvTEhSeUxHSjFkSFJ2Yml4a1lYUmhiR2x6ZEN4bWFXVnNaSE5sZEN4bWIzSnRMR2x1Y0hWMExHeGhZbVZzTEd4bFoyVnVaQ3h0WlhSbGNpeHZjSFJuY205MWNDeHZjSFJwYjI0c2IzVjBjSFYwTEhCeWIyZHlaWE56TEhObGJHVmpkQ3gwWlhoMFlYSmxZU3hrWlhSaGFXeHpMR1JwWVd4dlp5eHRaVzUxTEcxbGJuVnBkR1Z0TEhOMWJXMWhjbmtzWTI5dWRHVnVkQ3hsYkdWdFpXNTBMSE5vWVdSdmR5eDBaVzF3YkdGMFpTeGliRzlqYTNGMWIzUmxMR2xtY21GdFpTeDBabTl2ZEZ3aUtTeHhiajF3S0Z3aWMzWm5MR0Z1YVcxaGRHVXNZMmx5WTJ4bExHTnNhWEJ3WVhSb0xHTjFjbk52Y2l4a1pXWnpMR1JsYzJNc1pXeHNhWEJ6WlN4bWFXeDBaWElzWm05dWRDMW1ZV05sTEdadmNtVnBaMjVQWW1wbFkzUXNaeXhuYkhsd2FDeHBiV0ZuWlN4c2FXNWxMRzFoY210bGNpeHRZWE5yTEcxcGMzTnBibWN0WjJ4NWNHZ3NjR0YwYUN4d1lYUjBaWEp1TEhCdmJIbG5iMjRzY0c5c2VXeHBibVVzY21WamRDeHpkMmwwWTJnc2MzbHRZbTlzTEhSbGVIUXNkR1Y0ZEhCaGRHZ3NkSE53WVc0c2RYTmxMSFpwWlhkY0lpd2hNQ2tzVjI0OVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlFcHVLR1VwZkh4eGJpaGxLWDA3Wm5WdVkzUnBiMjRnV200b1pTbDdjbVYwZFhKdUlIRnVLR1VwUDF3aWMzWm5YQ0k2WENKdFlYUm9YQ0k5UFQxbFAxd2liV0YwYUZ3aU9uWnZhV1FnTUgxMllYSWdSMjQ5VDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0MllYSWdXRzQ5Y0NoY0luUmxlSFFzYm5WdFltVnlMSEJoYzNOM2IzSmtMSE5sWVhKamFDeGxiV0ZwYkN4MFpXd3NkWEpzWENJcE8yWjFibU4wYVc5dUlGbHVLR1VwZTJsbUtGd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmxLWHQyWVhJZ2REMWtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dVcE8zSmxkSFZ5YmlCMGZIeGtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aVpHbDJYQ0lwZlhKbGRIVnliaUJsZlhaaGNpQlJiajFQWW1wbFkzUXVabkpsWlhwbEtIdGpjbVZoZEdWRmJHVnRaVzUwT21aMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUc0OVpHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hsS1R0eVpYUjFjbTVjSW5ObGJHVmpkRndpSVQwOVpUOXVPaWgwTG1SaGRHRW1KblF1WkdGMFlTNWhkSFJ5Y3lZbWRtOXBaQ0F3SVQwOWRDNWtZWFJoTG1GMGRISnpMbTExYkhScGNHeGxKaVp1TG5ObGRFRjBkSEpwWW5WMFpTaGNJbTExYkhScGNHeGxYQ0lzWENKdGRXeDBhWEJzWlZ3aUtTeHVLWDBzWTNKbFlYUmxSV3hsYldWdWRFNVRPbVoxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUk9VeWhMYmx0bFhTeDBLWDBzWTNKbFlYUmxWR1Y0ZEU1dlpHVTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1J2WTNWdFpXNTBMbU55WldGMFpWUmxlSFJPYjJSbEtHVXBmU3hqY21WaGRHVkRiMjF0Wlc1ME9tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQmtiMk4xYldWdWRDNWpjbVZoZEdWRGIyMXRaVzUwS0dVcGZTeHBibk5sY25SQ1pXWnZjbVU2Wm5WdVkzUnBiMjRvWlN4MExHNHBlMlV1YVc1elpYSjBRbVZtYjNKbEtIUXNiaWw5TEhKbGJXOTJaVU5vYVd4a09tWjFibU4wYVc5dUtHVXNkQ2w3WlM1eVpXMXZkbVZEYUdsc1pDaDBLWDBzWVhCd1pXNWtRMmhwYkdRNlpuVnVZM1JwYjI0b1pTeDBLWHRsTG1Gd2NHVnVaRU5vYVd4a0tIUXBmU3h3WVhKbGJuUk9iMlJsT21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbExuQmhjbVZ1ZEU1dlpHVjlMRzVsZUhSVGFXSnNhVzVuT21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbExtNWxlSFJUYVdKc2FXNW5mU3gwWVdkT1lXMWxPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsTG5SaFowNWhiV1Y5TEhObGRGUmxlSFJEYjI1MFpXNTBPbVoxYm1OMGFXOXVLR1VzZENsN1pTNTBaWGgwUTI5dWRHVnVkRDEwZlN4elpYUlRkSGxzWlZOamIzQmxPbVoxYm1OMGFXOXVLR1VzZENsN1pTNXpaWFJCZEhSeWFXSjFkR1VvZEN4Y0lsd2lLWDE5S1N4bGNqMTdZM0psWVhSbE9tWjFibU4wYVc5dUtHVXNkQ2w3ZEhJb2RDbDlMSFZ3WkdGMFpUcG1kVzVqZEdsdmJpaGxMSFFwZTJVdVpHRjBZUzV5WldZaFBUMTBMbVJoZEdFdWNtVm1KaVlvZEhJb1pTd2hNQ2tzZEhJb2RDa3BmU3hrWlhOMGNtOTVPbVoxYm1OMGFXOXVLR1VwZTNSeUtHVXNJVEFwZlgwN1puVnVZM1JwYjI0Z2RISW9aU3gwS1h0MllYSWdjajFsTG1SaGRHRXVjbVZtTzJsbUtHNG9jaWtwZTNaaGNpQnBQV1V1WTI5dWRHVjRkQ3h2UFdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJWOGZHVXVaV3h0TEdFOWFTNGtjbVZtY3p0MFAwRnljbUY1TG1selFYSnlZWGtvWVZ0eVhTay9hQ2hoVzNKZExHOHBPbUZiY2wwOVBUMXZKaVlvWVZ0eVhUMTJiMmxrSURBcE9tVXVaR0YwWVM1eVpXWkpia1p2Y2o5QmNuSmhlUzVwYzBGeWNtRjVLR0ZiY2wwcFAyRmJjbDB1YVc1a1pYaFBaaWh2S1R3d0ppWmhXM0pkTG5CMWMyZ29ieWs2WVZ0eVhUMWJiMTA2WVZ0eVhUMXZmWDEyWVhJZ2JuSTlibVYzSUhCbEtGd2lYQ0lzZTMwc1cxMHBMSEp5UFZ0Y0ltTnlaV0YwWlZ3aUxGd2lZV04wYVhaaGRHVmNJaXhjSW5Wd1pHRjBaVndpTEZ3aWNtVnRiM1psWENJc1hDSmtaWE4wY205NVhDSmRPMloxYm1OMGFXOXVJR2x5S0dVc2FTbDdjbVYwZFhKdUlHVXVhMlY1UFQwOWFTNXJaWGttSmlobExuUmhaejA5UFdrdWRHRm5KaVpsTG1selEyOXRiV1Z1ZEQwOVBXa3VhWE5EYjIxdFpXNTBKaVp1S0dVdVpHRjBZU2s5UFQxdUtHa3VaR0YwWVNrbUptWjFibU4wYVc5dUtHVXNkQ2w3YVdZb1hDSnBibkIxZEZ3aUlUMDlaUzUwWVdjcGNtVjBkWEp1SVRBN2RtRnlJSElzYVQxdUtISTlaUzVrWVhSaEtTWW1iaWh5UFhJdVlYUjBjbk1wSmlaeUxuUjVjR1VzYnoxdUtISTlkQzVrWVhSaEtTWW1iaWh5UFhJdVlYUjBjbk1wSmlaeUxuUjVjR1U3Y21WMGRYSnVJR2s5UFQxdmZIeFliaWhwS1NZbVdHNG9ieWw5S0dVc2FTbDhmSElvWlM1cGMwRnplVzVqVUd4aFkyVm9iMnhrWlhJcEppWmxMbUZ6ZVc1alJtRmpkRzl5ZVQwOVBXa3VZWE41Ym1OR1lXTjBiM0o1SmlaMEtHa3VZWE41Ym1OR1lXTjBiM0o1TG1WeWNtOXlLU2w5Wm5WdVkzUnBiMjRnYjNJb1pTeDBMSElwZTNaaGNpQnBMRzhzWVQxN2ZUdG1iM0lvYVQxME8yazhQWEk3S3l0cEtXNG9iejFsVzJsZExtdGxlU2ttSmloaFcyOWRQV2twTzNKbGRIVnliaUJoZlhaaGNpQmhjajE3WTNKbFlYUmxPbk55TEhWd1pHRjBaVHB6Y2l4a1pYTjBjbTk1T21aMWJtTjBhVzl1S0dVcGUzTnlLR1VzYm5JcGZYMDdablZ1WTNScGIyNGdjM0lvWlN4MEtYc29aUzVrWVhSaExtUnBjbVZqZEdsMlpYTjhmSFF1WkdGMFlTNWthWEpsWTNScGRtVnpLU1ltWm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnYml4eUxHa3NiejFsUFQwOWJuSXNZVDEwUFQwOWJuSXNjejExY2lobExtUmhkR0V1WkdseVpXTjBhWFpsY3l4bExtTnZiblJsZUhRcExHTTlkWElvZEM1a1lYUmhMbVJwY21WamRHbDJaWE1zZEM1amIyNTBaWGgwS1N4MVBWdGRMR3c5VzEwN1ptOXlLRzRnYVc0Z1l5bHlQWE5iYmwwc2FUMWpXMjVkTEhJL0tHa3ViMnhrVm1Gc2RXVTljaTUyWVd4MVpTeHBMbTlzWkVGeVp6MXlMbUZ5Wnl4bWNpaHBMRndpZFhCa1lYUmxYQ0lzZEN4bEtTeHBMbVJsWmlZbWFTNWtaV1l1WTI5dGNHOXVaVzUwVlhCa1lYUmxaQ1ltYkM1d2RYTm9LR2twS1Rvb1puSW9hU3hjSW1KcGJtUmNJaXgwTEdVcExHa3VaR1ZtSmlacExtUmxaaTVwYm5ObGNuUmxaQ1ltZFM1d2RYTm9LR2twS1R0cFppaDFMbXhsYm1kMGFDbDdkbUZ5SUdZOVpuVnVZM1JwYjI0b0tYdG1iM0lvZG1GeUlHNDlNRHR1UEhVdWJHVnVaM1JvTzI0ckt5bG1jaWgxVzI1ZExGd2lhVzV6WlhKMFpXUmNJaXgwTEdVcGZUdHZQMmwwS0hRc1hDSnBibk5sY25SY0lpeG1LVHBtS0NsOWJDNXNaVzVuZEdnbUptbDBLSFFzWENKd2IzTjBjR0YwWTJoY0lpeG1kVzVqZEdsdmJpZ3BlMlp2Y2loMllYSWdiajB3TzI0OGJDNXNaVzVuZEdnN2Jpc3JLV1p5S0d4YmJsMHNYQ0pqYjIxd2IyNWxiblJWY0dSaGRHVmtYQ0lzZEN4bEtYMHBPMmxtS0NGdktXWnZjaWh1SUdsdUlITXBZMXR1WFh4OFpuSW9jMXR1WFN4Y0luVnVZbWx1WkZ3aUxHVXNaU3hoS1gwb1pTeDBLWDEyWVhJZ1kzSTlUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRtZFc1amRHbHZiaUIxY2lobExIUXBlM1poY2lCdUxISXNhVDFQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzJsbUtDRmxLWEpsZEhWeWJpQnBPMlp2Y2lodVBUQTdianhsTG14bGJtZDBhRHR1S3lzcEtISTlaVnR1WFNrdWJXOWthV1pwWlhKemZId29jaTV0YjJScFptbGxjbk05WTNJcExHbGJiSElvY2lsZFBYSXNjaTVrWldZOVRHVW9kQzRrYjNCMGFXOXVjeXhjSW1ScGNtVmpkR2wyWlhOY0lpeHlMbTVoYldVcE8zSmxkSFZ5YmlCcGZXWjFibU4wYVc5dUlHeHlLR1VwZTNKbGRIVnliaUJsTG5KaGQwNWhiV1Y4ZkdVdWJtRnRaU3RjSWk1Y0lpdFBZbXBsWTNRdWEyVjVjeWhsTG0xdlpHbG1hV1Z5YzN4OGUzMHBMbXB2YVc0b1hDSXVYQ0lwZldaMWJtTjBhVzl1SUdaeUtHVXNkQ3h1TEhJc2FTbDdkbUZ5SUc4OVpTNWtaV1ltSm1VdVpHVm1XM1JkTzJsbUtHOHBkSEo1ZTI4b2JpNWxiRzBzWlN4dUxISXNhU2w5WTJGMFkyZ29jaWw3VW1Vb2NpeHVMbU52Ym5SbGVIUXNYQ0prYVhKbFkzUnBkbVVnWENJclpTNXVZVzFsSzF3aUlGd2lLM1FyWENJZ2FHOXZhMXdpS1gxOWRtRnlJSEJ5UFZ0bGNpeGhjbDA3Wm5WdVkzUnBiMjRnWkhJb1pTeHlLWHQyWVhJZ2FUMXlMbU52YlhCdmJtVnVkRTl3ZEdsdmJuTTdhV1lvSVNodUtHa3BKaVloTVQwOVBXa3VRM1J2Y2k1dmNIUnBiMjV6TG1sdWFHVnlhWFJCZEhSeWMzeDhkQ2hsTG1SaGRHRXVZWFIwY25NcEppWjBLSEl1WkdGMFlTNWhkSFJ5Y3lrcEtYdDJZWElnYnl4aExITTljaTVsYkcwc1l6MWxMbVJoZEdFdVlYUjBjbk44Zkh0OUxIVTljaTVrWVhSaExtRjBkSEp6Zkh4N2ZUdG1iM0lvYnlCcGJpQnVLSFV1WDE5dllsOWZLU1ltS0hVOWNpNWtZWFJoTG1GMGRISnpQVUVvZTMwc2RTa3BMSFVwWVQxMVcyOWRMR05iYjEwaFBUMWhKaVoyY2loekxHOHNZU2s3Wm05eUtHOGdhVzRvY1h4OFdpa21KblV1ZG1Gc2RXVWhQVDFqTG5aaGJIVmxKaVoyY2loekxGd2lkbUZzZFdWY0lpeDFMblpoYkhWbEtTeGpLWFFvZFZ0dlhTa21KaWhRYmlodktUOXpMbkpsYlc5MlpVRjBkSEpwWW5WMFpVNVRLRVp1TEZKdUtHOHBLVHBFYmlodktYeDhjeTV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9ieWtwZlgxbWRXNWpkR2x2YmlCMmNpaGxMSFFzYmlsN1pTNTBZV2RPWVcxbExtbHVaR1Y0VDJZb1hDSXRYQ0lwUGkweFAyaHlLR1VzZEN4dUtUcEpiaWgwS1Q5SWJpaHVLVDlsTG5KbGJXOTJaVUYwZEhKcFluVjBaU2gwS1Rvb2JqMWNJbUZzYkc5M1puVnNiSE5qY21WbGJsd2lQVDA5ZENZbVhDSkZUVUpGUkZ3aVBUMDlaUzUwWVdkT1lXMWxQMXdpZEhKMVpWd2lPblFzWlM1elpYUkJkSFJ5YVdKMWRHVW9kQ3h1S1NrNlJHNG9kQ2svWlM1elpYUkJkSFJ5YVdKMWRHVW9kQ3hOYmloMExHNHBLVHBRYmloMEtUOUliaWh1S1Q5bExuSmxiVzkyWlVGMGRISnBZblYwWlU1VEtFWnVMRkp1S0hRcEtUcGxMbk5sZEVGMGRISnBZblYwWlU1VEtFWnVMSFFzYmlrNmFISW9aU3gwTEc0cGZXWjFibU4wYVc5dUlHaHlLR1VzZEN4dUtYdHBaaWhJYmlodUtTbGxMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaDBLVHRsYkhObGUybG1LSEVtSmlGWEppWmNJbFJGV0ZSQlVrVkJYQ0k5UFQxbExuUmhaMDVoYldVbUpsd2ljR3hoWTJWb2IyeGtaWEpjSWowOVBYUW1KbHdpWENJaFBUMXVKaVloWlM1ZlgybGxjR2dwZTNaaGNpQnlQV1oxYm1OMGFXOXVLSFFwZTNRdWMzUnZjRWx0YldWa2FXRjBaVkJ5YjNCaFoyRjBhVzl1S0Nrc1pTNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLRndpYVc1d2RYUmNJaXh5S1gwN1pTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2lhVzV3ZFhSY0lpeHlLU3hsTGw5ZmFXVndhRDBoTUgxbExuTmxkRUYwZEhKcFluVjBaU2gwTEc0cGZYMTJZWElnYlhJOWUyTnlaV0YwWlRwa2NpeDFjR1JoZEdVNlpISjlPMloxYm1OMGFXOXVJSGx5S0dVc2NpbDdkbUZ5SUdrOWNpNWxiRzBzYnoxeUxtUmhkR0VzWVQxbExtUmhkR0U3YVdZb0lTaDBLRzh1YzNSaGRHbGpRMnhoYzNNcEppWjBLRzh1WTJ4aGMzTXBKaVlvZENoaEtYeDhkQ2hoTG5OMFlYUnBZME5zWVhOektTWW1kQ2hoTG1Oc1lYTnpLU2twS1h0MllYSWdjejFDYmloeUtTeGpQV2t1WDNSeVlXNXphWFJwYjI1RGJHRnpjMlZ6TzI0b1l5a21KaWh6UFhwdUtITXNWbTRvWXlrcEtTeHpJVDA5YVM1ZmNISmxka05zWVhOekppWW9hUzV6WlhSQmRIUnlhV0oxZEdVb1hDSmpiR0Z6YzF3aUxITXBMR2t1WDNCeVpYWkRiR0Z6Y3oxektYMTlkbUZ5SUdkeUxGOXlMR0p5TENSeUxIZHlMRU55TEhoeVBYdGpjbVZoZEdVNmVYSXNkWEJrWVhSbE9ubHlmU3hyY2owdlcxeGNkeWt1SzF4Y0xWOGtYRnhkWFM4N1puVnVZM1JwYjI0Z1FYSW9aU2w3ZG1GeUlIUXNiaXh5TEdrc2J5eGhQU0V4TEhNOUlURXNZejBoTVN4MVBTRXhMR3c5TUN4bVBUQXNjRDB3TEdROU1EdG1iM0lvY2owd08zSThaUzVzWlc1bmRHZzdjaXNyS1dsbUtHNDlkQ3gwUFdVdVkyaGhja052WkdWQmRDaHlLU3hoS1RNNVBUMDlkQ1ltT1RJaFBUMXVKaVlvWVQwaE1TazdaV3h6WlNCcFppaHpLVE0wUFQwOWRDWW1PVEloUFQxdUppWW9jejBoTVNrN1pXeHpaU0JwWmloaktUazJQVDA5ZENZbU9USWhQVDF1SmlZb1l6MGhNU2s3Wld4elpTQnBaaWgxS1RRM1BUMDlkQ1ltT1RJaFBUMXVKaVlvZFQwaE1TazdaV3h6WlNCcFppZ3hNalFoUFQxMGZId3hNalE5UFQxbExtTm9ZWEpEYjJSbFFYUW9jaXN4S1h4OE1USTBQVDA5WlM1amFHRnlRMjlrWlVGMEtISXRNU2w4Zkd4OGZHWjhmSEFwZTNOM2FYUmphQ2gwS1h0allYTmxJRE0wT25NOUlUQTdZbkpsWVdzN1kyRnpaU0F6T1RwaFBTRXdPMkp5WldGck8yTmhjMlVnT1RZNll6MGhNRHRpY21WaGF6dGpZWE5sSURRd09uQXJLenRpY21WaGF6dGpZWE5sSURReE9uQXRMVHRpY21WaGF6dGpZWE5sSURreE9tWXJLenRpY21WaGF6dGpZWE5sSURrek9tWXRMVHRpY21WaGF6dGpZWE5sSURFeU16cHNLeXM3WW5KbFlXczdZMkZ6WlNBeE1qVTZiQzB0ZldsbUtEUTNQVDA5ZENsN1ptOXlLSFpoY2lCMlBYSXRNU3hvUFhadmFXUWdNRHQyUGowd0ppWmNJaUJjSWowOVBTaG9QV1V1WTJoaGNrRjBLSFlwS1R0MkxTMHBPMmdtSm10eUxuUmxjM1FvYUNsOGZDaDFQU0V3S1gxOVpXeHpaU0IyYjJsa0lEQTlQVDFwUHloa1BYSXJNU3hwUFdVdWMyeHBZMlVvTUN4eUtTNTBjbWx0S0NrcE9tMG9LVHRtZFc1amRHbHZiaUJ0S0NsN0tHOThmQ2h2UFZ0ZEtTa3VjSFZ6YUNobExuTnNhV05sS0dRc2Npa3VkSEpwYlNncEtTeGtQWElyTVgxcFppaDJiMmxrSURBOVBUMXBQMms5WlM1emJHbGpaU2d3TEhJcExuUnlhVzBvS1Rvd0lUMDlaQ1ltYlNncExHOHBabTl5S0hJOU1EdHlQRzh1YkdWdVozUm9PM0lyS3lscFBVOXlLR2tzYjF0eVhTazdjbVYwZFhKdUlHbDlablZ1WTNScGIyNGdUM0lvWlN4MEtYdDJZWElnYmoxMExtbHVaR1Y0VDJZb1hDSW9YQ0lwTzJsbUtHNDhNQ2x5WlhSMWNtNG5YMllvWENJbkszUXJKMXdpS1NnbksyVXJYQ0lwWENJN2RtRnlJSEk5ZEM1emJHbGpaU2d3TEc0cExHazlkQzV6YkdsalpTaHVLekVwTzNKbGRIVnliaWRmWmloY0lpY3JjaXNuWENJcEtDY3JaU3NvWENJcFhDSWhQVDFwUDF3aUxGd2lLMms2YVNsOVpuVnVZM1JwYjI0Z1UzSW9aU3gwS1h0amIyNXpiMnhsTG1WeWNtOXlLRndpVzFaMVpTQmpiMjF3YVd4bGNsMDZJRndpSzJVcGZXWjFibU4wYVc5dUlGUnlLR1VzZENsN2NtVjBkWEp1SUdVL1pTNXRZWEFvWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdWYmRGMTlLUzVtYVd4MFpYSW9ablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1Y5S1RwYlhYMW1kVzVqZEdsdmJpQkZjaWhsTEhRc2JpeHlMR2twZXlobExuQnliM0J6Zkh3b1pTNXdjbTl3Y3oxYlhTa3BMbkIxYzJnb1VuSW9lMjVoYldVNmRDeDJZV3gxWlRwdUxHUjVibUZ0YVdNNmFYMHNjaWtwTEdVdWNHeGhhVzQ5SVRGOVpuVnVZM1JwYjI0Z1RuSW9aU3gwTEc0c2NpeHBLWHNvYVQ5bExtUjVibUZ0YVdOQmRIUnljM3g4S0dVdVpIbHVZVzFwWTBGMGRISnpQVnRkS1RwbExtRjBkSEp6Zkh3b1pTNWhkSFJ5Y3oxYlhTa3BMbkIxYzJnb1VuSW9lMjVoYldVNmRDeDJZV3gxWlRwdUxHUjVibUZ0YVdNNmFYMHNjaWtwTEdVdWNHeGhhVzQ5SVRGOVpuVnVZM1JwYjI0Z2FuSW9aU3gwTEc0c2NpbDdaUzVoZEhSeWMwMWhjRnQwWFQxdUxHVXVZWFIwY25OTWFYTjBMbkIxYzJnb1VuSW9lMjVoYldVNmRDeDJZV3gxWlRwdWZTeHlLU2w5Wm5WdVkzUnBiMjRnUkhJb1pTeDBMRzRzY2l4cExHOHNZU3h6S1hzb1pTNWthWEpsWTNScGRtVnpmSHdvWlM1a2FYSmxZM1JwZG1WelBWdGRLU2t1Y0hWemFDaFNjaWg3Ym1GdFpUcDBMSEpoZDA1aGJXVTZiaXgyWVd4MVpUcHlMR0Z5WnpwcExHbHpSSGx1WVcxcFkwRnlaenB2TEcxdlpHbG1hV1Z5Y3pwaGZTeHpLU2tzWlM1d2JHRnBiajBoTVgxbWRXNWpkR2x2YmlCTWNpaGxMSFFzYmlsN2NtVjBkWEp1SUc0L1hDSmZjQ2hjSWl0MEt5Y3NYQ0luSzJVckoxd2lLU2M2WlN0MGZXWjFibU4wYVc5dUlFMXlLSFFzYml4eUxHa3NieXhoTEhNc1l5bDdkbUZ5SUhVN0tHazlhWHg4WlNrdWNtbG5hSFEvWXo5dVBWd2lLRndpSzI0clhDSXBQVDA5SjJOc2FXTnJKejhuWTI5dWRHVjRkRzFsYm5Vbk9paGNJaXR1SzF3aUtWd2lPbHdpWTJ4cFkydGNJajA5UFc0bUppaHVQVndpWTI5dWRHVjRkRzFsYm5WY0lpeGtaV3hsZEdVZ2FTNXlhV2RvZENrNmFTNXRhV1JrYkdVbUppaGpQMjQ5WENJb1hDSXJiaXRjSWlrOVBUMG5ZMnhwWTJzblB5ZHRiM1Z6WlhWd0p6b29YQ0lyYml0Y0lpbGNJanBjSW1Oc2FXTnJYQ0k5UFQxdUppWW9iajFjSW0xdmRYTmxkWEJjSWlrcExHa3VZMkZ3ZEhWeVpTWW1LR1JsYkdWMFpTQnBMbU5oY0hSMWNtVXNiajFNY2loY0lpRmNJaXh1TEdNcEtTeHBMbTl1WTJVbUppaGtaV3hsZEdVZ2FTNXZibU5sTEc0OVRISW9YQ0orWENJc2JpeGpLU2tzYVM1d1lYTnphWFpsSmlZb1pHVnNaWFJsSUdrdWNHRnpjMmwyWlN4dVBVeHlLRndpSmx3aUxHNHNZeWtwTEdrdWJtRjBhWFpsUHloa1pXeGxkR1VnYVM1dVlYUnBkbVVzZFQxMExtNWhkR2wyWlVWMlpXNTBjM3g4S0hRdWJtRjBhWFpsUlhabGJuUnpQWHQ5S1NrNmRUMTBMbVYyWlc1MGMzeDhLSFF1WlhabGJuUnpQWHQ5S1R0MllYSWdiRDFTY2loN2RtRnNkV1U2Y2k1MGNtbHRLQ2tzWkhsdVlXMXBZenBqZlN4ektUdHBJVDA5WlNZbUtHd3ViVzlrYVdacFpYSnpQV2twTzNaaGNpQm1QWFZiYmwwN1FYSnlZWGt1YVhOQmNuSmhlU2htS1Q5dlAyWXVkVzV6YUdsbWRDaHNLVHBtTG5CMWMyZ29iQ2s2ZFZ0dVhUMW1QMjgvVzJ3c1psMDZXMllzYkYwNmJDeDBMbkJzWVdsdVBTRXhmV1oxYm1OMGFXOXVJRWx5S0dVc2RDeHVLWHQyWVhJZ2NqMUdjaWhsTEZ3aU9sd2lLM1FwZkh4R2NpaGxMRndpZGkxaWFXNWtPbHdpSzNRcE8ybG1LRzUxYkd3aFBYSXBjbVYwZFhKdUlFRnlLSElwTzJsbUtDRXhJVDA5YmlsN2RtRnlJR2s5Um5Jb1pTeDBLVHRwWmlodWRXeHNJVDFwS1hKbGRIVnliaUJLVTA5T0xuTjBjbWx1WjJsbWVTaHBLWDE5Wm5WdVkzUnBiMjRnUm5Jb1pTeDBMRzRwZTNaaGNpQnlPMmxtS0c1MWJHd2hQU2h5UFdVdVlYUjBjbk5OWVhCYmRGMHBLV1p2Y2loMllYSWdhVDFsTG1GMGRISnpUR2x6ZEN4dlBUQXNZVDFwTG14bGJtZDBhRHR2UEdFN2J5c3JLV2xtS0dsYmIxMHVibUZ0WlQwOVBYUXBlMmt1YzNCc2FXTmxLRzhzTVNrN1luSmxZV3Q5Y21WMGRYSnVJRzRtSm1SbGJHVjBaU0JsTG1GMGRISnpUV0Z3VzNSZExISjlablZ1WTNScGIyNGdVSElvWlN4MEtYdG1iM0lvZG1GeUlHNDlaUzVoZEhSeWMweHBjM1FzY2owd0xHazliaTVzWlc1bmRHZzdjanhwTzNJckt5bDdkbUZ5SUc4OWJsdHlYVHRwWmloMExuUmxjM1FvYnk1dVlXMWxLU2x5WlhSMWNtNGdiaTV6Y0d4cFkyVW9jaXd4S1N4dmZYMW1kVzVqZEdsdmJpQlNjaWhsTEhRcGUzSmxkSFZ5YmlCMEppWW9iblZzYkNFOWRDNXpkR0Z5ZENZbUtHVXVjM1JoY25ROWRDNXpkR0Z5ZENrc2JuVnNiQ0U5ZEM1bGJtUW1KaWhsTG1WdVpEMTBMbVZ1WkNrcExHVjlablZ1WTNScGIyNGdTSElvWlN4MExHNHBlM1poY2lCeVBXNThmSHQ5TEdrOWNpNXVkVzFpWlhJc2J6MWNJaVFrZGx3aU8zSXVkSEpwYlNZbUtHODlYQ0lvZEhsd1pXOW1JQ1FrZGlBOVBUMGdKM04wY21sdVp5Yy9JQ1FrZGk1MGNtbHRLQ2s2SUNRa2RpbGNJaWtzYVNZbUtHODlYQ0pmYmloY0lpdHZLMXdpS1Z3aUtUdDJZWElnWVQxQ2NpaDBMRzhwTzJVdWJXOWtaV3c5ZTNaaGJIVmxPbHdpS0Z3aUszUXJYQ0lwWENJc1pYaHdjbVZ6YzJsdmJqcEtVMDlPTG5OMGNtbHVaMmxtZVNoMEtTeGpZV3hzWW1GamF6cGNJbVoxYm1OMGFXOXVJQ2drSkhZcElIdGNJaXRoSzF3aWZWd2lmWDFtZFc1amRHbHZiaUJDY2lobExIUXBlM1poY2lCdVBXWjFibU4wYVc5dUtHVXBlMmxtS0dVOVpTNTBjbWx0S0Nrc1ozSTlaUzVzWlc1bmRHZ3NaUzVwYm1SbGVFOW1LRndpVzF3aUtUd3dmSHhsTG14aGMzUkpibVJsZUU5bUtGd2lYVndpS1R4bmNpMHhLWEpsZEhWeWJpZ2tjajFsTG14aGMzUkpibVJsZUU5bUtGd2lMbHdpS1NrK0xURS9lMlY0Y0RwbExuTnNhV05sS0RBc0pISXBMR3RsZVRvblhDSW5LMlV1YzJ4cFkyVW9KSElyTVNrckoxd2lKMzA2ZTJWNGNEcGxMR3RsZVRwdWRXeHNmVHRmY2oxbExDUnlQWGR5UFVOeVBUQTdabTl5S0RzaGVuSW9LVHNwVm5Jb1luSTlWWElvS1NrL1NuSW9ZbklwT2preFBUMDlZbkltSmt0eUtHSnlLVHR5WlhSMWNtNTdaWGh3T21VdWMyeHBZMlVvTUN4M2Npa3NhMlY1T21VdWMyeHBZMlVvZDNJck1TeERjaWw5ZlNobEtUdHlaWFIxY200Z2JuVnNiRDA5UFc0dWEyVjVQMlVyWENJOVhDSXJkRHBjSWlSelpYUW9YQ0lyYmk1bGVIQXJYQ0lzSUZ3aUsyNHVhMlY1SzF3aUxDQmNJaXQwSzF3aUtWd2lmV1oxYm1OMGFXOXVJRlZ5S0NsN2NtVjBkWEp1SUY5eUxtTm9ZWEpEYjJSbFFYUW9LeXNrY2lsOVpuVnVZM1JwYjI0Z2VuSW9LWHR5WlhSMWNtNGdKSEkrUFdkeWZXWjFibU4wYVc5dUlGWnlLR1VwZTNKbGRIVnliaUF6TkQwOVBXVjhmRE01UFQwOVpYMW1kVzVqZEdsdmJpQkxjaWhsS1h0MllYSWdkRDB4TzJadmNpaDNjajBrY2pzaGVuSW9LVHNwYVdZb1ZuSW9aVDFWY2lncEtTbEtjaWhsS1R0bGJITmxJR2xtS0RreFBUMDlaU1ltZENzckxEa3pQVDA5WlNZbWRDMHRMREE5UFQxMEtYdERjajBrY2p0aWNtVmhhMzE5Wm5WdVkzUnBiMjRnU25Jb1pTbDdabTl5S0haaGNpQjBQV1U3SVhweUtDa21KaWhsUFZWeUtDa3BJVDA5ZERzcE8zMTJZWElnY1hJc1YzSTlYQ0pmWDNKY0lpeGFjajFjSWw5Zlkxd2lPMloxYm1OMGFXOXVJRWR5S0dVc2RDeHVLWHQyWVhJZ2NqMXhjanR5WlhSMWNtNGdablZ1WTNScGIyNGdhU2dwZTI1MWJHd2hQVDEwTG1Gd2NHeDVLRzUxYkd3c1lYSm5kVzFsYm5SektTWW1VWElvWlN4cExHNHNjaWw5ZlhaaGNpQlljajFXWlNZbUlTaFlKaVpPZFcxaVpYSW9XRnN4WFNrOFBUVXpLVHRtZFc1amRHbHZiaUJaY2lobExIUXNiaXh5S1h0cFppaFljaWw3ZG1GeUlHazlZVzRzYnoxME8zUTlieTVmZDNKaGNIQmxjajFtZFc1amRHbHZiaWhsS1h0cFppaGxMblJoY21kbGREMDlQV1V1WTNWeWNtVnVkRlJoY21kbGRIeDhaUzUwYVcxbFUzUmhiWEErUFdsOGZHVXVkR2x0WlZOMFlXMXdQRDB3Zkh4bExuUmhjbWRsZEM1dmQyNWxja1J2WTNWdFpXNTBJVDA5Wkc5amRXMWxiblFwY21WMGRYSnVJRzh1WVhCd2JIa29kR2hwY3l4aGNtZDFiV1Z1ZEhNcGZYMXhjaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLR1VzZEN4UlAzdGpZWEIwZFhKbE9tNHNjR0Z6YzJsMlpUcHlmVHB1S1gxbWRXNWpkR2x2YmlCUmNpaGxMSFFzYml4eUtYc29jbng4Y1hJcExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9aU3gwTGw5M2NtRndjR1Z5Zkh4MExHNHBmV1oxYm1OMGFXOXVJR1ZwS0dVc2NpbDdhV1lvSVhRb1pTNWtZWFJoTG05dUtYeDhJWFFvY2k1a1lYUmhMbTl1S1NsN2RtRnlJR2s5Y2k1a1lYUmhMbTl1Zkh4N2ZTeHZQV1V1WkdGMFlTNXZibng4ZTMwN2NYSTljaTVsYkcwc1puVnVZM1JwYjI0b1pTbDdhV1lvYmlobFcxZHlYU2twZTNaaGNpQjBQWEUvWENKamFHRnVaMlZjSWpwY0ltbHVjSFYwWENJN1pWdDBYVDFiWFM1amIyNWpZWFFvWlZ0WGNsMHNaVnQwWFh4OFcxMHBMR1JsYkdWMFpTQmxXMWR5WFgxdUtHVmJXbkpkS1NZbUtHVXVZMmhoYm1kbFBWdGRMbU52Ym1OaGRDaGxXMXB5WFN4bExtTm9ZVzVuWlh4OFcxMHBMR1JsYkdWMFpTQmxXMXB5WFNsOUtHa3BMSEowS0drc2J5eFpjaXhSY2l4SGNpeHlMbU52Ym5SbGVIUXBMSEZ5UFhadmFXUWdNSDE5ZG1GeUlIUnBMRzVwUFh0amNtVmhkR1U2Wldrc2RYQmtZWFJsT21WcGZUdG1kVzVqZEdsdmJpQnlhU2hsTEhJcGUybG1LQ0YwS0dVdVpHRjBZUzVrYjIxUWNtOXdjeWw4ZkNGMEtISXVaR0YwWVM1a2IyMVFjbTl3Y3lrcGUzWmhjaUJwTEc4c1lUMXlMbVZzYlN4elBXVXVaR0YwWVM1a2IyMVFjbTl3YzN4OGUzMHNZejF5TG1SaGRHRXVaRzl0VUhKdmNITjhmSHQ5TzJadmNpaHBJR2x1SUc0b1l5NWZYMjlpWDE4cEppWW9ZejF5TG1SaGRHRXVaRzl0VUhKdmNITTlRU2g3ZlN4aktTa3NjeWxwSUdsdUlHTjhmQ2hoVzJsZFBWd2lYQ0lwTzJadmNpaHBJR2x1SUdNcGUybG1LRzg5WTF0cFhTeGNJblJsZUhSRGIyNTBaVzUwWENJOVBUMXBmSHhjSW1sdWJtVnlTRlJOVEZ3aVBUMDlhU2w3YVdZb2NpNWphR2xzWkhKbGJpWW1LSEl1WTJocGJHUnlaVzR1YkdWdVozUm9QVEFwTEc4OVBUMXpXMmxkS1dOdmJuUnBiblZsT3pFOVBUMWhMbU5vYVd4a1RtOWtaWE11YkdWdVozUm9KaVpoTG5KbGJXOTJaVU5vYVd4a0tHRXVZMmhwYkdST2IyUmxjMXN3WFNsOWFXWW9YQ0oyWVd4MVpWd2lQVDA5YVNZbVhDSlFVazlIVWtWVFUxd2lJVDA5WVM1MFlXZE9ZVzFsS1h0aExsOTJZV3gxWlQxdk8zWmhjaUIxUFhRb2J5ay9YQ0pjSWpwVGRISnBibWNvYnlrN2FXa29ZU3gxS1NZbUtHRXVkbUZzZFdVOWRTbDlaV3h6WlNCcFppaGNJbWx1Ym1WeVNGUk5URndpUFQwOWFTWW1jVzRvWVM1MFlXZE9ZVzFsS1NZbWRDaGhMbWx1Ym1WeVNGUk5UQ2twZXloMGFUMTBhWHg4Wkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbVJwZGx3aUtTa3VhVzV1WlhKSVZFMU1QVndpUEhOMlp6NWNJaXR2SzF3aVBDOXpkbWMrWENJN1ptOXlLSFpoY2lCc1BYUnBMbVpwY25OMFEyaHBiR1E3WVM1bWFYSnpkRU5vYVd4a095bGhMbkpsYlc5MlpVTm9hV3hrS0dFdVptbHljM1JEYUdsc1pDazdabTl5S0R0c0xtWnBjbk4wUTJocGJHUTdLV0V1WVhCd1pXNWtRMmhwYkdRb2JDNW1hWEp6ZEVOb2FXeGtLWDFsYkhObElHbG1LRzhoUFQxelcybGRLWFJ5ZVh0aFcybGRQVzk5WTJGMFkyZ29aU2w3ZlgxOWZXWjFibU4wYVc5dUlHbHBLR1VzZENsN2NtVjBkWEp1SVdVdVkyOXRjRzl6YVc1bkppWW9YQ0pQVUZSSlQwNWNJajA5UFdVdWRHRm5UbUZ0Wlh4OFpuVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2JqMGhNRHQwY25sN2JqMWtiMk4xYldWdWRDNWhZM1JwZG1WRmJHVnRaVzUwSVQwOVpYMWpZWFJqYUNobEtYdDljbVYwZFhKdUlHNG1KbVV1ZG1Gc2RXVWhQVDEwZlNobExIUXBmSHhtZFc1amRHbHZiaWhsTEhRcGUzWmhjaUJ5UFdVdWRtRnNkV1VzYVQxbExsOTJUVzlrYVdacFpYSnpPMmxtS0c0b2FTa3BlMmxtS0drdWJuVnRZbVZ5S1hKbGRIVnliaUJtS0hJcElUMDlaaWgwS1R0cFppaHBMblJ5YVcwcGNtVjBkWEp1SUhJdWRISnBiU2dwSVQwOWRDNTBjbWx0S0NsOWNtVjBkWEp1SUhJaFBUMTBmU2hsTEhRcEtYMTJZWElnYjJrOWUyTnlaV0YwWlRweWFTeDFjR1JoZEdVNmNtbDlMR0ZwUFdjb1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhROWUzMHNiajB2T2lndUt5a3ZPM0psZEhWeWJpQmxMbk53YkdsMEtDODdLRDhoVzE0b1hTcGNYQ2twTDJjcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pTbDdhV1lvWlNsN2RtRnlJSEk5WlM1emNHeHBkQ2h1S1R0eUxteGxibWQwYUQ0eEppWW9kRnR5V3pCZExuUnlhVzBvS1YwOWNsc3hYUzUwY21sdEtDa3BmWDBwTEhSOUtUdG1kVzVqZEdsdmJpQnphU2hsS1h0MllYSWdkRDFqYVNobExuTjBlV3hsS1R0eVpYUjFjbTRnWlM1emRHRjBhV05UZEhsc1pUOUJLR1V1YzNSaGRHbGpVM1I1YkdVc2RDazZkSDFtZFc1amRHbHZiaUJqYVNobEtYdHlaWFIxY200Z1FYSnlZWGt1YVhOQmNuSmhlU2hsS1Q5UEtHVXBPbHdpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJsUDJGcEtHVXBPbVY5ZG1GeUlIVnBMR3hwUFM5ZUxTMHZMR1pwUFM5Y1hITXFJV2x0Y0c5eWRHRnVkQ1F2TEhCcFBXWjFibU4wYVc5dUtHVXNkQ3h1S1h0cFppaHNhUzUwWlhOMEtIUXBLV1V1YzNSNWJHVXVjMlYwVUhKdmNHVnlkSGtvZEN4dUtUdGxiSE5sSUdsbUtHWnBMblJsYzNRb2Jpa3BaUzV6ZEhsc1pTNXpaWFJRY205d1pYSjBlU2hES0hRcExHNHVjbVZ3YkdGalpTaG1hU3hjSWx3aUtTeGNJbWx0Y0c5eWRHRnVkRndpS1R0bGJITmxlM1poY2lCeVBYWnBLSFFwTzJsbUtFRnljbUY1TG1selFYSnlZWGtvYmlrcFptOXlLSFpoY2lCcFBUQXNiejF1TG14bGJtZDBhRHRwUEc4N2FTc3JLV1V1YzNSNWJHVmJjbDA5Ymx0cFhUdGxiSE5sSUdVdWMzUjViR1ZiY2wwOWJuMTlMR1JwUFZ0Y0lsZGxZbXRwZEZ3aUxGd2lUVzk2WENJc1hDSnRjMXdpWFN4MmFUMW5LR1oxYm1OMGFXOXVLR1VwZTJsbUtIVnBQWFZwZkh4a2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpWkdsMlhDSXBMbk4wZVd4bExGd2labWxzZEdWeVhDSWhQVDBvWlQxaUtHVXBLU1ltWlNCcGJpQjFhU2x5WlhSMWNtNGdaVHRtYjNJb2RtRnlJSFE5WlM1amFHRnlRWFFvTUNrdWRHOVZjSEJsY2tOaGMyVW9LU3RsTG5Oc2FXTmxLREVwTEc0OU1EdHVQR1JwTG14bGJtZDBhRHR1S3lzcGUzWmhjaUJ5UFdScFcyNWRLM1E3YVdZb2NpQnBiaUIxYVNseVpYUjFjbTRnY24xOUtUdG1kVzVqZEdsdmJpQm9hU2hsTEhJcGUzWmhjaUJwUFhJdVpHRjBZU3h2UFdVdVpHRjBZVHRwWmlnaEtIUW9hUzV6ZEdGMGFXTlRkSGxzWlNrbUpuUW9hUzV6ZEhsc1pTa21KblFvYnk1emRHRjBhV05UZEhsc1pTa21KblFvYnk1emRIbHNaU2twS1h0MllYSWdZU3h6TEdNOWNpNWxiRzBzZFQxdkxuTjBZWFJwWTFOMGVXeGxMR3c5Ynk1dWIzSnRZV3hwZW1Wa1UzUjViR1Y4Zkc4dWMzUjViR1Y4Zkh0OUxHWTlkWHg4YkN4d1BXTnBLSEl1WkdGMFlTNXpkSGxzWlNsOGZIdDlPM0l1WkdGMFlTNXViM0p0WVd4cGVtVmtVM1I1YkdVOWJpaHdMbDlmYjJKZlh5ay9RU2g3ZlN4d0tUcHdPM1poY2lCa1BXWjFibU4wYVc5dUtHVXNkQ2w3ZG1GeUlHNHNjajE3ZlR0cFppaDBLV1p2Y2loMllYSWdhVDFsTzJrdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVN0tTaHBQV2t1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlV1WDNadWIyUmxLU1ltYVM1a1lYUmhKaVlvYmoxemFTaHBMbVJoZEdFcEtTWW1RU2h5TEc0cE95aHVQWE5wS0dVdVpHRjBZU2twSmlaQktISXNiaWs3Wm05eUtIWmhjaUJ2UFdVN2J6MXZMbkJoY21WdWREc3BieTVrWVhSaEppWW9iajF6YVNodkxtUmhkR0VwS1NZbVFTaHlMRzRwTzNKbGRIVnliaUJ5ZlNoeUxDRXdLVHRtYjNJb2N5QnBiaUJtS1hRb1pGdHpYU2ttSm5CcEtHTXNjeXhjSWx3aUtUdG1iM0lvY3lCcGJpQmtLU2hoUFdSYmMxMHBJVDA5Wmx0elhTWW1jR2tvWXl4ekxHNTFiR3c5UFdFL1hDSmNJanBoS1gxOWRtRnlJRzFwUFh0amNtVmhkR1U2YUdrc2RYQmtZWFJsT21ocGZTeDVhVDB2WEZ4ekt5ODdablZ1WTNScGIyNGdaMmtvWlN4MEtYdHBaaWgwSmlZb2REMTBMblJ5YVcwb0tTa3BhV1lvWlM1amJHRnpjMHhwYzNRcGRDNXBibVJsZUU5bUtGd2lJRndpS1Q0dE1UOTBMbk53YkdsMEtIbHBLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSFFwZTNKbGRIVnliaUJsTG1Oc1lYTnpUR2x6ZEM1aFpHUW9kQ2w5S1RwbExtTnNZWE56VEdsemRDNWhaR1FvZENrN1pXeHpaWHQyWVhJZ2JqMWNJaUJjSWlzb1pTNW5aWFJCZEhSeWFXSjFkR1VvWENKamJHRnpjMXdpS1h4OFhDSmNJaWtyWENJZ1hDSTdiaTVwYm1SbGVFOW1LRndpSUZ3aUszUXJYQ0lnWENJcFBEQW1KbVV1YzJWMFFYUjBjbWxpZFhSbEtGd2lZMnhoYzNOY0lpd29iaXQwS1M1MGNtbHRLQ2twZlgxbWRXNWpkR2x2YmlCZmFTaGxMSFFwZTJsbUtIUW1KaWgwUFhRdWRISnBiU2dwS1NscFppaGxMbU5zWVhOelRHbHpkQ2wwTG1sdVpHVjRUMllvWENJZ1hDSXBQaTB4UDNRdWMzQnNhWFFvZVdrcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlHVXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTaDBLWDBwT21VdVkyeGhjM05NYVhOMExuSmxiVzkyWlNoMEtTeGxMbU5zWVhOelRHbHpkQzVzWlc1bmRHaDhmR1V1Y21WdGIzWmxRWFIwY21saWRYUmxLRndpWTJ4aGMzTmNJaWs3Wld4elpYdG1iM0lvZG1GeUlHNDlYQ0lnWENJcktHVXVaMlYwUVhSMGNtbGlkWFJsS0Z3aVkyeGhjM05jSWlsOGZGd2lYQ0lwSzF3aUlGd2lMSEk5WENJZ1hDSXJkQ3RjSWlCY0lqdHVMbWx1WkdWNFQyWW9jaWsrUFRBN0tXNDliaTV5WlhCc1lXTmxLSElzWENJZ1hDSXBPeWh1UFc0dWRISnBiU2dwS1Q5bExuTmxkRUYwZEhKcFluVjBaU2hjSW1Oc1lYTnpYQ0lzYmlrNlpTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb1hDSmpiR0Z6YzF3aUtYMTlablZ1WTNScGIyNGdZbWtvWlNsN2FXWW9aU2w3YVdZb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVXBlM1poY2lCMFBYdDlPM0psZEhWeWJpRXhJVDA5WlM1amMzTW1Ka0VvZEN3a2FTaGxMbTVoYldWOGZGd2lkbHdpS1Nrc1FTaDBMR1VwTEhSOWNtVjBkWEp1WENKemRISnBibWRjSWowOWRIbHdaVzltSUdVL0pHa29aU2s2ZG05cFpDQXdmWDEyWVhJZ0pHazlaeWhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTU3Wlc1MFpYSkRiR0Z6Y3pwbEsxd2lMV1Z1ZEdWeVhDSXNaVzUwWlhKVWIwTnNZWE56T21VclhDSXRaVzUwWlhJdGRHOWNJaXhsYm5SbGNrRmpkR2wyWlVOc1lYTnpPbVVyWENJdFpXNTBaWEl0WVdOMGFYWmxYQ0lzYkdWaGRtVkRiR0Z6Y3pwbEsxd2lMV3hsWVhabFhDSXNiR1ZoZG1WVWIwTnNZWE56T21VclhDSXRiR1ZoZG1VdGRHOWNJaXhzWldGMlpVRmpkR2wyWlVOc1lYTnpPbVVyWENJdGJHVmhkbVV0WVdOMGFYWmxYQ0o5ZlNrc2QyazllaVltSVZjc1EyazlYQ0owY21GdWMybDBhVzl1WENJc2VHazlYQ0poYm1sdFlYUnBiMjVjSWl4cmFUMWNJblJ5WVc1emFYUnBiMjVjSWl4QmFUMWNJblJ5WVc1emFYUnBiMjVsYm1SY0lpeFBhVDFjSW1GdWFXMWhkR2x2Ymx3aUxGTnBQVndpWVc1cGJXRjBhVzl1Wlc1a1hDSTdkMmttSmloMmIybGtJREE5UFQxM2FXNWtiM2N1YjI1MGNtRnVjMmwwYVc5dVpXNWtKaVoyYjJsa0lEQWhQVDEzYVc1a2IzY3ViMjUzWldKcmFYUjBjbUZ1YzJsMGFXOXVaVzVrSmlZb2EyazlYQ0pYWldKcmFYUlVjbUZ1YzJsMGFXOXVYQ0lzUVdrOVhDSjNaV0pyYVhSVWNtRnVjMmwwYVc5dVJXNWtYQ0lwTEhadmFXUWdNRDA5UFhkcGJtUnZkeTV2Ym1GdWFXMWhkR2x2Ym1WdVpDWW1kbTlwWkNBd0lUMDlkMmx1Wkc5M0xtOXVkMlZpYTJsMFlXNXBiV0YwYVc5dVpXNWtKaVlvVDJrOVhDSlhaV0pyYVhSQmJtbHRZWFJwYjI1Y0lpeFRhVDFjSW5kbFltdHBkRUZ1YVcxaGRHbHZia1Z1WkZ3aUtTazdkbUZ5SUZScFBYby9kMmx1Wkc5M0xuSmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaVDkzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsTG1KcGJtUW9kMmx1Wkc5M0tUcHpaWFJVYVcxbGIzVjBPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsS0NsOU8yWjFibU4wYVc5dUlFVnBLR1VwZTFScEtHWjFibU4wYVc5dUtDbDdWR2tvWlNsOUtYMW1kVzVqZEdsdmJpQk9hU2hsTEhRcGUzWmhjaUJ1UFdVdVgzUnlZVzV6YVhScGIyNURiR0Z6YzJWemZId29aUzVmZEhKaGJuTnBkR2x2YmtOc1lYTnpaWE05VzEwcE8yNHVhVzVrWlhoUFppaDBLVHd3SmlZb2JpNXdkWE5vS0hRcExHZHBLR1VzZENrcGZXWjFibU4wYVc5dUlHcHBLR1VzZENsN1pTNWZkSEpoYm5OcGRHbHZia05zWVhOelpYTW1KbWdvWlM1ZmRISmhibk5wZEdsdmJrTnNZWE56WlhNc2RDa3NYMmtvWlN4MEtYMW1kVzVqZEdsdmJpQkVhU2hsTEhRc2JpbDdkbUZ5SUhJOVRXa29aU3gwS1N4cFBYSXVkSGx3WlN4dlBYSXVkR2x0Wlc5MWRDeGhQWEl1Y0hKdmNFTnZkVzUwTzJsbUtDRnBLWEpsZEhWeWJpQnVLQ2s3ZG1GeUlITTlhVDA5UFVOcFAwRnBPbE5wTEdNOU1DeDFQV1oxYm1OMGFXOXVLQ2w3WlM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtITXNiQ2tzYmlncGZTeHNQV1oxYm1OMGFXOXVLSFFwZTNRdWRHRnlaMlYwUFQwOVpTWW1LeXRqUGoxaEppWjFLQ2w5TzNObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tYdGpQR0VtSm5Vb0tYMHNieXN4S1N4bExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb2N5eHNLWDEyWVhJZ1RHazlMMXhjWWloMGNtRnVjMlp2Y20xOFlXeHNLU2dzZkNRcEx6dG1kVzVqZEdsdmJpQk5hU2hsTEhRcGUzWmhjaUJ1TEhJOWQybHVaRzkzTG1kbGRFTnZiWEIxZEdWa1UzUjViR1VvWlNrc2FUMG9jbHRyYVN0Y0lrUmxiR0Y1WENKZGZIeGNJbHdpS1M1emNHeHBkQ2hjSWl3Z1hDSXBMRzg5S0hKYmEya3JYQ0pFZFhKaGRHbHZibHdpWFh4OFhDSmNJaWt1YzNCc2FYUW9YQ0lzSUZ3aUtTeGhQVWxwS0drc2J5a3NjejBvY2x0UGFTdGNJa1JsYkdGNVhDSmRmSHhjSWx3aUtTNXpjR3hwZENoY0lpd2dYQ0lwTEdNOUtISmJUMmtyWENKRWRYSmhkR2x2Ymx3aVhYeDhYQ0pjSWlrdWMzQnNhWFFvWENJc0lGd2lLU3gxUFVscEtITXNZeWtzYkQwd0xHWTlNRHR5WlhSMWNtNGdkRDA5UFVOcFAyRStNQ1ltS0c0OVEya3NiRDFoTEdZOWJ5NXNaVzVuZEdncE9uUTlQVDE0YVQ5MVBqQW1KaWh1UFhocExHdzlkU3htUFdNdWJHVnVaM1JvS1RwbVBTaHVQU2hzUFUxaGRHZ3ViV0Y0S0dFc2RTa3BQakEvWVQ1MVAwTnBPbmhwT201MWJHd3BQMjQ5UFQxRGFUOXZMbXhsYm1kMGFEcGpMbXhsYm1kMGFEb3dMSHQwZVhCbE9tNHNkR2x0Wlc5MWREcHNMSEJ5YjNCRGIzVnVkRHBtTEdoaGMxUnlZVzV6Wm05eWJUcHVQVDA5UTJrbUpreHBMblJsYzNRb2NsdHJhU3RjSWxCeWIzQmxjblI1WENKZEtYMTlablZ1WTNScGIyNGdTV2tvWlN4MEtYdG1iM0lvTzJVdWJHVnVaM1JvUEhRdWJHVnVaM1JvT3lsbFBXVXVZMjl1WTJGMEtHVXBPM0psZEhWeWJpQk5ZWFJvTG0xaGVDNWhjSEJzZVNodWRXeHNMSFF1YldGd0tHWjFibU4wYVc5dUtIUXNiaWw3Y21WMGRYSnVJRVpwS0hRcEswWnBLR1ZiYmwwcGZTa3BmV1oxYm1OMGFXOXVJRVpwS0dVcGUzSmxkSFZ5YmlBeFpUTXFUblZ0WW1WeUtHVXVjMnhwWTJVb01Dd3RNU2t1Y21Wd2JHRmpaU2hjSWl4Y0lpeGNJaTVjSWlrcGZXWjFibU4wYVc5dUlGQnBLR1VzY2lsN2RtRnlJR2s5WlM1bGJHMDdiaWhwTGw5c1pXRjJaVU5pS1NZbUtHa3VYMnhsWVhabFEySXVZMkZ1WTJWc2JHVmtQU0V3TEdrdVgyeGxZWFpsUTJJb0tTazdkbUZ5SUdFOVlta29aUzVrWVhSaExuUnlZVzV6YVhScGIyNHBPMmxtS0NGMEtHRXBKaVloYmlocExsOWxiblJsY2tOaUtTWW1NVDA5UFdrdWJtOWtaVlI1Y0dVcGUyWnZjaWgyWVhJZ2N6MWhMbU56Y3l4alBXRXVkSGx3WlN4MVBXRXVaVzUwWlhKRGJHRnpjeXhzUFdFdVpXNTBaWEpVYjBOc1lYTnpMSEE5WVM1bGJuUmxja0ZqZEdsMlpVTnNZWE56TEdROVlTNWhjSEJsWVhKRGJHRnpjeXgyUFdFdVlYQndaV0Z5Vkc5RGJHRnpjeXhvUFdFdVlYQndaV0Z5UVdOMGFYWmxRMnhoYzNNc2JUMWhMbUpsWm05eVpVVnVkR1Z5TEhrOVlTNWxiblJsY2l4blBXRXVZV1owWlhKRmJuUmxjaXhmUFdFdVpXNTBaWEpEWVc1alpXeHNaV1FzWWoxaExtSmxabTl5WlVGd2NHVmhjaXdrUFdFdVlYQndaV0Z5TEhjOVlTNWhablJsY2tGd2NHVmhjaXhEUFdFdVlYQndaV0Z5UTJGdVkyVnNiR1ZrTEhnOVlTNWtkWEpoZEdsdmJpeHJQVmQwTEVFOVYzUXVKSFp1YjJSbE8wRW1Ka0V1Y0dGeVpXNTBPeWxyUFVFdVkyOXVkR1Y0ZEN4QlBVRXVjR0Z5Wlc1ME8zWmhjaUJQUFNGckxsOXBjMDF2ZFc1MFpXUjhmQ0ZsTG1selVtOXZkRWx1YzJWeWREdHBaaWdoVDN4OEpIeDhYQ0pjSWowOVBTUXBlM1poY2lCVFBVOG1KbVEvWkRwMUxGUTlUeVltYUQ5b09uQXNSVDFQSmlaMlAzWTZiQ3hPUFU4bUptSjhmRzBzYWoxUEppWmNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUFrUHlRNmVTeE1QVThtSm5kOGZHY3NUVDFQSmlaRGZIeGZMRWs5WmlodktIZ3BQM2d1Wlc1MFpYSTZlQ2tzUmowaE1TRTlQWE1tSmlGWExGQTlRbWtvYWlrc1VqMXBMbDlsYm5SbGNrTmlQVVFvWm5WdVkzUnBiMjRvS1h0R0ppWW9hbWtvYVN4RktTeHFhU2hwTEZRcEtTeFNMbU5oYm1ObGJHeGxaRDhvUmlZbWFta29hU3hUS1N4TkppWk5LR2twS1RwTUppWk1LR2twTEdrdVgyVnVkR1Z5UTJJOWJuVnNiSDBwTzJVdVpHRjBZUzV6YUc5M2ZIeHBkQ2hsTEZ3aWFXNXpaWEowWENJc1puVnVZM1JwYjI0b0tYdDJZWElnZEQxcExuQmhjbVZ1ZEU1dlpHVXNiajEwSmlaMExsOXdaVzVrYVc1bkppWjBMbDl3Wlc1a2FXNW5XMlV1YTJWNVhUdHVKaVp1TG5SaFp6MDlQV1V1ZEdGbkppWnVMbVZzYlM1ZmJHVmhkbVZEWWlZbWJpNWxiRzB1WDJ4bFlYWmxRMklvS1N4cUppWnFLR2tzVWlsOUtTeE9KaVpPS0drcExFWW1KaWhPYVNocExGTXBMRTVwS0drc1ZDa3NSV2tvWm5WdVkzUnBiMjRvS1h0cWFTaHBMRk1wTEZJdVkyRnVZMlZzYkdWa2ZId29UbWtvYVN4RktTeFFmSHdvU0drb1NTay9jMlYwVkdsdFpXOTFkQ2hTTEVrcE9rUnBLR2tzWXl4U0tTa3BmU2twTEdVdVpHRjBZUzV6YUc5M0ppWW9jaVltY2lncExHb21KbW9vYVN4U0tTa3NSbng4VUh4OFVpZ3BmWDE5Wm5WdVkzUnBiMjRnVW1rb1pTeHlLWHQyWVhJZ2FUMWxMbVZzYlR0dUtHa3VYMlZ1ZEdWeVEySXBKaVlvYVM1ZlpXNTBaWEpEWWk1allXNWpaV3hzWldROUlUQXNhUzVmWlc1MFpYSkRZaWdwS1R0MllYSWdZVDFpYVNobExtUmhkR0V1ZEhKaGJuTnBkR2x2YmlrN2FXWW9kQ2hoS1h4OE1TRTlQV2t1Ym05a1pWUjVjR1VwY21WMGRYSnVJSElvS1R0cFppZ2hiaWhwTGw5c1pXRjJaVU5pS1NsN2RtRnlJSE05WVM1amMzTXNZejFoTG5SNWNHVXNkVDFoTG14bFlYWmxRMnhoYzNNc2JEMWhMbXhsWVhabFZHOURiR0Z6Y3l4d1BXRXViR1ZoZG1WQlkzUnBkbVZEYkdGemN5eGtQV0V1WW1WbWIzSmxUR1ZoZG1Vc2RqMWhMbXhsWVhabExHZzlZUzVoWm5SbGNreGxZWFpsTEcwOVlTNXNaV0YyWlVOaGJtTmxiR3hsWkN4NVBXRXVaR1ZzWVhsTVpXRjJaU3huUFdFdVpIVnlZWFJwYjI0c1h6MGhNU0U5UFhNbUppRlhMR0k5UW1rb2Rpa3NKRDFtS0c4b1p5ay9aeTVzWldGMlpUcG5LU3gzUFdrdVgyeGxZWFpsUTJJOVJDaG1kVzVqZEdsdmJpZ3BlMmt1Y0dGeVpXNTBUbTlrWlNZbWFTNXdZWEpsYm5ST2IyUmxMbDl3Wlc1a2FXNW5KaVlvYVM1d1lYSmxiblJPYjJSbExsOXdaVzVrYVc1blcyVXVhMlY1WFQxdWRXeHNLU3hmSmlZb2Fta29hU3hzS1N4cWFTaHBMSEFwS1N4M0xtTmhibU5sYkd4bFpEOG9YeVltYW1rb2FTeDFLU3h0SmladEtHa3BLVG9vY2lncExHZ21KbWdvYVNrcExHa3VYMnhsWVhabFEySTliblZzYkgwcE8zay9lU2hES1RwREtDbDlablZ1WTNScGIyNGdReWdwZTNjdVkyRnVZMlZzYkdWa2ZId29JV1V1WkdGMFlTNXphRzkzSmlacExuQmhjbVZ1ZEU1dlpHVW1KaWdvYVM1d1lYSmxiblJPYjJSbExsOXdaVzVrYVc1bmZId29hUzV3WVhKbGJuUk9iMlJsTGw5d1pXNWthVzVuUFh0OUtTbGJaUzVyWlhsZFBXVXBMR1FtSm1Rb2FTa3NYeVltS0U1cEtHa3NkU2tzVG1rb2FTeHdLU3hGYVNobWRXNWpkR2x2YmlncGUycHBLR2tzZFNrc2R5NWpZVzVqWld4c1pXUjhmQ2hPYVNocExHd3BMR0o4ZkNoSWFTZ2tLVDl6WlhSVWFXMWxiM1YwS0hjc0pDazZSR2tvYVN4akxIY3BLU2w5S1Nrc2RpWW1kaWhwTEhjcExGOThmR0o4Zkhjb0tTbDlmV1oxYm1OMGFXOXVJRWhwS0dVcGUzSmxkSFZ5Ymx3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCbEppWWhhWE5PWVU0b1pTbDlablZ1WTNScGIyNGdRbWtvWlNsN2FXWW9kQ2hsS1NseVpYUjFjbTRoTVR0MllYSWdjajFsTG1adWN6dHlaWFIxY200Z2JpaHlLVDlDYVNoQmNuSmhlUzVwYzBGeWNtRjVLSElwUDNKYk1GMDZjaWs2S0dVdVgyeGxibWQwYUh4OFpTNXNaVzVuZEdncFBqRjlablZ1WTNScGIyNGdWV2tvWlN4MEtYc2hNQ0U5UFhRdVpHRjBZUzV6YUc5M0ppWlFhU2gwS1gxMllYSWdlbWs5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJRzhzWVN4elBYdDlMR005WlM1dGIyUjFiR1Z6TEhVOVpTNXViMlJsVDNCek8yWnZjaWh2UFRBN2J6eHljaTVzWlc1bmRHZzdLeXR2S1dadmNpaHpXM0p5VzI5ZFhUMWJYU3hoUFRBN1lUeGpMbXhsYm1kMGFEc3JLMkVwYmloalcyRmRXM0p5VzI5ZFhTa21Kbk5iY25KYmIxMWRMbkIxYzJnb1kxdGhYVnR5Y2x0dlhWMHBPMloxYm1OMGFXOXVJR3dvWlNsN2RtRnlJSFE5ZFM1d1lYSmxiblJPYjJSbEtHVXBPMjRvZENrbUpuVXVjbVZ0YjNabFEyaHBiR1FvZEN4bEtYMW1kVzVqZEdsdmJpQm1LR1VzZEN4cExHOHNZU3hqTEd3cGUybG1LRzRvWlM1bGJHMHBKaVp1S0dNcEppWW9aVDFqVzJ4ZFBXMWxLR1VwS1N4bExtbHpVbTl2ZEVsdWMyVnlkRDBoWVN3aFpuVnVZM1JwYjI0b1pTeDBMR2tzYnlsN2RtRnlJR0U5WlM1a1lYUmhPMmxtS0c0b1lTa3BlM1poY2lCalBXNG9aUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaU2ttSm1FdWEyVmxjRUZzYVhabE8ybG1LRzRvWVQxaExtaHZiMnNwSmladUtHRTlZUzVwYm1sMEtTWW1ZU2hsTENFeEtTeHVLR1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlVwS1hKbGRIVnliaUJrS0dVc2RDa3NkaWhwTEdVdVpXeHRMRzhwTEhJb1l5a21KbVoxYm1OMGFXOXVLR1VzZEN4eUxHa3BlMlp2Y2loMllYSWdieXhoUFdVN1lTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpUc3BhV1lvWVQxaExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObExsOTJibTlrWlN4dUtHODlZUzVrWVhSaEtTWW1iaWh2UFc4dWRISmhibk5wZEdsdmJpa3BlMlp2Y2lodlBUQTdienh6TG1GamRHbDJZWFJsTG14bGJtZDBhRHNySzI4cGN5NWhZM1JwZG1GMFpWdHZYU2h1Y2l4aEtUdDBMbkIxYzJnb1lTazdZbkpsWVd0OWRpaHlMR1V1Wld4dExHa3BmU2hsTEhRc2FTeHZLU3doTUgxOUtHVXNkQ3hwTEc4cEtYdDJZWElnWmoxbExtUmhkR0VzY0QxbExtTm9hV3hrY21WdUxHMDlaUzUwWVdjN2JpaHRLVDhvWlM1bGJHMDlaUzV1Y3o5MUxtTnlaV0YwWlVWc1pXMWxiblJPVXlobExtNXpMRzBwT25VdVkzSmxZWFJsUld4bGJXVnVkQ2h0TEdVcExHY29aU2tzYUNobExIQXNkQ2tzYmlobUtTWW1lU2hsTEhRcExIWW9hU3hsTG1Wc2JTeHZLU2s2Y2lobExtbHpRMjl0YldWdWRDay9LR1V1Wld4dFBYVXVZM0psWVhSbFEyOXRiV1Z1ZENobExuUmxlSFFwTEhZb2FTeGxMbVZzYlN4dktTazZLR1V1Wld4dFBYVXVZM0psWVhSbFZHVjRkRTV2WkdVb1pTNTBaWGgwS1N4MktHa3NaUzVsYkcwc2J5a3BmWDFtZFc1amRHbHZiaUJrS0dVc2RDbDdiaWhsTG1SaGRHRXVjR1Z1WkdsdVowbHVjMlZ5ZENrbUppaDBMbkIxYzJndVlYQndiSGtvZEN4bExtUmhkR0V1Y0dWdVpHbHVaMGx1YzJWeWRDa3NaUzVrWVhSaExuQmxibVJwYm1kSmJuTmxjblE5Ym5Wc2JDa3NaUzVsYkcwOVpTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTNGtaV3dzYlNobEtUOG9lU2hsTEhRcExHY29aU2twT2loMGNpaGxLU3gwTG5CMWMyZ29aU2twZldaMWJtTjBhVzl1SUhZb1pTeDBMSElwZTI0b1pTa21KaWh1S0hJcFAzVXVjR0Z5Wlc1MFRtOWtaU2h5S1QwOVBXVW1KblV1YVc1elpYSjBRbVZtYjNKbEtHVXNkQ3h5S1RwMUxtRndjR1Z1WkVOb2FXeGtLR1VzZENrcGZXWjFibU4wYVc5dUlHZ29aU3gwTEc0cGUybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb2RDa3BabTl5S0haaGNpQnlQVEE3Y2p4MExteGxibWQwYURzckszSXBaaWgwVzNKZExHNHNaUzVsYkcwc2JuVnNiQ3doTUN4MExISXBPMlZzYzJVZ2FTaGxMblJsZUhRcEppWjFMbUZ3Y0dWdVpFTm9hV3hrS0dVdVpXeHRMSFV1WTNKbFlYUmxWR1Y0ZEU1dlpHVW9VM1J5YVc1bktHVXVkR1Y0ZENrcEtYMW1kVzVqZEdsdmJpQnRLR1VwZTJadmNpZzdaUzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaVHNwWlQxbExtTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObExsOTJibTlrWlR0eVpYUjFjbTRnYmlobExuUmhaeWw5Wm5WdVkzUnBiMjRnZVNobExIUXBlMlp2Y2loMllYSWdjajB3TzNJOGN5NWpjbVZoZEdVdWJHVnVaM1JvT3lzcmNpbHpMbU55WldGMFpWdHlYU2h1Y2l4bEtUdHVLRzg5WlM1a1lYUmhMbWh2YjJzcEppWW9iaWh2TG1OeVpXRjBaU2ttSm04dVkzSmxZWFJsS0c1eUxHVXBMRzRvYnk1cGJuTmxjblFwSmlaMExuQjFjMmdvWlNrcGZXWjFibU4wYVc5dUlHY29aU2w3ZG1GeUlIUTdhV1lvYmloMFBXVXVabTVUWTI5d1pVbGtLU2wxTG5ObGRGTjBlV3hsVTJOdmNHVW9aUzVsYkcwc2RDazdaV3h6WlNCbWIzSW9kbUZ5SUhJOVpUdHlPeWx1S0hROWNpNWpiMjUwWlhoMEtTWW1iaWgwUFhRdUpHOXdkR2x2Ym5NdVgzTmpiM0JsU1dRcEppWjFMbk5sZEZOMGVXeGxVMk52Y0dVb1pTNWxiRzBzZENrc2NqMXlMbkJoY21WdWREdHVLSFE5VjNRcEppWjBJVDA5WlM1amIyNTBaWGgwSmlaMElUMDlaUzVtYmtOdmJuUmxlSFFtSm00b2REMTBMaVJ2Y0hScGIyNXpMbDl6WTI5d1pVbGtLU1ltZFM1elpYUlRkSGxzWlZOamIzQmxLR1V1Wld4dExIUXBmV1oxYm1OMGFXOXVJRjhvWlN4MExHNHNjaXhwTEc4cGUyWnZjaWc3Y2p3OWFUc3JLM0lwWmlodVczSmRMRzhzWlN4MExDRXhMRzRzY2lsOVpuVnVZM1JwYjI0Z1lpaGxLWHQyWVhJZ2RDeHlMR2s5WlM1a1lYUmhPMmxtS0c0b2FTa3BabTl5S0c0b2REMXBMbWh2YjJzcEppWnVLSFE5ZEM1a1pYTjBjbTk1S1NZbWRDaGxLU3gwUFRBN2REeHpMbVJsYzNSeWIza3ViR1Z1WjNSb095c3JkQ2x6TG1SbGMzUnliM2xiZEYwb1pTazdhV1lvYmloMFBXVXVZMmhwYkdSeVpXNHBLV1p2Y2loeVBUQTdjanhsTG1Ob2FXeGtjbVZ1TG14bGJtZDBhRHNySzNJcFlpaGxMbU5vYVd4a2NtVnVXM0pkS1gxbWRXNWpkR2x2YmlBa0tHVXNkQ3h5TEdrcGUyWnZjaWc3Y2p3OWFUc3JLM0lwZTNaaGNpQnZQWFJiY2wwN2JpaHZLU1ltS0c0b2J5NTBZV2NwUHloM0tHOHBMR0lvYnlrcE9td29ieTVsYkcwcEtYMTlablZ1WTNScGIyNGdkeWhsTEhRcGUybG1LRzRvZENsOGZHNG9aUzVrWVhSaEtTbDdkbUZ5SUhJc2FUMXpMbkpsYlc5MlpTNXNaVzVuZEdnck1UdG1iM0lvYmloMEtUOTBMbXhwYzNSbGJtVnljeXM5YVRwMFBXWjFibU4wYVc5dUtHVXNkQ2w3Wm5WdVkzUnBiMjRnYmlncGV6QTlQUzB0Ymk1c2FYTjBaVzVsY25NbUptd29aU2w5Y21WMGRYSnVJRzR1YkdsemRHVnVaWEp6UFhRc2JuMG9aUzVsYkcwc2FTa3NiaWh5UFdVdVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVcEppWnVLSEk5Y2k1ZmRtNXZaR1VwSmladUtISXVaR0YwWVNrbUpuY29jaXgwS1N4eVBUQTdjanh6TG5KbGJXOTJaUzVzWlc1bmRHZzdLeXR5S1hNdWNtVnRiM1psVzNKZEtHVXNkQ2s3YmloeVBXVXVaR0YwWVM1b2IyOXJLU1ltYmloeVBYSXVjbVZ0YjNabEtUOXlLR1VzZENrNmRDZ3BmV1ZzYzJVZ2JDaGxMbVZzYlNsOVpuVnVZM1JwYjI0Z1F5aGxMSFFzY2l4cEtYdG1iM0lvZG1GeUlHODljanR2UEdrN2J5c3JLWHQyWVhJZ1lUMTBXMjlkTzJsbUtHNG9ZU2ttSm1seUtHVXNZU2twY21WMGRYSnVJRzk5ZldaMWJtTjBhVzl1SUhnb1pTeHBMRzhzWVN4akxHd3BlMmxtS0dVaFBUMXBLWHR1S0drdVpXeHRLU1ltYmloaEtTWW1LR2s5WVZ0alhUMXRaU2hwS1NrN2RtRnlJSEE5YVM1bGJHMDlaUzVsYkcwN2FXWW9jaWhsTG1selFYTjVibU5RYkdGalpXaHZiR1JsY2lrcGJpaHBMbUZ6ZVc1alJtRmpkRzl5ZVM1eVpYTnZiSFpsWkNrL1R5aGxMbVZzYlN4cExHOHBPbWt1YVhOQmMzbHVZMUJzWVdObGFHOXNaR1Z5UFNFd08yVnNjMlVnYVdZb2NpaHBMbWx6VTNSaGRHbGpLU1ltY2lobExtbHpVM1JoZEdsaktTWW1hUzVyWlhrOVBUMWxMbXRsZVNZbUtISW9hUzVwYzBOc2IyNWxaQ2w4ZkhJb2FTNXBjMDl1WTJVcEtTbHBMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxQV1V1WTI5dGNHOXVaVzUwU1c1emRHRnVZMlU3Wld4elpYdDJZWElnWkN4MlBXa3VaR0YwWVR0dUtIWXBKaVp1S0dROWRpNW9iMjlyS1NZbWJpaGtQV1F1Y0hKbGNHRjBZMmdwSmlaa0tHVXNhU2s3ZG1GeUlHZzlaUzVqYUdsc1pISmxiaXg1UFdrdVkyaHBiR1J5Wlc0N2FXWW9iaWgyS1NZbWJTaHBLU2w3Wm05eUtHUTlNRHRrUEhNdWRYQmtZWFJsTG14bGJtZDBhRHNySzJRcGN5NTFjR1JoZEdWYlpGMG9aU3hwS1R0dUtHUTlkaTVvYjI5cktTWW1iaWhrUFdRdWRYQmtZWFJsS1NZbVpDaGxMR2twZlhRb2FTNTBaWGgwS1Q5dUtHZ3BKaVp1S0hrcFAyZ2hQVDE1SmlabWRXNWpkR2x2YmlobExISXNhU3h2TEdFcGUyWnZjaWgyWVhJZ2N5eGpMR3dzY0Qwd0xHUTlNQ3gyUFhJdWJHVnVaM1JvTFRFc2FEMXlXekJkTEcwOWNsdDJYU3g1UFdrdWJHVnVaM1JvTFRFc1p6MXBXekJkTEdJOWFWdDVYU3gzUFNGaE8zQThQWFltSm1ROFBYazdLWFFvYUNrL2FEMXlXeXNyY0YwNmRDaHRLVDl0UFhKYkxTMTJYVHBwY2lob0xHY3BQeWg0S0dnc1p5eHZMR2tzWkNrc2FEMXlXeXNyY0Ywc1p6MXBXeXNyWkYwcE9tbHlLRzBzWWlrL0tIZ29iU3hpTEc4c2FTeDVLU3h0UFhKYkxTMTJYU3hpUFdsYkxTMTVYU2s2YVhJb2FDeGlLVDhvZUNob0xHSXNieXhwTEhrcExIY21KblV1YVc1elpYSjBRbVZtYjNKbEtHVXNhQzVsYkcwc2RTNXVaWGgwVTJsaWJHbHVaeWh0TG1Wc2JTa3BMR2c5Y2xzckszQmRMR0k5YVZzdExYbGRLVHBwY2lodExHY3BQeWg0S0cwc1p5eHZMR2tzWkNrc2R5WW1kUzVwYm5ObGNuUkNaV1p2Y21Vb1pTeHRMbVZzYlN4b0xtVnNiU2tzYlQxeVd5MHRkbDBzWnoxcFd5c3JaRjBwT2loMEtITXBKaVlvY3oxdmNpaHlMSEFzZGlrcExIUW9ZejF1S0djdWEyVjVLVDl6VzJjdWEyVjVYVHBES0djc2NpeHdMSFlwS1Q5bUtHY3NieXhsTEdndVpXeHRMQ0V4TEdrc1pDazZhWElvYkQxeVcyTmRMR2NwUHloNEtHd3NaeXh2TEdrc1pDa3NjbHRqWFQxMmIybGtJREFzZHlZbWRTNXBibk5sY25SQ1pXWnZjbVVvWlN4c0xtVnNiU3hvTG1Wc2JTa3BPbVlvWnl4dkxHVXNhQzVsYkcwc0lURXNhU3hrS1N4blBXbGJLeXRrWFNrN2NENTJQMThvWlN4MEtHbGJlU3N4WFNrL2JuVnNiRHBwVzNrck1WMHVaV3h0TEdrc1pDeDVMRzhwT21RK2VTWW1KQ2d3TEhJc2NDeDJLWDBvY0N4b0xIa3NieXhzS1RwdUtIa3BQeWh1S0dVdWRHVjRkQ2ttSm5VdWMyVjBWR1Y0ZEVOdmJuUmxiblFvY0N4Y0lsd2lLU3hmS0hBc2JuVnNiQ3g1TERBc2VTNXNaVzVuZEdndE1TeHZLU2s2Ymlob0tUOGtLREFzYUN3d0xHZ3ViR1Z1WjNSb0xURXBPbTRvWlM1MFpYaDBLU1ltZFM1elpYUlVaWGgwUTI5dWRHVnVkQ2h3TEZ3aVhDSXBPbVV1ZEdWNGRDRTlQV2t1ZEdWNGRDWW1kUzV6WlhSVVpYaDBRMjl1ZEdWdWRDaHdMR2t1ZEdWNGRDa3NiaWgyS1NZbWJpaGtQWFl1YUc5dmF5a21KbTRvWkQxa0xuQnZjM1J3WVhSamFDa21KbVFvWlN4cEtYMTlmV1oxYm1OMGFXOXVJR3NvWlN4MExHa3BlMmxtS0hJb2FTa21KbTRvWlM1d1lYSmxiblFwS1dVdWNHRnlaVzUwTG1SaGRHRXVjR1Z1WkdsdVowbHVjMlZ5ZEQxME8yVnNjMlVnWm05eUtIWmhjaUJ2UFRBN2J6eDBMbXhsYm1kMGFEc3JLMjhwZEZ0dlhTNWtZWFJoTG1odmIyc3VhVzV6WlhKMEtIUmJiMTBwZlhaaGNpQkJQWEFvWENKaGRIUnljeXhqYkdGemN5eHpkR0YwYVdORGJHRnpjeXh6ZEdGMGFXTlRkSGxzWlN4clpYbGNJaWs3Wm5WdVkzUnBiMjRnVHlobExIUXNhU3h2S1h0MllYSWdZU3h6UFhRdWRHRm5MR005ZEM1a1lYUmhMSFU5ZEM1amFHbHNaSEpsYmp0cFppaHZQVzk4ZkdNbUptTXVjSEpsTEhRdVpXeHRQV1VzY2loMExtbHpRMjl0YldWdWRDa21KbTRvZEM1aGMzbHVZMFpoWTNSdmNua3BLWEpsZEhWeWJpQjBMbWx6UVhONWJtTlFiR0ZqWldodmJHUmxjajBoTUN3aE1EdHBaaWh1S0dNcEppWW9iaWhoUFdNdWFHOXZheWttSm00b1lUMWhMbWx1YVhRcEppWmhLSFFzSVRBcExHNG9ZVDEwTG1OdmJYQnZibVZ1ZEVsdWMzUmhibU5sS1NrcGNtVjBkWEp1SUdRb2RDeHBLU3doTUR0cFppaHVLSE1wS1h0cFppaHVLSFVwS1dsbUtHVXVhR0Z6UTJocGJHUk9iMlJsY3lncEtXbG1LRzRvWVQxaktTWW1iaWhoUFdFdVpHOXRVSEp2Y0hNcEppWnVLR0U5WVM1cGJtNWxja2hVVFV3cEtYdHBaaWhoSVQwOVpTNXBibTVsY2toVVRVd3BjbVYwZFhKdUlURjlaV3h6Wlh0bWIzSW9kbUZ5SUd3OUlUQXNaajFsTG1acGNuTjBRMmhwYkdRc2NEMHdPM0E4ZFM1c1pXNW5kR2c3Y0NzcktYdHBaaWdoWm54OElVOG9aaXgxVzNCZExHa3NieWtwZTJ3OUlURTdZbkpsWVd0OVpqMW1MbTVsZUhSVGFXSnNhVzVuZldsbUtDRnNmSHhtS1hKbGRIVnliaUV4ZldWc2MyVWdhQ2gwTEhVc2FTazdhV1lvYmloaktTbDdkbUZ5SUhZOUlURTdabTl5S0haaGNpQnRJR2x1SUdNcGFXWW9JVUVvYlNrcGUzWTlJVEFzZVNoMExHa3BPMkp5WldGcmZTRjJKaVpqTG1Oc1lYTnpKaVpsZENoakxtTnNZWE56S1gxOVpXeHpaU0JsTG1SaGRHRWhQVDEwTG5SbGVIUW1KaWhsTG1SaGRHRTlkQzUwWlhoMEtUdHlaWFIxY200aE1IMXlaWFIxY200Z1puVnVZM1JwYjI0b1pTeHBMRzhzWVNsN2FXWW9JWFFvYVNrcGUzWmhjaUJqTEd3OUlURXNjRDFiWFR0cFppaDBLR1VwS1d3OUlUQXNaaWhwTEhBcE8yVnNjMlY3ZG1GeUlHUTliaWhsTG01dlpHVlVlWEJsS1R0cFppZ2haQ1ltYVhJb1pTeHBLU2w0S0dVc2FTeHdMRzUxYkd3c2JuVnNiQ3hoS1R0bGJITmxlMmxtS0dRcGUybG1LREU5UFQxbExtNXZaR1ZVZVhCbEppWmxMbWhoYzBGMGRISnBZblYwWlNoTUtTWW1LR1V1Y21WdGIzWmxRWFIwY21saWRYUmxLRXdwTEc4OUlUQXBMSElvYnlrbUprOG9aU3hwTEhBcEtYSmxkSFZ5YmlCcktHa3NjQ3doTUNrc1pUdGpQV1VzWlQxdVpYY2djR1VvZFM1MFlXZE9ZVzFsS0dNcExuUnZURzkzWlhKRFlYTmxLQ2tzZTMwc1cxMHNkbTlwWkNBd0xHTXBmWFpoY2lCMlBXVXVaV3h0TEdnOWRTNXdZWEpsYm5ST2IyUmxLSFlwTzJsbUtHWW9hU3h3TEhZdVgyeGxZWFpsUTJJL2JuVnNiRHBvTEhVdWJtVjRkRk5wWW14cGJtY29kaWtwTEc0b2FTNXdZWEpsYm5RcEtXWnZjaWgyWVhJZ2VUMXBMbkJoY21WdWRDeG5QVzBvYVNrN2VUc3BlMlp2Y2loMllYSWdYejB3TzE4OGN5NWtaWE4wY205NUxteGxibWQwYURzcksxOHBjeTVrWlhOMGNtOTVXMTlkS0hrcE8ybG1LSGt1Wld4dFBXa3VaV3h0TEdjcGUyWnZjaWgyWVhJZ2R6MHdPM2M4Y3k1amNtVmhkR1V1YkdWdVozUm9PeXNyZHlsekxtTnlaV0YwWlZ0M1hTaHVjaXg1S1R0MllYSWdRejE1TG1SaGRHRXVhRzl2YXk1cGJuTmxjblE3YVdZb1F5NXRaWEpuWldRcFptOXlLSFpoY2lCQlBURTdRVHhETG1adWN5NXNaVzVuZEdnN1FTc3JLVU11Wm01elcwRmRLQ2w5Wld4elpTQjBjaWg1S1R0NVBYa3VjR0Z5Wlc1MGZXNG9hQ2svSkNnd0xGdGxYU3d3TERBcE9tNG9aUzUwWVdjcEppWmlLR1VwZlgxeVpYUjFjbTRnYXlocExIQXNiQ2tzYVM1bGJHMTliaWhsS1NZbVlpaGxLWDE5S0h0dWIyUmxUM0J6T2xGdUxHMXZaSFZzWlhNNlcyMXlMSGh5TEc1cExHOXBMRzFwTEhvL2UyTnlaV0YwWlRwVmFTeGhZM1JwZG1GMFpUcFZhU3h5WlcxdmRtVTZablZ1WTNScGIyNG9aU3gwS1hzaE1DRTlQV1V1WkdGMFlTNXphRzkzUDFKcEtHVXNkQ2s2ZENncGZYMDZlMzFkTG1OdmJtTmhkQ2h3Y2lsOUtUdFhKaVprYjJOMWJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYzJWc1pXTjBhVzl1WTJoaGJtZGxYQ0lzWm5WdVkzUnBiMjRvS1h0MllYSWdaVDFrYjJOMWJXVnVkQzVoWTNScGRtVkZiR1Z0Wlc1ME8yVW1KbVV1ZG0xdlpHVnNKaVpZYVNobExGd2lhVzV3ZFhSY0lpbDlLVHQyWVhJZ1ZtazllMmx1YzJWeWRHVmtPbVoxYm1OMGFXOXVLR1VzZEN4dUxISXBlMXdpYzJWc1pXTjBYQ0k5UFQxdUxuUmhaejhvY2k1bGJHMG1KaUZ5TG1Wc2JTNWZkazl3ZEdsdmJuTS9hWFFvYml4Y0luQnZjM1J3WVhSamFGd2lMR1oxYm1OMGFXOXVLQ2w3Vm1rdVkyOXRjRzl1Wlc1MFZYQmtZWFJsWkNobExIUXNiaWw5S1RwTGFTaGxMSFFzYmk1amIyNTBaWGgwS1N4bExsOTJUM0IwYVc5dWN6MWJYUzV0WVhBdVkyRnNiQ2hsTG05d2RHbHZibk1zVjJrcEtUb29YQ0owWlhoMFlYSmxZVndpUFQwOWJpNTBZV2Q4ZkZodUtHVXVkSGx3WlNrcEppWW9aUzVmZGsxdlpHbG1hV1Z5Y3oxMExtMXZaR2xtYVdWeWN5eDBMbTF2WkdsbWFXVnljeTVzWVhwNWZId29aUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpWTI5dGNHOXphWFJwYjI1emRHRnlkRndpTEZwcEtTeGxMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pqYjIxd2IzTnBkR2x2Ym1WdVpGd2lMRWRwS1N4bExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSmphR0Z1WjJWY0lpeEhhU2tzVnlZbUtHVXVkbTF2WkdWc1BTRXdLU2twZlN4amIyMXdiMjVsYm5SVmNHUmhkR1ZrT21aMWJtTjBhVzl1S0dVc2RDeHVLWHRwWmloY0luTmxiR1ZqZEZ3aVBUMDliaTUwWVdjcGUwdHBLR1VzZEN4dUxtTnZiblJsZUhRcE8zWmhjaUJ5UFdVdVgzWlBjSFJwYjI1ekxHazlaUzVmZGs5d2RHbHZibk05VzEwdWJXRndMbU5oYkd3b1pTNXZjSFJwYjI1ekxGZHBLVHRwWmlocExuTnZiV1VvWm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200aFRpaGxMSEpiZEYwcGZTa3BLR1V1YlhWc2RHbHdiR1UvZEM1MllXeDFaUzV6YjIxbEtHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnhhU2hsTEdrcGZTazZkQzUyWVd4MVpTRTlQWFF1YjJ4a1ZtRnNkV1VtSm5GcEtIUXVkbUZzZFdVc2FTa3BKaVpZYVNobExGd2lZMmhoYm1kbFhDSXBmWDE5TzJaMWJtTjBhVzl1SUV0cEtHVXNkQ3h1S1h0S2FTaGxMSFFzYmlrc0tIRjhmRm9wSmlaelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdTbWtvWlN4MExHNHBmU3d3S1gxbWRXNWpkR2x2YmlCS2FTaGxMSFFzYmlsN2RtRnlJSEk5ZEM1MllXeDFaU3hwUFdVdWJYVnNkR2x3YkdVN2FXWW9JV2w4ZkVGeWNtRjVMbWx6UVhKeVlYa29jaWtwZTJadmNpaDJZWElnYnl4aExITTlNQ3hqUFdVdWIzQjBhVzl1Y3k1c1pXNW5kR2c3Y3p4ak8zTXJLeWxwWmloaFBXVXViM0IwYVc5dWMxdHpYU3hwS1c4OWFpaHlMRmRwS0dFcEtUNHRNU3hoTG5ObGJHVmpkR1ZrSVQwOWJ5WW1LR0V1YzJWc1pXTjBaV1E5YnlrN1pXeHpaU0JwWmloT0tGZHBLR0VwTEhJcEtYSmxkSFZ5YmlCMmIybGtLR1V1YzJWc1pXTjBaV1JKYm1SbGVDRTlQWE1tSmlobExuTmxiR1ZqZEdWa1NXNWtaWGc5Y3lrcE8ybDhmQ2hsTG5ObGJHVmpkR1ZrU1c1a1pYZzlMVEVwZlgxbWRXNWpkR2x2YmlCeGFTaGxMSFFwZTNKbGRIVnliaUIwTG1WMlpYSjVLR1oxYm1OMGFXOXVLSFFwZTNKbGRIVnliaUZPS0hRc1pTbDlLWDFtZFc1amRHbHZiaUJYYVNobEtYdHlaWFIxY201Y0lsOTJZV3gxWlZ3aWFXNGdaVDlsTGw5MllXeDFaVHBsTG5aaGJIVmxmV1oxYm1OMGFXOXVJRnBwS0dVcGUyVXVkR0Z5WjJWMExtTnZiWEJ2YzJsdVp6MGhNSDFtZFc1amRHbHZiaUJIYVNobEtYdGxMblJoY21kbGRDNWpiMjF3YjNOcGJtY21KaWhsTG5SaGNtZGxkQzVqYjIxd2IzTnBibWM5SVRFc1dHa29aUzUwWVhKblpYUXNYQ0pwYm5CMWRGd2lLU2w5Wm5WdVkzUnBiMjRnV0drb1pTeDBLWHQyWVhJZ2JqMWtiMk4xYldWdWRDNWpjbVZoZEdWRmRtVnVkQ2hjSWtoVVRVeEZkbVZ1ZEhOY0lpazdiaTVwYm1sMFJYWmxiblFvZEN3aE1Dd2hNQ2tzWlM1a2FYTndZWFJqYUVWMlpXNTBLRzRwZldaMWJtTjBhVzl1SUZscEtHVXBlM0psZEhWeWJpRmxMbU52YlhCdmJtVnVkRWx1YzNSaGJtTmxmSHhsTG1SaGRHRW1KbVV1WkdGMFlTNTBjbUZ1YzJsMGFXOXVQMlU2V1drb1pTNWpiMjF3YjI1bGJuUkpibk4wWVc1alpTNWZkbTV2WkdVcGZYWmhjaUJSYVQxN2JXOWtaV3c2Vm1rc2MyaHZkenA3WW1sdVpEcG1kVzVqZEdsdmJpaGxMSFFzYmlsN2RtRnlJSEk5ZEM1MllXeDFaU3hwUFNodVBWbHBLRzRwS1M1a1lYUmhKaVp1TG1SaGRHRXVkSEpoYm5OcGRHbHZiaXh2UFdVdVgxOTJUM0pwWjJsdVlXeEVhWE53YkdGNVBWd2libTl1WlZ3aVBUMDlaUzV6ZEhsc1pTNWthWE53YkdGNVAxd2lYQ0k2WlM1emRIbHNaUzVrYVhOd2JHRjVPM0ltSm1rL0tHNHVaR0YwWVM1emFHOTNQU0V3TEZCcEtHNHNablZ1WTNScGIyNG9LWHRsTG5OMGVXeGxMbVJwYzNCc1lYazliMzBwS1RwbExuTjBlV3hsTG1ScGMzQnNZWGs5Y2o5dk9sd2libTl1WlZ3aWZTeDFjR1JoZEdVNlpuVnVZM1JwYjI0b1pTeDBMRzRwZTNaaGNpQnlQWFF1ZG1Gc2RXVTdJWEloUFNGMExtOXNaRlpoYkhWbEppWW9LRzQ5V1drb2Jpa3BMbVJoZEdFbUptNHVaR0YwWVM1MGNtRnVjMmwwYVc5dVB5aHVMbVJoZEdFdWMyaHZkejBoTUN4eVAxQnBLRzRzWm5WdVkzUnBiMjRvS1h0bExuTjBlV3hsTG1ScGMzQnNZWGs5WlM1ZlgzWlBjbWxuYVc1aGJFUnBjM0JzWVhsOUtUcFNhU2h1TEdaMWJtTjBhVzl1S0NsN1pTNXpkSGxzWlM1a2FYTndiR0Y1UFZ3aWJtOXVaVndpZlNrcE9tVXVjM1I1YkdVdVpHbHpjR3hoZVQxeVAyVXVYMTkyVDNKcFoybHVZV3hFYVhOd2JHRjVPbHdpYm05dVpWd2lLWDBzZFc1aWFXNWtPbVoxYm1OMGFXOXVLR1VzZEN4dUxISXNhU2w3YVh4OEtHVXVjM1I1YkdVdVpHbHpjR3hoZVQxbExsOWZkazl5YVdkcGJtRnNSR2x6Y0d4aGVTbDlmWDBzWlc4OWUyNWhiV1U2VTNSeWFXNW5MR0Z3Y0dWaGNqcENiMjlzWldGdUxHTnpjenBDYjI5c1pXRnVMRzF2WkdVNlUzUnlhVzVuTEhSNWNHVTZVM1J5YVc1bkxHVnVkR1Z5UTJ4aGMzTTZVM1J5YVc1bkxHeGxZWFpsUTJ4aGMzTTZVM1J5YVc1bkxHVnVkR1Z5Vkc5RGJHRnpjenBUZEhKcGJtY3NiR1ZoZG1WVWIwTnNZWE56T2xOMGNtbHVaeXhsYm5SbGNrRmpkR2wyWlVOc1lYTnpPbE4wY21sdVp5eHNaV0YyWlVGamRHbDJaVU5zWVhOek9sTjBjbWx1Wnl4aGNIQmxZWEpEYkdGemN6cFRkSEpwYm1jc1lYQndaV0Z5UVdOMGFYWmxRMnhoYzNNNlUzUnlhVzVuTEdGd2NHVmhjbFJ2UTJ4aGMzTTZVM1J5YVc1bkxHUjFjbUYwYVc5dU9sdE9kVzFpWlhJc1UzUnlhVzVuTEU5aWFtVmpkRjE5TzJaMWJtTjBhVzl1SUhSdktHVXBlM1poY2lCMFBXVW1KbVV1WTI5dGNHOXVaVzUwVDNCMGFXOXVjenR5WlhSMWNtNGdkQ1ltZEM1RGRHOXlMbTl3ZEdsdmJuTXVZV0p6ZEhKaFkzUS9kRzhvZW5Rb2RDNWphR2xzWkhKbGJpa3BPbVY5Wm5WdVkzUnBiMjRnYm04b1pTbDdkbUZ5SUhROWUzMHNiajFsTGlSdmNIUnBiMjV6TzJadmNpaDJZWElnY2lCcGJpQnVMbkJ5YjNCelJHRjBZU2wwVzNKZFBXVmJjbDA3ZG1GeUlHazliaTVmY0dGeVpXNTBUR2x6ZEdWdVpYSnpPMlp2Y2loMllYSWdieUJwYmlCcEtYUmJZaWh2S1YwOWFWdHZYVHR5WlhSMWNtNGdkSDFtZFc1amRHbHZiaUJ5YnlobExIUXBlMmxtS0M5Y1hHUXRhMlZsY0MxaGJHbDJaU1F2TG5SbGMzUW9kQzUwWVdjcEtYSmxkSFZ5YmlCbEtGd2lhMlZsY0MxaGJHbDJaVndpTEh0d2NtOXdjenAwTG1OdmJYQnZibVZ1ZEU5d2RHbHZibk11Y0hKdmNITkVZWFJoZlNsOWRtRnlJR2x2UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbExuUmhaM3g4VlhRb1pTbDlMRzl2UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5Ymx3aWMyaHZkMXdpUFQwOVpTNXVZVzFsZlN4aGJ6MTdibUZ0WlRwY0luUnlZVzV6YVhScGIyNWNJaXh3Y205d2N6cGxieXhoWW5OMGNtRmpkRG9oTUN4eVpXNWtaWEk2Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5ZEdocGN5eHVQWFJvYVhNdUpITnNiM1J6TG1SbFptRjFiSFE3YVdZb2JpWW1LRzQ5Ymk1bWFXeDBaWElvYVc4cEtTNXNaVzVuZEdncGUzWmhjaUJ5UFhSb2FYTXViVzlrWlN4dlBXNWJNRjA3YVdZb1puVnVZM1JwYjI0b1pTbDdabTl5S0R0bFBXVXVjR0Z5Wlc1ME95bHBaaWhsTG1SaGRHRXVkSEpoYm5OcGRHbHZiaWx5WlhSMWNtNGhNSDBvZEdocGN5NGtkbTV2WkdVcEtYSmxkSFZ5YmlCdk8zWmhjaUJoUFhSdktHOHBPMmxtS0NGaEtYSmxkSFZ5YmlCdk8ybG1LSFJvYVhNdVgyeGxZWFpwYm1jcGNtVjBkWEp1SUhKdktHVXNieWs3ZG1GeUlITTlYQ0pmWDNSeVlXNXphWFJwYjI0dFhDSXJkR2hwY3k1ZmRXbGtLMXdpTFZ3aU8yRXVhMlY1UFc1MWJHdzlQV0V1YTJWNVAyRXVhWE5EYjIxdFpXNTBQM01yWENKamIyMXRaVzUwWENJNmN5dGhMblJoWnpwcEtHRXVhMlY1S1Q4d1BUMDlVM1J5YVc1bktHRXVhMlY1S1M1cGJtUmxlRTltS0hNcFAyRXVhMlY1T25NcllTNXJaWGs2WVM1clpYazdkbUZ5SUdNOUtHRXVaR0YwWVh4OEtHRXVaR0YwWVQxN2ZTa3BMblJ5WVc1emFYUnBiMjQ5Ym04b2RHaHBjeWtzZFQxMGFHbHpMbDkyYm05a1pTeHNQWFJ2S0hVcE8ybG1LR0V1WkdGMFlTNWthWEpsWTNScGRtVnpKaVpoTG1SaGRHRXVaR2x5WldOMGFYWmxjeTV6YjIxbEtHOXZLU1ltS0dFdVpHRjBZUzV6YUc5M1BTRXdLU3hzSmlac0xtUmhkR0VtSmlGbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQjBMbXRsZVQwOVBXVXVhMlY1SmlaMExuUmhaejA5UFdVdWRHRm5mU2hoTEd3cEppWWhWWFFvYkNrbUppZ2hiQzVqYjIxd2IyNWxiblJKYm5OMFlXNWpaWHg4SVd3dVkyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVdVgzWnViMlJsTG1selEyOXRiV1Z1ZENrcGUzWmhjaUJtUFd3dVpHRjBZUzUwY21GdWMybDBhVzl1UFVFb2UzMHNZeWs3YVdZb1hDSnZkWFF0YVc1Y0lqMDlQWElwY21WMGRYSnVJSFJvYVhNdVgyeGxZWFpwYm1jOUlUQXNhWFFvWml4Y0ltRm1kR1Z5VEdWaGRtVmNJaXhtZFc1amRHbHZiaWdwZTNRdVgyeGxZWFpwYm1jOUlURXNkQzRrWm05eVkyVlZjR1JoZEdVb0tYMHBMSEp2S0dVc2J5azdhV1lvWENKcGJpMXZkWFJjSWowOVBYSXBlMmxtS0ZWMEtHRXBLWEpsZEhWeWJpQjFPM1poY2lCd0xHUTlablZ1WTNScGIyNG9LWHR3S0NsOU8ybDBLR01zWENKaFpuUmxja1Z1ZEdWeVhDSXNaQ2tzYVhRb1l5eGNJbVZ1ZEdWeVEyRnVZMlZzYkdWa1hDSXNaQ2tzYVhRb1ppeGNJbVJsYkdGNVRHVmhkbVZjSWl4bWRXNWpkR2x2YmlobEtYdHdQV1Y5S1gxOWNtVjBkWEp1SUc5OWZYMHNjMjg5UVNoN2RHRm5PbE4wY21sdVp5eHRiM1psUTJ4aGMzTTZVM1J5YVc1bmZTeGxieWs3Wm5WdVkzUnBiMjRnWTI4b1pTbDdaUzVsYkcwdVgyMXZkbVZEWWlZbVpTNWxiRzB1WDIxdmRtVkRZaWdwTEdVdVpXeHRMbDlsYm5SbGNrTmlKaVpsTG1Wc2JTNWZaVzUwWlhKRFlpZ3BmV1oxYm1OMGFXOXVJSFZ2S0dVcGUyVXVaR0YwWVM1dVpYZFFiM005WlM1bGJHMHVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NsOVpuVnVZM1JwYjI0Z2JHOG9aU2w3ZG1GeUlIUTlaUzVrWVhSaExuQnZjeXh1UFdVdVpHRjBZUzV1WlhkUWIzTXNjajEwTG14bFpuUXRiaTVzWldaMExHazlkQzUwYjNBdGJpNTBiM0E3YVdZb2NueDhhU2w3WlM1a1lYUmhMbTF2ZG1Wa1BTRXdPM1poY2lCdlBXVXVaV3h0TG5OMGVXeGxPMjh1ZEhKaGJuTm1iM0p0UFc4dVYyVmlhMmwwVkhKaGJuTm1iM0p0UFZ3aWRISmhibk5zWVhSbEtGd2lLM0lyWENKd2VDeGNJaXRwSzF3aWNIZ3BYQ0lzYnk1MGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0OVhDSXdjMXdpZlgxa1pXeGxkR1VnYzI4dWJXOWtaVHQyWVhJZ1ptODllMVJ5WVc1emFYUnBiMjQ2WVc4c1ZISmhibk5wZEdsdmJrZHliM1Z3T250d2NtOXdjenB6Ynl4aVpXWnZjbVZOYjNWdWREcG1kVzVqZEdsdmJpZ3BlM1poY2lCbFBYUm9hWE1zZEQxMGFHbHpMbDkxY0dSaGRHVTdkR2hwY3k1ZmRYQmtZWFJsUFdaMWJtTjBhVzl1S0c0c2NpbDdkbUZ5SUdrOVduUW9aU2s3WlM1ZlgzQmhkR05vWDE4b1pTNWZkbTV2WkdVc1pTNXJaWEIwTENFeExDRXdLU3hsTGw5MmJtOWtaVDFsTG10bGNIUXNhU2dwTEhRdVkyRnNiQ2hsTEc0c2NpbDlmU3h5Wlc1a1pYSTZablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFhSb2FYTXVkR0ZuZkh4MGFHbHpMaVIyYm05a1pTNWtZWFJoTG5SaFozeDhYQ0p6Y0dGdVhDSXNiajFQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTEhJOWRHaHBjeTV3Y21WMlEyaHBiR1J5Wlc0OWRHaHBjeTVqYUdsc1pISmxiaXhwUFhSb2FYTXVKSE5zYjNSekxtUmxabUYxYkhSOGZGdGRMRzg5ZEdocGN5NWphR2xzWkhKbGJqMWJYU3hoUFc1dktIUm9hWE1wTEhNOU1EdHpQR2t1YkdWdVozUm9PM01yS3lsN2RtRnlJR005YVZ0elhUdGpMblJoWnlZbWJuVnNiQ0U5WXk1clpYa21KakFoUFQxVGRISnBibWNvWXk1clpYa3BMbWx1WkdWNFQyWW9YQ0pmWDNac2FYTjBYQ0lwSmlZb2J5NXdkWE5vS0dNcExHNWJZeTVyWlhsZFBXTXNLR011WkdGMFlYeDhLR011WkdGMFlUMTdmU2twTG5SeVlXNXphWFJwYjI0OVlTbDlhV1lvY2lsN1ptOXlLSFpoY2lCMVBWdGRMR3c5VzEwc1pqMHdPMlk4Y2k1c1pXNW5kR2c3WmlzcktYdDJZWElnY0QxeVcyWmRPM0F1WkdGMFlTNTBjbUZ1YzJsMGFXOXVQV0VzY0M1a1lYUmhMbkJ2Y3oxd0xtVnNiUzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tTeHVXM0F1YTJWNVhUOTFMbkIxYzJnb2NDazZiQzV3ZFhOb0tIQXBmWFJvYVhNdWEyVndkRDFsS0hRc2JuVnNiQ3gxS1N4MGFHbHpMbkpsYlc5MlpXUTliSDF5WlhSMWNtNGdaU2gwTEc1MWJHd3NieWw5TEhWd1pHRjBaV1E2Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDEwYUdsekxuQnlaWFpEYUdsc1pISmxiaXgwUFhSb2FYTXViVzkyWlVOc1lYTnpmSHdvZEdocGN5NXVZVzFsZkh4Y0luWmNJaWtyWENJdGJXOTJaVndpTzJVdWJHVnVaM1JvSmlaMGFHbHpMbWhoYzAxdmRtVW9aVnN3WFM1bGJHMHNkQ2ttSmlobExtWnZja1ZoWTJnb1kyOHBMR1V1Wm05eVJXRmphQ2gxYnlrc1pTNW1iM0pGWVdOb0tHeHZLU3gwYUdsekxsOXlaV1pzYjNjOVpHOWpkVzFsYm5RdVltOWtlUzV2Wm1aelpYUklaV2xuYUhRc1pTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHVXBlMmxtS0dVdVpHRjBZUzV0YjNabFpDbDdkbUZ5SUc0OVpTNWxiRzBzY2oxdUxuTjBlV3hsTzA1cEtHNHNkQ2tzY2k1MGNtRnVjMlp2Y20wOWNpNVhaV0pyYVhSVWNtRnVjMlp2Y20wOWNpNTBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNDlYQ0pjSWl4dUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1FXa3NiaTVmYlc5MlpVTmlQV1oxYm1OMGFXOXVJR1VvY2lsN2NpWW1jaTUwWVhKblpYUWhQVDF1Zkh4eUppWWhMM1J5WVc1elptOXliU1F2TG5SbGMzUW9jaTV3Y205d1pYSjBlVTVoYldVcGZId29iaTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0VGcExHVXBMRzR1WDIxdmRtVkRZajF1ZFd4c0xHcHBLRzRzZENrcGZTbDlmU2twZlN4dFpYUm9iMlJ6T250b1lYTk5iM1psT21aMWJtTjBhVzl1S0dVc2RDbDdhV1lvSVhkcEtYSmxkSFZ5YmlFeE8ybG1LSFJvYVhNdVgyaGhjMDF2ZG1VcGNtVjBkWEp1SUhSb2FYTXVYMmhoYzAxdmRtVTdkbUZ5SUc0OVpTNWpiRzl1WlU1dlpHVW9LVHRsTGw5MGNtRnVjMmwwYVc5dVEyeGhjM05sY3lZbVpTNWZkSEpoYm5OcGRHbHZia05zWVhOelpYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpaGxLWHRmYVNodUxHVXBmU2tzWjJrb2JpeDBLU3h1TG5OMGVXeGxMbVJwYzNCc1lYazlYQ0p1YjI1bFhDSXNkR2hwY3k0a1pXd3VZWEJ3Wlc1a1EyaHBiR1FvYmlrN2RtRnlJSEk5VFdrb2JpazdjbVYwZFhKdUlIUm9hWE11SkdWc0xuSmxiVzkyWlVOb2FXeGtLRzRwTEhSb2FYTXVYMmhoYzAxdmRtVTljaTVvWVhOVWNtRnVjMlp2Y20xOWZYMTlPM2R1TG1OdmJtWnBaeTV0ZFhOMFZYTmxVSEp2Y0QxcWJpeDNiaTVqYjI1bWFXY3VhWE5TWlhObGNuWmxaRlJoWnoxWGJpeDNiaTVqYjI1bWFXY3VhWE5TWlhObGNuWmxaRUYwZEhJOVJXNHNkMjR1WTI5dVptbG5MbWRsZEZSaFowNWhiV1Z6Y0dGalpUMWFiaXgzYmk1amIyNW1hV2N1YVhOVmJtdHViM2R1Uld4bGJXVnVkRDFtZFc1amRHbHZiaWhsS1h0cFppZ2hlaWx5WlhSMWNtNGhNRHRwWmloWGJpaGxLU2x5WlhSMWNtNGhNVHRwWmlobFBXVXVkRzlNYjNkbGNrTmhjMlVvS1N4dWRXeHNJVDFIYmx0bFhTbHlaWFIxY200Z1IyNWJaVjA3ZG1GeUlIUTlaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENobEtUdHlaWFIxY200Z1pTNXBibVJsZUU5bUtGd2lMVndpS1Q0dE1UOUhibHRsWFQxMExtTnZibk4wY25WamRHOXlQVDA5ZDJsdVpHOTNMa2hVVFV4VmJtdHViM2R1Uld4bGJXVnVkSHg4ZEM1amIyNXpkSEoxWTNSdmNqMDlQWGRwYm1SdmR5NUlWRTFNUld4bGJXVnVkRHBIYmx0bFhUMHZTRlJOVEZWdWEyNXZkMjVGYkdWdFpXNTBMeTUwWlhOMEtIUXVkRzlUZEhKcGJtY29LU2w5TEVFb2QyNHViM0IwYVc5dWN5NWthWEpsWTNScGRtVnpMRkZwS1N4QktIZHVMbTl3ZEdsdmJuTXVZMjl0Y0c5dVpXNTBjeXhtYnlrc2QyNHVjSEp2ZEc5MGVYQmxMbDlmY0dGMFkyaGZYejE2UDNwcE9sTXNkMjR1Y0hKdmRHOTBlWEJsTGlSdGIzVnVkRDFtZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmlobExIUXNiaWw3ZG1GeUlISTdjbVYwZFhKdUlHVXVKR1ZzUFhRc1pTNGtiM0IwYVc5dWN5NXlaVzVrWlhKOGZDaGxMaVJ2Y0hScGIyNXpMbkpsYm1SbGNqMTJaU2tzV1hRb1pTeGNJbUpsWm05eVpVMXZkVzUwWENJcExISTlablZ1WTNScGIyNG9LWHRsTGw5MWNHUmhkR1VvWlM1ZmNtVnVaR1Z5S0Nrc2JpbDlMRzVsZHlCbWJpaGxMSElzVXl4N1ltVm1iM0psT21aMWJtTjBhVzl1S0NsN1pTNWZhWE5OYjNWdWRHVmtKaVloWlM1ZmFYTkVaWE4wY205NVpXUW1KbGwwS0dVc1hDSmlaV1p2Y21WVmNHUmhkR1ZjSWlsOWZTd2hNQ2tzYmowaE1TeHVkV3hzUFQxbExpUjJibTlrWlNZbUtHVXVYMmx6VFc5MWJuUmxaRDBoTUN4WmRDaGxMRndpYlc5MWJuUmxaRndpS1Nrc1pYMG9kR2hwY3l4bFBXVW1Kbm8vV1c0b1pTazZkbTlwWkNBd0xIUXBmU3g2SmlaelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdSaTVrWlhaMGIyOXNjeVltYm1VbUptNWxMbVZ0YVhRb1hDSnBibWwwWENJc2QyNHBmU3d3S1R0MllYSWdjRzg5TDF4Y2UxeGNleWdvUHpvdWZGeGNjajljWEc0cEt6OHBYRng5WEZ4OUwyY3NkbTg5TDFzdExpb3JQMTRrZTMwb0tYeGJYRnhkWEZ3dlhGeGNYRjB2Wnl4b2J6MW5LR1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQV1ZiTUYwdWNtVndiR0ZqWlNoMmJ5eGNJbHhjWEZ3a0psd2lLU3h1UFdWYk1WMHVjbVZ3YkdGalpTaDJieXhjSWx4Y1hGd2tKbHdpS1R0eVpYUjFjbTRnYm1WM0lGSmxaMFY0Y0NoMEsxd2lLQ2cvT2k1OFhGeGNYRzRwS3o4cFhDSXJiaXhjSW1kY0lpbDlLVHQyWVhJZ2JXODllM04wWVhScFkwdGxlWE02VzF3aWMzUmhkR2xqUTJ4aGMzTmNJbDBzZEhKaGJuTm1iM0p0VG05a1pUcG1kVzVqZEdsdmJpaGxMSFFwZTNRdWQyRnlianQyWVhJZ2JqMUdjaWhsTEZ3aVkyeGhjM05jSWlrN2JpWW1LR1V1YzNSaGRHbGpRMnhoYzNNOVNsTlBUaTV6ZEhKcGJtZHBabmtvYmlrcE8zWmhjaUJ5UFVseUtHVXNYQ0pqYkdGemMxd2lMQ0V4S1R0eUppWW9aUzVqYkdGemMwSnBibVJwYm1jOWNpbDlMR2RsYmtSaGRHRTZablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlYQ0pjSWp0eVpYUjFjbTRnWlM1emRHRjBhV05EYkdGemN5WW1LSFFyUFZ3aWMzUmhkR2xqUTJ4aGMzTTZYQ0lyWlM1emRHRjBhV05EYkdGemN5dGNJaXhjSWlrc1pTNWpiR0Z6YzBKcGJtUnBibWNtSmloMEt6MWNJbU5zWVhOek9sd2lLMlV1WTJ4aGMzTkNhVzVrYVc1bksxd2lMRndpS1N4MGZYMDdkbUZ5SUhsdkxHZHZQWHR6ZEdGMGFXTkxaWGx6T2x0Y0luTjBZWFJwWTFOMGVXeGxYQ0pkTEhSeVlXNXpabTl5YlU1dlpHVTZablZ1WTNScGIyNG9aU3gwS1h0MExuZGhjbTQ3ZG1GeUlHNDlSbklvWlN4Y0luTjBlV3hsWENJcE8yNG1KaWhsTG5OMFlYUnBZMU4wZVd4bFBVcFRUMDR1YzNSeWFXNW5hV1o1S0dGcEtHNHBLU2s3ZG1GeUlISTlTWElvWlN4Y0luTjBlV3hsWENJc0lURXBPM0ltSmlobExuTjBlV3hsUW1sdVpHbHVaejF5S1gwc1oyVnVSR0YwWVRwbWRXNWpkR2x2YmlobEtYdDJZWElnZEQxY0lsd2lPM0psZEhWeWJpQmxMbk4wWVhScFkxTjBlV3hsSmlZb2RDczlYQ0p6ZEdGMGFXTlRkSGxzWlRwY0lpdGxMbk4wWVhScFkxTjBlV3hsSzF3aUxGd2lLU3hsTG5OMGVXeGxRbWx1WkdsdVp5WW1LSFFyUFZ3aWMzUjViR1U2S0Z3aUsyVXVjM1I1YkdWQ2FXNWthVzVuSzF3aUtTeGNJaWtzZEgxOUxGOXZQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaWg1YnoxNWIzeDhaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltUnBkbHdpS1NrdWFXNXVaWEpJVkUxTVBXVXNlVzh1ZEdWNGRFTnZiblJsYm5SOUxHSnZQWEFvWENKaGNtVmhMR0poYzJVc1luSXNZMjlzTEdWdFltVmtMR1p5WVcxbExHaHlMR2x0Wnl4cGJuQjFkQ3hwYzJsdVpHVjRMR3RsZVdkbGJpeHNhVzVyTEcxbGRHRXNjR0Z5WVcwc2MyOTFjbU5sTEhSeVlXTnJMSGRpY2x3aUtTd2tiejF3S0Z3aVkyOXNaM0p2ZFhBc1pHUXNaSFFzYkdrc2IzQjBhVzl1Y3l4d0xIUmtMSFJtYjI5MExIUm9MSFJvWldGa0xIUnlMSE52ZFhKalpWd2lLU3gzYnoxd0tGd2lZV1JrY21WemN5eGhjblJwWTJ4bExHRnphV1JsTEdKaGMyVXNZbXh2WTJ0eGRXOTBaU3hpYjJSNUxHTmhjSFJwYjI0c1kyOXNMR052YkdkeWIzVndMR1JrTEdSbGRHRnBiSE1zWkdsaGJHOW5MR1JwZGl4a2JDeGtkQ3htYVdWc1pITmxkQ3htYVdkallYQjBhVzl1TEdacFozVnlaU3htYjI5MFpYSXNabTl5YlN4b01TeG9NaXhvTXl4b05DeG9OU3hvTml4b1pXRmtMR2hsWVdSbGNpeG9aM0p2ZFhBc2FISXNhSFJ0YkN4c1pXZGxibVFzYkdrc2JXVnVkV2wwWlcwc2JXVjBZU3h2Y0hSbmNtOTFjQ3h2Y0hScGIyNHNjR0Z5WVcwc2NuQXNjblFzYzI5MWNtTmxMSE4wZVd4bExITjFiVzFoY25rc2RHSnZaSGtzZEdRc2RHWnZiM1FzZEdnc2RHaGxZV1FzZEdsMGJHVXNkSElzZEhKaFkydGNJaWtzUTI4OUwxNWNYSE1xS0Z0ZVhGeHpYQ0luUEQ1Y1hDODlYU3NwS0Q4NlhGeHpLaWc5S1Z4Y2N5b29QenBjSWloYlhsd2lYU29wWENJcmZDY29XMTRuWFNvcEp5dDhLRnRlWEZ4elhDSW5QVHcrWUYwcktTa3BQeThzZUc4OUwxNWNYSE1xS0NnL09uWXRXMXhjZHkxZEt6cDhRSHc2ZkNNcFhGeGJXMTQ5WFN0Y1hGMWJYbHhjYzF3aUp6dytYRnd2UFYwcUtTZy9PbHhjY3lvb1BTbGNYSE1xS0Q4NlhDSW9XMTVjSWwwcUtWd2lLM3duS0Z0ZUoxMHFLU2NyZkNoYlhseGNjMXdpSnowOFBtQmRLeWtwS1Q4dkxHdHZQVndpVzJFdGVrRXRXbDlkVzF4Y1hGd3RYRnhjWEM0d0xUbGZZUzE2UVMxYVhDSXJVQzV6YjNWeVkyVXJYQ0pkS2x3aUxFRnZQVndpS0NnL09sd2lLMnR2SzF3aVhGeGNYRG9wUDF3aUsydHZLMXdpS1Z3aUxFOXZQVzVsZHlCU1pXZEZlSEFvWENKZVBGd2lLMEZ2S1N4VGJ6MHZYbHhjY3lvb1hGd3ZQeWsrTHl4VWJ6MXVaWGNnVW1WblJYaHdLRndpWGp4Y1hGeGNMMXdpSzBGdksxd2lXMTQrWFNvK1hDSXBMRVZ2UFM5ZVBDRkVUME5VV1ZCRklGdGVQbDByUGk5cExFNXZQUzllUENGY1hDMHRMeXhxYnowdlhqd2hYRnhiTHl4RWJ6MXdLRndpYzJOeWFYQjBMSE4wZVd4bExIUmxlSFJoY21WaFhDSXNJVEFwTEV4dlBYdDlMRTF2UFh0Y0lpWnNkRHRjSWpwY0lqeGNJaXhjSWlabmREdGNJanBjSWo1Y0lpeGNJaVp4ZFc5ME8xd2lPaWRjSWljc1hDSW1ZVzF3TzF3aU9sd2lKbHdpTEZ3aUppTXhNRHRjSWpwY0lseGNibHdpTEZ3aUppTTVPMXdpT2x3aVhGeDBYQ0lzWENJbUl6TTVPMXdpT2x3aUoxd2lmU3hKYnowdkppZy9PbXgwZkdkMGZIRjFiM1I4WVcxd2ZDTXpPU2s3TDJjc1JtODlMeVlvUHpwc2RIeG5kSHh4ZFc5MGZHRnRjSHdqTXpsOEl6RXdmQ001S1Rzdlp5eFFiejF3S0Z3aWNISmxMSFJsZUhSaGNtVmhYQ0lzSVRBcExGSnZQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUdVbUpsQnZLR1VwSmlaY0lseGNibHdpUFQwOWRGc3dYWDA3Wm5WdVkzUnBiMjRnU0c4b1pTeDBLWHQyWVhJZ2JqMTBQMFp2T2tsdk8zSmxkSFZ5YmlCbExuSmxjR3hoWTJVb2JpeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdUVzliWlYxOUtYMTJZWElnUW04c1ZXOHNlbThzVm04c1MyOHNTbThzY1c4c1YyOHNXbTg5TDE1QWZGNTJMVzl1T2k4c1IyODlMMTUyTFh4ZVFIeGVPaThzV0c4OUx5aGJYRnh6WEZ4VFhTby9LVnhjY3lzb1B6cHBibnh2WmlsY1hITXJLRnRjWEhOY1hGTmRLaWt2TEZsdlBTOHNLRnRlTEZ4Y2ZWeGNYVjBxS1NnL09pd29XMTRzWEZ4OVhGeGRYU29wS1Q4a0x5eFJiejB2WGx4Y0tIeGNYQ2trTDJjc1pXRTlMMTVjWEZzdUtseGNYU1F2TEhSaFBTODZLQzRxS1NRdkxHNWhQUzllT254ZVhGd3VmRjUyTFdKcGJtUTZMeXh5WVQwdlhGd3VXMTR1WEZ4ZFhTc29QejFiWGx4Y1hWMHFKQ2t2Wnl4cFlUMHZYbll0YzJ4dmRDZzZmQ1FwZkY0akx5eHZZVDB2VzF4Y2NseGNibDB2TEdGaFBTOWNYSE1yTDJjc2MyRTlaeWhmYnlrc1kyRTlYQ0pmWlcxd2RIbGZYQ0k3Wm5WdVkzUnBiMjRnZFdFb1pTeDBMRzRwZTNKbGRIVnlibnQwZVhCbE9qRXNkR0ZuT21Vc1lYUjBjbk5NYVhOME9uUXNZWFIwY25OTllYQTZiV0VvZENrc2NtRjNRWFIwY25OTllYQTZlMzBzY0dGeVpXNTBPbTRzWTJocGJHUnlaVzQ2VzExOWZXWjFibU4wYVc5dUlHeGhLR1VzZENsN1FtODlkQzUzWVhKdWZIeFRjaXhLYnoxMExtbHpVSEpsVkdGbmZIeFVMSEZ2UFhRdWJYVnpkRlZ6WlZCeWIzQjhmRlFzVjI4OWRDNW5aWFJVWVdkT1lXMWxjM0JoWTJWOGZGUTdkQzVwYzFKbGMyVnlkbVZrVkdGbk8zcHZQVlJ5S0hRdWJXOWtkV3hsY3l4Y0luUnlZVzV6Wm05eWJVNXZaR1ZjSWlrc1ZtODlWSElvZEM1dGIyUjFiR1Z6TEZ3aWNISmxWSEpoYm5ObWIzSnRUbTlrWlZ3aUtTeExiejFVY2loMExtMXZaSFZzWlhNc1hDSndiM04wVkhKaGJuTm1iM0p0VG05a1pWd2lLU3hWYnoxMExtUmxiR2x0YVhSbGNuTTdkbUZ5SUc0c2NpeHBQVnRkTEc4OUlURWhQVDEwTG5CeVpYTmxjblpsVjJocGRHVnpjR0ZqWlN4aFBYUXVkMmhwZEdWemNHRmpaU3h6UFNFeExHTTlJVEU3Wm5WdVkzUnBiMjRnZFNobEtYdHBaaWhzS0dVcExITjhmR1V1Y0hKdlkyVnpjMlZrZkh3b1pUMW1ZU2hsTEhRcEtTeHBMbXhsYm1kMGFIeDhaVDA5UFc1OGZHNHVhV1ltSmlobExtVnNjMlZwWm54OFpTNWxiSE5sS1NZbVpHRW9iaXg3Wlhod09tVXVaV3h6WldsbUxHSnNiMk5yT21WOUtTeHlKaVloWlM1bWIzSmlhV1JrWlc0cGFXWW9aUzVsYkhObGFXWjhmR1V1Wld4elpTbGhQV1VzS0hVOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVpTNXNaVzVuZEdnN1ptOXlLRHQwTFMwN0tYdHBaaWd4UFQwOVpWdDBYUzUwZVhCbEtYSmxkSFZ5YmlCbFczUmRPMlV1Y0c5d0tDbDlmU2h5TG1Ob2FXeGtjbVZ1S1NrbUpuVXVhV1ltSm1SaEtIVXNlMlY0Y0RwaExtVnNjMlZwWml4aWJHOWphenBoZlNrN1pXeHpaWHRwWmlobExuTnNiM1JUWTI5d1pTbDdkbUZ5SUc4OVpTNXpiRzkwVkdGeVoyVjBmSHduWENKa1pXWmhkV3gwWENJbk95aHlMbk5qYjNCbFpGTnNiM1J6Zkh3b2NpNXpZMjl3WldSVGJHOTBjejE3ZlNrcFcyOWRQV1Y5Y2k1amFHbHNaSEpsYmk1d2RYTm9LR1VwTEdVdWNHRnlaVzUwUFhKOWRtRnlJR0VzZFR0bExtTm9hV3hrY21WdVBXVXVZMmhwYkdSeVpXNHVabWxzZEdWeUtHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpRmxMbk5zYjNSVFkyOXdaWDBwTEd3b1pTa3NaUzV3Y21VbUppaHpQU0V4S1N4S2J5aGxMblJoWnlrbUppaGpQU0V4S1R0bWIzSW9kbUZ5SUdZOU1EdG1QRXR2TG14bGJtZDBhRHRtS3lzcFMyOWJabDBvWlN4MEtYMW1kVzVqZEdsdmJpQnNLR1VwZTJsbUtDRmpLV1p2Y2loMllYSWdkRHNvZEQxbExtTm9hV3hrY21WdVcyVXVZMmhwYkdSeVpXNHViR1Z1WjNSb0xURmRLU1ltTXowOVBYUXVkSGx3WlNZbVhDSWdYQ0k5UFQxMExuUmxlSFE3S1dVdVkyaHBiR1J5Wlc0dWNHOXdLQ2w5Y21WMGRYSnVJR1oxYm1OMGFXOXVLR1VzZENsN1ptOXlLSFpoY2lCdUxISXNhVDFiWFN4dlBYUXVaWGh3WldOMFNGUk5UQ3hoUFhRdWFYTlZibUZ5ZVZSaFozeDhWQ3h6UFhRdVkyRnVRbVZNWldaMFQzQmxibFJoWjN4OFZDeGpQVEE3WlRzcGUybG1LRzQ5WlN4eUppWkVieWh5S1NsN2RtRnlJSFU5TUN4c1BYSXVkRzlNYjNkbGNrTmhjMlVvS1N4bVBVeHZXMnhkZkh3b1RHOWJiRjA5Ym1WM0lGSmxaMFY0Y0NoY0lpaGJYRnhjWEhOY1hGeGNVMTBxUHlrb1BDOWNJaXRzSzF3aVcxNCtYU28rS1Z3aUxGd2lhVndpS1Nrc2NEMWxMbkpsY0d4aFkyVW9aaXhtZFc1amRHbHZiaWhsTEc0c2NpbDdjbVYwZFhKdUlIVTljaTVzWlc1bmRHZ3NSRzhvYkNsOGZGd2libTl6WTNKcGNIUmNJajA5UFd4OGZDaHVQVzR1Y21Wd2JHRmpaU2d2UENGY1hDMHRLRnRjWEhOY1hGTmRLajhwTFMwK0wyY3NYQ0lrTVZ3aUtTNXlaWEJzWVdObEtDODhJVnhjVzBORVFWUkJYRnhiS0Z0Y1hITmNYRk5kS2o4cFhWMCtMMmNzWENJa01Wd2lLU2tzVW04b2JDeHVLU1ltS0c0OWJpNXpiR2xqWlNneEtTa3NkQzVqYUdGeWN5WW1kQzVqYUdGeWN5aHVLU3hjSWx3aWZTazdZeXM5WlM1c1pXNW5kR2d0Y0M1c1pXNW5kR2dzWlQxd0xFRW9iQ3hqTFhVc1l5bDlaV3h6Wlh0MllYSWdaRDFsTG1sdVpHVjRUMllvWENJOFhDSXBPMmxtS0RBOVBUMWtLWHRwWmloT2J5NTBaWE4wS0dVcEtYdDJZWElnZGoxbExtbHVaR1Y0VDJZb1hDSXRMVnhjZURObFhDSXBPMmxtS0hZK1BUQXBlM1F1YzJodmRXeGtTMlZsY0VOdmJXMWxiblFtSm5RdVkyOXRiV1Z1ZENobExuTjFZbk4wY21sdVp5ZzBMSFlwTEdNc1l5dDJLek1wTEVNb2Rpc3pLVHRqYjI1MGFXNTFaWDE5YVdZb2FtOHVkR1Z6ZENobEtTbDdkbUZ5SUdnOVpTNXBibVJsZUU5bUtGd2lYVDVjSWlrN2FXWW9hRDQ5TUNsN1F5aG9LeklwTzJOdmJuUnBiblZsZlgxMllYSWdiVDFsTG0xaGRHTm9LRVZ2S1R0cFppaHRLWHRES0cxYk1GMHViR1Z1WjNSb0tUdGpiMjUwYVc1MVpYMTJZWElnZVQxbExtMWhkR05vS0ZSdktUdHBaaWg1S1h0MllYSWdaejFqTzBNb2VWc3dYUzVzWlc1bmRHZ3BMRUVvZVZzeFhTeG5MR01wTzJOdmJuUnBiblZsZlhaaGNpQmZQWGdvS1R0cFppaGZLWHRyS0Y4cExGSnZLRjh1ZEdGblRtRnRaU3hsS1NZbVF5Z3hLVHRqYjI1MGFXNTFaWDE5ZG1GeUlHSTlkbTlwWkNBd0xDUTlkbTlwWkNBd0xIYzlkbTlwWkNBd08ybG1LR1ErUFRBcGUyWnZjaWdrUFdVdWMyeHBZMlVvWkNrN0lTaFVieTUwWlhOMEtDUXBmSHhQYnk1MFpYTjBLQ1FwZkh4T2J5NTBaWE4wS0NRcGZIeHFieTUwWlhOMEtDUXBmSHdvZHowa0xtbHVaR1Y0VDJZb1hDSThYQ0lzTVNrcFBEQXBPeWxrS3oxM0xDUTlaUzV6YkdsalpTaGtLVHRpUFdVdWMzVmljM1J5YVc1bktEQXNaQ2w5WkR3d0ppWW9ZajFsS1N4aUppWkRLR0l1YkdWdVozUm9LU3gwTG1Ob1lYSnpKaVppSmlaMExtTm9ZWEp6S0dJc1l5MWlMbXhsYm1kMGFDeGpLWDFwWmlobFBUMDliaWw3ZEM1amFHRnljeVltZEM1amFHRnljeWhsS1R0aWNtVmhhMzE5Wm5WdVkzUnBiMjRnUXloMEtYdGpLejEwTEdVOVpTNXpkV0p6ZEhKcGJtY29kQ2w5Wm5WdVkzUnBiMjRnZUNncGUzWmhjaUIwUFdVdWJXRjBZMmdvVDI4cE8ybG1LSFFwZTNaaGNpQnVMSElzYVQxN2RHRm5UbUZ0WlRwMFd6RmRMR0YwZEhKek9sdGRMSE4wWVhKME9tTjlPMlp2Y2loREtIUmJNRjB1YkdWdVozUm9LVHNoS0c0OVpTNXRZWFJqYUNoVGJ5a3BKaVlvY2oxbExtMWhkR05vS0hodktYeDhaUzV0WVhSamFDaERieWtwT3lseUxuTjBZWEowUFdNc1F5aHlXekJkTG14bGJtZDBhQ2tzY2k1bGJtUTlZeXhwTG1GMGRISnpMbkIxYzJnb2NpazdhV1lvYmlseVpYUjFjbTRnYVM1MWJtRnllVk5zWVhOb1BXNWJNVjBzUXlodVd6QmRMbXhsYm1kMGFDa3NhUzVsYm1ROVl5eHBmWDFtZFc1amRHbHZiaUJyS0dVcGUzWmhjaUJ1UFdVdWRHRm5UbUZ0WlN4alBXVXVkVzVoY25sVGJHRnphRHR2SmlZb1hDSndYQ0k5UFQxeUppWjNieWh1S1NZbVFTaHlLU3h6S0c0cEppWnlQVDA5YmlZbVFTaHVLU2s3Wm05eUtIWmhjaUIxUFdFb2JpbDhmQ0VoWXl4c1BXVXVZWFIwY25NdWJHVnVaM1JvTEdZOWJtVjNJRUZ5Y21GNUtHd3BMSEE5TUR0d1BHdzdjQ3NyS1h0MllYSWdaRDFsTG1GMGRISnpXM0JkTEhZOVpGc3pYWHg4WkZzMFhYeDhaRnMxWFh4OFhDSmNJaXhvUFZ3aVlWd2lQVDA5YmlZbVhDSm9jbVZtWENJOVBUMWtXekZkUDNRdWMyaHZkV3hrUkdWamIyUmxUbVYzYkdsdVpYTkdiM0pJY21WbU9uUXVjMmh2ZFd4a1JHVmpiMlJsVG1WM2JHbHVaWE03Wmx0d1hUMTdibUZ0WlRwa1d6RmRMSFpoYkhWbE9raHZLSFlzYUNsOWZYVjhmQ2hwTG5CMWMyZ29lM1JoWnpwdUxHeHZkMlZ5UTJGelpXUlVZV2M2Ymk1MGIweHZkMlZ5UTJGelpTZ3BMR0YwZEhKek9tWXNjM1JoY25RNlpTNXpkR0Z5ZEN4bGJtUTZaUzVsYm1SOUtTeHlQVzRwTEhRdWMzUmhjblFtSm5RdWMzUmhjblFvYml4bUxIVXNaUzV6ZEdGeWRDeGxMbVZ1WkNsOVpuVnVZM1JwYjI0Z1FTaGxMRzRzYnlsN2RtRnlJR0VzY3p0cFppaHVkV3hzUFQxdUppWW9iajFqS1N4dWRXeHNQVDF2SmlZb2J6MWpLU3hsS1dadmNpaHpQV1V1ZEc5TWIzZGxja05oYzJVb0tTeGhQV2t1YkdWdVozUm9MVEU3WVQ0OU1DWW1hVnRoWFM1c2IzZGxja05oYzJWa1ZHRm5JVDA5Y3p0aExTMHBPMlZzYzJVZ1lUMHdPMmxtS0dFK1BUQXBlMlp2Y2loMllYSWdkVDFwTG14bGJtZDBhQzB4TzNVK1BXRTdkUzB0S1hRdVpXNWtKaVowTG1WdVpDaHBXM1ZkTG5SaFp5eHVMRzhwTzJrdWJHVnVaM1JvUFdFc2NqMWhKaVpwVzJFdE1WMHVkR0ZuZldWc2MyVmNJbUp5WENJOVBUMXpQM1F1YzNSaGNuUW1KblF1YzNSaGNuUW9aU3hiWFN3aE1DeHVMRzhwT2x3aWNGd2lQVDA5Y3lZbUtIUXVjM1JoY25RbUpuUXVjM1JoY25Rb1pTeGJYU3doTVN4dUxHOHBMSFF1Wlc1a0ppWjBMbVZ1WkNobExHNHNieWtwZlVFb0tYMG9aU3g3ZDJGeWJqcENieXhsZUhCbFkzUklWRTFNT25RdVpYaHdaV04wU0ZSTlRDeHBjMVZ1WVhKNVZHRm5PblF1YVhOVmJtRnllVlJoWnl4allXNUNaVXhsWm5SUGNHVnVWR0ZuT25RdVkyRnVRbVZNWldaMFQzQmxibFJoWnl4emFHOTFiR1JFWldOdlpHVk9aWGRzYVc1bGN6cDBMbk5vYjNWc1pFUmxZMjlrWlU1bGQyeHBibVZ6TEhOb2IzVnNaRVJsWTI5a1pVNWxkMnhwYm1WelJtOXlTSEpsWmpwMExuTm9iM1ZzWkVSbFkyOWtaVTVsZDJ4cGJtVnpSbTl5U0hKbFppeHphRzkxYkdSTFpXVndRMjl0YldWdWREcDBMbU52YlcxbGJuUnpMRzkxZEhCMWRGTnZkWEpqWlZKaGJtZGxPblF1YjNWMGNIVjBVMjkxY21ObFVtRnVaMlVzYzNSaGNuUTZablZ1WTNScGIyNG9aU3h2TEdFc2JDeG1LWHQyWVhJZ2NEMXlKaVp5TG01emZIeFhieWhsS1R0eEppWmNJbk4yWjF3aVBUMDljQ1ltS0c4OVpuVnVZM1JwYjI0b1pTbDdabTl5S0haaGNpQjBQVnRkTEc0OU1EdHVQR1V1YkdWdVozUm9PMjRyS3lsN2RtRnlJSEk5WlZ0dVhUdDVZUzUwWlhOMEtISXVibUZ0WlNsOGZDaHlMbTVoYldVOWNpNXVZVzFsTG5KbGNHeGhZMlVvWjJFc1hDSmNJaWtzZEM1d2RYTm9LSElwS1gxeVpYUjFjbTRnZEgwb2J5a3BPM1poY2lCa0xIWTlkV0VvWlN4dkxISXBPM0FtSmloMkxtNXpQWEFwTEZ3aWMzUjViR1ZjSWlFOVBTaGtQWFlwTG5SaFp5WW1LRndpYzJOeWFYQjBYQ0loUFQxa0xuUmhaM3g4WkM1aGRIUnljMDFoY0M1MGVYQmxKaVpjSW5SbGVIUXZhbUYyWVhOamNtbHdkRndpSVQwOVpDNWhkSFJ5YzAxaGNDNTBlWEJsS1h4OGRHVW9LWHg4S0hZdVptOXlZbWxrWkdWdVBTRXdLVHRtYjNJb2RtRnlJR2c5TUR0b1BGWnZMbXhsYm1kMGFEdG9LeXNwZGoxV2IxdG9YU2gyTEhRcGZIeDJPM044ZkNnaFpuVnVZM1JwYjI0b1pTbDdiblZzYkNFOVJuSW9aU3hjSW5ZdGNISmxYQ0lwSmlZb1pTNXdjbVU5SVRBcGZTaDJLU3gyTG5CeVpTWW1LSE05SVRBcEtTeEtieWgyTG5SaFp5a21KaWhqUFNFd0tTeHpQMloxYm1OMGFXOXVLR1VwZTNaaGNpQjBQV1V1WVhSMGNuTk1hWE4wTEc0OWRDNXNaVzVuZEdnN2FXWW9iaWxtYjNJb2RtRnlJSEk5WlM1aGRIUnljejF1WlhjZ1FYSnlZWGtvYmlrc2FUMHdPMms4Ymp0cEt5c3BjbHRwWFQxN2JtRnRaVHAwVzJsZExtNWhiV1VzZG1Gc2RXVTZTbE5QVGk1emRISnBibWRwWm5rb2RGdHBYUzUyWVd4MVpTbDlMRzUxYkd3aFBYUmJhVjB1YzNSaGNuUW1KaWh5VzJsZExuTjBZWEowUFhSYmFWMHVjM1JoY25Rc2NsdHBYUzVsYm1ROWRGdHBYUzVsYm1RcE8yVnNjMlVnWlM1d2NtVjhmQ2hsTG5Cc1lXbHVQU0V3S1gwb2RpazZkaTV3Y205alpYTnpaV1I4ZkNod1lTaDJLU3htZFc1amRHbHZiaWhsS1h0MllYSWdkRDFHY2lobExGd2lkaTFwWmx3aUtUdHBaaWgwS1dVdWFXWTlkQ3hrWVNobExIdGxlSEE2ZEN4aWJHOWphenBsZlNrN1pXeHpaWHR1ZFd4c0lUMUdjaWhsTEZ3aWRpMWxiSE5sWENJcEppWW9aUzVsYkhObFBTRXdLVHQyWVhJZ2JqMUdjaWhsTEZ3aWRpMWxiSE5sTFdsbVhDSXBPMjRtSmlobExtVnNjMlZwWmoxdUtYMTlLSFlwTEdaMWJtTjBhVzl1S0dVcGUyNTFiR3doUFVaeUtHVXNYQ0oyTFc5dVkyVmNJaWttSmlobExtOXVZMlU5SVRBcGZTaDJLU2tzYm54OEtHNDlkaWtzWVQ5MUtIWXBPaWh5UFhZc2FTNXdkWE5vS0hZcEtYMHNaVzVrT21aMWJtTjBhVzl1S0dVc2RDeHVLWHQyWVhJZ2J6MXBXMmt1YkdWdVozUm9MVEZkTzJrdWJHVnVaM1JvTFQweExISTlhVnRwTG14bGJtZDBhQzB4WFN4MUtHOHBmU3hqYUdGeWN6cG1kVzVqZEdsdmJpaGxMSFFzYmlsN2FXWW9jaVltS0NGeGZIeGNJblJsZUhSaGNtVmhYQ0loUFQxeUxuUmhaM3g4Y2k1aGRIUnljMDFoY0M1d2JHRmpaV2h2YkdSbGNpRTlQV1VwS1h0MllYSWdhU3gxTEd3c1pqMXlMbU5vYVd4a2NtVnVPMmxtS0dVOVkzeDhaUzUwY21sdEtDay9YQ0p6WTNKcGNIUmNJajA5UFNocFBYSXBMblJoWjN4OFhDSnpkSGxzWlZ3aVBUMDlhUzUwWVdjL1pUcHpZU2hsS1RwbUxteGxibWQwYUQ5aFAxd2lZMjl1WkdWdWMyVmNJajA5UFdFbUptOWhMblJsYzNRb1pTay9YQ0pjSWpwY0lpQmNJanB2UDF3aUlGd2lPbHdpWENJNlhDSmNJaWxqZkh4Y0ltTnZibVJsYm5ObFhDSWhQVDFoZkh3b1pUMWxMbkpsY0d4aFkyVW9ZV0VzWENJZ1hDSXBLU3doY3lZbVhDSWdYQ0loUFQxbEppWW9kVDFtZFc1amRHbHZiaWhsTEhRcGUzWmhjaUJ1UFhRL2FHOG9kQ2s2Y0c4N2FXWW9iaTUwWlhOMEtHVXBLWHRtYjNJb2RtRnlJSElzYVN4dkxHRTlXMTBzY3oxYlhTeGpQVzR1YkdGemRFbHVaR1Y0UFRBN2NqMXVMbVY0WldNb1pTazdLWHNvYVQxeUxtbHVaR1Y0S1Q1akppWW9jeTV3ZFhOb0tHODlaUzV6YkdsalpTaGpMR2twS1N4aExuQjFjMmdvU2xOUFRpNXpkSEpwYm1kcFpua29ieWtwS1R0MllYSWdkVDFCY2loeVd6RmRMblJ5YVcwb0tTazdZUzV3ZFhOb0tGd2lYM01vWENJcmRTdGNJaWxjSWlrc2N5NXdkWE5vS0h0Y0lrQmlhVzVrYVc1blhDSTZkWDBwTEdNOWFTdHlXekJkTG14bGJtZDBhSDF5WlhSMWNtNGdZenhsTG14bGJtZDBhQ1ltS0hNdWNIVnphQ2h2UFdVdWMyeHBZMlVvWXlrcExHRXVjSFZ6YUNoS1UwOU9Mbk4wY21sdVoybG1lU2h2S1NrcExIdGxlSEJ5WlhOemFXOXVPbUV1YW05cGJpaGNJaXRjSWlrc2RHOXJaVzV6T25OOWZYMG9aU3hWYnlrcFAydzllM1I1Y0dVNk1peGxlSEJ5WlhOemFXOXVPblV1Wlhod2NtVnpjMmx2Yml4MGIydGxibk02ZFM1MGIydGxibk1zZEdWNGREcGxmVHBjSWlCY0lqMDlQV1VtSm1ZdWJHVnVaM1JvSmlaY0lpQmNJajA5UFdaYlppNXNaVzVuZEdndE1WMHVkR1Y0ZEh4OEtHdzllM1I1Y0dVNk15eDBaWGgwT21WOUtTeHNKaVptTG5CMWMyZ29iQ2w5ZlN4amIyMXRaVzUwT21aMWJtTjBhVzl1S0dVc2RDeHVLWHRwWmloeUtYdDJZWElnYVQxN2RIbHdaVG96TEhSbGVIUTZaU3hwYzBOdmJXMWxiblE2SVRCOU8zSXVZMmhwYkdSeVpXNHVjSFZ6YUNocEtYMTlmU2tzYm4xbWRXNWpkR2x2YmlCbVlTaGxMSFFwZTNaaGNpQnVMSEk3S0hJOVNYSW9iajFsTEZ3aWEyVjVYQ0lwS1NZbUtHNHVhMlY1UFhJcExHVXVjR3hoYVc0OUlXVXVhMlY1SmlZaFpTNXpZMjl3WldSVGJHOTBjeVltSVdVdVlYUjBjbk5NYVhOMExteGxibWQwYUN4bWRXNWpkR2x2YmlobEtYdDJZWElnZEQxSmNpaGxMRndpY21WbVhDSXBPM1FtSmlobExuSmxaajEwTEdVdWNtVm1TVzVHYjNJOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVpUdG1iM0lvTzNRN0tYdHBaaWgyYjJsa0lEQWhQVDEwTG1admNpbHlaWFIxY200aE1EdDBQWFF1Y0dGeVpXNTBmWEpsZEhWeWJpRXhmU2hsS1NsOUtHVXBMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBPMXdpZEdWdGNHeGhkR1ZjSWowOVBXVXVkR0ZuUHloMFBVWnlLR1VzWENKelkyOXdaVndpS1N4bExuTnNiM1JUWTI5d1pUMTBmSHhHY2lobExGd2ljMnh2ZEMxelkyOXdaVndpS1NrNktIUTlSbklvWlN4Y0luTnNiM1F0YzJOdmNHVmNJaWtwSmlZb1pTNXpiRzkwVTJOdmNHVTlkQ2s3ZG1GeUlHNDlTWElvWlN4Y0luTnNiM1JjSWlrN2JpWW1LR1V1YzJ4dmRGUmhjbWRsZEQwblhDSmNJaWM5UFQxdVB5ZGNJbVJsWm1GMWJIUmNJaWM2Yml4bExuTnNiM1JVWVhKblpYUkVlVzVoYldsalBTRW9JV1V1WVhSMGNuTk5ZWEJiWENJNmMyeHZkRndpWFNZbUlXVXVZWFIwY25OTllYQmJYQ0oyTFdKcGJtUTZjMnh2ZEZ3aVhTa3NYQ0owWlcxd2JHRjBaVndpUFQwOVpTNTBZV2Q4ZkdVdWMyeHZkRk5qYjNCbGZIeE9jaWhsTEZ3aWMyeHZkRndpTEc0c1puVnVZM1JwYjI0b1pTeDBLWHR5WlhSMWNtNGdaUzV5WVhkQmRIUnljMDFoY0Z0Y0lqcGNJaXQwWFh4OFpTNXlZWGRCZEhSeWMwMWhjRnRjSW5ZdFltbHVaRHBjSWl0MFhYeDhaUzV5WVhkQmRIUnljMDFoY0Z0MFhYMG9aU3hjSW5Oc2IzUmNJaWtwS1R0cFppaGNJblJsYlhCc1lYUmxYQ0k5UFQxbExuUmhaeWw3ZG1GeUlISTlVSElvWlN4cFlTazdhV1lvY2lsN2RtRnlJR2s5ZG1Fb2Npa3NiejFwTG01aGJXVXNZVDFwTG1SNWJtRnRhV003WlM1emJHOTBWR0Z5WjJWMFBXOHNaUzV6Ykc5MFZHRnlaMlYwUkhsdVlXMXBZejFoTEdVdWMyeHZkRk5qYjNCbFBYSXVkbUZzZFdWOGZHTmhmWDFsYkhObGUzWmhjaUJ6UFZCeUtHVXNhV0VwTzJsbUtITXBlM1poY2lCalBXVXVjMk52Y0dWa1UyeHZkSE44ZkNobExuTmpiM0JsWkZOc2IzUnpQWHQ5S1N4MVBYWmhLSE1wTEd3OWRTNXVZVzFsTEdZOWRTNWtlVzVoYldsakxIQTlZMXRzWFQxMVlTaGNJblJsYlhCc1lYUmxYQ0lzVzEwc1pTazdjQzV6Ykc5MFZHRnlaMlYwUFd3c2NDNXpiRzkwVkdGeVoyVjBSSGx1WVcxcFl6MW1MSEF1WTJocGJHUnlaVzQ5WlM1amFHbHNaSEpsYmk1bWFXeDBaWElvWm5WdVkzUnBiMjRvWlNsN2FXWW9JV1V1YzJ4dmRGTmpiM0JsS1hKbGRIVnliaUJsTG5CaGNtVnVkRDF3TENFd2ZTa3NjQzV6Ykc5MFUyTnZjR1U5Y3k1MllXeDFaWHg4WTJFc1pTNWphR2xzWkhKbGJqMWJYU3hsTG5Cc1lXbHVQU0V4ZlgxOUtHVXBMR1oxYm1OMGFXOXVLR1VwZTF3aWMyeHZkRndpUFQwOVpTNTBZV2NtSmlobExuTnNiM1JPWVcxbFBVbHlLR1VzWENKdVlXMWxYQ0lwS1gwb1pTa3NablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTdLSFE5U1hJb1pTeGNJbWx6WENJcEtTWW1LR1V1WTI5dGNHOXVaVzUwUFhRcE8yNTFiR3doUFVaeUtHVXNYQ0pwYm14cGJtVXRkR1Z0Y0d4aGRHVmNJaWttSmlobExtbHViR2x1WlZSbGJYQnNZWFJsUFNFd0tYMG9aU2s3Wm05eUtIWmhjaUJwUFRBN2FUeDZieTVzWlc1bmRHZzdhU3NyS1dVOWVtOWJhVjBvWlN4MEtYeDhaVHR5WlhSMWNtNGdablZ1WTNScGIyNG9aU2w3ZG1GeUlIUXNiaXh5TEdrc2J5eGhMSE1zWXl4MVBXVXVZWFIwY25OTWFYTjBPMlp2Y2loMFBUQXNiajExTG14bGJtZDBhRHQwUEc0N2RDc3JLV2xtS0hJOWFUMTFXM1JkTG01aGJXVXNiejExVzNSZExuWmhiSFZsTEVkdkxuUmxjM1FvY2lrcGFXWW9aUzVvWVhOQ2FXNWthVzVuY3owaE1Dd29ZVDFvWVNoeUxuSmxjR3hoWTJVb1IyOHNYQ0pjSWlrcEtTWW1LSEk5Y2k1eVpYQnNZV05sS0hKaExGd2lYQ0lwS1N4dVlTNTBaWE4wS0hJcEtYSTljaTV5WlhCc1lXTmxLRzVoTEZ3aVhDSXBMRzg5UVhJb2J5a3NLR005WldFdWRHVnpkQ2h5S1NrbUppaHlQWEl1YzJ4cFkyVW9NU3d0TVNrcExHRW1KaWhoTG5CeWIzQW1KaUZqSmlaY0ltbHVibVZ5U0hSdGJGd2lQVDA5S0hJOVlpaHlLU2ttSmloeVBWd2lhVzV1WlhKSVZFMU1YQ0lwTEdFdVkyRnRaV3dtSmlGakppWW9jajFpS0hJcEtTeGhMbk41Ym1NbUppaHpQVUp5S0c4c1hDSWtaWFpsYm5SY0lpa3NZejlOY2lobExDZGNJblZ3WkdGMFpUcGNJaXNvSnl0eUsxd2lLVndpTEhNc2JuVnNiQ3doTVN3d0xIVmJkRjBzSVRBcE9paE5jaWhsTEZ3aWRYQmtZWFJsT2x3aUsySW9jaWtzY3l4dWRXeHNMQ0V4TERBc2RWdDBYU2tzUXloeUtTRTlQV0lvY2lrbUprMXlLR1VzWENKMWNHUmhkR1U2WENJclF5aHlLU3h6TEc1MWJHd3NJVEVzTUN4MVczUmRLU2twS1N4aEppWmhMbkJ5YjNCOGZDRmxMbU52YlhCdmJtVnVkQ1ltY1c4b1pTNTBZV2NzWlM1aGRIUnljMDFoY0M1MGVYQmxMSElwUDBWeUtHVXNjaXh2TEhWYmRGMHNZeWs2VG5Jb1pTeHlMRzhzZFZ0MFhTeGpLVHRsYkhObElHbG1LRnB2TG5SbGMzUW9jaWtwY2oxeUxuSmxjR3hoWTJVb1dtOHNYQ0pjSWlrc0tHTTlaV0V1ZEdWemRDaHlLU2ttSmloeVBYSXVjMnhwWTJVb01Td3RNU2twTEUxeUtHVXNjaXh2TEdFc0lURXNNQ3gxVzNSZExHTXBPMlZzYzJWN2RtRnlJR3c5S0hJOWNpNXlaWEJzWVdObEtFZHZMRndpWENJcEtTNXRZWFJqYUNoMFlTa3NaajFzSmlac1d6RmRPMk05SVRFc1ppWW1LSEk5Y2k1emJHbGpaU2d3TEMwb1ppNXNaVzVuZEdnck1Ta3BMR1ZoTG5SbGMzUW9aaWttSmlobVBXWXVjMnhwWTJVb01Td3RNU2tzWXowaE1Da3BMRVJ5S0dVc2NpeHBMRzhzWml4akxHRXNkVnQwWFNsOVpXeHpaU0JPY2lobExISXNTbE5QVGk1emRISnBibWRwWm5rb2J5a3NkVnQwWFNrc0lXVXVZMjl0Y0c5dVpXNTBKaVpjSW0xMWRHVmtYQ0k5UFQxeUppWnhieWhsTG5SaFp5eGxMbUYwZEhKelRXRndMblI1Y0dVc2Npa21Ka1Z5S0dVc2NpeGNJblJ5ZFdWY0lpeDFXM1JkS1gwb1pTa3NaWDFtZFc1amRHbHZiaUJ3WVNobEtYdDJZWElnZER0cFppaDBQVVp5S0dVc1hDSjJMV1p2Y2x3aUtTbDdkbUZ5SUc0OVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVpTNXRZWFJqYUNoWWJ5azdhV1lvSVhRcGNtVjBkWEp1TzNaaGNpQnVQWHQ5TzI0dVptOXlQWFJiTWwwdWRISnBiU2dwTzNaaGNpQnlQWFJiTVYwdWRISnBiU2dwTG5KbGNHeGhZMlVvVVc4c1hDSmNJaWtzYVQxeUxtMWhkR05vS0ZsdktUdHBQeWh1TG1Gc2FXRnpQWEl1Y21Wd2JHRmpaU2haYnl4Y0lsd2lLUzUwY21sdEtDa3NiaTVwZEdWeVlYUnZjakU5YVZzeFhTNTBjbWx0S0Nrc2FWc3lYU1ltS0c0dWFYUmxjbUYwYjNJeVBXbGJNbDB1ZEhKcGJTZ3BLU2s2Ymk1aGJHbGhjejF5TzNKbGRIVnliaUJ1ZlNoMEtUdHVKaVpCS0dVc2JpbDlmV1oxYm1OMGFXOXVJR1JoS0dVc2RDbDdaUzVwWmtOdmJtUnBkR2x2Ym5OOGZDaGxMbWxtUTI5dVpHbDBhVzl1Y3oxYlhTa3NaUzVwWmtOdmJtUnBkR2x2Ym5NdWNIVnphQ2gwS1gxbWRXNWpkR2x2YmlCMllTaGxLWHQyWVhJZ2REMWxMbTVoYldVdWNtVndiR0ZqWlNocFlTeGNJbHdpS1R0eVpYUjFjbTRnZEh4OFhDSWpYQ0loUFQxbExtNWhiV1ZiTUYwbUppaDBQVndpWkdWbVlYVnNkRndpS1N4bFlTNTBaWE4wS0hRcFAzdHVZVzFsT25RdWMyeHBZMlVvTVN3dE1Ta3NaSGx1WVcxcFl6b2hNSDA2ZTI1aGJXVTZKMXdpSnl0MEt5ZGNJaWNzWkhsdVlXMXBZem9oTVgxOVpuVnVZM1JwYjI0Z2FHRW9aU2w3ZG1GeUlIUTlaUzV0WVhSamFDaHlZU2s3YVdZb2RDbDdkbUZ5SUc0OWUzMDdjbVYwZFhKdUlIUXVabTl5UldGamFDaG1kVzVqZEdsdmJpaGxLWHR1VzJVdWMyeHBZMlVvTVNsZFBTRXdmU2tzYm4xOVpuVnVZM1JwYjI0Z2JXRW9aU2w3Wm05eUtIWmhjaUIwUFh0OUxHNDlNQ3h5UFdVdWJHVnVaM1JvTzI0OGNqdHVLeXNwZEZ0bFcyNWRMbTVoYldWZFBXVmJibDB1ZG1Gc2RXVTdjbVYwZFhKdUlIUjlkbUZ5SUhsaFBTOWVlRzFzYm5NNlRsTmNYR1FyTHl4bllUMHZYazVUWEZ4a0t6b3ZPMloxYm1OMGFXOXVJRjloS0dVcGUzSmxkSFZ5YmlCMVlTaGxMblJoWnl4bExtRjBkSEp6VEdsemRDNXpiR2xqWlNncExHVXVjR0Z5Wlc1MEtYMTJZWElnWW1FOVcyMXZMR2R2TEh0d2NtVlVjbUZ1YzJadmNtMU9iMlJsT21aMWJtTjBhVzl1S0dVc2RDbDdhV1lvWENKcGJuQjFkRndpUFQwOVpTNTBZV2NwZTNaaGNpQnVMSEk5WlM1aGRIUnljMDFoY0R0cFppZ2hjbHRjSW5ZdGJXOWtaV3hjSWwwcGNtVjBkWEp1TzJsbUtDaHlXMXdpT25SNWNHVmNJbDE4ZkhKYlhDSjJMV0pwYm1RNmRIbHdaVndpWFNrbUppaHVQVWx5S0dVc1hDSjBlWEJsWENJcEtTeHlMblI1Y0dWOGZHNThmQ0Z5VzF3aWRpMWlhVzVrWENKZGZId29iajFjSWloY0lpdHlXMXdpZGkxaWFXNWtYQ0pkSzF3aUtTNTBlWEJsWENJcExHNHBlM1poY2lCcFBVWnlLR1VzWENKMkxXbG1YQ0lzSVRBcExHODlhVDljSWlZbUtGd2lLMmtyWENJcFhDSTZYQ0pjSWl4aFBXNTFiR3doUFVaeUtHVXNYQ0oyTFdWc2MyVmNJaXdoTUNrc2N6MUdjaWhsTEZ3aWRpMWxiSE5sTFdsbVhDSXNJVEFwTEdNOVgyRW9aU2s3Y0dFb1l5a3NhbklvWXl4Y0luUjVjR1ZjSWl4Y0ltTm9aV05yWW05NFhDSXBMR1poS0dNc2RDa3NZeTV3Y205alpYTnpaV1E5SVRBc1l5NXBaajFjSWloY0lpdHVLMXdpS1QwOVBTZGphR1ZqYTJKdmVDZGNJaXR2TEdSaEtHTXNlMlY0Y0RwakxtbG1MR0pzYjJOck9tTjlLVHQyWVhJZ2RUMWZZU2hsS1R0R2NpaDFMRndpZGkxbWIzSmNJaXdoTUNrc2FuSW9kU3hjSW5SNWNHVmNJaXhjSW5KaFpHbHZYQ0lwTEdaaEtIVXNkQ2tzWkdFb1l5eDdaWGh3T2x3aUtGd2lLMjRyWENJcFBUMDlKM0poWkdsdkoxd2lLMjhzWW14dlkyczZkWDBwTzNaaGNpQnNQVjloS0dVcE8zSmxkSFZ5YmlCR2NpaHNMRndpZGkxbWIzSmNJaXdoTUNrc2FuSW9iQ3hjSWpwMGVYQmxYQ0lzYmlrc1ptRW9iQ3gwS1N4a1lTaGpMSHRsZUhBNmFTeGliRzlqYXpwc2ZTa3NZVDlqTG1Wc2MyVTlJVEE2Y3lZbUtHTXVaV3h6WldsbVBYTXBMR045ZlgxOVhUdDJZWElnSkdFc2QyRXNRMkU5ZTJWNGNHVmpkRWhVVFV3NklUQXNiVzlrZFd4bGN6cGlZU3hrYVhKbFkzUnBkbVZ6T250dGIyUmxiRHBtZFc1amRHbHZiaWhsTEhRc2JpbDdkbUZ5SUhJOWRDNTJZV3gxWlN4cFBYUXViVzlrYVdacFpYSnpMRzg5WlM1MFlXY3NZVDFsTG1GMGRISnpUV0Z3TG5SNWNHVTdhV1lvWlM1amIyMXdiMjVsYm5RcGNtVjBkWEp1SUVoeUtHVXNjaXhwS1N3aE1UdHBaaWhjSW5ObGJHVmpkRndpUFQwOWJ5a2hablZ1WTNScGIyNG9aU3gwTEc0cGUzWmhjaUJ5UFNkMllYSWdKQ1J6Wld4bFkzUmxaRlpoYkNBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFXeDBaWEl1WTJGc2JDZ2taWFpsYm5RdWRHRnlaMlYwTG05d2RHbHZibk1zWm5WdVkzUnBiMjRvYnlsN2NtVjBkWEp1SUc4dWMyVnNaV04wWldSOUtTNXRZWEFvWm5WdVkzUnBiMjRvYnlsN2RtRnlJSFpoYkNBOUlGd2lYM1poYkhWbFhDSWdhVzRnYnlBL0lHOHVYM1poYkhWbElEb2dieTUyWVd4MVpUdHlaWFIxY200Z0p5c29iaVltYmk1dWRXMWlaWEkvWENKZmJpaDJZV3dwWENJNlhDSjJZV3hjSWlrclhDSjlLVHRjSWp0eVBYSXJYQ0lnWENJclFuSW9kQ3hjSWlSbGRtVnVkQzUwWVhKblpYUXViWFZzZEdsd2JHVWdQeUFrSkhObGJHVmpkR1ZrVm1Gc0lEb2dKQ1J6Wld4bFkzUmxaRlpoYkZzd1hWd2lLU3hOY2lobExGd2lZMmhoYm1kbFhDSXNjaXh1ZFd4c0xDRXdLWDBvWlN4eUxHa3BPMlZzYzJVZ2FXWW9YQ0pwYm5CMWRGd2lQVDA5YnlZbVhDSmphR1ZqYTJKdmVGd2lQVDA5WVNraFpuVnVZM1JwYjI0b1pTeDBMRzRwZTNaaGNpQnlQVzRtSm00dWJuVnRZbVZ5TEdrOVNYSW9aU3hjSW5aaGJIVmxYQ0lwZkh4Y0ltNTFiR3hjSWl4dlBVbHlLR1VzWENKMGNuVmxMWFpoYkhWbFhDSXBmSHhjSW5SeWRXVmNJaXhoUFVseUtHVXNYQ0ptWVd4elpTMTJZV3gxWlZ3aUtYeDhYQ0ptWVd4elpWd2lPMFZ5S0dVc1hDSmphR1ZqYTJWa1hDSXNYQ0pCY25KaGVTNXBjMEZ5Y21GNUtGd2lLM1FyWENJcFAxOXBLRndpSzNRclhDSXNYQ0lyYVN0Y0lpaytMVEZjSWlzb1hDSjBjblZsWENJOVBUMXZQMXdpT2loY0lpdDBLMXdpS1Z3aU9sd2lPbDl4S0Z3aUszUXJYQ0lzWENJcmJ5dGNJaWxjSWlrcExFMXlLR1VzWENKamFHRnVaMlZjSWl4Y0luWmhjaUFrSkdFOVhDSXJkQ3RjSWl3a0pHVnNQU1JsZG1WdWRDNTBZWEpuWlhRc0pDUmpQU1FrWld3dVkyaGxZMnRsWkQ4b1hDSXJieXRjSWlrNktGd2lLMkVyWENJcE8ybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb0pDUmhLU2w3ZG1GeUlDUWtkajFjSWlzb2NqOWNJbDl1S0Z3aUsya3JYQ0lwWENJNmFTa3JYQ0lzSkNScFBWOXBLQ1FrWVN3a0pIWXBPMmxtS0NRa1pXd3VZMmhsWTJ0bFpDbDdKQ1JwUERBbUppaGNJaXRDY2loMExGd2lKQ1JoTG1OdmJtTmhkQ2hiSkNSMlhTbGNJaWtyWENJcGZXVnNjMlY3SkNScFBpMHhKaVlvWENJclFuSW9kQ3hjSWlRa1lTNXpiR2xqWlNnd0xDUWthU2t1WTI5dVkyRjBLQ1FrWVM1emJHbGpaU2drSkdrck1Ta3BYQ0lwSzF3aUtYMTlaV3h6Wlh0Y0lpdENjaWgwTEZ3aUpDUmpYQ0lwSzF3aWZWd2lMRzUxYkd3c0lUQXBmU2hsTEhJc2FTazdaV3h6WlNCcFppaGNJbWx1Y0hWMFhDSTlQVDF2SmlaY0luSmhaR2x2WENJOVBUMWhLU0ZtZFc1amRHbHZiaWhsTEhRc2JpbDdkbUZ5SUhJOWJpWW1iaTV1ZFcxaVpYSXNhVDFKY2lobExGd2lkbUZzZFdWY0lpbDhmRndpYm5Wc2JGd2lPMFZ5S0dVc1hDSmphR1ZqYTJWa1hDSXNYQ0pmY1NoY0lpdDBLMXdpTEZ3aUt5aHBQWEkvWENKZmJpaGNJaXRwSzF3aUtWd2lPbWtwSzF3aUtWd2lLU3hOY2lobExGd2lZMmhoYm1kbFhDSXNRbklvZEN4cEtTeHVkV3hzTENFd0tYMG9aU3h5TEdrcE8yVnNjMlVnYVdZb1hDSnBibkIxZEZ3aVBUMDliM3g4WENKMFpYaDBZWEpsWVZ3aVBUMDlieWtoWm5WdVkzUnBiMjRvWlN4MExHNHBlM1poY2lCeVBXVXVZWFIwY25OTllYQXVkSGx3WlN4cFBXNThmSHQ5TEc4OWFTNXNZWHA1TEdFOWFTNXVkVzFpWlhJc2N6MXBMblJ5YVcwc1l6MGhieVltWENKeVlXNW5aVndpSVQwOWNpeDFQVzgvWENKamFHRnVaMlZjSWpwY0luSmhibWRsWENJOVBUMXlQMWR5T2x3aWFXNXdkWFJjSWl4c1BWd2lKR1YyWlc1MExuUmhjbWRsZEM1MllXeDFaVndpTzNNbUppaHNQVndpSkdWMlpXNTBMblJoY21kbGRDNTJZV3gxWlM1MGNtbHRLQ2xjSWlrc1lTWW1LR3c5WENKZmJpaGNJaXRzSzF3aUtWd2lLVHQyWVhJZ1pqMUNjaWgwTEd3cE8yTW1KaWhtUFZ3aWFXWW9KR1YyWlc1MExuUmhjbWRsZEM1amIyMXdiM05wYm1jcGNtVjBkWEp1TzF3aUsyWXBMRVZ5S0dVc1hDSjJZV3gxWlZ3aUxGd2lLRndpSzNRclhDSXBYQ0lwTEUxeUtHVXNkU3htTEc1MWJHd3NJVEFwTENoemZIeGhLU1ltVFhJb1pTeGNJbUpzZFhKY0lpeGNJaVJtYjNKalpWVndaR0YwWlNncFhDSXBmU2hsTEhJc2FTazdaV3h6WlNCcFppZ2hSaTVwYzFKbGMyVnlkbVZrVkdGbktHOHBLWEpsZEhWeWJpQkljaWhsTEhJc2FTa3NJVEU3Y21WMGRYSnVJVEI5TEhSbGVIUTZablZ1WTNScGIyNG9aU3gwS1h0MExuWmhiSFZsSmlaRmNpaGxMRndpZEdWNGRFTnZiblJsYm5SY0lpeGNJbDl6S0Z3aUszUXVkbUZzZFdVclhDSXBYQ0lzZENsOUxHaDBiV3c2Wm5WdVkzUnBiMjRvWlN4MEtYdDBMblpoYkhWbEppWkZjaWhsTEZ3aWFXNXVaWEpJVkUxTVhDSXNYQ0pmY3loY0lpdDBMblpoYkhWbEsxd2lLVndpTEhRcGZYMHNhWE5RY21WVVlXYzZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0p3Y21WY0lqMDlQV1Y5TEdselZXNWhjbmxVWVdjNlltOHNiWFZ6ZEZWelpWQnliM0E2YW00c1kyRnVRbVZNWldaMFQzQmxibFJoWnpva2J5eHBjMUpsYzJWeWRtVmtWR0ZuT2xkdUxHZGxkRlJoWjA1aGJXVnpjR0ZqWlRwYWJpeHpkR0YwYVdOTFpYbHpPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsTG5KbFpIVmpaU2htZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCbExtTnZibU5oZENoMExuTjBZWFJwWTB0bGVYTjhmRnRkS1gwc1cxMHBMbXB2YVc0b1hDSXNYQ0lwZlNoaVlTbDlMSGhoUFdjb1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlIQW9YQ0owZVhCbExIUmhaeXhoZEhSeWMweHBjM1FzWVhSMGNuTk5ZWEFzY0d4aGFXNHNjR0Z5Wlc1MExHTm9hV3hrY21WdUxHRjBkSEp6TEhOMFlYSjBMR1Z1WkN4eVlYZEJkSFJ5YzAxaGNGd2lLeWhsUDF3aUxGd2lLMlU2WENKY0lpa3BmU2s3Wm5WdVkzUnBiMjRnYTJFb1pTeDBLWHRsSmlZb0pHRTllR0VvZEM1emRHRjBhV05MWlhsemZIeGNJbHdpS1N4M1lUMTBMbWx6VW1WelpYSjJaV1JVWVdkOGZGUXNablZ1WTNScGIyNGdaU2gwS1h0MExuTjBZWFJwWXoxbWRXNWpkR2x2YmlobEtYdHBaaWd5UFQwOVpTNTBlWEJsS1hKbGRIVnliaUV4TzJsbUtETTlQVDFsTG5SNWNHVXBjbVYwZFhKdUlUQTdjbVYwZFhKdUlTZ2haUzV3Y21VbUppaGxMbWhoYzBKcGJtUnBibWR6Zkh4bExtbG1mSHhsTG1admNueDhaQ2hsTG5SaFp5bDhmQ0YzWVNobExuUmhaeWw4ZkdaMWJtTjBhVzl1S0dVcGUyWnZjaWc3WlM1d1lYSmxiblE3S1h0cFppaGNJblJsYlhCc1lYUmxYQ0loUFQwb1pUMWxMbkJoY21WdWRDa3VkR0ZuS1hKbGRIVnliaUV4TzJsbUtHVXVabTl5S1hKbGRIVnliaUV3ZlhKbGRIVnliaUV4ZlNobEtYeDhJVTlpYW1WamRDNXJaWGx6S0dVcExtVjJaWEo1S0NSaEtTa3BmU2gwS1R0cFppZ3hQVDA5ZEM1MGVYQmxLWHRwWmlnaGQyRW9kQzUwWVdjcEppWmNJbk5zYjNSY0lpRTlQWFF1ZEdGbkppWnVkV3hzUFQxMExtRjBkSEp6VFdGd1cxd2lhVzVzYVc1bExYUmxiWEJzWVhSbFhDSmRLWEpsZEhWeWJqdG1iM0lvZG1GeUlHNDlNQ3h5UFhRdVkyaHBiR1J5Wlc0dWJHVnVaM1JvTzI0OGNqdHVLeXNwZTNaaGNpQnBQWFF1WTJocGJHUnlaVzViYmwwN1pTaHBLU3hwTG5OMFlYUnBZM3g4S0hRdWMzUmhkR2xqUFNFeEtYMXBaaWgwTG1sbVEyOXVaR2wwYVc5dWN5bG1iM0lvZG1GeUlHODlNU3hoUFhRdWFXWkRiMjVrYVhScGIyNXpMbXhsYm1kMGFEdHZQR0U3YnlzcktYdDJZWElnY3oxMExtbG1RMjl1WkdsMGFXOXVjMXR2WFM1aWJHOWphenRsS0hNcExITXVjM1JoZEdsamZId29kQzV6ZEdGMGFXTTlJVEVwZlgxOUtHVXBMR1oxYm1OMGFXOXVJR1VvZEN4dUtYdHBaaWd4UFQwOWRDNTBlWEJsS1h0cFppZ29kQzV6ZEdGMGFXTjhmSFF1YjI1alpTa21KaWgwTG5OMFlYUnBZMGx1Um05eVBXNHBMSFF1YzNSaGRHbGpKaVowTG1Ob2FXeGtjbVZ1TG14bGJtZDBhQ1ltS0RFaFBUMTBMbU5vYVd4a2NtVnVMbXhsYm1kMGFIeDhNeUU5UFhRdVkyaHBiR1J5Wlc1Yk1GMHVkSGx3WlNrcGNtVjBkWEp1SUhadmFXUW9kQzV6ZEdGMGFXTlNiMjkwUFNFd0tUdHBaaWgwTG5OMFlYUnBZMUp2YjNROUlURXNkQzVqYUdsc1pISmxiaWxtYjNJb2RtRnlJSEk5TUN4cFBYUXVZMmhwYkdSeVpXNHViR1Z1WjNSb08zSThhVHR5S3lzcFpTaDBMbU5vYVd4a2NtVnVXM0pkTEc1OGZDRWhkQzVtYjNJcE8ybG1LSFF1YVdaRGIyNWthWFJwYjI1ektXWnZjaWgyWVhJZ2J6MHhMR0U5ZEM1cFprTnZibVJwZEdsdmJuTXViR1Z1WjNSb08yODhZVHR2S3lzcFpTaDBMbWxtUTI5dVpHbDBhVzl1YzF0dlhTNWliRzlqYXl4dUtYMTlLR1VzSVRFcEtYMTJZWElnUVdFOUwxNG9XMXhjZHlSZlhTdDhYRndvVzE0cFhTby9YRndwS1Z4Y2N5bzlQbnhlWm5WdVkzUnBiMjVjWEhNcUtEODZXMXhjZHlSZEt5ay9YRnh6S2x4Y0tDOHNUMkU5TDF4Y0tGdGVLVjBxUDF4Y0tUc3FKQzhzVTJFOUwxNWJRUzFhWVMxNlh5UmRXMXhjZHlSZEtpZy9PbHhjTGx0QkxWcGhMWHBmSkYxYlhGeDNKRjBxZkZ4Y1d5ZGJYaWRkS2o4blhYeGNYRnRjSWx0ZVhDSmRLajljSWwxOFhGeGJYRnhrSzExOFhGeGJXMEV0V21FdGVsOGtYVnRjWEhja1hTcGRLU29rTHl4VVlUMTdaWE5qT2pJM0xIUmhZam81TEdWdWRHVnlPakV6TEhOd1lXTmxPak15TEhWd09qTTRMR3hsWm5RNk16Y3NjbWxuYUhRNk16a3NaRzkzYmpvME1DeGtaV3hsZEdVNld6Z3NORFpkZlN4RllUMTdaWE5qT2x0Y0lrVnpZMXdpTEZ3aVJYTmpZWEJsWENKZExIUmhZanBjSWxSaFlsd2lMR1Z1ZEdWeU9sd2lSVzUwWlhKY0lpeHpjR0ZqWlRwYlhDSWdYQ0lzWENKVGNHRmpaV0poY2x3aVhTeDFjRHBiWENKVmNGd2lMRndpUVhKeWIzZFZjRndpWFN4c1pXWjBPbHRjSWt4bFpuUmNJaXhjSWtGeWNtOTNUR1ZtZEZ3aVhTeHlhV2RvZERwYlhDSlNhV2RvZEZ3aUxGd2lRWEp5YjNkU2FXZG9kRndpWFN4a2IzZHVPbHRjSWtSdmQyNWNJaXhjSWtGeWNtOTNSRzkzYmx3aVhTeGtaV3hsZEdVNlcxd2lRbUZqYTNOd1lXTmxYQ0lzWENKRVpXeGxkR1ZjSWl4Y0lrUmxiRndpWFgwc1RtRTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0pwWmloY0lpdGxLMXdpS1hKbGRIVnliaUJ1ZFd4c08xd2lmU3hxWVQxN2MzUnZjRHBjSWlSbGRtVnVkQzV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LVHRjSWl4d2NtVjJaVzUwT2x3aUpHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WENJc2MyVnNaanBPWVNoY0lpUmxkbVZ1ZEM1MFlYSm5aWFFnSVQwOUlDUmxkbVZ1ZEM1amRYSnlaVzUwVkdGeVoyVjBYQ0lwTEdOMGNtdzZUbUVvWENJaEpHVjJaVzUwTG1OMGNteExaWGxjSWlrc2MyaHBablE2VG1Fb1hDSWhKR1YyWlc1MExuTm9hV1owUzJWNVhDSXBMR0ZzZERwT1lTaGNJaUVrWlhabGJuUXVZV3gwUzJWNVhDSXBMRzFsZEdFNlRtRW9YQ0loSkdWMlpXNTBMbTFsZEdGTFpYbGNJaWtzYkdWbWREcE9ZU2hjSWlkaWRYUjBiMjRuSUdsdUlDUmxkbVZ1ZENBbUppQWtaWFpsYm5RdVluVjBkRzl1SUNFOVBTQXdYQ0lwTEcxcFpHUnNaVHBPWVNoY0lpZGlkWFIwYjI0bklHbHVJQ1JsZG1WdWRDQW1KaUFrWlhabGJuUXVZblYwZEc5dUlDRTlQU0F4WENJcExISnBaMmgwT2s1aEtGd2lKMkoxZEhSdmJpY2dhVzRnSkdWMlpXNTBJQ1ltSUNSbGRtVnVkQzVpZFhSMGIyNGdJVDA5SURKY0lpbDlPMloxYm1OMGFXOXVJRVJoS0dVc2RDbDdkbUZ5SUc0OWREOWNJbTVoZEdsMlpVOXVPbHdpT2x3aWIyNDZYQ0lzY2oxY0lsd2lMR2s5WENKY0lqdG1iM0lvZG1GeUlHOGdhVzRnWlNsN2RtRnlJR0U5VEdFb1pWdHZYU2s3WlZ0dlhTWW1aVnR2WFM1a2VXNWhiV2xqUDJrclBXOHJYQ0lzWENJcllTdGNJaXhjSWpweUt6MG5YQ0luSzI4ckoxd2lPaWNyWVN0Y0lpeGNJbjF5WlhSMWNtNGdjajFjSW50Y0lpdHlMbk5zYVdObEtEQXNMVEVwSzF3aWZWd2lMR2svYml0Y0lsOWtLRndpSzNJclhDSXNXMXdpSzJrdWMyeHBZMlVvTUN3dE1Ta3JYQ0pkS1Z3aU9tNHJjbjFtZFc1amRHbHZiaUJNWVNobEtYdHBaaWdoWlNseVpYUjFjbTVjSW1aMWJtTjBhVzl1S0NsN2ZWd2lPMmxtS0VGeWNtRjVMbWx6UVhKeVlYa29aU2twY21WMGRYSnVYQ0piWENJclpTNXRZWEFvWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUV4aEtHVXBmU2t1YW05cGJpaGNJaXhjSWlrclhDSmRYQ0k3ZG1GeUlIUTlVMkV1ZEdWemRDaGxMblpoYkhWbEtTeHVQVUZoTG5SbGMzUW9aUzUyWVd4MVpTa3NjajFUWVM1MFpYTjBLR1V1ZG1Gc2RXVXVjbVZ3YkdGalpTaFBZU3hjSWx3aUtTazdhV1lvWlM1dGIyUnBabWxsY25NcGUzWmhjaUJwUFZ3aVhDSXNiejFjSWx3aUxHRTlXMTA3Wm05eUtIWmhjaUJ6SUdsdUlHVXViVzlrYVdacFpYSnpLV2xtS0dwaFczTmRLVzhyUFdwaFczTmRMRlJoVzNOZEppWmhMbkIxYzJnb2N5azdaV3h6WlNCcFppaGNJbVY0WVdOMFhDSTlQVDF6S1h0MllYSWdZejFsTG0xdlpHbG1hV1Z5Y3p0dkt6MU9ZU2hiWENKamRISnNYQ0lzWENKemFHbG1kRndpTEZ3aVlXeDBYQ0lzWENKdFpYUmhYQ0pkTG1acGJIUmxjaWhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRoWTF0bFhYMHBMbTFoY0NobWRXNWpkR2x2YmlobEtYdHlaWFIxY201Y0lpUmxkbVZ1ZEM1Y0lpdGxLMXdpUzJWNVhDSjlLUzVxYjJsdUtGd2lmSHhjSWlrcGZXVnNjMlVnWVM1d2RYTm9LSE1wTzNKbGRIVnliaUJoTG14bGJtZDBhQ1ltS0drclBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJsd2lhV1lvSVNSbGRtVnVkQzUwZVhCbExtbHVaR1Y0VDJZb0oydGxlU2NwSmlaY0lpdGxMbTFoY0NoTllTa3VhbTlwYmloY0lpWW1YQ0lwSzF3aUtYSmxkSFZ5YmlCdWRXeHNPMXdpZlNoaEtTa3NieVltS0drclBXOHBMRndpWm5WdVkzUnBiMjRvSkdWMlpXNTBLWHRjSWl0cEt5aDBQMXdpY21WMGRYSnVJRndpSzJVdWRtRnNkV1VyWENJb0pHVjJaVzUwS1Z3aU9tNC9YQ0p5WlhSMWNtNGdLRndpSzJVdWRtRnNkV1VyWENJcEtDUmxkbVZ1ZENsY0lqcHlQMXdpY21WMGRYSnVJRndpSzJVdWRtRnNkV1U2WlM1MllXeDFaU2tyWENKOVhDSjljbVYwZFhKdUlIUjhmRzQvWlM1MllXeDFaVHBjSW1aMWJtTjBhVzl1S0NSbGRtVnVkQ2w3WENJcktISS9YQ0p5WlhSMWNtNGdYQ0lyWlM1MllXeDFaVHBsTG5aaGJIVmxLU3RjSW4xY0luMW1kVzVqZEdsdmJpQk5ZU2hsS1h0MllYSWdkRDF3WVhKelpVbHVkQ2hsTERFd0tUdHBaaWgwS1hKbGRIVnlibHdpSkdWMlpXNTBMbXRsZVVOdlpHVWhQVDFjSWl0ME8zWmhjaUJ1UFZSaFcyVmRMSEk5UldGYlpWMDdjbVYwZFhKdVhDSmZheWdrWlhabGJuUXVhMlY1UTI5a1pTeGNJaXRLVTA5T0xuTjBjbWx1WjJsbWVTaGxLU3RjSWl4Y0lpdEtVMDlPTG5OMGNtbHVaMmxtZVNodUtTdGNJaXdrWlhabGJuUXVhMlY1TEZ3aUswcFRUMDR1YzNSeWFXNW5hV1o1S0hJcEsxd2lLVndpZlhaaGNpQkpZVDE3YjI0NlpuVnVZM1JwYjI0b1pTeDBLWHRsTG5keVlYQk1hWE4wWlc1bGNuTTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0pmWnloY0lpdGxLMXdpTEZ3aUszUXVkbUZzZFdVclhDSXBYQ0o5ZlN4aWFXNWtPbVoxYm1OMGFXOXVLR1VzZENsN1pTNTNjbUZ3UkdGMFlUMW1kVzVqZEdsdmJpaHVLWHR5WlhSMWNtNWNJbDlpS0Z3aUsyNHJYQ0lzSjF3aUsyVXVkR0ZuSzF3aUp5eGNJaXQwTG5aaGJIVmxLMXdpTEZ3aUt5aDBMbTF2WkdsbWFXVnljeVltZEM1dGIyUnBabWxsY25NdWNISnZjRDljSW5SeWRXVmNJanBjSW1aaGJITmxYQ0lwS3loMExtMXZaR2xtYVdWeWN5WW1kQzV0YjJScFptbGxjbk11YzNsdVl6OWNJaXgwY25WbFhDSTZYQ0pjSWlrclhDSXBYQ0o5ZlN4amJHOWhhenBUZlN4R1lUMW1kVzVqZEdsdmJpaGxLWHQwYUdsekxtOXdkR2x2Ym5NOVpTeDBhR2x6TG5kaGNtNDlaUzUzWVhKdWZIeFRjaXgwYUdsekxuUnlZVzV6Wm05eWJYTTlWSElvWlM1dGIyUjFiR1Z6TEZ3aWRISmhibk5tYjNKdFEyOWtaVndpS1N4MGFHbHpMbVJoZEdGSFpXNUdibk05VkhJb1pTNXRiMlIxYkdWekxGd2laMlZ1UkdGMFlWd2lLU3gwYUdsekxtUnBjbVZqZEdsMlpYTTlRU2hCS0h0OUxFbGhLU3hsTG1ScGNtVmpkR2wyWlhNcE8zWmhjaUIwUFdVdWFYTlNaWE5sY25abFpGUmhaM3g4VkR0MGFHbHpMbTFoZVdKbFEyOXRjRzl1Wlc1MFBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpRWhaUzVqYjIxd2IyNWxiblI4ZkNGMEtHVXVkR0ZuS1gwc2RHaHBjeTV2Ym1ObFNXUTlNQ3gwYUdsekxuTjBZWFJwWTFKbGJtUmxja1p1Y3oxYlhTeDBhR2x6TG5CeVpUMGhNWDA3Wm5WdVkzUnBiMjRnVUdFb1pTeDBLWHQyWVhJZ2JqMXVaWGNnUm1Fb2RDazdjbVYwZFhKdWUzSmxibVJsY2pwY0luZHBkR2dvZEdocGN5bDdjbVYwZFhKdUlGd2lLeWhsUDFKaEtHVXNiaWs2SjE5aktGd2laR2wyWENJcEp5a3JYQ0o5WENJc2MzUmhkR2xqVW1WdVpHVnlSbTV6T200dWMzUmhkR2xqVW1WdVpHVnlSbTV6ZlgxbWRXNWpkR2x2YmlCU1lTaGxMSFFwZTJsbUtHVXVjR0Z5Wlc1MEppWW9aUzV3Y21VOVpTNXdjbVY4ZkdVdWNHRnlaVzUwTG5CeVpTa3NaUzV6ZEdGMGFXTlNiMjkwSmlZaFpTNXpkR0YwYVdOUWNtOWpaWE56WldRcGNtVjBkWEp1SUVoaEtHVXNkQ2s3YVdZb1pTNXZibU5sSmlZaFpTNXZibU5sVUhKdlkyVnpjMlZrS1hKbGRIVnliaUJDWVNobExIUXBPMmxtS0dVdVptOXlKaVloWlM1bWIzSlFjbTlqWlhOelpXUXBjbVYwZFhKdUlIcGhLR1VzZENrN2FXWW9aUzVwWmlZbUlXVXVhV1pRY205alpYTnpaV1FwY21WMGRYSnVJRlZoS0dVc2RDazdhV1lvWENKMFpXMXdiR0YwWlZ3aUlUMDlaUzUwWVdkOGZHVXVjMnh2ZEZSaGNtZGxkSHg4ZEM1d2NtVXBlMmxtS0Z3aWMyeHZkRndpUFQwOVpTNTBZV2NwY21WMGRYSnVJR1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJRzQ5WlM1emJHOTBUbUZ0Wlh4OEoxd2laR1ZtWVhWc2RGd2lKeXh5UFhGaEtHVXNkQ2tzYVQxY0lsOTBLRndpSzI0cktISS9YQ0lzWENJcmNqcGNJbHdpS1N4dlBXVXVZWFIwY25OOGZHVXVaSGx1WVcxcFkwRjBkSEp6UDBkaEtDaGxMbUYwZEhKemZIeGJYU2t1WTI5dVkyRjBLR1V1WkhsdVlXMXBZMEYwZEhKemZIeGJYU2t1YldGd0tHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJudHVZVzFsT21Jb1pTNXVZVzFsS1N4MllXeDFaVHBsTG5aaGJIVmxMR1I1Ym1GdGFXTTZaUzVrZVc1aGJXbGpmWDBwS1RwdWRXeHNMR0U5WlM1aGRIUnljMDFoY0Z0Y0luWXRZbWx1WkZ3aVhUc2hieVltSVdGOGZISjhmQ2hwS3oxY0lpeHVkV3hzWENJcE8yOG1KaWhwS3oxY0lpeGNJaXR2S1R0aEppWW9hU3M5S0c4L1hDSmNJanBjSWl4dWRXeHNYQ0lwSzF3aUxGd2lLMkVwTzNKbGRIVnliaUJwSzF3aUtWd2lmU2hsTEhRcE8zWmhjaUJ1TzJsbUtHVXVZMjl0Y0c5dVpXNTBLVzQ5Wm5WdVkzUnBiMjRvWlN4MExHNHBlM1poY2lCeVBYUXVhVzVzYVc1bFZHVnRjR3hoZEdVL2JuVnNiRHB4WVNoMExHNHNJVEFwTzNKbGRIVnlibHdpWDJNb1hDSXJaU3RjSWl4Y0lpdFdZU2gwTEc0cEt5aHlQMXdpTEZ3aUszSTZYQ0pjSWlrclhDSXBYQ0o5S0dVdVkyOXRjRzl1Wlc1MExHVXNkQ2s3Wld4elpYdDJZWElnY2pzb0lXVXVjR3hoYVc1OGZHVXVjSEpsSmlaMExtMWhlV0psUTI5dGNHOXVaVzUwS0dVcEtTWW1LSEk5Vm1Fb1pTeDBLU2s3ZG1GeUlHazlaUzVwYm14cGJtVlVaVzF3YkdGMFpUOXVkV3hzT25GaEtHVXNkQ3doTUNrN2JqMWNJbDlqS0NkY0lpdGxMblJoWnl0Y0lpZGNJaXNvY2o5Y0lpeGNJaXR5T2x3aVhDSXBLeWhwUDF3aUxGd2lLMms2WENKY0lpa3JYQ0lwWENKOVptOXlLSFpoY2lCdlBUQTdiengwTG5SeVlXNXpabTl5YlhNdWJHVnVaM1JvTzI4ckt5bHVQWFF1ZEhKaGJuTm1iM0p0YzF0dlhTaGxMRzRwTzNKbGRIVnliaUJ1ZlhKbGRIVnliaUJ4WVNobExIUXBmSHhjSW5admFXUWdNRndpZldaMWJtTjBhVzl1SUVoaEtHVXNkQ2w3WlM1emRHRjBhV05RY205alpYTnpaV1E5SVRBN2RtRnlJRzQ5ZEM1d2NtVTdjbVYwZFhKdUlHVXVjSEpsSmlZb2RDNXdjbVU5WlM1d2NtVXBMSFF1YzNSaGRHbGpVbVZ1WkdWeVJtNXpMbkIxYzJnb1hDSjNhWFJvS0hSb2FYTXBlM0psZEhWeWJpQmNJaXRTWVNobExIUXBLMXdpZlZ3aUtTeDBMbkJ5WlQxdUxGd2lYMjBvWENJcktIUXVjM1JoZEdsalVtVnVaR1Z5Um01ekxteGxibWQwYUMweEtTc29aUzV6ZEdGMGFXTkpia1p2Y2o5Y0lpeDBjblZsWENJNlhDSmNJaWtyWENJcFhDSjlablZ1WTNScGIyNGdRbUVvWlN4MEtYdHBaaWhsTG05dVkyVlFjbTlqWlhOelpXUTlJVEFzWlM1cFppWW1JV1V1YVdaUWNtOWpaWE56WldRcGNtVjBkWEp1SUZWaEtHVXNkQ2s3YVdZb1pTNXpkR0YwYVdOSmJrWnZjaWw3Wm05eUtIWmhjaUJ1UFZ3aVhDSXNjajFsTG5CaGNtVnVkRHR5T3lsN2FXWW9jaTVtYjNJcGUyNDljaTVyWlhrN1luSmxZV3Q5Y2oxeUxuQmhjbVZ1ZEgxeVpYUjFjbTRnYmo5Y0lsOXZLRndpSzFKaEtHVXNkQ2tyWENJc1hDSXJkQzV2Ym1ObFNXUXJLeXRjSWl4Y0lpdHVLMXdpS1Z3aU9sSmhLR1VzZENsOWNtVjBkWEp1SUVoaEtHVXNkQ2w5Wm5WdVkzUnBiMjRnVldFb1pTeDBMRzRzY2lsN2NtVjBkWEp1SUdVdWFXWlFjbTlqWlhOelpXUTlJVEFzWm5WdVkzUnBiMjRnWlNoMExHNHNjaXhwS1h0cFppZ2hkQzVzWlc1bmRHZ3BjbVYwZFhKdUlHbDhmRndpWDJVb0tWd2lPM1poY2lCdlBYUXVjMmhwWm5Rb0tUdHlaWFIxY200Z2J5NWxlSEEvWENJb1hDSXJieTVsZUhBclhDSXBQMXdpSzJFb2J5NWliRzlqYXlrclhDSTZYQ0lyWlNoMExHNHNjaXhwS1RwY0lsd2lLMkVvYnk1aWJHOWpheWs3Wm5WdVkzUnBiMjRnWVNobEtYdHlaWFIxY200Z2NqOXlLR1VzYmlrNlpTNXZibU5sUDBKaEtHVXNiaWs2VW1Fb1pTeHVLWDE5S0dVdWFXWkRiMjVrYVhScGIyNXpMbk5zYVdObEtDa3NkQ3h1TEhJcGZXWjFibU4wYVc5dUlIcGhLR1VzZEN4dUxISXBlM1poY2lCcFBXVXVabTl5TEc4OVpTNWhiR2xoY3l4aFBXVXVhWFJsY21GMGIzSXhQMXdpTEZ3aUsyVXVhWFJsY21GMGIzSXhPbHdpWENJc2N6MWxMbWwwWlhKaGRHOXlNajljSWl4Y0lpdGxMbWwwWlhKaGRHOXlNanBjSWx3aU8zSmxkSFZ5YmlCbExtWnZjbEJ5YjJObGMzTmxaRDBoTUN3b2NueDhYQ0pmYkZ3aUtTdGNJaWdvWENJcmFTdGNJaWtzWm5WdVkzUnBiMjRvWENJcmJ5dGhLM01yWENJcGUzSmxkSFZ5YmlCY0lpc29ibng4VW1FcEtHVXNkQ2tyWENKOUtWd2lmV1oxYm1OMGFXOXVJRlpoS0dVc2RDbDdkbUZ5SUc0OVhDSjdYQ0lzY2oxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCdVBXVXVaR2x5WldOMGFYWmxjenRwWmlnaGJpbHlaWFIxY200N2RtRnlJSElzYVN4dkxHRXNjejFjSW1ScGNtVmpkR2wyWlhNNlcxd2lMR005SVRFN1ptOXlLSEk5TUN4cFBXNHViR1Z1WjNSb08zSThhVHR5S3lzcGUyODlibHR5WFN4aFBTRXdPM1poY2lCMVBYUXVaR2x5WldOMGFYWmxjMXR2TG01aGJXVmRPM1VtSmloaFBTRWhkU2hsTEc4c2RDNTNZWEp1S1Nrc1lTWW1LR005SVRBc2N5czlKM3R1WVcxbE9sd2lKeXR2TG01aGJXVXJKMXdpTEhKaGQwNWhiV1U2WENJbksyOHVjbUYzVG1GdFpTc25YQ0luS3lodkxuWmhiSFZsUDF3aUxIWmhiSFZsT2loY0lpdHZMblpoYkhWbEsxd2lLU3hsZUhCeVpYTnphVzl1T2x3aUswcFRUMDR1YzNSeWFXNW5hV1o1S0c4dWRtRnNkV1VwT2x3aVhDSXBLeWh2TG1GeVp6OWNJaXhoY21jNlhDSXJLRzh1YVhORWVXNWhiV2xqUVhKblAyOHVZWEpuT2lkY0lpY3JieTVoY21jckoxd2lKeWs2WENKY0lpa3JLRzh1Ylc5a2FXWnBaWEp6UDF3aUxHMXZaR2xtYVdWeWN6cGNJaXRLVTA5T0xuTjBjbWx1WjJsbWVTaHZMbTF2WkdsbWFXVnljeWs2WENKY0lpa3JYQ0o5TEZ3aUtYMXBaaWhqS1hKbGRIVnliaUJ6TG5Oc2FXTmxLREFzTFRFcEsxd2lYVndpZlNobExIUXBPM0ltSmlodUt6MXlLMXdpTEZ3aUtTeGxMbXRsZVNZbUtHNHJQVndpYTJWNU9sd2lLMlV1YTJWNUsxd2lMRndpS1N4bExuSmxaaVltS0c0clBWd2ljbVZtT2x3aUsyVXVjbVZtSzF3aUxGd2lLU3hsTG5KbFprbHVSbTl5SmlZb2JpczlYQ0p5WldaSmJrWnZjanAwY25WbExGd2lLU3hsTG5CeVpTWW1LRzRyUFZ3aWNISmxPblJ5ZFdVc1hDSXBMR1V1WTI5dGNHOXVaVzUwSmlZb2JpczlKM1JoWnpwY0lpY3JaUzUwWVdjckoxd2lMQ2NwTzJadmNpaDJZWElnYVQwd08yazhkQzVrWVhSaFIyVnVSbTV6TG14bGJtZDBhRHRwS3lzcGJpczlkQzVrWVhSaFIyVnVSbTV6VzJsZEtHVXBPMmxtS0dVdVlYUjBjbk1tSmlodUt6MWNJbUYwZEhKek9sd2lLMGRoS0dVdVlYUjBjbk1wSzF3aUxGd2lLU3hsTG5CeWIzQnpKaVlvYmlzOVhDSmtiMjFRY205d2N6cGNJaXRIWVNobExuQnliM0J6S1N0Y0lpeGNJaWtzWlM1bGRtVnVkSE1tSmlodUt6MUVZU2hsTG1WMlpXNTBjeXdoTVNrclhDSXNYQ0lwTEdVdWJtRjBhWFpsUlhabGJuUnpKaVlvYmlzOVJHRW9aUzV1WVhScGRtVkZkbVZ1ZEhNc0lUQXBLMXdpTEZ3aUtTeGxMbk5zYjNSVVlYSm5aWFFtSmlGbExuTnNiM1JUWTI5d1pTWW1LRzRyUFZ3aWMyeHZkRHBjSWl0bExuTnNiM1JVWVhKblpYUXJYQ0lzWENJcExHVXVjMk52Y0dWa1UyeHZkSE1tSmlodUt6MW1kVzVqZEdsdmJpaGxMSFFzYmlsN2RtRnlJSEk5WlM1bWIzSjhmRTlpYW1WamRDNXJaWGx6S0hRcExuTnZiV1VvWm5WdVkzUnBiMjRvWlNsN2RtRnlJRzQ5ZEZ0bFhUdHlaWFIxY200Z2JpNXpiRzkwVkdGeVoyVjBSSGx1WVcxcFkzeDhiaTVwWm54OGJpNW1iM0o4ZkV0aEtHNHBmU2tzYVQwaElXVXVhV1k3YVdZb0lYSXBabTl5S0haaGNpQnZQV1V1Y0dGeVpXNTBPMjg3S1h0cFppaHZMbk5zYjNSVFkyOXdaU1ltYnk1emJHOTBVMk52Y0dVaFBUMWpZWHg4Ynk1bWIzSXBlM0k5SVRBN1luSmxZV3Q5Ynk1cFppWW1LR2s5SVRBcExHODlieTV3WVhKbGJuUjlkbUZ5SUdFOVQySnFaV04wTG10bGVYTW9kQ2t1YldGd0tHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQktZU2gwVzJWZExHNHBmU2t1YW05cGJpaGNJaXhjSWlrN2NtVjBkWEp1WENKelkyOXdaV1JUYkc5MGN6cGZkU2hiWENJcllTdGNJbDFjSWlzb2NqOWNJaXh1ZFd4c0xIUnlkV1ZjSWpwY0lsd2lLU3NvSVhJbUptay9YQ0lzYm5Wc2JDeG1ZV3h6WlN4Y0lpdG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMDFNemd4TEc0OVpTNXNaVzVuZEdnN1ptOXlLRHR1T3lsMFBUTXpLblJlWlM1amFHRnlRMjlrWlVGMEtDMHRiaWs3Y21WMGRYSnVJSFErUGo0d2ZTaGhLVHBjSWx3aUtTdGNJaWxjSW4wb1pTeGxMbk5qYjNCbFpGTnNiM1J6TEhRcEsxd2lMRndpS1N4bExtMXZaR1ZzSmlZb2JpczlYQ0p0YjJSbGJEcDdkbUZzZFdVNlhDSXJaUzV0YjJSbGJDNTJZV3gxWlN0Y0lpeGpZV3hzWW1GamF6cGNJaXRsTG0xdlpHVnNMbU5oYkd4aVlXTnJLMXdpTEdWNGNISmxjM05wYjI0NlhDSXJaUzV0YjJSbGJDNWxlSEJ5WlhOemFXOXVLMXdpZlN4Y0lpa3NaUzVwYm14cGJtVlVaVzF3YkdGMFpTbDdkbUZ5SUc4OVpuVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2JqMWxMbU5vYVd4a2NtVnVXekJkTzJsbUtHNG1KakU5UFQxdUxuUjVjR1VwZTNaaGNpQnlQVkJoS0c0c2RDNXZjSFJwYjI1ektUdHlaWFIxY201Y0ltbHViR2x1WlZSbGJYQnNZWFJsT250eVpXNWtaWEk2Wm5WdVkzUnBiMjRvS1h0Y0lpdHlMbkpsYm1SbGNpdGNJbjBzYzNSaGRHbGpVbVZ1WkdWeVJtNXpPbHRjSWl0eUxuTjBZWFJwWTFKbGJtUmxja1p1Y3k1dFlYQW9ablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0ptZFc1amRHbHZiaWdwZTF3aUsyVXJYQ0o5WENKOUtTNXFiMmx1S0Z3aUxGd2lLU3RjSWwxOVhDSjlmU2hsTEhRcE8yOG1KaWh1S3oxdksxd2lMRndpS1gxeVpYUjFjbTRnYmoxdUxuSmxjR3hoWTJVb0x5d2tMeXhjSWx3aUtTdGNJbjFjSWl4bExtUjVibUZ0YVdOQmRIUnljeVltS0c0OVhDSmZZaWhjSWl0dUt5Y3NYQ0luSzJVdWRHRm5LeWRjSWl3bkswZGhLR1V1WkhsdVlXMXBZMEYwZEhKektTdGNJaWxjSWlrc1pTNTNjbUZ3UkdGMFlTWW1LRzQ5WlM1M2NtRndSR0YwWVNodUtTa3NaUzUzY21Gd1RHbHpkR1Z1WlhKekppWW9iajFsTG5keVlYQk1hWE4wWlc1bGNuTW9iaWtwTEc1OVpuVnVZM1JwYjI0Z1MyRW9aU2w3Y21WMGRYSnVJREU5UFQxbExuUjVjR1VtSmloY0luTnNiM1JjSWowOVBXVXVkR0ZuZkh4bExtTm9hV3hrY21WdUxuTnZiV1VvUzJFcEtYMW1kVzVqZEdsdmJpQktZU2hsTEhRcGUzWmhjaUJ1UFdVdVlYUjBjbk5OWVhCYlhDSnpiRzkwTFhOamIzQmxYQ0pkTzJsbUtHVXVhV1ltSmlGbExtbG1VSEp2WTJWemMyVmtKaVloYmlseVpYUjFjbTRnVldFb1pTeDBMRXBoTEZ3aWJuVnNiRndpS1R0cFppaGxMbVp2Y2lZbUlXVXVabTl5VUhKdlkyVnpjMlZrS1hKbGRIVnliaUI2WVNobExIUXNTbUVwTzNaaGNpQnlQV1V1YzJ4dmRGTmpiM0JsUFQwOVkyRS9YQ0pjSWpwVGRISnBibWNvWlM1emJHOTBVMk52Y0dVcExHazlYQ0ptZFc1amRHbHZiaWhjSWl0eUsxd2lLWHR5WlhSMWNtNGdYQ0lyS0Z3aWRHVnRjR3hoZEdWY0lqMDlQV1V1ZEdGblAyVXVhV1ltSm00L1hDSW9YQ0lyWlM1cFppdGNJaWsvWENJcktIRmhLR1VzZENsOGZGd2lkVzVrWldacGJtVmtYQ0lwSzF3aU9uVnVaR1ZtYVc1bFpGd2lPbkZoS0dVc2RDbDhmRndpZFc1a1pXWnBibVZrWENJNlVtRW9aU3gwS1NrclhDSjlYQ0lzYnoxeVAxd2lYQ0k2WENJc2NISnZlSGs2ZEhKMVpWd2lPM0psZEhWeWJsd2llMnRsZVRwY0lpc29aUzV6Ykc5MFZHRnlaMlYwZkh3blhDSmtaV1poZFd4MFhDSW5LU3RjSWl4bWJqcGNJaXRwSzI4clhDSjlYQ0o5Wm5WdVkzUnBiMjRnY1dFb1pTeDBMRzRzY2l4cEtYdDJZWElnYnoxbExtTm9hV3hrY21WdU8ybG1LRzh1YkdWdVozUm9LWHQyWVhJZ1lUMXZXekJkTzJsbUtERTlQVDF2TG14bGJtZDBhQ1ltWVM1bWIzSW1KbHdpZEdWdGNHeGhkR1ZjSWlFOVBXRXVkR0ZuSmlaY0luTnNiM1JjSWlFOVBXRXVkR0ZuS1h0MllYSWdjejF1UDNRdWJXRjVZbVZEYjIxd2IyNWxiblFvWVNrL1hDSXNNVndpT2x3aUxEQmNJanBjSWx3aU8zSmxkSFZ5Ymx3aVhDSXJLSEo4ZkZKaEtTaGhMSFFwSzNOOWRtRnlJR005Ymo5bWRXNWpkR2x2YmlobExIUXBlMlp2Y2loMllYSWdiajB3TEhJOU1EdHlQR1V1YkdWdVozUm9PM0lyS3lsN2RtRnlJR2s5WlZ0eVhUdHBaaWd4UFQwOWFTNTBlWEJsS1h0cFppaFhZU2hwS1h4OGFTNXBaa052Ym1ScGRHbHZibk1tSm1rdWFXWkRiMjVrYVhScGIyNXpMbk52YldVb1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlGZGhLR1V1WW14dlkyc3BmU2twZTI0OU1qdGljbVZoYTMwb2RDaHBLWHg4YVM1cFprTnZibVJwZEdsdmJuTW1KbWt1YVdaRGIyNWthWFJwYjI1ekxuTnZiV1VvWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUhRb1pTNWliRzlqYXlsOUtTa21KaWh1UFRFcGZYMXlaWFIxY200Z2JuMG9ieXgwTG0xaGVXSmxRMjl0Y0c5dVpXNTBLVG93TEhVOWFYeDhXbUU3Y21WMGRYSnVYQ0piWENJcmJ5NXRZWEFvWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUhVb1pTeDBLWDBwTG1wdmFXNG9YQ0lzWENJcEsxd2lYVndpS3loalAxd2lMRndpSzJNNlhDSmNJaWw5ZldaMWJtTjBhVzl1SUZkaEtHVXBlM0psZEhWeWJpQjJiMmxrSURBaFBUMWxMbVp2Y254OFhDSjBaVzF3YkdGMFpWd2lQVDA5WlM1MFlXZDhmRndpYzJ4dmRGd2lQVDA5WlM1MFlXZDlablZ1WTNScGIyNGdXbUVvWlN4MEtYdHlaWFIxY200Z01UMDlQV1V1ZEhsd1pUOVNZU2hsTEhRcE9qTTlQVDFsTG5SNWNHVW1KbVV1YVhORGIyMXRaVzUwUHloeVBXVXNYQ0pmWlNoY0lpdEtVMDlPTG5OMGNtbHVaMmxtZVNoeUxuUmxlSFFwSzF3aUtWd2lLVHBjSWw5MktGd2lLeWd5UFQwOUtHNDlaU2t1ZEhsd1pUOXVMbVY0Y0hKbGMzTnBiMjQ2V0dFb1NsTlBUaTV6ZEhKcGJtZHBabmtvYmk1MFpYaDBLU2twSzF3aUtWd2lPM1poY2lCdUxISjlablZ1WTNScGIyNGdSMkVvWlNsN1ptOXlLSFpoY2lCMFBWd2lYQ0lzYmoxY0lsd2lMSEk5TUR0eVBHVXViR1Z1WjNSb08zSXJLeWw3ZG1GeUlHazlaVnR5WFN4dlBWaGhLR2t1ZG1Gc2RXVXBPMmt1WkhsdVlXMXBZejl1S3oxcExtNWhiV1VyWENJc1hDSXJieXRjSWl4Y0lqcDBLejBuWENJbksya3VibUZ0WlNzblhDSTZKeXR2SzF3aUxGd2lmWEpsZEhWeWJpQjBQVndpZTF3aUszUXVjMnhwWTJVb01Dd3RNU2tyWENKOVhDSXNiajljSWw5a0tGd2lLM1FyWENJc1cxd2lLMjR1YzJ4cFkyVW9NQ3d0TVNrclhDSmRLVndpT25SOVpuVnVZM1JwYjI0Z1dHRW9aU2w3Y21WMGRYSnVJR1V1Y21Wd2JHRmpaU2d2WEZ4MU1qQXlPQzluTEZ3aVhGeGNYSFV5TURJNFhDSXBMbkpsY0d4aFkyVW9MMXhjZFRJd01qa3ZaeXhjSWx4Y1hGeDFNakF5T1Z3aUtYMXVaWGNnVW1WblJYaHdLRndpWEZ4Y1hHSmNJaXRjSW1SdkxHbG1MR1p2Y2l4c1pYUXNibVYzTEhSeWVTeDJZWElzWTJGelpTeGxiSE5sTEhkcGRHZ3NZWGRoYVhRc1luSmxZV3NzWTJGMFkyZ3NZMnhoYzNNc1kyOXVjM1FzYzNWd1pYSXNkR2h5YjNjc2QyaHBiR1VzZVdsbGJHUXNaR1ZzWlhSbExHVjRjRzl5ZEN4cGJYQnZjblFzY21WMGRYSnVMSE4zYVhSamFDeGtaV1poZFd4MExHVjRkR1Z1WkhNc1ptbHVZV3hzZVN4amIyNTBhVzUxWlN4a1pXSjFaMmRsY2l4bWRXNWpkR2x2Yml4aGNtZDFiV1Z1ZEhOY0lpNXpjR3hwZENoY0lpeGNJaWt1YW05cGJpaGNJbHhjWEZ4aWZGeGNYRnhpWENJcEsxd2lYRnhjWEdKY0lpazdablZ1WTNScGIyNGdXV0VvWlN4MEtYdDBjbmw3Y21WMGRYSnVJRzVsZHlCR2RXNWpkR2x2YmlobEtYMWpZWFJqYUNodUtYdHlaWFIxY200Z2RDNXdkWE5vS0h0bGNuSTZiaXhqYjJSbE9tVjlLU3hUZlgxbWRXNWpkR2x2YmlCUllTaGxLWHQyWVhJZ2REMVBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPM0psZEhWeWJpQm1kVzVqZEdsdmJpaHVMSElzYVNsN0tISTlRU2g3ZlN4eUtTa3VkMkZ5Ymp0a1pXeGxkR1VnY2k1M1lYSnVPM1poY2lCdlBYSXVaR1ZzYVcxcGRHVnljejlUZEhKcGJtY29jaTVrWld4cGJXbDBaWEp6S1N0dU9tNDdhV1lvZEZ0dlhTbHlaWFIxY200Z2RGdHZYVHQyWVhJZ1lUMWxLRzRzY2lrc2N6MTdmU3hqUFZ0ZE8zSmxkSFZ5YmlCekxuSmxibVJsY2oxWllTaGhMbkpsYm1SbGNpeGpLU3h6TG5OMFlYUnBZMUpsYm1SbGNrWnVjejFoTG5OMFlYUnBZMUpsYm1SbGNrWnVjeTV0WVhBb1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlGbGhLR1VzWXlsOUtTeDBXMjlkUFhOOWZYWmhjaUJsY3l4MGN5eHVjejBvWlhNOVpuVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2JqMXNZU2hsTG5SeWFXMG9LU3gwS1RzaE1TRTlQWFF1YjNCMGFXMXBlbVVtSm10aEtHNHNkQ2s3ZG1GeUlISTlVR0VvYml4MEtUdHlaWFIxY201N1lYTjBPbTRzY21WdVpHVnlPbkl1Y21WdVpHVnlMSE4wWVhScFkxSmxibVJsY2tadWN6cHlMbk4wWVhScFkxSmxibVJsY2tadWMzMTlMR1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb2RDeHVLWHQyWVhJZ2NqMVBZbXBsWTNRdVkzSmxZWFJsS0dVcExHazlXMTBzYnoxYlhUdHBaaWh1S1dadmNpaDJZWElnWVNCcGJpQnVMbTF2WkhWc1pYTW1KaWh5TG0xdlpIVnNaWE05S0dVdWJXOWtkV3hsYzN4OFcxMHBMbU52Ym1OaGRDaHVMbTF2WkhWc1pYTXBLU3h1TG1ScGNtVmpkR2wyWlhNbUppaHlMbVJwY21WamRHbDJaWE05UVNoUFltcGxZM1F1WTNKbFlYUmxLR1V1WkdseVpXTjBhWFpsYzN4OGJuVnNiQ2tzYmk1a2FYSmxZM1JwZG1WektTa3NiaWxjSW0xdlpIVnNaWE5jSWlFOVBXRW1KbHdpWkdseVpXTjBhWFpsYzF3aUlUMDlZU1ltS0hKYllWMDlibHRoWFNrN2NpNTNZWEp1UFdaMWJtTjBhVzl1S0dVc2RDeHVLWHNvYmo5dk9ta3BMbkIxYzJnb1pTbDlPM1poY2lCelBXVnpLSFF1ZEhKcGJTZ3BMSElwTzNKbGRIVnliaUJ6TG1WeWNtOXljejFwTEhNdWRHbHdjejF2TEhOOWNtVjBkWEp1ZTJOdmJYQnBiR1U2ZEN4amIyMXdhV3hsVkc5R2RXNWpkR2x2Ym5NNlVXRW9kQ2w5ZlNrb1EyRXBMSEp6UFNodWN5NWpiMjF3YVd4bExHNXpMbU52YlhCcGJHVlViMFoxYm1OMGFXOXVjeWs3Wm5WdVkzUnBiMjRnYVhNb1pTbDdjbVYwZFhKdUtIUnpQWFJ6Zkh4a2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpWkdsMlhDSXBLUzVwYm01bGNraFVUVXc5WlQ4blBHRWdhSEpsWmoxY0lseGNibHdpTHo0bk9pYzhaR2wySUdFOVhDSmNYRzVjSWk4K0p5eDBjeTVwYm01bGNraFVUVXd1YVc1a1pYaFBaaWhjSWlZak1UQTdYQ0lwUGpCOWRtRnlJRzl6UFNFaGVpWW1hWE1vSVRFcExHRnpQU0VoZWlZbWFYTW9JVEFwTEhOelBXY29ablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlXVzRvWlNrN2NtVjBkWEp1SUhRbUpuUXVhVzV1WlhKSVZFMU1mU2tzWTNNOWQyNHVjSEp2ZEc5MGVYQmxMaVJ0YjNWdWREdDNiaTV3Y205MGIzUjVjR1V1SkcxdmRXNTBQV1oxYm1OMGFXOXVLR1VzZENsN2FXWW9LR1U5WlNZbVdXNG9aU2twUFQwOVpHOWpkVzFsYm5RdVltOWtlWHg4WlQwOVBXUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZENseVpYUjFjbTRnZEdocGN6dDJZWElnYmoxMGFHbHpMaVJ2Y0hScGIyNXpPMmxtS0NGdUxuSmxibVJsY2lsN2RtRnlJSEk5Ymk1MFpXMXdiR0YwWlR0cFppaHlLV2xtS0Z3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCeUtWd2lJMXdpUFQwOWNpNWphR0Z5UVhRb01Da21KaWh5UFhOektISXBLVHRsYkhObGUybG1LQ0Z5TG01dlpHVlVlWEJsS1hKbGRIVnliaUIwYUdsek8zSTljaTVwYm01bGNraFVUVXg5Wld4elpTQmxKaVlvY2oxbWRXNWpkR2x2YmlobEtYdHBaaWhsTG05MWRHVnlTRlJOVENseVpYUjFjbTRnWlM1dmRYUmxja2hVVFV3N2RtRnlJSFE5Wkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbVJwZGx3aUtUdHlaWFIxY200Z2RDNWhjSEJsYm1SRGFHbHNaQ2hsTG1Oc2IyNWxUbTlrWlNnaE1Da3BMSFF1YVc1dVpYSklWRTFNZlNobEtTazdhV1lvY2lsN2RtRnlJR2s5Y25Nb2NpeDdiM1YwY0hWMFUyOTFjbU5sVW1GdVoyVTZJVEVzYzJodmRXeGtSR1ZqYjJSbFRtVjNiR2x1WlhNNmIzTXNjMmh2ZFd4a1JHVmpiMlJsVG1WM2JHbHVaWE5HYjNKSWNtVm1PbUZ6TEdSbGJHbHRhWFJsY25NNmJpNWtaV3hwYldsMFpYSnpMR052YlcxbGJuUnpPbTR1WTI5dGJXVnVkSE45TEhSb2FYTXBMRzg5YVM1eVpXNWtaWElzWVQxcExuTjBZWFJwWTFKbGJtUmxja1p1Y3p0dUxuSmxibVJsY2oxdkxHNHVjM1JoZEdsalVtVnVaR1Z5Um01elBXRjlmWEpsZEhWeWJpQmpjeTVqWVd4c0tIUm9hWE1zWlN4MEtYMHNkMjR1WTI5dGNHbHNaVDF5Y3l4dGIyUjFiR1V1Wlhod2IzSjBjejEzYmpzaUxDSmpiMjV6ZENCV2RXVWdQU0J5WlhGMWFYSmxLRndpZG5WbEwyUnBjM1F2ZG5WbExtTnZiVzF2Ymx3aUtUdGNibU52Ym5OMElHRjRhVzl6SUQwZ2NtVnhkV2x5WlNoY0ltRjRhVzl6WENJcE8xeHVYRzUyWVhJZ1lYQndJRDBnYm1WM0lGWjFaU2g3WEc0Z0lDQWdaR0YwWVRvZ2UxeHVJQ0FnSUNBZ0lDQjFjMlZ5YVc1bWJ6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RYTmxjbTVoYldVNklGd2lYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaWFpwWTJWdVlXMWxPaUJjSWx3aVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR3h2WjJkbFpGOXBiam9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJSEpsWjJsemRHVnlaV1E2SUdaaGJITmxYRzRnSUNBZ2ZTeGNiaUFnSUNCdFpYUm9iMlJ6T2lCN1hHNGdJQ0FnSUNBZ0lHeHZaMjkxZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV052Ym1acGNtMG9YQ0pCY21VZ2VXOTFJSE4xY21VZ2VXOTFJSGRoYm5RZ2RHOGdiRzluSUc5MWREOGdSRzl1SjNRZ1ptOXlaMlYwSUhSdklISmxiVzkyWlNCMGFHVWdaR1YyYVdObElHNWhiV1VnWm5KdmJTQjViM1Z5SUdGalkyOTFiblFnYVdZZ2VXOTFKM0psSUhCc1lXNXVhVzVuSUc5dUlIVnphVzVuSUdsMElHRm5ZV2x1TENCc1lYUmxjaTVjSWlrcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhocGIzTXVjRzl6ZENoY0lpOWhjR2t2Ykc5bmIzVjBYQ0lwTG5Sb1pXNG9jbVZ6Y0NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xteHZZMkYwYVc5dUlEMGdYQ0l2WENJN0lDOHZjbVZrYVhKbFkzUWdkRzhnYVc1a1pYZ3NJSE52SUhSb1pTQnpaWEoyWlhJZ1kyRnVJRzFoYTJVZ1lTQmtaWE5qYVhOcGIyNGdiMllnZDJobGNtVWdkRzhnWjI4Z2JtVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1pYSnlJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGxjbklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dUlDQWdJR055WldGMFpXUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCaGVHbHZjeTVuWlhRb1hDSXZZWEJwTDNWelpYSnBibVp2WENJcExuUm9aVzRvY21WemNDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5WelpYSnBibVp2TG5WelpYSnVZVzFsSUQwZ2NtVnpjQzVrWVhSaExuVnpaWEp1WVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFjMlZ5YVc1bWJ5NWtaWFpwWTJWdVlXMWxJRDBnY21WemNDNWtZWFJoTG1SbGRtbGpaVzVoYldVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxteHZaMmRsWkY5cGJpQTlJSEpsYzNBdVpHRjBZUzVzYjJkblpXUnBianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WbmFYTjBaWEpsWkNBOUlISmxjM0F1WkdGMFlTNXlaV2RwYzNSbGNtVmtPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1OUtUdGNibHh1ZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pFVDAxRGIyNTBaVzUwVEc5aFpHVmtYQ0lzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdGd2NDNGtiVzkxYm5Rb1hDSnRZV2x1WENJcE8xeHVmU2s3SWwxOSJ9
